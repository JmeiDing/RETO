1. Dridex first needs to find a thread in the target process that is in an "alertable" state to execute APC calls. It tests threads by using APC calls to get them to signal events, then selects the first thread that signals. 2. Dridex allocates R/W memory in the target process's address space using NtQueueApcThread and atom tables. It writes the import table for its payload here. 3. Next, Dridex writes the payload itself into another R/W buffer allocated the same way, in chunks using the atom table technique. 4. Dridex changes the memory protection on the payload buffer to RWX using NtProtectVirtualMemory. This avoids suspicious API calls. 5. To execute the payload, Dridex patches GlobalGetAtomA using the atom table method to make it jump to the payload. It changes permissions to writable using NtProtectVirtualMemory first. 6. Finally, Dridex queues an APC call to GlobalGetAtomA, which now executes the payload instead of its normal function due to the patch. 7. The injected payload then carries out the malware's banking credential theft and other illicit functions. 