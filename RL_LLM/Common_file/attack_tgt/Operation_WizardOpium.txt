1. The Chrome exploit is triggered by JavaScript code abusing a race condition bug in WebAudio. It calls audio processing functions recursively while nullifying buffers to cause a use-after-free. 2. The freed audio buffer memory is reallocated as ArrayBuffers to build arbitrary read/write primitives using PartitionAlloc metadata manipulation. 3. A WASM module is set up and its JIT code page address is obtained. The shellcode and PE payload are written into the page. 4. The WASM export function is called to execute the shellcode, which loads the PE exploit. 5. The PE exploit creates windows and uses SetWindowLongPtr to overwrite Switch Window kernel pointers. 6. A message call triggers vulnerable xxxPaintSwitchWindow code to get arbitrary memory dereference. 7. Bitmap buffers are allocated predictably using GDI/Accelerator Table leaks. Their kernel addresses are obtained. 8. The dereference primitive is used to increment a Bitmap size value and overwrite another Bitmap object. 9. Bitmap read/write primitives are built to parse kernel data structures and steal the system token. 10. The elevated token is used to execute the WizardOpium malware payload. 