The document analyzes the encryption and decryption algorithms used by the DarkComet remote access trojan (RAT). DarkComet is primarily a RAT with capabilities like keylogging, webcam spying, and file deletion, but it also has distributed denial of service (DDoS) capabilities. The goal of the analysis is to reverse engineer DarkComet's cryptography so that its DDoS attack commands can be tracked. The analysis finds that DarkComet uses a symmetric encryption algorithm to secure communications between the bot and the command and control server (C&C). The algorithm works by building a 256-element substitution table that is initialized to the values 0x00 through 0xFF. It then scrambles the table by swapping elements based on an encryption key. The key is made up of a hardcoded prefix specific to the DarkComet version, a pseudo-randomly generated numeric suffix, and an optional botnet password. To encrypt data, DarkComet first converts the plaintext from ASCII to hexadecimal. It then applies the scrambled substitution table to XOR each byte with a value derived from the table. Decryption follows the same steps in reverse. The analysis identifies several flaws in DarkComet's implementation. One is that its HTTP flooding attack mistakenly encrypts the HTTP request, turning it into gibberish. Another is that the hardcoded HTTP request itself is invalid due to incorrect newline encodings. As a result, the HTTP flood behaves merely as a simple TCP flood. Overall, the analysis provides a comprehensive look at how DarkComet implements cryptography to conceal its DDoS attack commands. By reverse engineering the algorithm, defenses can be built to detect and mitigate DarkComet DDoS bots. 