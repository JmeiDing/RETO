TLP WHITEJolly JellyfishMalware Analysis Report TLP WHITEVersion 1.0TLP WHITENCSC/MAR/W/0001115th December 2021 © Crown Copyright 2021TLP WHITEJolly JellyfishNon-persistent downloader for shellcode embedded in image filesExecutive summary•Jolly Jellyfish downloads and executes shellcode, which is hidden in legitimate bitmap image (BMP) files• HTTP is used to download image files • Debug information left in the samples suggest the author refers to this malware asfishmasterIntroductionJolly Jellyfish is a Windows executable which downloads and executes shellcode from a hard-coded remote server, using HTTP. Steganography is used to hide the shellcode inside BMP files. Once extracted and, where necessary, decoded, the shellcode is a Cobalt Strike stager. This report covers the analysis of multiple related samples, some of which include additional capabilities. No persistence is implemented by this malware.TLP WHITETLP WHITEMalware DetailsMetadataFilenameDescriptionSizeMD5SHA-1 Jolly Jellyfish shellcode downloader which also downloads and executes a legitimate file SHA-256Browser_plugin (8).exe Jolly Jellyfish shellcode downloader, of XOR-obfuscated shellcode, additionally displays a message box on execution SHA-1Browser_Plugin.exe Jolly Jellyfish shellcode downloader of XOR-obfuscated shellcode, additionally downloads a legitimate file and displays a message box on execution SizeMD5SHA-1 Evasion: System ChecksJolly Jellyfish checks the available memory is greater than 1GB, the size of the disk is greater than 1GB, and the number of logical processors is greater than 0. These checks are designed to avoid running on a machine with low resources, as virtual machines and sandboxes are more likely to have low resources. If these checks fail the process will exit before any malicious behaviour occurs, avoiding detection.Jolly Jellyfish adds short sleep commands throughout execution, which could be an attempt to slow down execution enough to evade detection by automated analysis platforms.Jolly Jellyfish downloads shellcode over HTTP.Some variants of Jolly Jellyfish download XOR-encoded shellcode.Jolly Jellyfish downloads shellcode contained within bitmap image (BMP) files.TLP WHITEMITRE ATT&CK®This report has been compiled with respect to the MITRE ATT&CK® framework, a globally accessible knowledge base of adversary tactics and techniques based on real-world observations.TacticDefense EvasionT1497.003Virtualization/Sandbox Evasion: Time Based EvasionCommand and ControlT1071.001Application Layer Protocol: Web ProtocolsT1001Data obfuscationT1001.002Data obfuscation: SteganographyTLP WHITETLP WHITEFunctionalityOverviewJolly Jellyfish downloads a bitmap image file containing embedded shellcode over HTTP and extracts, decodes and executes it. The format is described in the ‘Functionality (Steganography)’ section below. The malware also employs several techniques to evade detection, which vary across different samples and are described in the ‘Functionality (Defence evasion)’ section of this report. PersistenceThis malware does not implement any persistence mechanisms.SteganographyJolly Jellyfish downloads a file with a ‘.bmp’ file extension, which contains embedded shellcode. The downloaded image is shown below in Figure 3.Figure 1 shows a legitimate BMP image, which begins with 0x0A bytes of data (corresponding to the BMP header), followed by a 4-byte little-endian offset value. In the BMP format specification, this value is the offset to the start of the pixel array for the image.Bitmap file format 00000: 42 4D 46 E2 07 00 00 00 00 00 36 00 00 00 28 0000010: 00 00 F0 02 00 00 E5 00 00 00 01 00 18 00 00 0000020: 00 00 10 E2 07 00 00 00 00 00 00 00 00 00 00 0000030: 00 00 00 00 00 00 FF FF FF FF FF FF FF FF FF FF00040: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF00050: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF00060: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF00070: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF00080: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF00090: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF000A0: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF000B0: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FFHeaderOffset to pixel arrayRest of headerPixelsFigure 1: BMP file formatTLP WHITETLP WHITEIn the downloaded BMP image, shellcode is embedded in, and extracted from, this pixel array by reading every fourth byte, as shown in Figure 2. The shellcode is always null-terminated and has a maximum size of 1900 bytes.Bitmap file with embedded data 00000: 42 4D 46 E2 07 00 00 00 00 00 36 00 00 00 28 0000010: 00 00 F0 02 00 00 E5 00 00 00 01 00 18 00 00 0000020: 00 00 10 E2 07 00 00 00 00 00 00 00 00 00 00 0000030: 00 00 00 00 00 00 FF FF FF C0 FF FF FF DE FF FF00040: FF C0 FF FF FF DE FF FF FF C0 FF FF FF DE FF FF00050: FF C0 FF FF FF DE FF FF FF C0 FF FF FF DE FF FF00060: FF C0 FF FF FF DE FF FF FF C0 FF FF FF DE FF FF00070: FF C0 FF FF FF DE FF FF FF C0 FF FF FF DE FF FF00080: FF C0 FF FF FF DE FF FF FF C0 FF FF FF DE FF FF00090: FF C0 FF FF FF DE FF FF FF C0 FF FF FF DE FF FF000A0: FF C0 FF FF FF DE FF FF FF C0 FF FF FF DE FF FF000B0: FF C0 FF FF FF DE FF FF FF C0 FF FF FF 00 FF FFHeaderOffset to pixelRest of headerPixelsEmbedded dataarrayFigure 2: BMP file format with embedded dataDue to the comparatively small number of pixels affected by this encoding method, any difference from a legitimate image is likely to be hard to notice unless looked for. Figure 3 shows the modified image, and Figure 4 shows a closeup of a section containing embedded data.TLP WHITETLP WHITEFigure 3: downloaded BMP image with embedded dataFigure 4: downloaded BMP – closeup to highlight embedded dataShellcodeOnce extracted, the shellcode is a Cobalt Strike stager with the following configuration:TypeValuesC2 serverdownload.google-images[.]mlGET URI/kXe5User agentMozilla/5.0 (Windows NT 6.1; rv24.0) Gecko/20100101 Firefox/24.0TLP WHITETLP WHITEMessage boxIn some variants of Jolly Jellyfish, a message box is displayed. It is not clear what the purpose of this message box is, but the samples containing this functionality have file names similar to ‘Browser_plugin.exe’. This could indicate that they are intended to be deployed using social engineering, with the message box intended to make the target think that an error has occurred. This is further supported by several samples appearing to masquerade as legitimate files, as described in the ‘Functionality (Defence evasion)’ section of this report.The message data is as follows, which is neither standard ASCII nor valid Unicode: E4 AF C0 C0 C6 F7 B2 E5 BC FE D2 D1 BE AD B3 C9 B9 A6 B8 FC D0 C2 A3 AC C7 EB D6 D8 C6 F4 E4 AF C0 C0 C6 F7 A3 A1In any case, the MessageBoxA API call is used, which expects the provided message to be ASCII characters, so the message is displayed as random characters as shown in Figure 4.Figure 4: Message box containing random charactersDefence evasionShellcode obfuscation In some samples, the shellcode is XOR-encoded, using a fixed multi-byte key. The keys used in the analysed samples are misgat_mg and mait_mg.Sandbox detection This malware implements some basic anti-sandbox/anti-virtual machine (VM) techniques. This includes checking the physical memory size of the machine exceeds 1GB and that the disk is more than 1GB in size. It also checks that the number of logical processors exceeds zero, although it is unknown why this check occurs. If any of these checks fail it will exit.Anti-dynamic analysis There are several sleep commands throughout the code, which slow down execution. This could be an attempt to prevent dynamic analysis solutions successfully detecting the malicious behaviour, although they are likely to be short to be effective.There is a one second sleep between each API call involved in allocating and copying memory, as well as various sleep commands with durations between 1-2 seconds throughout each of the analysed samples.TLP WHITETLP WHITEMasquerading as legitimate file Some variants of Jolly Jellyfish download and execute what are apparently legitimate files in addition to the shellcode. This may indicate that targets are tricked into executing these files, which masquerade as legitimate applications or resources.Examples of downloaded, apparently legitimate, files are shown below:Download URL Descriptionurl and English language form, shown in Figure 5SizeMD5 all.exe Apparently legitimate application from MonPass, a Mongolian Certificate Authority (CA). YesTLP WHITETLP WHITEFigure 5: PDF form downloaded by Jolly Jellyfish sampleTLP WHITETLP WHITECommunicationsJolly Jellyfish uses a HTTP GET request to retrieve the obfuscated shellcode.ConclusionJolly Jellyfish is a low sophistication downloader containing some basic anti-dynamic analysis functionality. It contains easily signatured fixed strings and uses HTTP communications, which present straightforward detection opportunities. Of particular note, however, is the use of steganography to hide the downloaded shellcode in otherwise correctly formatted bitmap files. The variation of functionality across different samples suggests that Jolly Jellyfish may often be deployed using social engineering. The common PDB path: C:\Users\test\Desktop\fishmaster\x64\Release\fishmaster.pdb is also used in a different piece of malware that contains a Cobalt Strike Stager. This stager is configured to connect to the same domain as some Jolly Jellyfish variants.TLP WHITETLP WHITEDetectionStatic stringsEach of the analysed samples contain the string BidenHappyHappyHappy. This string doesn’t appear to have any practical functionality but can be used as an indicator to detect these binaries.Several samples also contain the PDB path C:\Users\test\Desktop\fishmaster\x64\Release\fishmaster.pdbIndicators of compromiseTypeDescriptionValuesurl for shellcodeRules and signaturesDescriptionDetects the “Bidenhappyhappyhappy” string used by the Jolly Jellyfish malwarePrecisionNo false positives seen from Virus Total retrohunts.Rule typeYARArule JollyJellyfish_unique_string_Bidenhappyhappyhappy reference = " NCSC/MAR/W/00011" description = "Detects the “Bidenhappyhappyhappy” string used by the Jolly Jellyfish malware" uint16(0) == 0x5A4D and uint32(uint32(0x3c)) == 0x00004550 and all of them }TLP WHITETLP WHITEDescriptionDetects the string displayed by the message box in some variants of Jolly JellyfishPrecisionNo false positives seen from Virus Total retrohunts.Rule typeYARArule JollyJellyfish_unique_messagebox_display_string reference = "NCSC/MAR/W/00011" description = "Detects the string displayed by the message box in some variants of Jolly Jellyfish" $popuptext = {E4 AF C0 C0 C6 F7 B2 E5 BC FE D2 D1 BE AD B3 C9 B9 A6 B8 FC D0 C2 A3 AC C7 EB D6 D8 C6 F4 E4 AF C0 C0 C6 F7 A3 A1} uint16(0) == 0x5A4D and uint32(uint32(0x3c)) == 0x00004550 and all of them }DescriptionDetects Jolly Jellyfish check for memory being greater than 1GBPrecisionNo false positives seen from Virus Total retrohunts.Rule typeYARArule JollyJellyfish_check_memory_greater_1gb reference = "NCSC/MAR/W/00011" description = "Detects Jolly Jellyfish check for memory being greater than 1GB" strings: $1 = {33 D2 48 8B 44 ?? 38 B9 00 04 00 00 48 F7 F1 33 D2 B9 00 04 00 00 48 F7 F1 89 44 ?? ?? 81 7C ?? ?? 00 04 00 00} $2 = {48 8B 44 ?? 38 48 C1 E8 14 ?? 00 04 00 00} condition: uint16(0) == 0x5A4D and uint32(uint32(0x3c)) == 0x00004550 and any of them }TLP WHITETLP WHITEDescriptionDetects the Jolly Jellyfish PDB stringPrecisionNo non-malicious results, but also detects malware containing Cobalt Strike stagerRule typeYARArule JollyJellyfish_pdb_string reference = "NCSC/MAR/W/00011" description = "Detects the Jolly Jellyfish pdb string" $pdb = "fishmaster.pdb" uint16(0) == 0x5A4D and uint32(uint32(0x3c)) == 0x00004550 and any of them }DescriptionDetects Jolly Jellyfish finding the start address of the shellcode in the downloaded dataPrecisionNo false positives seen from virus total retrohunts.Rule typeYARArule JollyJellyfish_identify_shellcode_start_addr reference = "NCSC/MAR/W/00011" description = "Detects Jolly Jellyfish finding the start address of the shellcode in the downloaded data" $1 = {48 89 84 24 ?? 00 00 00 48 8B 84 24 ?? 00 00 00 8B 40 0A 48 8B 4C 24 ?? 48 8D 44 01 03} $2 = {8B 43 0A 48 83 C0 03 48 03 D8} condition: uint16(0) == 0x5A4D and uint32(uint32(0x3c)) == 0x00004550 and any of them }TLP WHITETLP WHITECreditsDisclaimerSecureworks for sharing a copy of the downloaded Bitmap file.This report draws on information derived from NCSC and industry sources. Any NCSC findings and recommendations made have not been provided with the intention of avoiding all risks and following the recommendations will not remove all such risk. Ownership of information risks remains with the relevant system owner at all times.This information is exempt under the Freedom of Information Act 2000 (FOIA) and may be exempt under other UK information legislation.Refer any FOIA queries to ncscinfoleg@ncsc.gov.uk.All material is UK Crown Copyright ©TLP WHITE 