Become a memberHomepageSign inGet startedFollowSebdraven OSINT, Python,Malware Analysis, Botnet Tracker, SIEM and IPS/IDS and Threats Expert / co-organizer #BotConf / co-creator of #FastIR Jul 31 · 9 min readMalicious document targets Vietnamese officialsAfter our investigation of APT SideWinder, we’ve done a yara rule for hunting RTF document exploiting the CVE-2017–11882.We found a document written in Vietnamese dealing with a summary about differents projects in the district Hải Châu of Đà Nẵng.PDF generated automatically by the PDFmyURL HTML to PDF APIRTF documentIn this article, we’ll detail the infection chains and the infrastructures of the attackers and the TTPs of this campaign.The infrastructures and TTPs during this campaign seem to the Chinese hacking group 1937CN.Infection chainsJoe sandbox has a good representation of the behaviour of the infection.PDF generated automatically by the PDFmyURL HTML to PDF APIThis rtf document is really malicious and it exploits the equation vulnerability to write two files in the system:1.A dll named RasTls.dll2.A executable file named dascgosrky.exeThis document is interesting to analyze so let’go !RTF analysisPDF generated automatically by the PDFmyURL HTML to PDF APIWith rtfobj, we found three ole objects in the document:two non well formed ole object and a third named package ole object.The package ole object is used to write a file in the disk when the document is opened at the destination described by the ole object.That’s why, there is a path and a name in the ole object.PDF generated automatically by the PDFmyURL HTML to PDF APIPackage OLE ObjectThis technique is used to execute code like sct file to download an executable on the operating system. McAfee labs has detailed all this stuff with sct file: url labs/dropping-files-temp-folder-raises-security-concerns/Many attackers use it in the wild because it’ very easy to use and it’ supported by the office software with RTF files.PDF generated automatically by the PDFmyURL HTML to PDF APISo, in our case, a file named 8.t is dropped on %TMP% folder.If we check it, it’s clearly encrypted.PDF generated automatically by the PDFmyURL HTML to PDF API8.t encryptedThe others object ole seem to the exploit of CVE-2017–11882.PDF generated automatically by the PDFmyURL HTML to PDF APIEquation Ole ObjectAt the end of the object ole, we have differents API functions to make a runPE.PDF generated automatically by the PDFmyURL HTML to PDF APIrunPE.Another interesting thing is this string at the begin of the object: 7e079a2524fa63a55fbcfeString found in many exploits of CVE-2017–11882We have the same string used by APT SideWinder in the equation object ole.It’s the same toolset to create the malicious document.So now, we have to debug the malicious document to find how the file 8.t is used and find this runPE.Debugging of the shellcodeAt the start of the analysis, we think the process EQNEDT32.exe is created by Winword.exe using the function CreateProcess. So we decided to set a breakpoint at the call of his function.PDF generated automatically by the PDFmyURL HTML to PDF APIBut EQNEDT32.exe is invoked by Winword.exe using COM Object. It’s notCreateProcess that used and Winword.exe is not the parent process of EQNEDT32.exe. So we have to attach the debugger when EQNEDT32.exe is launched.For that, we used a technique named Image File Execution Options that was documented by Microsoft. url execution-options-ifeo/We create a key EQNEDT32.exe.Registry HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Image FileExecution OptionsAnd we set a value string for launching the debugger when EQNEDT32.exe is executed and attaching the debugger to the process .PDF generated automatically by the PDFmyURL HTML to PDF APIValue to set the debuuger when EQNEDT32.exe is executedWhen we open the rtf document, Winword is launched and EQNEDT32.exe also.Winword processEQNEDT32.exe process attached by the debuggerAnd the debugger is attached at the entrypoint of EQNEDT32.exe.PDF generated automatically by the PDFmyURL HTML to PDF APIWe check if it’s 8.t is correctly created in the %TMP% folder.8.t dropped on diskNow we set a breakpoint at the createFile to check if the shellcode of the exploit reads the file 8.t.CreateFile is called at call eqnedt32.41E5EE.The param of the path of file is pushed on the stack push dword ptr ss:[ebp- 4].The shellcode uses CreateFile to the 8.t in the %TMP% folderPDF generated automatically by the PDFmyURL HTML to PDF APISo now, we can return of the user code at the calling function.After a step into, we enter in the shellcode, the address space has changed:Shellcode of the exploitAfter CreateFile, GetFileSize is called to have the size of the filePDF generated automatically by the PDFmyURL HTML to PDF APIGet the size of the fileAfter is Virtualloc, and it create a memory page at 1FD0000 (eax value)VirtualAlloc memory page to load 8.tAfter virtualAlloc, the memory page is pointed by EAXThe page allocatedReadFile is called:PDF generated automatically by the PDFmyURL HTML to PDF APIReadfile 8.tAnd 8.t is loaded at 1FD0000:8.t in memoryAnd the shellcode decrypts the 8.t file in memory at 0066C82A.The loop of decryption is a xoring with different manipulations on the decryption key.At the start of the decryption the key is set to 7BF48E63.PDF generated automatically by the PDFmyURL HTML to PDF APIDecryption loopAnd the xor is made after key manipulation.Set the decryption key in EAXIf we check the destination of the result of the xoring (here edx + ebx), we find 01FD0000 where 8.t is loaded.After two step of the loop, we can see the magic number MZ set at the begin of memory section.PDF generated automatically by the PDFmyURL HTML to PDF APIMZ magic numberAt the end of the decryption loop, we have a PE in memory at 01FD0000.the file 8.t has been decrypted.8.t fully decryptedThen, the shellcode uses the VirtualAlloc and create a memory page at 02070000.PDF generated automatically by the PDFmyURL HTML to PDF APIAnd the new PE at 01FD0000 is copied at this address.the PE decrypted is copied in the new memory pageAfter GetModuleFileNameA is called to have the path of EQNEDT32.exeAnd EQNEDT32.exe is forked in suspend status by a CreateProcess and the shellcode overwrite it by the PE at the address 02070000PDF generated automatically by the PDFmyURL HTML to PDF APIFork of EQNEDT32.exeOverwritting of EQNEDT32.exeStack used by NTWriteVirtualMemoryAnd the shellcode does a ResumeThread to launch the new PE.So, We’ve found all API Calls in the object ole at the beginning and we have a runPE to launch the new EQNEDT32.exe overwritten.Analysing the fork of EQNEDT32.exeWe know that this process has to create on disk two files following the Joe SandBox Analysis:••A dll named RasTls.dllA executable file named dascgosrky.exePDF generated automatically by the PDFmyURL HTML to PDF APIIf we dump EQNEDT32.exe and we put in IDA, we found quickly theIf we dump EQNEDT32.exe and we put in IDA, we found quickly the function that drops the files on disk (sub_00401150) renamed dropFiles.DropFiles FucntionAnd at the start of this functions, we have a loop with a xor.PDF generated automatically by the PDFmyURL HTML to PDF APISecond loop of decryptionAnd just after we have a call of the decompression function.Decompression function used zlibThe function dropFiles is called twice by the sub_4012D0.PDF generated automatically by the PDFmyURL HTML to PDF APIDrop the dll and the executableIf we check the call graph, DropFiles is called only by the function sub_4012D0.PDF generated automatically by the PDFmyURL HTML to PDF APIFunctions using DropFiles functionSo we set a breakpoint on CreateFile because at each execution, EQNEDT32.exe starts by CreateFile onstaticcache.dat.Breakpoint to createfileAnd we return at the user code to set a new breakpoint to check the static analysis.PDF generated automatically by the PDFmyURL HTML to PDF APISo we set a breakpoint at 0040159A when DropFiles is called.So we set a breakpoint at 0040159A when DropFiles is called.Breakpoint to the first call of DropFilesAnd now we can analyse the second loop of decryption.The first step is the initialization of the decryption function.Set for the second loop encryptionAnd after we find the xor and store the result in esi+eax.PDF generated automatically by the PDFmyURL HTML to PDF APIDecryption loopIn the first step of the decryption loop, the result is written to 411BC0 in the address space of EQNEDT32.exe.Before the decryptionAfter tree loops, we obtains the header of zlib compressed object.After the decryptionAnd at the memory page 021E0000, a PE is decompressed.PDF generated automatically by the PDFmyURL HTML to PDF APIPage memory allocated to store the dllAfter decompressionAnd after the file is created with the following path: L”C:\\Users\\IEUser\\AppData\\Roaming\\Microsoft\\Windows\\NetwPDF generated automatically by the PDFmyURL HTML to PDF APIork Shortcuts\\RasTls.dll”Stored by ebx.DropFiles is called a twice to decrypt and decompress the executable file.The offset where store the file is 00434EF8 and the pe decompressed is stored at 025D0020PDF generated automatically by the PDFmyURL HTML to PDF APIDecryption of the executable dascgosrky.exeAnd the path of the new file is : ebx=005DA228 L”C:\\Users\\IEUser\\AppData\\Roaming\\Microsoft\\Windows\\Netw ork Shortcuts\\dascgosrky.exe”So we have two files in networks shortcuts of Windows.Files drops on diskPDF generated automatically by the PDFmyURL HTML to PDF APIdll hijackingdll hijackingDascgosrky.exe is a legit and trusted software develop by Symantec.To load the library RasTls.dll, the executable calls LoadLibrary and GetProcaddress in sub_401940 to execute the malicious functionsPDF generated automatically by the PDFmyURL HTML to PDF APIPDF generated automatically by the PDFmyURL HTML to PDF APIDascgosrky.exe loading the maliciousPDF generated automatically by the PDFmyURL HTML to PDF APIThe original fileIf we check the exports in IDA, we just have a dllentrypoint. The dll is executed like this.We’ll analyse the RAT in the second Part.Infrastructure of AttackersThe domain contacted is wouderfulu.impresstravel.ga and this domain Vietnameses organizations.url campaign-against-vietnamese-organizations.htmlFor Fortinet is the Chinese hacking group 1937CN.If we compare the TTPs, it’s really similar. They used RTFs to make the intrusion and dll hijacking to load the real payload.And the name for domains are really similar between the campaings.The second one is:Cat.toonganuh.com is a subdomain of tooganuh.com recorded by florence1972@scryptmail.comPDF generated automatically by the PDFmyURL HTML to PDF APIConclusionThe Chinese hacking group 1937CN continues to target Vietnam officials with the same TTPs with a refreshing on the tools used. The toolset used by this group to create RTF malicious document has the same properpy of the SideWinder.I want to thank my buddies on “Zone de Confort”. It’s with this dreamteam, I can finalize correctly this analyses.In the second part, we analyze the RAT using in this campaign. Or if another reverse can make that, I’ll paid a beer ;)IOCs:domains: dn.dulichbiendao.org gateway.vietbaotinmoi.com fis.malware-sinkhole.net hn.dulichbiendao.org halong.dulichculao.com news.malware-sinkhole.net PDF generated automatically by the PDFmyURL HTML to PDF APInews.malware-sinkhole.net cat.toonganuh.com new.sggpnews.com dulichculao.com coco.sodexoa.com. thoitiet.malware-sinkhole.net wouderfulu.impresstravel.ga toonganuh.com coco.sodexoa.comIPs: 68 (dll)SecurityMalware AnalysisThreat IntelligenceLike what you read? Give Sebdraven a round of applause. From a quick cheer to a standing ovation, clap to show how much you enjoyed this story.6Sebdraven OSINT, Python,Malware Analysis, Botnet Tracker, SIEM and IPS/IDS and Threats Expert / co-organizer #BotConf / co-creator of #FastIRNever miss a story from Sebdraven, when you sign up for Medium. Learn more1FollowGET UPDATESPDF generated automatically by the PDFmyURL HTML to PDF API 