Blog Home (url > Unit 42 (url > Houdini’s Magic ReappearanceHoudini’s Magic ReappearanceBy Anthony Kasza (url­kasza/) and Esmid Idrizovic (url­idrizovic/) October 25, 2016 at 9:29 AM Category: Unit 42 (url  2,348(url­houdinis­magic­reappearance/?share=facebook&nb=1)(url­houdinis­magic­reappearance/?share=twitter&nb=1)(url­houdinis­magic­reappearance/?share=linkedin&nb=1) 34Unit 42 has observed a new version of Hworm (or Houdini) being used within multiple attacks. This blog outlines technical details of this new Hworm version and documents an attack campaign making use of the backdoor. Of the samples used in this attack, the first we observed were June 2016, while as­of publication we were still seeing attacks as recently as mid­ October, suggesting that this is likely an active, ongoing campaign. Deconstructing the Threats: The investigation into this malware began while searching through WildFire (url­the­network/subscriptions/wildfire) execution reports within AutoFocus (url­the­network/subscriptions/autofocus). Looking for newly submitted malicious samples with no family label, a unique mutex surfaced, “RCSTEST”. Pivoting around the creation of this mutex, as well as other dynamic behaviors, a group of samples slowly began to emerge. The group of samples has common delivery mechanisms, lures and decoy file themes, payloads (Hworm), as well as control infrastructure.Samples from this attack came in the form of SFX files. The original filenames of these delivery files are related to political figures and groups in the Middle East and the Mediterranean. They include:Mohamed Dahlan Abu Dhabi Meeting.exe ﺭﻣﺧﻟﺍ ﺏﺭﺷﻳ ﻥﺎﻏﻭﺩﺭﺍ ﻝﻳﻘﺛﻟﺍ ﺭﺎﻳﻌﻟﺍ ﻥﻣ ﺔﺣﻳﺿﻓ.exe ﻥﻳﻣﻠﺳﻣﻟﺍ ﻥﺍﻭﺧﻻﺍ ﻑﻭﻔﺻ ﻲﻓ ﺔﻳﻠﺧﺍﺩ ﺕﺎﻋﺍﺭﺻ.exe ﻝﺎﻣﻛ ﺩﻣﺣﻣ ﺭﻭﺗﻛﺩﻟﺍ ﻝﺎﻳﺗﻏﺍ ﺔﻳﻠﻣﻋ.scr ﻥﻼﺣﺩ ﺩﻋﻭﺗﻳﻭ ﺞﻳﻠﺧﻟﺍ ﻝﻭﺩ ﺩﺩﻬﻳ ﷲ ﺩﺑﻋ ﻙﻠﻣﻟﺍ.exe ءﺍﻭﻬﻟﺍ ﻰﻠﻋ ﻥﻳﻧﻁﺍﻭﻣ ﻥﻳﻬﻳ ﻱﺩﻭﻌﺳ ﺭﻳﻣﺍ ﻭﻳﺩﻳﻔﻟﺎﺑ.scrWhen executed each SFX file opens a decoy document, video, or URL, and eventually executes an Hworm payload in the background. The decoy files are similarly themed when compared to the above delivery file names. Figure 1 shows a screenshot from a video one sample opens as a decoy.(url­content/uploads/2016/10/Houdini_1.png)Figure 1 Decoy videoAnother sample displays a YouTube video by dropping a .url shortcut and opening it using the system’s default web browser. Figure 2 illustrates the .url file contents:(url­content/uploads/2016/10/Houdini_2.png)Figure 2 .url fileWhen the .url file is opened, the above YouTube video is displayed as a decoy. It is unclear at this time if the uploader of this video has any relation to this particular attackBesides decoys, the samples also execute Hworm payloads, all of which are packed. Each Hworm payload created a unique mutex (while some SFX files delivered the same Hworm payload). All of the samples beaconed to one of three network locations as shown in Figure 3:(url­content/uploads/2016/10/Houdini_3.png)(url­content/uploads/2016/10/Houdini_4.png)(url­content/uploads/2016/10/Houdini_5.png)Figure 3 C2 InfrastructureWhile prior reports on Hworm have been published (url­research/2013/09/now­you­see­me­ h­worm­by­houdini.html), we were unable to identify any report detailing this particular version of Hworm. Some previous versions would embed AutoIT scripts in resource sections of PE files while others would execute obfuscated VBS scripts. Some previous versions of the Hworm implant would embed data in the headers of HTTP requests or POST bodies as a method of command and control. Beacons of that HTTP protocol example are easily recognized by the use of ‘<|>’ as a delimiter and the URI of the request. This new version of Hworm uses a mixed binary and ASCII protocol over TCP. Figure 4 is a packet capture of the protocol used by Hworm samples in this attack. It includes the string “new_houdini”, the mutex used by the implant, the name of the user, the operating system version, the version of the implant, and the name of the foreground process:(url­content/uploads/2016/10/Houdini_6.png)Figure 4 Packet capture of new communications protocolDuring the investigation of this malware a forum post on dev­point[.]com, an Arabic speaking technology and security forum, by a user with the handle “Houdini”, outlined plans for a rewrite of a backdoor in Delphi. This post occurred around July 2015.Around October 2015, a password protected beta version of the builder used to create Delphi Hworm implants builder used to create the samples outlined in the above attack was not located. Unit 42 believes the samples used in the above attack are a version which were released after the beta. Analyzing the Hworm Malcode: Upon configuring and building a server, the builder prompts the user to save a VBS file and modifies a stub file to create the implant. The VBS file is used to load and inject the implant. It appears that the operators behind the above attack either chose to not use the VBS loader or the newer versions of the builder no longer produce a VBS script. The VBS Loader: The script contains three files encoded in base64. The first file is DynamicWrapperX (url­ coding.com/dynwrapx_eng.html) (DCOM_DATA), the second file is the RunPE shellcode (LOADER_DATA), and the third file is the file which gets injected into host process (FILE_DATA). DynamicWrapperX provides access to all Windows APIs from a Visual Basic Script providing a wide range of functionality to this VBS script.The configuration of the script is at the beginning of the file (Figure 5).(url­content/uploads/2016/10/Houdini_7.png)Figure 5 Script configuration sectionIn the above example, the script will use the registry as a startup method, it will drop itself into the system’s %appdata% directory using the filename myhworm.exe and it will inject itself into svchost.exe.As the script executes it first adds one of three startup methods which will execute the script on Windows startup:Registry Run in HKCU Path: HKCU\Software\Microsoft\Windows\CurrentVersion\Run EntryData Wscript.exe //b //e:vbscript <filepath> /b Specifies batch mode, which does not display alerts, scripting errors, or input prompts. /e Specifies the engine that is used to run the script. Define startup directory1 Following the installation of persistence, the script checks if the current environment is WOW64. If so, the script will execute:Startup task (not implemented yet)1 %windir%\syswow64\wscript.exe /b /e:vbscript <filepath> The script then drops DynamicWrapperX in the configured installation directory with file extension “.bin”.1 <installdir>\<filename>.bin It will then register DynamicWrapperX:1 regsvr32.exe /I /S <filename_dynamic_wrapperx> Next, the script will load the registered object:1 “set DCOM = CreateObject("DYNAMICWRAPPERX")” It registers /load VirtualAlloc and CallWindowProcW as functions which can be directly called in the script using “dcom.VirtualAlloc <arguments>”.Using VirtualAlloc it will allocate new memory and copy RunPE shellcode (LOADER_DATA, loader.hex) and the to­be­ injected binary (FILE_DATA) into memory.Using CallWindowProcW the script will jump to the RunPE shellcode and the shellcode will inject the file (FILE_DATA) into the host process. The host process is by default svchost.exe but for .NET files injection can occur into the file:1 %windir%\Microsoft.Net\Framework\v2.0.50727\msbuild.exe Figure 6 shows the main routine of the script:(url­content/uploads/2016/10/Houdini_8.png)Figure 6 Main routineFigure 7shows a hex dump of LOADER_DATA (RunPE shellcode):(url­content/uploads/2016/10/Houdini_9.png)Figure 7 Hex dump of LOADER_DATASimilarities in comments and coding styles between previous versions of the Hworm VBS script and the VBS script provided in this beta builder can be seen in Figure 1. Top is the VBS file from the HTTP version of Hworm, compared with the VBS script produced by the beta builder of Hworm (below).(url­content/uploads/2016/10/Houdini_10.png)(url­content/uploads/2016/10/Houdini_11.png)Figure 8 Similarities between HWorm versionsThe Beta Server:The Beta Server: The main server which the builder produces is developed in Delphi and is not encrypted. Unit 42 has seen variants packed with VMProtect and ASPack. In some versions of the Delphi Hworm implants discovered (unpacked beta versions) the settings are stored in the resource section RCData\“CONFIG” and are in clear text (Figure 9).(url­content/uploads/2016/10/Houdini_12.png)Figure 9 SettingsSome versions also have an unfinished PE spreader in the resource section processes named “sm?rtp.exe” and execute a VBS file using wscript.exe:1 “wscript.exe /e:vbscript <current directory>\$RECYCLE.BIN\u vbs name here”.(url­content/uploads/2016/10/Houdini_13.png)Figure 10 SpreaderThe server exports some unused functions (they all just have RET instruction). We have seen “wrom.exe” and “server.exe” used as the name in the export table (Figure 11).(url­content/uploads/2016/10/Houdini_14.png)Figure 11 Export tableThe author used the open source library Indy Components for network communication. They also used BTMemoryModule to load DLLs from memory (without saving it on the disc).The Hworm implants use a connect­back communication. This means the server (implant) connects back to the client (remotely controlling system). It also has some modules implemented in the server and each module uses its own socket for communication (on the same port defined in the configuration).The following modules provide features of this malware:Screenshot: Provides the ability to capture screenshots in JPEG/BMP formats Keylogger: Provides the ability to log key strokes Internet IO: Provides the ability to download and execute files from the internet. It also provides the ability to load the executables via the RunPE technique File Manager: Provides the ability to list files and directories, delete, rename, and execute files, and upload or download files via TCP or HTTP Password: Provides the ability to steal passwords from Firefox, Opera, and Chrome browsers Misc: Provides the ability to list processes or modules and kill running processes USB Notifier: Provides the ability to notify the controller when a USB device is attached Houdini Client: Provides the main client, which contains the server’s configuration.Final Thoughts: The similarities in coding styles and features of the server, as well as languages and handles used by the author of the malware, lead us to believe the beta builder is a version of Hworm which was created somewhere between the HTTP version and the version used in the above outlined attack.As this RAT can be found online in semi­public locations it is possible the malware is used by both surgical threat actors as well as within casual compromises. The above attack is only one such campaign Unit 42 has discovered using the Delphi versions of Hworm.Palo Alto Networks customers can use AutoFocus to find all versions of Hworm samples using the “Hworm” tag. Indicators: Delphi Hworm Beta Builder Command and Control Network Locations start.loginto[.]me samah.sytes[.]net 52.42.161[.]75 78.47.96[.]17 136.243.104[.]200Got something to say?Leave a comment Notify me of followup comments via e­mailName (required)Email (required)WebsiteSUBMITSUBSCRIBESUBSCRIBE TO NEWSLETTERSEmailCOMPANY Company (url Careers (url Sitemap (url Report a Vulnerability (url­disclosure)LEGAL NOTICES Privacy Policy (url­notices/privacy) Terms of Use (url­notices/terms­of­use)ACCOUNT Manage Subscription (url (url­alto­networks)  (url  (url© 2016 Palo Alto Networks, Inc. All rights reserved.SALES > 866.320.4788 SEE A DEMO TAKE A TEST DRIVE (HTTP://CONNECT.PALOALTONETWORKS.COM/VIRTUAL­UTD) 