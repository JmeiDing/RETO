Gazing at GazerTurla’s new second stage backdoorAugust 2017Gazing at GazerTurla’s new second stage backdoorAugust 2017Table of ConTenTIntroduction Summary Similarities with other Turla tools Messages between componentsGazer versions C&C URLs 29lIST of fIGureSFigure 1. Figure 4.Turla author’s sense of humor Certificates used to sign the malware variantslIST of TableSTable 1. Table 6.Abstract Class Autorun Abstract Class Queue Abstract Class Storage Abstract Class TListenerInterface Abstract Class TAbstractTransport Gazer sample hashes6 Herein we release our analysis of a previously undocumented backdoor that has been targeted against embassies and consulates around the world leads us to attribute it, with high confidence, to the Turla group. Turla is a notorious group that has been targeting governments, government officials and diplomats for years. They are known to run watering hole and spearphishing campaigns to better pinpoint their targets. Although this backdoor has been actively deployed since at least 2016, it has not been documented anywhere. Based on strings found in the samples we analyzed, we have named this backdoor “Gazer”. Recently, the Turla APT group has seen extensive news coverage surrounding its campaigns, something we haven’t seen for a long time. The Intercept reported that there exists a 2011 presentation by Canada’s Communication Security Establishment (CSE) outlining the errors made by the Turla operators during their operations even though the tools they use are quite advanced. The codename for Turla APT group in this presentation is MAKERSMARK. Gazer is, similar to its siblings in the Turla family, using advanced methods to spy and persist on its targets. This whitepaper highlights the campaigns in which Gazer was used and also contains a technical analysis of its functionalities.Summary Based on our research and telemetry on the different campaigns where Gazer was used,we believe that Southeastern Europe as well as countries in the former Soviet Union Republichas recently been the main target. The witnessed techniques, tactics and procedures (TTPs) are in-line with what we usuallysee in Turla’s operation: a first stage backdoor, such as Skipper, likely delivered through spearphishingfollowed by the appearance on the compromised system of a second stage backdoor, Gazerin this case. Although we could not find irrefutable evidence that this backdoor is truly another tool in Turla’s arsenal, several clues lead us to believe that this is indeed the case. First, their targets are in line with Turla’s traditional targets: Ministries of Foreign Affairs (MFAs) and embassies. Second, the modus operandi of spearphishing, followed by a first stage backdoor and a second stage, stealthier backdoor is what has been seen over and over again. Skipper, which has been linked to Turla in the past, was found alongside Gazer in most cases we investigated. Finally, there are many similarities between Gazer and other second stage backdoors used by the Turla group such as Carbon and Kazuar. As usual, the Turla APT group makes an extra effort to avoid detection by wiping files securely, changing the strings and randomizing what could be simple markers through the different backdoor versions. In the most recent version we have found, Gazer authors modified most of the strings and inserted “video-game-related” sentences throughout the code. An example of such a string is depicted in Figure 1.5Figure 1.Turla author’s sense of humorSImIlarITIeS wITh oTher Turla ToolS Gazer is written in C++ and shares several similarities with other malware from the Turla APT family. Indeed, Gazer, Carbon and Kazuar can receive encrypted tasks from a C&C server, which can be executed either by the infected machine or by another machine on the network. They all use an encrypted container to store the malware’s components and configuration and they also log their actions in a file. The list of C&C servers is encrypted and embedded in Gazer’s PE resources. They are all compromised, legitimate websites (that mostly use the WordPress CMS) that act as a first layer proxy. This is also a common tactic for the Turla APT group. Another interesting linkage is that one of the C&C servers embedded in a Gazer sample was known to be used in a JScript backdoor documented by Kaspersky as Kopiluak. Last but not least, these three malware families (Gazer, Carbon and Kazuar) have a similar list of processes that may be employed as a target to inject the module used to communicate with the C&C server embedded in the binary. The resource containing this list can change from one sample to another, it is likely tailored to what is installed on the system (for example, on some samples, the process name “safari.exe” can appear on the list).CuSTom enCrypTIon Gazer’s authors make extensive use of encryption. They don’t use the Windows Crypto API and don’t seem to use any public library. It looks as if they are using their own library for 3DES and RSA. The RSA keys embedded in the resources contains the attacker’s public key which is used to encrypt the data sent to the C&C server, and a private key to decrypt resources embedded in its binaries. These keys are unique in each sample. These resources are structured in the same way as RSA from OpenSSL, but these values (p, q, etc.) are computed by the custom implementation of Gazer’s authors.6For 3DES, the IV and a static key are hardcoded and are the same in all samples. This 3DES key is randomly generated and XORed with the static key. The random data used to XOR the static key is prepended to the logfile header. This key is then used in the regular 3DES algorithm.Global arChITeCTure In this section, we will describe in detail each component of Gazer.GAZER LOADERGAZER ORCHESTRATORrsrc (cid:27)(cid:26)(cid:27)“explorer.exe”rsrc (cid:27)(cid:26)(cid:25)OrchestratorInjected into process indicated in rsrc (cid:141)(cid:143)(cid:141)running within “explorer.exe”rsrc (cid:27)(cid:26)(cid:27)(cid:24) (cid:22)rsrc (cid:27)(cid:26)(cid:25)Comm moduleMay forward taskMachines on the samenetwork …P‡PˆForward taskSendtask’s resultGAZER ORCHESTRATORrunning within“ﬁrefox.exe” (cid:31)for example(cid:20)Injected into a process that legitimately communicateover the internet.(cid:31)process list from rsrc (cid:18)(cid:17)(cid:16)(cid:15)Send tasks’resultsGet newtasksC&C serverFigure 2.Gazer architectureLoader The loader is the first component of the malware to be executed on the system. Two resources are stored unencrypted in the binary: • 101: the process name to inject the orchestrator into1 • 102: the orchestratorThe following mutex is created to ensure that only a single instance of the malware is running:{531511FA-190D-5D85-8A4A-279F2F592CC7}Named pipe generation To establish a communication channel between Gazer components, a named pipe is initiated. The named pipe is generated from this string:\\\\.\\pipe\\Winsock2\\CatalogChangeListener-FFFF-F1Note that in all samples we have analyzed the process name is “explorer.exe”7The pattern “FFFF-F” is replaced with values computed from the security identifier (SID) of the current user and the current timestamp. Let’s take for example the current date as: “2017/04/24” and the SID: “S-1-5-21-84813077- 3085987743-2510664113-1000”.To generate the pattern at the end of the named pipe, some arithmetic is performed:time = SystemTime.wDay * Systemtime.wMonth * SystemTime.wYear = 24 * 04 * 2017 = 0x2f460 xsid = (1 * 21 * 84813077 * 3085987743 * 2510664113 * 1000) & 0xFFFFFFFF = 0xefa252d8((time >> 20) + (time & 0xFFF) + ((time >> 12) & 0xFFF)) % 0xFF = 0x93 ((xsid >> 20) + (xsid & 0xFFF) + ((xsid >> 12) & 0xFFF)) % 0xFF = 0x13((time * xsid >> 24) + (uint8_t)(time * xsid) + ((uint16_t)(time * xsid) >> 8) + (uint8_t)(time * xsid >> 16)) % 0xf) = 0xaIn this case, the named pipe will be:\\\\.\\pipe\\Winsock2\\CatalogChangeListener-9313-aIf the current user’s SID cannot be retrieved, the named pipe \\\\.\\pipe\\\Winsock2\\ CatalogChangeListener-FFFE-D will be used by default.Code injection through thread hijacking A not-so-common trick is used in order to inject the orchestrator into a remote process. Indeed, a running thread from the remote process is hijacked in order to run shellcode that will execute the communication module entry point. • The whole module and shellcode are copied into the remote process; • the function ZwQuerySystemInformation is used to retrieve the total numberof the running threads in the targeted process;• the following operations are attempted on each of those threads:• the thread is suspended with the OpenThread/SuspendThread functions; • the thread context is retrieved using GetThreadContext; • the context’s instruction pointer is saved and modified to point to the shellcode(through SetThreadContext);• the thread is resumed using ResumeThread.• if one of the previous operations fails, the thread is resumed and the same actionsare attempted on another thread.8launcher:; @ end of payload ; lpStartAddress => @payloadpush rax sub rsp, 38h movabs rax, 5D20092 mov qword ptr ss:[rsp+28], rax mov qword ptr ss:[rsp+20], 0 xor r9d, r9d movabs r8, 5D20046 xor edx, edx xor ecx, ecx call qword ptr ds:[CreateThread] movabs rax, 90A7FACE90A7FACE add rsp, 38h xchg qword ptr ss:[rsp], rax ret; replaced by the saved instruction pointer from thread context ;)payload:sub rsp, 28 movabs r8, 5D20096 mov edx, 1 movabs rcx, 4000000000000000 call qword ptr ds: [DllEntryPoint] xor ecx, ecx xxxx ; TIDThe shellcode is just a loader that will execute the module entry point in a new thread.Persistence The loader sends binary data through the named pipe to the orchestrator. This blob contains: • a command ID (2): CMC_TAKE_LOADER_BODY • the loader path file • the loader PEOnce this message is received by the orchestrator, the loader is securely deleted by overwriting the file content and deleted through the DeleteFile function. Afterwards, the persistency is set up. The persistency information is retrieved from the resource “105” and stored in the Gazer storage. Among these data, there is a dword value that is used to choose which persistency mode will be applied.The resource 105 is structured in the following way: • a dword value representing the persistence mode • a dword value representing the size of the data • the persistence information9There are 6 different persistence modes.0: ShellAutorun Persistence is achieved through the Windows registry by setting the value “Shell” with “explorer. exe, %malware_pathfile%” under the following key: HKCU\Software\Microsoft\Windows NT\CurrentVersion\Winlogon1: HiddenTaskAutorun It is very similar to the “TaskScheduler Autorun (4)” method described below. The main difference is that the task is hidden from the user by using the TASK_FLAG_HIDDEN flag (set up via the SetFlags method from the ITask interface).2: ScreenSaverAutorun In this mode, Gazer achieves persistency by setting up in the Windows registry the executable file used for the screensaver. Many values are created under the HKCU\Control Panel\Desktop registry key: • SCRNSAVE.exe with the malware executable path • ScreenSaveActive is set to “1”: enable the screensaver • ScreenSaverIsSecure is set to “0”: specifies that the screensaver is not password-protected • ScreenSaveTimeout is set to a value given in the resource. It specifies how long the systemremains idle before the screensaver (in this case: the malware) starts.3: StartupAutorun If the resource 105 begins with the dword value “3”, a LNK file will be created in the Start Menu. The resource will also provide a description for the shortcut file, the path for the target and the filename for the LNK. The IShellLink interface is used to create the shell link.4: TaskSchedulerAutorun This method is used to achieve persistence by creating a scheduled task. The task is created and set up through COM interfaces related to tasks (ITaskService, ITaskSettings, … ). Some information such as the task name and its description is retrieved from the resource. For example, in one of the sample’s resources, the persistency mode is set to 04 (TaskSchedulerAutorun) with the persistency data:%APPDATA%\Adobe\adobeup.exe Adobe Acrobat Reader Updater. This task was generated by Adobe Systems, Inc to keep your Adobe Software up-to-data. \Adobe\AcrobatReader.AdobeIn this example, a scheduled task will be created and set up thus: • Task name: “Adobe Acrobat Reader Updater” • Executable: “%APPDATA%\Adobe\adobeup.exe”• The orchestrator will copy the loader received through the named pipe to this location10• Task description: “This task was generated by Adobe Systems, Inc to keep yourAdobe Software up-to-data”• Task folder: “\Adobe\AcrobatReader.Adobe”Last but not least, the task is configured to be started by the task scheduler at any time after its scheduled time has passed. The task will be triggered when the current user logs on.5: LinkAutorun This persistence method modifies existing LNK files to execute the malware through cmd.exe. For each LNK file in the folder given in the resource, the icon and arguments are removed and the path is set to “cmd.exe” with the argument set to:/q /c start “%s” && start “%s”In most of the samples we analyzed, the configuration file specified that the TaskSchedulerAutorun persistence method should be used.Logs All three Gazer components log their actions into logfiles. They are encrypted with the same algorithm: 3DES. In some versions of Gazer, it is easy to retrieve these logfiles because their filenames are hardcoded into the binaries: • %TEMP%\CVRG72B5.tmp.cvr: the logs from the loader • %TEMP%\CVRG1A6B.tmp.cvr: the logs from the orchestrator • %TEMP%\CVRG38D9.tmp.cvr: the logs from the communication moduleEach logfile is structured in the following way: • [LOGSIZE][DECRYPTION_KEY][ENCRYPTED_LOG]• logsize: when this value (2 bytes) is subtracted from the magic value 0xf18b, it givesthe encrypted log size• decryption_key: when this 12 bytes blob is XORed with another hardcoded key of 12 bytes,it gives the 3DES key that can be used to decrypt the log• encrypted_log: log encrypted with the 3DES algorithm in CBC modeOnce decrypted, each log entry is formatted in the following way: |Hour:Min:Sec:Ms| [log ID] [log]11Here is an example with the decrypted orchestrator logfile:******************[ ]**************** DATE: 25.05.2017 PID=900 TID=2324Heaps=32DLL_PROCESS_ATTACH Current thread = 2080 Heap aff0000 [34] Path = \HKCU\Software\Microsoft\\HKCU\Software\Microsoft\Windows\|10:29:56:197| [1556] |10:29:56:197| [1557] |10:29:56:197| [1558] |10:29:56:197| [1559] C:\Windows\Explorer.EXE |10:29:56:197| [1565] |10:29:56:197| [1574] |10:29:58:197| [0137] |10:29:58:197| [0138] |10:29:58:197| [0183] |10:29:58:197| [0189] |10:29:58:197| [0215] |10:29:58:197| [0246] |10:29:58:197| [1688] |10:29:58:197| [0279] Windows\CurrentVersion\Explorer\ScreenSaver |10:29:58:197| [0190] CurrentVersion\Explorer\ScreenSaver |10:29:58:197| [0338] ---FAILED Initializing standart reg storage |10:29:58:197| [0346] |10:29:58:197| [0190] Software\Microsoft\Windows\ CurrentVersion\Explorer\ScreenSaver |10:29:58:197| [2605] |10:29:58:197| [0392] |10:29:59:666| [1688] |10:29:59:713| [1473] |10:29:59:760| [1688] |10:29:59:775| [1473] |10:29:59:775| [1688] |10:29:59:775| [1473] |10:29:59:791| [1688] |10:29:59:791| [1473] |10:29:59:806| [1688] |10:29:59:806| [1473] |10:29:59:806| [0270] |10:29:59:806| [0286] |10:29:59:806| [0425] |10:29:59:806| [0463] 2510664113-1000 |10:29:59:806| [0471] |10:29:59:806| [0787] |10:29:59:806| [1473] |10:29:59:822| [0514] |10:29:59:822| [0370] |10:29:59:822| [0482] |10:29:59:822| [1754] |10:29:59:822| [1688] |10:29:59:822| [1473] |10:29:59:838| [0505] SZ_172 SC_0(50) --+- |10:29:59:838| [0625] |10:29:59:838| [0286] |10:29:59:838| [0425] |10:29:59:838| [0463] 2510664113-1000 |10:29:59:838| [0471] |10:29:59:838| [0165] CatalogChangeListener-2313-4 |10:29:59:838| [0131] CatalogChangeListener-2313-4 |10:29:59:838| [0041] [ ]Storage is empty! 08-00-27-90-05-2A _GETSID_METHOD_1_ 28 7 8 122 S-1-5-21-84813077-3085987743-Ok R #4294967295 PR_100 TR_00000000 28 7 25 122 S-1-5-21-84813077-3085987743-\\.\pipe\Winsock2\PipeName = \\.\pipe\Winsock2\true12Note that in older Gazer versions, the “log ID” was replaced by the name of the current function. We believe that this log ID is an ID for the function where the log occurs.Working DirectoryUsing the Windows Registry All the files related to Gazer (except the logs) are stored encrypted within the registry. The orchestrator’s resource “109” contains the root storage path (it will be designated %RootStoragePath% in the rest of this paper). In every sample we examined, this resource pointed to the same storage path:HKCU\Software\Microsoft\Windows\CurrentVersion\Explorer\ScreenSaverIf this resource is empty, the registry key above is used by default. Except for RSA keys, all the data in the storage is encrypted2.Several subdirectories (whose names are hardcoded in the binary) are created. • %RootStoragePath%{119D263D-68FC-1942-3CA3-46B23FA652A0}• Object ID: a unique ID to identify the victim• %RootStoragePath%{1DC12691-2B24-2265-435D-735D3B118A70}• Task Queue: linked list of tasks to be executed• %RootStoragePath%{28E74BDA-4327-31B0-17B9-56A66A818C1D}• Plugins• %RootStoragePath%{31AC34A1-2DE2-36AC-1F6E-86F43772841F}• Communication Module: the DLL that communicates with the C&C server• %RootStoragePath%{3CDC155D-398A-646E-1021-23047D9B4366}• Autorun: the persistency method• %RootStoragePath%{4A3130BD-2608-730F-31A7-86D16CE66100}• Local Transport Settings: the computers IPs that are on the same network• %RootStoragePath%{56594FEA-5774-746D-4496-6361266C40D0}• Last Connection: last connection time with the C&C server (structure SYSTEMTIME)• %RootStoragePath%{629336E3-58D6-633B-5182-576588CF702A}• RSA Private Key: generated on the fly; used to decrypt the data from Gazer storage.• %RootStoragePath%{6CEE6FE1-10A2-4C33-7E7F-855A51733C77}• Result Queue: linked list of the tasks results• %RootStoragePath%{81A03BF8-60AA-4A56-253C-449121D61CAF}• Inject Settings: the list of processes to use to try to inject the communications module• %RootStoragePath%{8E9810C5-3014-4678-27EE-3B7A7AC346AF}• C&C servers2See the “Gazer Resources” section for details13Using Alternate Data Streams If it is not possible to access the registry, these configuration items are stored using alternate data streams. The function GetVolumeInformation is called to ensure that the volume “C:\” supports named streams in order to use ADS. The same GUIDs as above are used to hide the different data in an ADS for the file (hardcoded in the binary):“%TEMP%\KB943729.log”For example, here is the full path to access the object ID:%TEMP%\KB943729.log:{1DC12691-2B24-2265-435D-735D3B118A70}OrchestratorGazer Resources The Gazer-related files are stored in the orchestrator’s resources.File format There are a total of 11 resources (101 to 111) each structured in the following way: • [DATATYPE][SIZE][DATA][PADDING]• DATATYPE: A dword that specifies the type of data in the resource• 0x0: raw data • 0x1030001: strings array • 0x1: binary• SIZE: the size of the data (without padding)Encryption Except for resources 101 and 102 which are RSA keys, every resource is compressed with BZip and encrypted with 3DES. [RSAEncryptedBlob][SignatureBlob][3DESBlob]• RSAEncryptedBlob: The first 1024 bits of the data is a blob that contains a 3DES key. This blobis encrypted using RSA and can be decrypted using resource 101.• SignatureBlob: The second part of the data is a blob of 1024 bits containing the signatureof the last part of the data once decrypted.• 3DESBlob: The last part is the effective data, which is encrypted with the 3DES key fromthe first blob.Each resource is decrypted on the fly; the signature is compared with the decrypted data to check the integrity. Decrypted resources that pass this integrity check are encrypted with a new RSA key generated randomly by the orchestrator code. The private key and the encrypted resource are then stored in the registry under a specific GUID subkey.14Resources listing • 101: RSA private key. It is used to decrypt the other resources. • 102: an RSA public key. • 105: store the persistency information • 106: the list of processes to use to try to inject the communications module • 107: C&C communication DLL • 108: C&C server list • 109: Gazer working directory path • 110: plugins list • 111: local transport informationTask Execution When a task is retrieved from the C&C, it is either executed by the infected machine or by another computer on the same network through a P2P mechanism (in the same way this was done in Carbon and Snake). The task can be: • command executionThe result of the task is stored in a queue and forwarded to the module that communicates with the C&C server when access to the Internet is available.Classes Hierarchy The malware is written in C++ and the RTTI that contains information about the objects used in the code is not overwritten. There are 5 abstract classes that have several implementations.Table 1.Abstract Class AutorunClass Name HiddenTaskAutorun15Table 2.Abstract Class QueueClass Name TaskQueue ResultQueueTable 3.Abstract Class StorageClass Name RegStorageTable 4.Abstract Class TListenerInterfaceClass Name LTMessageProcessing CMessageProcessingSystemTable 5.Abstract Class TAbstractTransportClass Name The communication module is used to retrieve tasks from the C&C server and to dispatch them to the orchestrator. This library is injected into a process which can legitimately communicate over the Internet. The injection library is the same as the one found in the loader to inject the orchestrator into “explorer.exe”.Communication Initialization If a proxy server exists, it is retrieved and used by Gazer to make the HTTP requests. There are two different methods used to retrieve this value, either by requesting the following registry key:HKCU\Software\Microsoft\Windows\CurrentVersion\Internet Settingsor through the function InternetQueryOption with the flag INTERNET_OPTION_PROXY if the proxy server cannot be retrieved through the registry. The system user agent is then set up: • the default value of the “HKCU\Software\Microsoft\Windows\Current Version\Internet Settings\User Agent” key is retrieved;16• the value keys under “HKLM\Software\Microsoft\Windows\Current Version\InternetSettings\5.0\User Agent\Post Platform” are enumerated and those that contain the sub-string “IEAK” are concatenated with the user agent string from the previous step;• in the case that no user agent was found in the registry, the hardcoded UA Mozilla/4.0(compatible; MSIE 6.0) is usedBefore attempting any contact with the C&C server, the internet connection is checked by trying to reach the following servers one by one until one returns a HTTP status code 200: • update.microsoft.com • microsoft.com • windowsupdate.microsoft.com • yahoo.com • google.comC&C server communication The malware communicates with its C&C server to retrieve tasks (through HTTP GET requests) and to send the tasks results (through HTTP POST requests). Before sending a request to the C&C, the command CMC_GIVE_SETTINGS is sent to the orchestrator through its communication channel (a named pipe, more on this in the next section). The message (MSG) contained in the packet in this case is a single byte set by the orchestrator for the command result status. The orchestrator replies on the same channel with the settings retrieved from the working directory with the object id, the list of the C&C servers and the last connection date. A GET request is performed to retrieve a task from the C&C. The parameters of the GET request are chosen from amongst a hardcoded list of keywords that does not look suspicious. Their values are generated randomly in the charset [a-z0-9] with a random size from a range given for each parameter: • id [6-12] (As with all other parameters, if this parameter is used in the request, it will have a randomvalue (of letters and digits) with a random size between 6 and 12 characters.)• hash [10-15] • session [10-15] • photo [6-10] • video [6-10] • album [6-10] • client [5-10] • key [5-10] • account [6-12] • member [6-12] • partners [5-10] • adm [6-12] • author [6-12]17• contact [6-12] • content [6-12] • user [6-12]Here are few examples of such requests:xxx.php?album=2ildzq&key=hdr2a&partners=d2lic33f&session=nurvxd2x0z8bztz&video =sg508tujm&photo=4d4idgkxxx.php?photo=he29zms5fc&user=hvbc2a&author=xvfj5r0q 9c&client=7mvvc&partners=t4mgmuy&adm=lo3r6v4xxx.php?member=ectwzo820&contact =2qwi15&album=f1qzoxuef4&session=x0z8bztz8hrs65f&id=t3x0ftu9xxx.php?partners =ha9hz9sn12&hash=5740kptk3acmu&album=uef4nm5d&session=dpeb67ip65f&member=arj6 x3ljjxxx.php?video=nfqsz570&client=28c7lu2&partners=818eguh70&contact=ibj3xch &content=1udm9t799ixr&session=5fjjt61qred9uoA timeout of 10 minutes is set for each request (send/receive/connect) through InternetSetOption. Once the request is sent, the response is handled only if the returned HTTP status code is 404. The content of the response is encrypted and can be decrypted with the private RSA key generated by the orchestrator. The response body contains a blob of data and an MD5 hash of the data. The blob is hashed and compared to the MD5 to ensure the integrity of the server’s response. If the response size is 20 bytes (a blob of 4 bytes + the hash), there are no tasks to retrieve. A command CMC_TAKE_TASK is sent to the orchestrator with the encrypted task received from the C&C server and its size. The orchestrator will be in charge of executing the task and will send the results to the communication module. Once the blob of the tasks results (encrypted by the orchestrator) is received, it is sent to the C&C server through a POST request in the same way that it was done for the GET request (using parameters with random values).Messages between components A global named pipe is used for the communication between the different components. The data sent through this named pipe is formatted in the following way:DatatypeID_CMDMSGFigure 3. Message format• DATATYPE: the same constants are used for the resources (check the File Format entryin the “Resources section”)• ID_CMD: the command name (check below for a complete list) • MSG: the data to be sentHere is a listing of the different commands: • CMC_TAKE_TASK (ID_CMD: 1)• When a task is retrieved by the C&C server module, it is sent to the orchestrator,which stores the task in the task queue.• CMC_TAKE_LOADER_BODY (ID_CMD: 2)18• Wipe Gazer’s original loader file, clean persistency and set up a copy of the loaderand its persistency according to one of the resources (check persistency part for details).• CMC_GIVE_RESULT (ID_CMD: 4)• When this message is received, the orchestrator will retrieve the task’s result fromthe result queue, compress and encrypt it using the server’s public RSA key (the one from the resource 102) and send the blob to the communication module which will send the whole result to the server through a POST request.• CMC_GIVE_SETTINGS (ID_CMD: 5)• The communication module sends this message to the orchestrator to requestthe information needed to contact the server (list of the servers to contact, the last connection time and the victim ID).• CMC_TAKE_CONFIRM_RESULT (ID_CMD: 6)• When the communication module sends a task’s result to the server, a message is sentto the orchestrator that will remove the task’s result from the queue.• CMC_TAKE_CAN_NOT_WORK (ID_CMD: 7)• When an operation has failed (for example, if the communication module cannot correctlyparse the data received from the orchestrator), this message is sent to the orchestrator with the last error code. The error code will be added to the logfile.• CMC_TAKE_UNINSTALL (ID_CMD: 8)• Used to wipe a file from the disk.• CMC_TAKE_NOP (ID_CMD: 9)• No operation• CMC_NO_CONNECT_TO_GAZER (ID_CMD: 0xA)• This command is sent to the orchestrator when the communication module cannotcontact any of the servers. In this case, if a pending task’s results are in the queue, they are stored encrypted in Gazer’s storage.• CMC_TAKE_LAST_CONNECTION (ID_CMD: 0xB)• This command is sent from the communication module to the orchestrator each time a connection is established to the C&C server. It contains a structure SystemTime (filled with the current system time). Once the message is received by the orchestrator, the last connection date is stored compressed and encrypted in the Gazer storage (either the registry or ADS).• CMC_GIVE_CACHE / CMC_TAKE_CACHE (ID_CMD: 0xC / 0xD)• Not implemented19Gazer verSIonS Four different versions have been identified. In the first version, the function used to write logs has as its parameter the real function name where the log occurs. There were also different methods used to inject code (the one documented in this whitepaper and one based on window injection). In a second version, the function names used as parameters are replaced by an ID and only one method is used for code injection. Also, the string “NO OLD METHODS” appears in this part of the code. Some samples from the first versions were signed with a valid certificate issued by Comodo for “Solid Loop Ltd”. The compilation date appears to be 2002 but is likely to be faked because the certificate was issued in 2015.The latest versions are signed with a different certificate: “Ultimate Computer Support Ltd”.Figure 4.Certificates used to sign the malware variantsSome efforts have been made to obfuscate strings that can be used as IoCs. The mutex name and the named pipe do not appear in cleartext anymore; they are now encoded with a XOR key. On the previous versions, the logfile names were hardcoded in the binary. The function GetTempFileNameA is now used to generate a random filename. The C&C server returns a 404 or 502 status code page, whereas it was only a 404 in the previous versions. In the latest versions compiled in 2017, the log messages are different (although they have the same meaning). For example: “PE STORAGE” is replaced by “EXE SHELTER”, “PE CRYPTO” by “EXE CIPHER” etc… Last but not least, the compilation timestamp seems not to be faked anymore. In conclusion, Gazer is a very sophisticated piece of malware that has been used against different targets in several countries around the world. Through the different versions we found and analyzed, we can see that this malicious backdoor is still being actively developed and used by its creators.Indicators of Compromise can also be found on github. For any inquiries, or to make sample submissions related to the subject, contact us at: threatintel@eset.com.20IoCSFilenames • %TEMP%\KB943729.log • %TEMP%\CVRG72B5.tmp.cvr • %TEMP%\CVRG1A6B.tmp.cvr • %TEMP%\CVRG38D9.tmp.cvr • %TEMP%\~DF1E06.tmp • %HOMEPATH%\ntuser.dat.LOG3 • %HOMEPATH%\AppData\Local\Adobe\AdobeUpdater.exeRegistry keys • HKCU\Software\Microsoft\Windows\CurrentVersion\Explorer\ScreenSaver • HKCU\Software\Microsoft\Windows NT\CurrentVersion\Explorer\ScreenSaverC&C URLs • daybreakhealthcare.co.uk/wp-includes/themees.php • simplecreative.design/wp-content/plugins/calculated-fields-form/single.php • outletpiumini.springwaterfeatures.com/wp-includes/pomo/settings.php • zerogov.com/wp-content/plugins.deactivate/paypal-donations/src/PaypalDonations/SimpleSubsribe.php• ales.ball-mill.es/ckfinder/core/connector/php/php4/CommandHandler/CommandHandler.php • dyskurs.com.ua/wp-admin/includes/map-menu.php • warrixmalaysia.com.my/wp-content/plugins/jetpack/modules/contact-form/grunion-table-form.php • shinestars-lifestyle.com/old_shinstar/includes/old/front_footer.old.php • www.aviasiya.com/murad.by/life/wp-content/plugins/wp-accounting/inc/pages/page-search.php • baby.greenweb.co.il/wp-content/themes/san-kloud/admin.php • soligro.com/wp-includes/pomo/db.php • giadinhvabe.net/wp-content/themes/viettemp/out/css/class.php • tekfordummies.com/wp-content/plugins/social-auto-poster/includes/libraries/delicious/Delicious.php • kennynguyen.esy.es/wp-content/plugins/wp-statistics/vendor/maxmind-db/reader/tests/MaxMind/Db/test/Reader/BuildTest.php• sonneteck.com/wp-content/plugins/yith-woocommerce-wishlist/plugin-fw/licence/templates/panel/activation/activation.php• chagiocaxuanson.esy.es/wp-content/plugins/nextgen-gallery/products/photocrati_nextgen/modules/ngglegacy/admin/templates/manage_gallery/gallery_preview_page_field.old.php• hotnews.16mb.com/wp-content/themes/twentysixteen/template-parts/content-header.php • zszinhyosz.pe.hu/wp-content/themes/twentyfourteen/page-templates/full-hight.php • weandcats.com/wp-content/plugins/broken-link-checker/modules/checkers/http-module.phpMutexes {531511FA-190D-5D85-8A4A-279F2F592CC7}21HashesTable 6.Gazer sample hashesSHA1 hashComponent27FA78DE705EbAA4b11C4b5FE7277F91906b3F92Gazer wiper x3235F205367E2E5F8A121925bbAE6FF07626b526A7Gazer loader x32b151CD7C4F9E53A8DCbDEb7CE61CCDD146Eb68AbGazer loader x32E40bb5bEEC5678537E8FE537F872b2AD6b77E08AGazer loader x32522E5F02C06AD215C9D0C23C5A6A523D34AE4E91Gazer loader x64C380038A57FFb8C064851b898F630312FAbCbbA7Gazer loader x64267F144D771b4E2832798485108DECD505Cb824AGazer loader x6452F6D09CCCDbC38D66C184521E7CCF6b28C4b4D9Gazer loader x32475C59744ACCb09724DAE610763b7284646Ab63FGazer loader x3222542A3245D52b7bCDb3EAEF5b8b2693F451F497Gazer loader x322b9FAA8b0FCADAC710C7b2b93D492FF1028b5291Gazer loader x64E05Ab6978C17724b7C874F44F8A6CbFb1C56418DGazer loader x646DEC3438D212b67356200bbAC5EC7FA41C716D86Gazer loader x64b548863DF838069455A76D2A63327434C02D0D9DGazer loader x64CompilationTime07/04/201615:04:2405/02/200217:36:1005/02/200217:36:1005/02/200217:36:1005/02/200217:36:2605/02/200217:36:2605/02/200217:36:2604/10/200218:31:3704/10/200218:31:3704/10/200218:31:3704/10/200218:34:1804/10/200218:34:1804/10/200218:34:1809/01/201619:30:10CertificateEset DetectionNamenot signedWin32/Turla.CLadmin@solidloop.org valid from 14/10/2015to 14/10/2016admin@solidloop.org valid from 14/10/2015to 14/10/2016admin@solidloop.org valid from 14/10/2015to 14/10/2016admin@solidloop.org valid from 14/10/2015to 14/10/2016admin@solidloop.org valid from 14/10/2015to 14/10/2016admin@solidloop.org valid from 14/10/2015to 14/10/2016admin@solidloop.org valid from 14/10/2015to 14/10/2016admin@solidloop.org valid from 14/10/2015to 14/10/2016admin@solidloop.org valid from 14/10/2015to 14/10/2016admin@solidloop.org valid from 14/10/2015to 14/10/2016admin@solidloop.org valid from 14/10/2015to 14/10/2016admin@solidloop.org valid from 14/10/2015to 14/10/2016Win32/Turla.CCWin32/Turla.CCWin32/Turla.CCWin64/Turla.AAWin64/Turla.AAWin64/Turla.AAWin32/Turla.CCWin32/Turla.CCWin32/Turla.CCWin64/Turla.AAWin64/Turla.AAWin64/Turla.AAnot signedWin64/Turla.AAadmin@C3E6511377DFE85A34E19b33575870DDA8884C3CGazer loader x6406/02/201619:29:15ultimatecomsup.biz valid from 16/12/2015Win64/Turla.AA9FF4F59CA26388C37D0b1F0E0b22322D926E294AGazer loader x64to 16/12/2017admin@16/02/201616:00:44ultimatecomsup.biz valid from 16/12/2015Win64/Turla.AAto 16/12/201722SHA1 hashComponentCompilationTimeCertificateadmin@Eset DetectionName029AA51549D0b9222Db49A53D2604D79AD1C1E59Gazer loader x6418/02/201615:29:58ultimatecomsup.biz valid from 16/12/2015Win64/Turla.AAto 16/12/2017admin@CECC70F2b2D50269191336219A8F893D45F5E979Gazer loader x6401/01/201708:39:30ultimatecomsup.biz valid from 16/12/2015Win64/Turla.AG7FAC4FC130637AFAb31C56CE0A01E555D5DEA40DGazer loader x6411/06/201723:43:51ultimatecomsup.biz valid from 16/12/2015Win64/Turla.AD5838A51426CA6095b1C92b87E1bE22276C21A044Gazer loader x3219/06/201701:28:51ultimatecomsup.biz valid from 16/12/2015Win32/Turla.CFto 16/12/2017admin@to 16/12/2017admin@3944253F6b7019EED496FAD756F4651bE0E282b4Gazer loader x64to 16/12/2017admin@19/06/201701:30:00ultimatecomsup.biz valid from 16/12/2015Win64/Turla.ADto 16/12/2017228DA957A9ED661E17E00EFbA8E923FD17FAE054295D142A7bDCED124FDCC8EDFE49b9F3ACCEAb8A0F97F599FAb7F8057424340C246D3A836C141782Dbb185E493A0FDC959763533D86D73F986409F1b4701828DEE543b994ED2578b9E0D3991F22bD8276FD611667bA19691958b5b72673b9b802EDD7FF8FCAbEb735C51E2b8Eb6Fb07bDA8b95401D069bD875831DF9CbCFD7bF812511148D2A0F117324A75FbAE3AE65C32838Fb52A0F5AD2CDE8659D2bFF9F337FF6841419ADC51EEb8756660b2Fb46F3Eb24ED9E6DE3577b463451b7AFCE24Ab646EF62AD6C2bD795C6EE27b147FF0A05C0477F70477E315916E0E8184AD9D6bbD03E99A397F8E925FA66CFbE5CF1b7CED96b08D7593E28FEE616ECCbC6338896517CF63C534630C2CE0070AD203F9704F1526E83AE58623F1E3bE3175D49E7b262CD88CFD517694DCbA18Gazer05/02/2002orchestrator x3217:31:28Gazer05/02/2002orchestrator x3217:31:28Gazer05/02/2002orchestrator x3217:31:28Gazer05/02/2002orchestrator x3217:31:28Gazer05/02/2002orchestrator x6417:34:25Gazer05/02/2002orchestrator x6417:34:25Gazer05/02/2002orchestrator x6417:34:25Gazer04/10/2002orchestrator x3218:31:28Gazer04/10/2002orchestrator x3218:31:28Gazer04/10/2002orchestrator x6418:33:02Gazer04/10/2002orchestrator x6418:33:02Gazer04/10/2002orchestrator x6418:33:02Gazer09/01/2016orchestrator x6419:28:29Gazer06/02/2016orchestrator x6419:29:04Gazer06/02/2016orchestrator x6419:29:04Gazer18/02/2016orchestrator x6415:29:3223not signedWin32/Turla.CFnot signedWin32/Turla.CFnot signedWin32/Turla.CFnot signedWin32/Turla.CCnot signedWin64/Turla.AAnot signedWin64/Turla.AAnot signedWin64/Turla.AAnot signedWin32/Turla.CCnot signedWin32/Turla.CCnot signedWin64/Turla.AAnot signedWin64/Turla.AAnot signedWin64/Turla.AAnot signedWin64/Turla.AAnot signedWin64/Turla.AAnot signedWin64/Turla.AAnot signedWin64/Turla.AASHA1 hashComponentCompilationTimeCertificateEset DetectionName7A6F1486269AbDC1D658Db618DC3C6F2AC85A4A711b35320Fb1CF21D2E57770D8D8b237Eb4330EAAE8A2bAD87027F2bF3ECAE477F805DE13FCCC0181950F0b0C7701835C5FbDb6C5698A04b8AFE068E6Gazer01/01/2017orchestrator x6408:39:19Gazer11/06/2017orchestrator x6423:42:28Gazer19/06/2017orchestrator x3201:28:21Gazer19/06/2017orchestrator x6401:29:46not signedWin64/Turla.AGnot signedWin64/Turla.ADnot signedWin32/Turla.CFnot signedWin64/Turla.ADA5EEC8C6AADF784994bF68D9D937bb7AF3684D5C Gazer comm x64411EF895FE8DD4E040E8bF4048F4327F917E5724Gazer comm x32C1288DF9022bCD2C0A217b1536DFA83928768D06Gazer comm x324b6EF62D5D59F2FE7F245DD3042DC7b83E3CC923Gazer comm x327F54F9F2A6909062988AE87C1337F3CF38D68D35Gazer wiper x3205/02/200217:57:0705/02/200217:58:2206/02/201619:23:5211/06/201723:44:2405/02/200217:39:07admin@solidloop.org valid from 14/10/2015to 14/10/2016admin@solidloop.org valid from 14/10/2015to 14/10/2016Win64/Turla.AHWin32/Turla.CCnot signedWin32/Turla.CCnot signedWin32/Turla.CFadmin@solidloop.org valid from 14/10/2015to 14/10/2016Win32/Turla.CL24appendICeSFunction names There are a few samples of Gazer that use the current function name as first parameter for the log function. Here is a list of some function names used in Gazer: • AutorunManager Class• AutorunManager::~AutorunManger • AutorunManager::FullStart• HiddenTaskAutorun Class• HiddenTaskAutorun::IsPathsEqual• LinkAutorun Class• LinkAutorunClass::InfectLnkFile • LinkAutorunClass::ClearLnkFile • LinkAutorunClass::CheckLnkFile• RemoteImport32 Class• RemoteImport32::RemoteImport32 • RemoteImport32::GetRemoteProcAddress • RemoteImport32::GetRemoteModuleHandle• ScreenSaverAutorun Class• ScreenSaverAutorun::ChangeScreenSaver • ScreenSaverAutorun::CloseHiddenWindow• ShellAutorun Class• ShellAutorun::AutorunInstallEx • ShellAutorun::IsPathsEqual• StartupAutorun Class• StartupAutorun::AutorunInstallEx • StartupAutorun::IsPathsEqual• TaskScheduler20Autorun Class• TaskScheduler20Autorun::Init • TaskScheduler20Autorun::IsPathsEqual25• DllInjector Class• DllInjector::LoadDllToProcess • DllInjector::WindowInject• InjectManager Class• InjectManager::~InjectManager • InjectManager::VictimManualCreateIE• TNPTransport Class• TNPTransport::Init • TNPTransport::ServerProc• ExeStorage Class• ExeStorage::Migrate • ExeStorage::SecureHeapFree• FSStorage Class• FSStorage::~FSStorage • FSStorage::Empty• RegStorage Class• RegStorage::~RegStorage • RegStorage::Init • RegStorage::FreeList26• RegStorage::GetListBlock • RegStorage::Empty• ResultQueue Class• ResultQueue::~ResultQueue • ResultQueue::print• TaskQueue Class• TaskQueue::~TaskQueue • TaskQueue::print• CExecutionSubsystem Class• CExecutionSubsystem::~CExecutionSubsystem • CExecutionSubsystem::UpdateStorage• CMessageProcessingSystem Class• CMessageProcessingSystem::~CMessageProcessing • CMessageProcessingSystem::Receive_GIVE_RESULT27• CMessageProcessingSystem::Receive_TAKE_CONFIRM_RESULT • CMessageProcessingSystem::Send_TAKE_RESULT• Crypto Class• Crypto::GetPublicKey • Crypto::DecompressBuffer• LTManager Class• LTManager::~LTManager • LTManager::ClearRoute28• LTManager::ClearTask • LTManager::DeleteEvents• LTMessageProcessing Class• LTMessageProcessing::ListenerCallBack • LTMessageProcessing::Send_TAKE_ERROR_UNKNOWN• LTNamedPipe Class• LTNamedPipe::ReInit • LTNamedPipe::ClientCommunicationYara rulesimport “pe” import “math” import “hash”rule Gazer_certificate_subject { condition: for any i in (0 pe.number_of_signatures - 1): (pe.signatures[i].subject contains “Solid Loop” or pe.signatures[i].subject contains “Ultimate Computer Support”) $certif1 = {52 76 a4 53 cd 70 9c 18 da 65 15 7e 5f 1f de 02} $certif2 = {12 90 f2 41 d9 b2 80 af 77 fc da 12 c6 b4 96 9c} condition: (uint16(0) == 0x5a4d) and 1 of them and filesize < 2MB $s1 = “CVRG72B5.tmp.cvr” $s2 = “CVRG1A6B.tmp.cvr” $s3 = “CVRG38D9.tmp.cvr” condition: (uint16(0) == 0x5a4d) and 1 of them }29 