Tracking the Activities of TeamTNTA Closer Look at a Cloud-FocusedMalicious Actor GroupDavid Fiser and Alfredo OliveiraContents4 Campaigns and Targets 14 Credential Theft Techniques Notable Payload Functionalities 25 IRC Bot Evolution 28 Impact of Cryptocurrency Mining Trend Micro ResearchWritten by David Fiser Alfredo OliveiraStock image used under license from Shutterstock.comIn 2019, we set up a container honeypot, a device with an exposed daemon, and almost immediately started to observe a massive cryptocurrency miner deployment across the Linux threat landscape. We later extended our honeypot base on a misconfigured deployment of Redis, a popular open-source in-memory data structure store designed for deployment only in secure environments. This confirmed our observations on the cryptocurrency mining trend, which we decided to further investigate.In 2020, we noticed that the deployment scripts became more advanced1 and more aggressive to other malicious actors.2 The payloads were created by a malicious actor group called TeamTNT.Based on its activities, TeamTNT’s main motivation for its campaigns is money, which it tries to obtain by targeting Linux environments, including organizations’ cloud infrastructures. We have previously written about TeamTNT and noted the evolution of its activities. In this paper, we aim to summarize our findings on the group by taking a closer look at its activities in 2020 and early 2021.BackgroundThe first possible mention of TeamTNT was in 2011, when a website called gold.de was hacked by a groupusing the signature “HildeGard@TeamTNT”.3 This is similar to the signatures we saw in some maliciousshell scripts and ELF (Executable and Linkable Format) files, which contained the words “TeamTNT” and“HildeGard”.Figure 1. TeamTNT’s signaturesWe believe that at least some members of the group are actors who are native German speakers as theirscripts and text, including posts on social media, are written in fluent German.Figure 2. Examples of TeamTNT’s usage of German on social media and in shell scripts. The shell scripttext shows a tongue-in-cheek comment from a TeamTNT developer complaining that he wouldhave to take his wife to Japan for a vacation.4 | Tracking the Activities of TeamTNT: A Closer Look at a Cloud-Focused Malicious Actor GroupThe precise number of people behind a hacking group is always difficult to estimate. Such a numbertherefore has to be considered with an error margin. However, we believe that the number of peoplebehind TeamTNT is at least — if not exactly — 12. This estimate is based on one of the group’s posts onits Twitter account. We also believe that the group is actively hiring new members.Figure 3. A tweet from TeamTNT complaining about managing a group of 12 programmersIdentifying the individual members of the team can be an even more difficult challenge. Since we do notwant to make false attributions in our research, we do not speculate on this matter.The actors behind TeamTNT profile themselves either as “honest robbers” who mean no harm or as redteam penetration testers, often teasing security researchers in the process. But as we can see in the latersection on cryptocurrency mining, the group’s seemingly “harmless” activity can actually cause heavyfinancial losses.Figure 4. TeamTNT’s red team profile and researcher teasing5 | Tracking the Activities of TeamTNT: A Closer Look at a Cloud-Focused Malicious Actor GroupTeamTNT is active on Twitter, tending to announce its active campaigns and new malware features onthe social network. The group also uses social media to justify its cause or to complain about securitycompanies and researchers.Figure 5. TeamTNT’s Christmas campaign notification on TwitterFigure 6. A tweet from TeamTNT complaining about security researchers6 | Tracking the Activities of TeamTNT: A Closer Look at a Cloud-Focused Malicious Actor GroupCampaigns and TargetsWe followed the activities of TeamTNT and reported on several incidents, beginning with its attack thatinvolved the deployment of cryptocurrency miners and distributed denial-of-service (DDoS) botnetsagainst open and misconfigured Docker Daemon ports.4 In 2020 and early 2021, we tracked more incidentsinvolving the group, including its use of the DDoS-capable IRC (Internet Relay Chat) bot TNTbotinger5 inDecember 2020 and its integration of a malicious shell script for stealing cloud credentials in January2021.6Indeed, TeamTNT launched a number of campaigns in 2020 and early 2021. Some of them were fairlysimple and straightforward, such as the group’s Covid-19 campaign, which capitalized on pandemic-related topics for its malware nomenclature. Others made full use of the TeamTNT’s repertoire of toolsand techniques. We discuss some of the more notable ones in the succeeding subsections. It should benoted that the campaigns are not displayed in any specific order. Furthermore, some of the characteristicsof the malware used in these campaigns, such as the malware’s wormlike behavior, also make it difficultto determine whether they are still actively being pursued by the group.Campaign nameLanguageCovid-19Black-TCompetitor KillerDual InstallerKinsing KillerMeoowSayHiWeave PersistentEnglish/GermanEnglishEnglishEnglishEnglish/GermanEnglish/GermanEnglishEnglishPWN RedisEnglish/GermanGet Some SSHDocker4MacAWS StealerEnglishEnglishEnglishTable 1. TeamTNT campaigns in 2020 and early 20217 | Tracking the Activities of TeamTNT: A Closer Look at a Cloud-Focused Malicious Actor GroupCovid-19Like other malicious actor groups, TeamTNT banked on the theme of Covid-19. In its case, the group didso specifically in naming its malware and deployment URLs. The group took advantage of related topicsto spread malicious samples, with the first seen in April 2020 and the last in May 2020. The campaignwas short-lived, which was unusual given that the pandemic had then just started. It is possible that thegroup was not getting the results it wanted, or that it did not want to linger in an already crowded space.Figure 7. A sample code snippet from TeamTNT’s Covid-19 campaignBlack-TA unique feature of TeamTNT’s Black-T campaign was its function called INFECT_ALL_CONTAINERS,which did exactly what its name implied: Check for running containers and deploy malicious samples inthese containers.Figure 8. A sample code snippet showing the INFECT_ALL_CONTAINERS function8 | Tracking the Activities of TeamTNT: A Closer Look at a Cloud-Focused Malicious Actor GroupAfter deploying malicious samples in the running containers, it also deployed malicious containers —another unique characteristic of this campaign, and one that generated plenty of awareness within theDevOps community.Figure 9. A forum post regarding TeamTNT’s Black-T campaignKinsing KillerA threat known for targeting container systems, Kinsing7 gained notoriety at the beginning of 2020 when ittargeted misconfigured Docker Daemon API ports.8 Since the target environments were shared and therewas fierce competition for resources, TeamTNT started implementing functions to find and neutralizetraces of Kinsing infections on the victim environments to ensure that its malware was the only onerunning — a technique it also used against “competitors.”9 | Tracking the Activities of TeamTNT: A Closer Look at a Cloud-Focused Malicious Actor GroupFigure 10. A sample code snippet from TeamTNT’s Kinsing Killer campaignDocker4MacIn December 2020, we sourced a sample from a campaign we called Docker4Mac because of the uniquestring found in the code, a marker indicating the primary targets: Docker users with macOS machines. Wedetermined that the sample was based on a valid script from an open-source project called Weave Scope,which maps, monitors, and manages containers and pods. TeamTNT injected malicious instructions intothe file, changing its purpose, luring project users, and infecting container and container orchestrationenvironments.9This campaign aims to steal cloud service provider (CSP) credentials and deploy a cryptocurrency minerduring the same routine — something not seen before as the group’s other campaigns would perform theseactions in different phases of the attack. This was also one of the first times that container orchestrationtechnologies were targeted, in this case via proxy.10 | Tracking the Activities of TeamTNT: A Closer Look at a Cloud-Focused Malicious Actor GroupFigure 11. Code snippets from the first sample sourced (top) and the last lines of the same sample(bottom) from TeamTNT’s Docker4Mac campaignAWS StealerMalicious actors typically exploit a security weakness in a target device to be able to execute their codeand ultimately accomplish their goals.10 But with exploits becoming too expensive to purchase and findingnew vulnerabilities becoming more complicated with more secure systems, some malicious actors — inthis case, TeamTNT actors — instead look for misconfigurations or improper implementations of settingsas an entry point into their target system.11 | Tracking the Activities of TeamTNT: A Closer Look at a Cloud-Focused Malicious Actor GroupToward the end of 2020, TeamTNT started a campaign targeting customer instances running on AmazonWeb Services (AWS).11 In this scenario, if TeamTNT was able to compromise and access an instance,the group would be able to access any credentials available via the instance’s metadata service. It isimportant to note that the metadata server can be queried only from inside an instance since the IPaddress is a link-local address. As containers and misconfigured services were the previous targets ofTeamTNT, the group coincidentally had its malware running on a couple of hundred customer instances.Figure 12. Searching for exploits and misconfigurations in a target systemWhile TeamTNT’s infection routines vary depending on the campaign, a typical attack pattern involves thegroup’s scanner obtaining a list of targets (for example, IP addresses), which it then scans for securityweaknesses and misconfigurations, such as unsecured Redis instances, vulnerable internet-of-things(IoT) devices, exposed Docker APIs, leaked credentials, and devices accessible via Secure Shell (SSH).12 | Tracking the Activities of TeamTNT: A Closer Look at a Cloud-Focused Malicious Actor GroupScannerList of targets(e.g., IP addresses)Scan resultsExploitable securityPayload deliveryweaknessExploitablesecurity weaknessVictimFigure 13. A typical infection chain used by TeamTNTIf TeamTNT finds a security issue from the obtained scan results, the group starts delivering its payloads tovictims. If able to be run on compromised hosts, the group’s typical payloads include credential stealers,local network scanners, reverse/bind shells, cryptocurrency miners, and even IRC bots.For an enterprise, the impact of a successful TeamTNT attack could be particularly devastating. In a latersection, we discuss the monetary impact of a cryptocurrency miner payload. But that is just one part ofthe story: Beyond what an organization or an individual could lose monetarily, attacks could also disruptwhole systems through resource hijacking, leading to denial of service and other interruptions to theoperation.Perhaps even more concerning for an organization is the theft of cloud credentials, which, depending onthe permissions associated with them, could allow a malicious actor to access and even gain control overparts of the IT infrastructure. From there, the actor could perform a number of malicious activities, suchas shutting down systems, accessing confidential data, creating backdoors to gain permanent access tothe system, and, of course, installing cryptocurrency miners and other malware.13 | Tracking the Activities of TeamTNT: A Closer Look at a Cloud-Focused Malicious Actor GroupCredential Theft TechniquesOne of TeamTNT’s primary goals with its activities is the theft of an organization’s credentials. This could beparticularly damaging, as the group could use the credentials, depending on the permissions associatedwith them, to gain access to other IT systems in order to infect more machines and deploy additionalcryptocurrency miners.In this section, we describe a few of the techniques the group uses to steal credentials.SSH Credential TheftA behavior of TeamTNT we have often observed is the theft of local credentials and the creation of localusers while ensuring that the selected user is configured to be reachable over SSH. This is done to createa method of returning to the system after the infection. In many cases, the attackers deploy their ownSSH public keys.Figure 14. An example of code used by TeamTNT to search for compromised systems fromwhich the group could steal SSH credentialsAWS Credential TheftBeginning in the last quarter of 2020, many of the samples we found featured functions designed tosearch an infected system for AWS credentials. Initially, these samples had only bare-bones features,searching for the credentials file under the root user home folder. But the group soon released a newervariant that expanded the search to other users, with the end goal of gaining access to any credentialsplaced by customers in ~/.aws/credentials.1214 | Tracking the Activities of TeamTNT: A Closer Look at a Cloud-Focused Malicious Actor GroupThe newer versions of the malware now search multiple locations and check environment variables wherecustomers might have placed AWS credentials. The primary targets of these functions are users who usethe AWS command-line interface tool or AWS frameworks that allow saving of authorization informationon the user’s machine — in either plain-text files or plain-text variables.Docker API Credential TheftIn January 2021, we acquired via a container honeypot a sample that showed an interesting behavior: Itsearches compromised systems not only for SSH and AWS credentials but also for Docker API credentials.Any credential files that the malware finds are uploaded to a command-and-control (C&C) server.Figure 15. An example of code used by TeamTNT to search for compromised systems fromwhich the group could steal Docker API credentialsDocker users who wish to manage the service remotely can customize the API with their desired settings— from no security whatsoever to cryptography and credential requirements. While data from Shodanshows that the number of unsecure Docker APIs have been decreasing, malicious actors are alsoseemingly adapting to the times by customizing their malware further.Advanced Credential HarvestingIn 2021, we discovered a TeamTNT campaign with extended credential harvesting capabilities targetingcustomers of multiple cloud services and other services that potential victims might be using. Theseinclude AWS, Cloudflare, Google Cloud, Git, SMB services, FTP, and other services where credentialsmight be present.1315 | Tracking the Activities of TeamTNT: A Closer Look at a Cloud-Focused Malicious Actor GroupBackdoorsAs TeamTNT continuously develops and tests its payloads, we have seen the group deploy multiplebackdoors, including two open-source remote shells.14One is named tshd (tiny shell daemon). Using keywords from the reversed binary, we were able to track itback to the open-source GitHub project. The other backdoor is inspired by Q-shell, a remote shell usingBlowfish encryption for transmitted data. However, the dominant payload is the adopted IRC bot wedescribe in the later section on TeamTNT’s IRC bot.Figure 16. Examples of the backdoors used by TeamTNT16 | Tracking the Activities of TeamTNT: A Closer Look at a Cloud-Focused Malicious Actor GroupDiamorphine RootkitAnother trend we observed in 2020 is the integration of rootkits into Linux-based threats for persistenceand stealth.15 Stealth, in particular, is a crucial factor for cryptocurrency mining activities since, withoutany limitations in place, the mining process will quickly raise red flags as the CPU utilization spikes to100%. Even if this anomalous behavior is not spotted by an administrator, it will likely trigger warnings inthe cloud provider’s system, which will then send a notification to the user. To get around this, malwareauthors have introduced new features to hide the process from administrators and system tools.TeamTNT is no exception. The group uses a kernel-mode open-source rootkit called Diamorphine,16 whichcreates function hooks for the following system calls:• getdents/getdents64: This hook allows hiding file system entries from user-mode applications. Theactual process hiding is implemented in this hook as the Unix uses the /proc pseudo-file system asan interface to kernel process structures.• kill: This hook implements the main functionality of the rootkit, which is dependent on the signal sentto the process based on the following:º The signal SIGINVIS = 31 flips the process custom PF_INVISIBLE flag to the task associated withthe specified process ID (pid).if ((task = find_task(pid)) == NULL)return -ESRCH;task->flags ^= PF_INVISIBLE;break;º The signal SIGSUPER = 64 obtains root privileges by committing new credentials with uids = 0.º The signal SIGMODINVIS = 63 hides/reveals the presence of the kernel module.17 | Tracking the Activities of TeamTNT: A Closer Look at a Cloud-Focused Malicious Actor GroupDiamorphine is used for hiding the cryptocurrency mining process in which, in this context, the kernelmodule itself is hidden by default as the hide function is called during the module initialization phase.Figure 17. The Diamorphine module initialization phaseThe following discussion demonstrates the described behavior of Diamorphine.After the cryptocurrency process using XMRig is started, the signal SIGINVIS is sent to the mining process.Figure 18. The XMRig processThis is done by executing the kill utility with the argument SIGINVIS and the target process ID. The utilitycalls linux syscall, which is then intercepted by Diamorphine, rendering the process invisible to user-modeapplications.Figure 19. Sending a SIGINVIS signal to the Diamorphine rootkit, effectively hidingthe cryptocurrency mining processIf we compare the output of the top utility before the hiding signal is sent to the rootkit module and afterthe signal is sent, we can observe that the XMRig process (pid = 12254) is causing the CPU usage tospike.1718 | Tracking the Activities of TeamTNT: A Closer Look at a Cloud-Focused Malicious Actor GroupFigure 20. The top output before the signal is sentHowever, after the hiding signal is sent, the process is not seen by the utility and remains undetected.At this point, we should emphasize that a root user permission with CAP_SYS_ADMIN capability isrequired to install the kernel module. As malware authors target container environments, there is thedanger of privileged containers that allow users to obtain full host root with all capabilities and thus canalso be used to install kernel mode rootkits such as Diamorphine.Malware authors have also optimized the usability of XMRig for cloud environments by decreasing themaximum percentage of CPU usage in order to remain undetected and not trigger necessary alarms. Itshould be noted that running unwanted cryptocurrency miners in public clouds will lead to additionalcosts.19 | Tracking the Activities of TeamTNT: A Closer Look at a Cloud-Focused Malicious Actor GroupNotable Payload FunctionalitiesTeamTNT deploys a number of payloads in its campaigns, including cryptocurrency miners, credentialstealers, and even IRC bots (which we discuss in a later section). Many of these payloads have interestingfunctionalities that are designed to make them stealthier and more efficient.Pushing Out the CompetitionWhen a security weakness in an internet-connected device is present, there is a high chance that multipleattackers will target it for their own purposes. Given that some malware, such as cryptocurrency miners,often makes heavy use of hardware resources, malicious actors often find it necessary to ensure that noother malicious actors are running their own payloads, since this will result in resources being split amongthe payloads.TeamTNT is no different, as the group has implemented its own ever-evolving functions for pushing outcompeting cryptocurrency miners. An example of this is mentioned in a previous section; in that example,TeamTNT pushes out traces of Kinsing in a target’s system.Figure 21. A function showing how a cryptocurrency miner from TeamTNT pushes out the competition20 | Tracking the Activities of TeamTNT: A Closer Look at a Cloud-Focused Malicious Actor GroupFigure 22. Neutralizing traces of Kinsing in the target’s systemPersistence MechanismsThe second stage of a TeamTNT payload is typically designed for persistence, where it will be executedagain even after the affected device is restarted. This is typically accomplished via a cryptocurrency minersystem service.Figure 23. Creating persistence by deploying system services21 | Tracking the Activities of TeamTNT: A Closer Look at a Cloud-Focused Malicious Actor GroupCustom User AgentEarly versions of TeamTNT’s payloads used downloads via wget18 and curl19 without any additionalparameters. Over time, the group introduced a custom user agent20 HTTP header into its shell scripts,allowing them to have special handling routines on the server side for providing better statistics or limitingpayload downloads for specified agents. The user agent header varies across TeamTNT’s campaigns.Figure 24. An example of TeamTNT’s custom user agent usageLockdownThe lockdown function first removes an immutability flag that might have been set on the binaries —which are used for shutting down or rebooting the targeted machine — for protective reasons. The scriptthen removes any execution permission from the binaries and finally sets the immutability property again,making sure that the binaries cannot be replaced, be modified, or have their permissions changed.Altering the properties is done using chattr, which is clever since this command is not well known.Figure 25. The lockdown function in action22 | Tracking the Activities of TeamTNT: A Closer Look at a Cloud-Focused Malicious Actor GroupAccount CreationIn some campaigns, TeamTNT creates a new user in the affected system in order to gain future access.The group also includes its own SSH public key to be able to log in using its private key via the key pairauthentication system.21Figure 26. Creating a new system accountMasquerading the PayloadThe initial payloads deployed by TeamTNT were distributed without any obfuscation, encryption, orpacking, with the deploying shell scripts being written in plain text. Eventually, the group evolved itspayloads by replacing the plain-text shell scripts with ones that had Base64 encoding.In the case of ELF binaries, TeamTNT started by using packers such as the popular multiplatformexecutable packer UPX (Ultimate Packer for Executables).22 The next version added another layer ontop of the packed UPX executable, a Go-compiled binary with a payload, encrypted via AES (AdvancedEncryption Standard), with a hard-coded key and initialization vector. The packer used is based on theEzuri packer, a freely available project on GitHub.2323 | Tracking the Activities of TeamTNT: A Closer Look at a Cloud-Focused Malicious Actor GroupFigure 27. Using the Ezuri packer in one of TeamTNT’s campaigns24 | Tracking the Activities of TeamTNT: A Closer Look at a Cloud-Focused Malicious Actor GroupIRC Bot EvolutionChatbots provide a number of specific functions. For example, they can be used for game notifications,build notifications, or status messages in corporate environments. But they can also be used for maliciouspurposes. Together with open protocol specifications and open-source software, chatbots can be usedto deploy communication channels for malicious actors. An IRC server can act as the C&C module ofmalware, sending commands to connected bots (infected clients). An example of a malicious IRC bot isthe notorious Dorkbot, which exfiltrates credentials in an infected system via IRC messages.24One of the first known pieces of malware targeting IoT devices was Hydra, which was released in 2008.It used IRC botnets — that is, networks of IRC bots — in its DDoS attacks.25 Two years later, Kaiten (akaTsunami) extended bot capabilities by adding several functionalities, such as a bot-killing feature thatremoves traces of previous infections from an infected router.26Figure 28. The help function showing available commands from the leaked Kaiten source codeTeamTNT also has its own IRC bot in its attacks. Based on the nonstripped information left by the compileras well as the bot’s functions, we can surmise that the initial version of the IRC bot used by the group isbased on Kaiten.25 | Tracking the Activities of TeamTNT: A Closer Look at a Cloud-Focused Malicious Actor GroupFigure 29. The nonstripped kaiten.c compile information indicating that the initial versionof TeamTNT’s IRC bot is based on KaitenAs the source code is publicly available on GitHub, it is no surprise that malicious actors are already usingthis software.Figure 30. TeamTNT’s IRC bot decompiledLater versions of the bot are based on an evolved Kaiten variant called Ziggy StarTux, which introducesnew commands and a simple transposition cipher to encrypt “confidential” strings such as the serveraddress.Figure 31. A snippet of the Ziggy StarTux source code with new commands addedIt is likely that the introduction of a new version of the bot was a result of the group’s looking to expandthe functionalities of the base version.26 | Tracking the Activities of TeamTNT: A Closer Look at a Cloud-Focused Malicious Actor GroupAs if to stamp its mark on the tool, TeamTNT started to place its own signatures on the IRC bot, in additionto its modifications.Figure 32. A version of TeamTNT’s IRC bot that includes a custom signatureThe group also implemented its own commands, which are used to download the source and compile thedelivery scheme on a victim machine.Figure 33. New commands added by TeamTNT to its IRC botShell scriptVariant ABinarydownloadVariant BSource code compilationVariant CBase64 encodingFigure 34. TeamTNT’s IRC bot deployment27 | Tracking the Activities of TeamTNT: A Closer Look at a Cloud-Focused Malicious Actor GroupImpact of Cryptocurrency Mining ActivitiesCryptocurrencies have changed how malware monetization works. One example of this is the use ofcryptocurrencies for ransomware payments, which lends transactions both anonymity and the potentialfor easy laundering.27 Another type of cryptocurrency monetization is cryptocurrency mining, which,although not malicious by itself, is often brought upon unsuspecting users by malicious actors.Most devices often do not provide enough computational power for effective cryptocurrency mining.Thus, to compensate for this lack, malicious actors often either target more powerful and efficient devicesor simply use a sizeable botnet in a quantity-over-quality scenario. In any case, cryptocurrency miningdemands plenty in terms of hardware, electricity, and other associated resources. One of the frequenttargets of cryptocurrency mining attacks is Linux systems with open and unsecure services and APIs,such as container engines that provide benefits to organizations in the development and environmentalstability of deployed applications.With the global market capitalization of cryptocurrencies at US$1.63 trillion at the time of this writing (June2021),28 cryptocurrency mining is a lucrative opportunity for monetization. During our investigation ofTeamTNT, we found several wallet IDs connected to the same cryptocurrency pool, gulf[.]moneroocean[.]stream. Using the pool statistics of the wallets, we discovered that the group had mined more than 17.86Monero coins. Because of the high volatility of the exchange rate over time, we could only estimate the USdollar value to range from US$1,100 to US$3,800 within the time frame from March 2020 to March 2021.2928 | Tracking the Activities of TeamTNT: A Closer Look at a Cloud-Focused Malicious Actor GroupFigure 35. An example of TeamTNT’s active mining pool usage from infected nodesWhile 17.86 Monero coins might not look high, the real cost of mining such an amount might paint adifferent picture. To estimate the corresponding cost, we did an experiment using a 3.0-gigahertz, 6-coreIntel i5-8500B Coffee Lake CPU with 8 gigabytes of RAM, which is not a high-end platform and has noGPU that can enhance cryptocurrency mining. Our model hardware was able to produce 1,000 hashesper second on average over a 24-hour period. This performance is above average compared to thenumber of hashes per second from infected nodes shown in Figure 35.Our hardware was able to mine 0.0005 Monero coins within 24 hours. To mine 17.86 Monero coins, wewould need approximately 35,600 infected devices with the same specifications mining for 24 hours. If weassume that the power consumption of the CPU is 100 watts, then the electrical energy needed for thatwould be 85.44 megawatt-hours (MWh). If we use a conversion of 1 MWh equaling US$140, we wouldget an electricity bill of US$11,961.60 — not even taking into account the damage caused by operatingat 100% load.If we have to pay the electricity bill for the mining activities, we would lose over US$9,000 in our modelcase. It should be noted that the real amount will be different as there are many variables to consider.For instance, the price of electricity varies by geographic location, and not every machine has the sameperformance or power efficiency. Still, the losses for users who have their machines used for miningactivities will be considerable.29 | Tracking the Activities of TeamTNT: A Closer Look at a Cloud-Focused Malicious Actor GroupConclusionMalware monetization remains a strong motivator for malicious actors. With organizations focusing oncloud technologies amid the Covid-19 pandemic, it is not surprising to see malicious actor groups shiftingtheir operations to the cloud as it becomes an increasingly lucrative target. Cryptocurrency mining remainspopular as a monetization method because of its stealth and heavy automation, allowing malicious actorsto deploy their malware with relative ease. The availability of open-source software like Diamorphine alsoprovides malicious actor groups with additional tools for their arsenal.TeamTNT itself has been shifting its focus to cloud technologies. In its recent campaigns, the group hasbeen actively searching for cloud credentials, exploiting server misconfigurations, and competing in thecryptocurrency mining sphere. Given what we have seen from the group in a relatively short time, we canexpect TeamTNT to continuously evolve its tools and techniques.30 | Tracking the Activities of TeamTNT: A Closer Look at a Cloud-Focused Malicious Actor GroupRecommendationsWe have been seeing an increasing focus on cloud-based attacks and campaigns among groupssuch as TeamTNT, which are looking to take advantage of organizations shifting to cloud services.Organizations should therefore be especially vigilant with their cloud implementations, paying heedto the shared responsibility model, in which the CSPs are responsible for securing the infrastructurewhile the organizations are responsible for handling the cloud assets, such as data, applications, andconfigurations.30We recommend that security personnel and IT administrators implement best practices such as thefollowing to minimize the chance of a successful attack from a cloud-focused group like TeamTNT:• Apply the principle of least privilege, in which users are granted access only to the parts of the systemthey need, to reduce the attack surface and help contain damage even in the event of a successfulattack.31• For organizations that have SSH enabled, implement private keys authentication on the client side toenhance access control security.• Update systems and devices regularly to reduce the probability that vulnerabilities are exploited.32Cloud-focused security solutions such as the Trend Micro Cloud One™ security services platform33 helpsprotect cloud-native systems by providing protection for continuous-integration and continuous-delivery(CI/CD) pipelines and applications. The platform includes:• Workload Security: runtime protection for workloads• Container Security: automated container image and registry scanning• File Storage Security: security for cloud files and object storage services• Network Security: cloud network layer for intrusion prevention system (IPS) security• Application Security: security for serverless functions, APIs, and applications• Conformity: real-time security for cloud infrastructure — secure, optimize, comply31 | Tracking the Activities of TeamTNT: A Closer Look at a Cloud-Focused Malicious Actor GroupAppendixMITRE ATT&CK Tactics and TechniquesReconnaissanceActive scanningResource facing applicationCommand and scripting interpreterAccount manipulationGather victim host informationCompromise infrastructureValid accountsInter-process communicationGather victim network informationEstablish accountsTrusted relationshipNative APIScheduled task/jobShared modulesSoftware deployment toolsSystem servicesDefense evasionCredential accessDiscoveryBoot or logon autostart executionCompromise client software binaryImplant container Decode files or informationImpair defensesRootkitSteal application access tokenAccount discoveryUnsecured credentialsCloud infrastructure discoveryFile and directory discoveryLateral tool transferUse alternate scanningProcess discoveryRemote system discoverySystem service discovery32 | Tracking the Activities of TeamTNT: A Closer Look at a Cloud-Focused Malicious Actor GroupCollectionCommand andcontrolExfiltrationImpactArchive collected exfiltrationIngress tool transferMultistage channelsExfiltration over C&C channelExfiltration over web serviceAutomated collectionData from local repositoryEndpoint denial of serviceResource hijackingService stopSystem shutdown/ SH.AWSKEYGRAB.A/16.723.00Backdoor.Linux.MALXMR. BreakOutTheBox.A/16.703.00HackTool.Linux. BreakOutTheBox.A/16.703.00Backdoor.Linux.TSUNAMI. Accessed on May 31, 2021, at url for-resources.html.3 RA Markus v. Hohenhau. (Dec. 30, 2011). fachanwalt-it.blogspot.com. “Stellenanzeigen - Betrug / Geldwäsche - SocialEngineering.” Accessed on May 24, 2021, at url Augusto Remillano II and Jemimah Molina. (May 6, 2020). Trend Micro. “Coinminer, DDoS Bot Attack Docker Daemon Ports.” Accessed on May 24, 2021, at url bot-attack-docker-daemon-ports.5 David Fiser. (Dec. 18, 2020). Trend Micro. “TeamTNT Now Deploying DDoS-Capable IRC Bot TNTbotinger.” Accessed on May 24, 2021, at url Alfredo Oliveira. (Jan. 8, 2021). Trend Micro. “Malicious Shell Script Steals Cloud Credentials.” Accessed on May 24, 2021, aturl Horejsi and David Fiser. (Nov. 24, 2020). Trend Micro. “Analysis of Kinsing Malware’s Use of Rootkit.” Accessed on May 24, 2021, at url Trend Micro. (April 7, 2020). Trend Micro. “Misconfigured Docker Daemon API Ports Attacked for Kinsing Malware Campaign.”Accessed on May 24, 2021, at url docker-daemon-api-ports-attacked-for-kinsing-malware-campaign.9 bboreham. (Jan. 30, 2021). GitHub. “weaveworks/scope.” Accessed on May 24, 2021 at url Kishore Angrishi. (Feb. 13, 2017). arXiv. “Turning Internet of Things (IoT) into Internet of Vulnerabilities (IoV): IoT Botnets.”Accessed on May 24, 2021, at url David Fiser and Alfredo Oliveira. (March 9, 2021). Trend Micro. “TeamTNT Continues Attack on the Cloud, Targets AWSCredentials.” Accessed on May 24, 2021, at url the-cloud--targets-aws-credentials.html.12 Amazon Web Services. (n.d.). Amazon Web Services. “Configuration and credential file settings.” Accessed on May 24, 2021at url David Fiser and Alfredo Oliveira. (May 18, 2021). Trend Micro. “TeamTNT’s Extended Credential Harvester Targets CloudServices, Other Software.” Accessed on May 31, 2021, at url extended-credential-harvester-targets-cloud-services-other-software.html.14 David Fiser. (Dec. 18, 2020). Trend Micro. “TeamTNT Now Deploying DDoS-Capable IRC Bot TNTbotinger.” Accessed on May 24, 2021, at url Jaromir Horejsi and David Fiser. (Nov. 24, 2020). Trend Micro. “Analysis of Kinsing Malware’s Use of Rootkit.” Accessed onMay 24, 2021, at url m0nad. (May 13, 2021). GitHub. “Diamorphine.” Accessed on May 24, 2021, at url Michael Kerrisk. (n.d). man7.org. “top(1) — Linux manual page.” Accessed on May 24, 2021, at url GNU Operating System. (n.d.). GNU Operating System. “GNU Wget.” Accessed on May 24, 2021, at url curl. (n.d.). curl. “command line tool and library for transferring data with URLs (since 1998).” Accessed on May 24, 2021, aturl Mozilla. (n.d.). MDN Web Docs. “User-Agent.” Accessed on May 24, 2021, at url | Tracking the Activities of TeamTNT: A Closer Look at a Cloud-Focused Malicious Actor Group21 SSH Academy. (n.d.). SSH Academy. “Key Pair - Public and Private.” Accessed on May 31, 2021, at url#key-pair---public-and-private.22 UPX. (n.d.). UPX. “UPX.” Accessed on May 24, 2021, at url guitmz. (March 23, 2021). GitHub. “ezury.” Accessed on May 24, 2021, at url Oscar Celestino Angelo Abendan ll. (Nov. 5, 2012). Trend Micro. “DORKBOT Resurfaces Via Skype.” Accessed on May 24,2021, at url Patrick Macgregor. (2018). insecurety.net. “Hydra IRC bot, the 25 minute overview of the kit.” Accessed on May 24, 2021, aturl Stephen Hilt, Fernando Mercês, Mayra Rosario, and David Sancho. (July 7, 2021). Trend Micro. “Worm War: The Botnet Battlefor IoT Territory.” Accessed on May 24, 2021, at url botnet-battle-for-iot-territory.pdf.27 Simon Usborne. (May 15, 2017). The Guardian. “Digital gold: why hackers love Bitcoin.” Accessed on May 31, 2021, aturl CoinMarketCap. (n.d.). CoinMarketCap. “Today’s Cryptocurrency Prices by Market Cap.” Accessed on June 2, 2021, aturl Cointelegraph. (n.d.). Cointelegraph. “Monero Price Index.” Accessed on June 2, 2021, at url Mark Nunnikhoven. (Oct. 22, 2019). Trend Micro. “The Shared Responsibility Model.” Accessed on May 24, 2021 at url Magno Logan. (May 27, 2020). Trend Micro. “Securing the 4 Cs of Cloud-Native Systems: Cloud, Cluster, Container, andCode.” Accessed on May 24, 2021, at url the-4-cs-of-cloud-native-systems-cloud-cluster-container-and-code.32 Trend Micro. (Oct. 25, 2018). Trend Micro. “Virtual Patching: Patch Those Vulnerabilities before They Can Be Exploited.”Accessed on May 24, 2021, at url patching-patch-those-vulnerabilities-before-they-can-be-exploited.33 Trend Micro. (n.d.). Trend Micro. “Security for Cloud Migration.” Accessed on May 24, 2021, at url | Tracking the Activities of TeamTNT: A Closer Look at a Cloud-Focused Malicious Actor GroupTREND MICROTM RESEARCHTrend Micro, a global leader in cybersecurity, helps to make the world safe for exchanging digital information.Trend Micro Research is powered by experts who are passionate about discovering new threats, sharing key insights, and supporting efforts to stop cybercriminals. Our global team helps identify millions of threats daily, leads the industry in vulnerability disclosures, and publishes innovative research on new threat techniques. We continually work to anticipate new threats and deliver thought- provoking research.www.trendmicro.com40 | Tracking the Activities of TeamTNT: A Closer Look at a Cloud-Focused Malicious Actor Group 