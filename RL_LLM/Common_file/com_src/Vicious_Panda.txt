3/16/2020Vicious Panda: The COVID Campaign - Check Point ResearchVicious Panda: The COVID Campaign research.checkpoint.com/2020/vicious-panda-the-covid-campaignMarch 12, 2020March 12, 2020 Introduction Check Point Research discovered a new campaign against the Mongolian public sector, which takes advantage of the current Coronavirus scare, in order to deliver a previously unknown malware implant to the target.A closer look at this campaign allowed us to tie it to other operations which were carried out by the same anonymous group, dating back to at least 2016. Over the years, these operations targeted different sectors in multiple countries, such as Ukraine, Russia, and Belarus.In this report, we will provide a full analysis of the TTPs utilized throughout this campaign, the infrastructure, and the new tools we uncovered during our research, of what we believe to be a Chinese-based threat actor. Lure Documents The investigation started when we identiﬁed two suspicious RTF documents sent to the Mongolian public sector. The documents were written in the Mongolian language, with one of them allegedly from the Mongolian Ministry of Foreign Affairs:url Panda: The COVID Campaign - Check Point ResearchDocument 1: Information about the prevalence of new Coronavirus infectionsDocument 2: Purchases for buildings in documentary projectsThese RTF ﬁles were weaponized using version 7.x of a tool named RoyalRoad (aka 8.t ).This tool, which is commonly used by various Chinese threat actors, allows the attacker to create customized documents with embedded objects that exploit the Equation Editor vulnerabilities of Microsoft Word.url Panda: The COVID Campaign - Check Point ResearchInfection Chain After the victim opens the specially crafted RTF document, and the Microsoft Word vulnerability is exploited, a ﬁle named intel.wll is dropped into the Word startup folder: %APPDATA%\Microsoft\Word\STARTUP .This persistence technique is often used by newer versions of the so-called RoyalRoad. Every time that Microsoft Word application is launched, all the DLL ﬁles with a WLL extension in the Word Startup folder would launch as well, triggering the infection chain we describe below:Infection Chain DiagramThis not only serves as a persistence technique, but also prevents the infection chain from fully “detonating” if run inside a sandbox, as a relaunch of Microsoft Word is required for the full execution of the malware.After it’s loaded, the malicious intel.wll DLL proceeds to download and decrypt the next stage of the infection chain, from one of the threat actor’s servers: 95.179.242[.]6 .The next stage downloaded is also a DLL ﬁle, and it serves as the main loader of the malware framework developed by the attackers. It is executed using Rundll32 , and it communicates with another one of the threat actor’s C&C servers ( 95.179.242[.]27 ) to receive additional functionality.The threat actor operates the C&C server in a limited daily window, going online only for a few hours each day, making it harder to analyze and gain access to the advanced parts of the infection chain.At the ﬁnal stage of the infection chain, after the appropriate command is received, the malicious loader downloads and decrypts a RAT module, also in the form of a DLL ﬁle, and loads it into memory. This plug-in like architecture might hint at the existence of other modules, in addition to the payload we received.The RAT module appears to be a custom and unique malware, though it also includes some rather common core capabilities, listed below:url Panda: The COVID Campaign - Check Point ResearchTake a screenshot List ﬁles and directories Create and delete directories Move and delete ﬁles Download a ﬁle Execute a new process Get a list of all servicesOpen Window At the beginning of our research, one of the attacker’s servers, which served the next stage malware, had directory listing enabled for a limited time. This allowed us to download all hosted ﬁles, as well as to gain some insight into the operation timeline and the working hours of the attackers.Open directory at 95.179.242[.]6Even though they were available for download, all the ﬁles on the server came encrypted.Luckily, by utilizing the same encryption scheme seen in our infection chain, we were able to decrypt most of the ﬁles stored on the server.1. key ="VkvX7CK7X7*t$x&hssLR6fOyFSaKrFJKx&@#AK*Fnukj@J9J40f1mKaN$nsCNKPe"2. def decrypt(enc,offset): 3. decrypted = "" 4. for i in range(len(enc)): 5. decrypted += chr((ord(enc[i]) ^ ord(key[(i + offset) & 0x3f]))) 6. return decryptedDecryption scheme derived from “intel.wll”url Panda: The COVID Campaign - Check Point ResearchThe dozen of ﬁles that we were able to decrypt can be divided into four main clusters of malware loader families. Their embedded internal names and core functionality are described below:http_dl‐ .dllThe ﬁrst stage loader described above. Decrypts the C&C address, then downloads and decrypts the next stage DLL, and executes it via Rundl‐ l32 . Functions as downloader and decryptor for the .rar ﬁles stored on the at‐ tackers’ server. Reads an access.txt ﬁle from the server, decrypts it and splits the result into 3 parts: 1) The name of the next stage to download. 2) The next stage export function to call. 3) The decryption key for the next stage. This variant serves as loader and decryptor for next stage payload. The payload is encrypted in .sect section.The second stage loader, fully described below. Loads additional DLL plu‐ gins. A similar version of this payload, called minisdllpublog.dll, contains some additional debug printing capabilities.Payload types found on the server Connection to other samples After gaining access to the additional decrypted ﬁles, we were able to hunt for similar samples.Searching for similar ﬁles by the internal names ( http_dll , Rundll32Templete and minisdllpub ), unique exported functions ( Engdic , WSSet and MSCheck ) and code similarities (decryption methods, communication patterns, etc.), allowed us to ﬁnd more samples related to the attacker:5560644578a6bcf1ba79f380ca8bd‐ l.dllurl Panda: The COVID Campaign - Check Point Researchcf5fb4017483cdf1d5eb659e‐ an RTF document which appears to be targeting entities in the Russian Federation, back in late Analyzing the newly discovered samples introduced us to a larger part of the infrastructure utilized by the threat actor, and a common TTP: All the C&C servers were hosted on Vultr servers and the domains were registered via the GoDaddy registrar.url Panda: The COVID Campaign - Check Point ResearchInfrastructure overviewAs we analyzed this campaign, in addition to the infrastructure used, we also noticed an interesting behavior by the attackersAt a certain point, the C&C server 95.179.242[.]6 stopped serving the open directory listing. A few days later dw.adyboh[.]com became an open directory:Open directory listing at dw.adyboh[.]comurl Panda: The COVID Campaign - Check Point ResearchThis might indicate that the attackers are enabling directory listing, when one of their payload delivery servers is in active use. Attribution From the malicious document perspective, we believe that the naming scheme for intel.wll – which is dropped by version 7.x of RoyalRoad is not enough to make a clear cut attribution, as we observed the same name used by various threat actors dropping different malware families such as Bisonal and Poison Ivy .From the payload perspective, on the other hand, once we found the additional related samples mentioned in the Hunting section above, we were able to connect it to a known threat group. In the NWCWorkstation.dll sample mentioned above, we observed a unique string as part of the logging functionality: “V09SS0lO”. This led us to an article from 2017 by Palo Alto Networks, titles Threat Actors Target Government of Belarus, which describes an attack that utilizes a RAT named BYEBY .The article itself also connects to a previous article dating back to 2016, where the same tools were used in an attack targeting the Mongolian government. The article also explores the connections between these attacks and previous attacks related to the Enfal Trojan.By comparing the IOCs from the 2017 attack to our campaign we observed several similarities: Infrastructure Similarities The servers from the 2017 publication were set on the same infrastructure as all the other samples found during our investigation, and utilize Vultr and GoDaddy services. Code Similarities When analyzing one of the ﬁles from the open directory named wincore.dll . By investigating this dropped ﬁle, we were able to make several correlations to the BYEBY sample from 2017:1. String similarity:“BYEBY” stringsurl Panda: The COVID Campaign - Check Point Research“wincore.dll” strings2. Function similarity – Important functions in both BYEBY and wincore.dll have almostthe same implementation. One such function is the payloads’ main thread function.Malware implementation similarities3. Global Call-Graph and X-Ref Graph – Even though some obfuscation exists in bothsamples, we were able to verify that they have similar call and reference graphs, meaning that the core functionality of the executables is the same.url Panda: The COVID Campaign - Check Point ResearchPayload – In Depth Analysis To recap, the second stage payload in the attack chain, is an encrypted DLL ﬁle named minisdllpub.dll . The DLL, downloaded from 95.179.242[.]6 , is a downloader for an additional payload. In the following section, we go over its implementation and highlight the characteristics which are unique to this payload.Minisdllpub.dll begins by creating a mutex with the name Afx:DV3ControlHost . This is a unique indicator that can later be used to hunt for more samples in the wild. It then deﬁnes a structure of size 0x5f8 to store system and environment information such as the name of the running computer, IP addresses, the username, and OS Version. Next, another structure of size 0x3FC is created, this time to store pointers to loaded DLLs and API functions, as well as the command and control IP address ( 95.179.242[.]27 ) and port ( 443 ).After setting up these structures, the ﬂow continues and a new thread is created. First, it fetches several lists of API functions, and dynamically loads them. As can be seen in the following image, each list is comprised of the name of a library followed by a sequence of API functions to load from this library. Pointers to these functions are then added to the previous structure which are used to dynamically invoke them when needed.Comma-separated lists of API functions, prepended with the library nameThe second stage payload then sets up HTTP or HTTPS communication, depends on several checks, and starts communicating with its remote control in new threads. When the server replies, it sends XOR encoded DLL to the malware, with the key 0x51 . Minisdllpub.dll then decodes the given payload and dynamically loads the new PE to memory.When loaded, it searches for an export function with the name e. The malware then keeps listening to commands from the server, and when those are received, it passes them to the "e" function of the newly loaded payload. By doing so, the second-stage is operating as a middle- man between the C&C and the ﬁnal payload – a remote access tool.url Panda: The COVID Campaign - Check Point ResearchThe malware is searching for the export function “e”, in order to invoke itAt this point, we have a unique layout of modules loaded on the victim’s computer. First, is the Minisdllpub.dll that was initially loaded using Rundll32 by http_dll.dll ( intel.wll ) when a Microsoft Ofﬁce application was executed. Next, we have the RAT payload itself which receives its control commands not directly from the C&C, but through Minisdllpub.dll that acts as a mediator.Loader execution ﬂowInterestingly, in addition to the commands to execute, Minisdllpub.dll also passes several structures to the ﬁnal payload. The structures which were previously built and ﬁlled, are now used by the RAT to dynamically invoke API functions and deliver data to the C&C server. This unique approach of re-using function pointers that were loaded in the previous module makes the analyzing the RAT hardly possible without having the previous stage as well.url Panda: The COVID Campaign - Check Point ResearchThe supported functionalities of the ﬁnal payload, as well as the respective commands it receives and sends, are described in the table in Appendix A. Conclusion In this campaign, we observed the latest iteration of what seems to be a long-running Chinese- based operation against a variety of governments and organizations worldwide. This speciﬁc campaign leverages the COVID-19 pandemic to lure victims to trigger the infection chain.The attackers updated their toolset from documents with macros and older RTF exploits to the latest variation of the “RoyalRoad” RTF exploit-builder observed in the wild.The full intention of this Chinese APT group is still a mystery, but it is clear they are here to stay and will update their tools and do whatever it takes to attract new victims to their network.Check Point SandBlast Agent protects against this APT attack, and prevents it from the very ﬁrst steps.Appendix A: RAT Module – Supported CommandsCommand ID (Sent from C&C)Sub Com‐ C&C)DescriptionResponse ID (Sent from Bot)0x210x23 0x08Write a ﬁle to a speciﬁed path. Set the written ﬁle’s timestamp to the timestamp of the local kernel32.dll. Get contents of a ﬁle. List ﬁles in a directory. Execute command in a new thread. Execute a command. Create a directory of by a given path. Remove a directory in a given path. Move a ﬁle from a given path to a given directory. Delete a ﬁle in a given path. Move a ﬁle from a given path to a given directory. (Same as subcommand 0x02) Get a list of all the services. Execute a new process using WinExec.0x220x24 0x35url Panda: The COVID Campaign - Check Point Research0x090x0A 0x340x340x340x340x36Execute a new process. (Same as sub‐ command 0x08) Take a screenshot. Set registry key values. Download ﬁle from URL.Download ﬁle from URL. (Same as sub‐ command 0x16) Create Pipes and execute a new process.Create Pipes and execute a new process (same as 0x18). Copy the ﬁle of the current process with a “.t” extension and modify the registry.0x350x35 0x37Appendix B: Files on the serverInternal File Name http_dll.dllhttp_dll.dllppdown.dllppdown.dllRundl‐ img\0115\WRql7Xbin\0612wy3\KFuGrS-codbin\0612wy3\KFuGrSbin\0612wy3\KFuGrS-ppdimg\0115\CYMi0Y-bak d66b8img\0115\CYMi0Y img\0120\VIdALQ img\1224\AF9i1iurl Panda: The COVID Campaign - Check Point Researchminis‐ f34e2212d7a8f1b728bin\0612wy3\KFuGrS-ww bin\0617wy3\LX5sG1 bin\0612wy3\TTXk1U.rarDropped by bc6996491d8167a8e1e6Appendix C: Additional IOCsServers:95.179.242[.]6 95.179.242[.]27 199.247.25[.]102 95.179.210[.]61 95.179.156[.]97 dw.adyboh[.]com wy.adyboh[.]com feb.kkooppt[.]com compdate.my03[.]com jocoly.esvnpe[.]com bmy.hqoohoa[.]com bur.vueleslie[.]com wind.windmilldrops[.]com 