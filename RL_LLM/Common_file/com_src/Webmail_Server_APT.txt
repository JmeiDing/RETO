Lab AnalysisWebmail Server APT:A New Persistent AttackMethodology Targeting Microsoft Outlook Web Application (OWA)Written by: Yonatan Striem-Amit, CTO, Co-Founder Yoav Orot, Senior ResearcherA New Approach to APTThis document analyzes a real and unique APT technique detected by the Cybereasonplatform in one of our customer’s environment. The attack involved a malicious modulethat was loaded onto Microsoft Outlook Web Application (OWA), an internet-facing web-mail server, which enabled the attackers to record authentication credentials and beprovided with complete backdoor capabilities. By using this approach, the hackersmanaged to collect and retain ownership over a large set of credentials, allowing themto maintain persistent control over the organization's environment.IntroductionA Cybereason POC customer suspected that it had an infected server due to severalbehavioral abnormalities spotted by its security team. They reached out toCybereason and together we decided to deploy our platform across the customer’sentire environment of 19,000 endpoints.Discovering a Suspicious DLLWithin several hours, the Cybereason platform found a suspicious DLL loaded into theOutlook Web App (OWA) server (a webmail component of Microsoft Exchange Server),with several interesting characteristics. Although it had the same name as anotherbenign DLL, the suspicious DLL went unsigned and was loaded from a different2directory. Since OWA servers typically load only legitimately signed DLLs, theCybereason behavioral engine immediately elevated this event to a suspicion.Backdooring a world-accessible server in the Demilitarized ZoneContrary to other web servers that typically have only a web interface, OWA is unique: it isa critical internal infrastructure that also faces the Internet, making it an intermediarybetween the internal, allegedly protected DMZ, and the web. The customer was usingOWA to enable remote user access to Outlook. This conﬁguration of OWA created anideal attack platform because the server was exposed both internally and externally.Moreover, because OWA authentication is based on domain credentials, whoever gainsaccess to the OWA server becomes the owner of the entire organization’s domaincredentials. Later, we will see how the attacker extracted credentials from the OWAserver using their malicious module.Persistence, Hiding and LoadingThe hackers installed a backdoored malicious OWAAUTH.dll which was used by OWAas part of the authentication mechanism, and was responsible for authenticating usersagainst the Active Directory (A/D) server used in the environment. In addition, themalicious OWAAUTH.DLL also installed an ISAPI ﬁlter into the IIS server, and wasﬁltering HTTP requests.3This enabled the hackers to get all requests in cleartext after SSL/TLS decryption. Themalware replaced the OWAAUTH by installing an IIS ﬁlter in the registry, which enabled themalware to automatically load and persist on every subsequent server restart.The ﬁnal touch was the hackers choosing the .NET assembly cache. This folder was used to store locally compiled native binaries in order to accelerate the loading and executionof .NET applications. These locally compiled binaries were only used on the computer inwhich they were generated, and thus had no reputation or digital signatures. It is interestingto note that the hackers chose this folder exactly for that reason, in order to avoid human-driven inspection. The hackers attempted to fool the hunters into thinking that it was simplyanother locally generated ﬁle, as if they were Obi-Wan practicing a little Jedi magic,convincing the defender to think: these are not the ﬁles you’re looking for, move along.Hooking the Request HandlersOnce loaded, the DLL implemented an HTTP Module and registered two request handlingfunction callbacks on its initialization: • Application_BeginRequest() registered as BeginRequest - Not implemented • Application_EndRequest() registered as EndRequest - Called at the end of the requesthandling chain. Implements the main malware logic.At the end of each HTTP request handling in the OWA server, Application_EndRequest()was called, executing the malware backdoor main function.4Capturing OWA Authentication TokensThe hacker’s ﬁrst goal was to use the visibility they had gained into the OWA authenticationprocess to steal the passwords of users logging into OWA - namely everyone.While most security professionals understand the sensitivity of data in the A/D server, theOWA server serves as a focal point for the exact same sensitive data.Whenever Application_EndRequest() was called, it read the request variables using theRequest sub-object of the HttpApplication object. It then checked whether there were twovariables named “username” and “password”. These variables were passed in the requestquery URL whenever a user logged into the OWA service.If the function found the username and password, it recorded them together with atimestamp, the client host address, and the client user agent to an encrypted ﬁle namedlog.txt, stored in C:\.The encryption algorithm was DES, implemented by the DESCryptoServiceProvider class,with both a password and IV values of the ASCII string “12345678”. Following thisdiscovery, we wrote a decryption tool for this ﬁle, and found more than 11,000(!) user/password pairs. This treasure trove essentially gave the hackers complete access toevery identity and therefore every asset in the organization.5A Complete BackdoorIn order to get access to the usernames and passwords , and to ensure that the hackerscould gain more control over the environment, the malware also possessed covertbackdoor functionalities. The attacker used HTTP request query URL variables in order touse the backdoor functionality remotely.The malware was searching every incoming request for a special parameter, in our case“<CustomerName>XXX”. When the parameter was found, the backdoor functionalitywould parse the remainder of the parameters. Naturally, the fact that the hackerembedded the customer name in the parameters proves that this malware was tailoredfor this particular target.If the variable “<CustomerName>XXX” was found in the HTTP query URL, the code alsolooked for the two other variables - Z1 and Z2. Together, they represented a function callwith speciﬁc parameters, as “<CustomerName>XXX” represented a function ID of asingle ASCII character with possible values of “A” through “Q,” while Z1/Z2 wereparameters of the function.6If the called function returned a value to the client, it would be in the form of a stringformatted as: “->|ResultData|<-”, with ResultData as the returned data. The formatted resultstring would then be returned to the client through the HTTP response data.As you can see in the following functionality map (Table-1), some basic backdoorcapabilities were implemented in the malware. Also, there were several SQL controlfunctions, enabling the attacker to read, write and execute command on SQL servers insideand outside the targeted organization.Naturally, the facilities below allowed the hacker to write and execute any code on the OWAserver, and by using the previously collected passwords, impersonate any user and performlateral movement.789ConclusionsThe hackers in this case managed to gain a foothold into a highly strategic asset: theOWA server. Almost by deﬁnition, OWA requires organizations to deﬁne a relatively lax setof restrictions; and in this case, OWA was conﬁgured in a way that allowed internet-facingaccess to the server. This enabled the hackers to establish persistent control over theentire organization’s environment without being detected for a period of several months.By combining endpoint level visibility and the Cybereason Malop hunting engine’scontextual analysis, the organization was ﬁnally able to visualize the entire attack andpinpoint the root cause of the threat.Our customer’s instincts were spot on when his “Spidey Sense” told him there was more tothe OWA server’s odd behavior than what met the eye, but it would have likely taken himweeks of uninterrupted analysis to investigate the situation manually. Only by automatingdetection and analysis was this clever hack detected, understood, and contained.Herein lies the magic of Endpoint Detection and Response (EDR). The Cybereasonplatform immediately pinpointed how the OWA server was compromised and providedclear visibility to the affected machine, enabling our customer to clean and ﬁx it.Cybereason was designed to empower smart people with good instincts to be top-notchcyber-defenders, and this is a perfect example of what that looks like.10Cybereason: Let the Hunt Begin.About CybereasonCybereason was founded in 2012 by a team of ex-military cybersecurity experts to revolutionize detection and response to cyber attacks. The Cybereason Malop Hunting Engine identiﬁes signature and non-signature based attacks using big data, behavioral analytics, and machine learning. The Incident Response console provides security teams with an at-your-ﬁngertip view of the complete attack story, including the attack’s timeline, root cause, adversarial activity and tools, inbound and outbound communication used by the hackers, as well as affected endpoints and users. This eliminates the need for manual investigation and radically reduces response time for security teams. The platform is available as an on premise solution or a cloud-based service. Cybereason is privately held and headquartered in Boston, MA with ofﬁces in Tel Aviv, Israel. © All Rights Reserved. Cybereason 201511222 Berkeley Street 13th Floor Boston, MA 02116 USA www.cybereason.com 