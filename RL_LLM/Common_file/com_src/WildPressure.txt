3/27/2020WildPressure targets industrial-related entities in the Middle East | SecurelistWildPressure targets industrial-related entities in the Middle Eastsecurelist.com/wildpressure-targets-industrial-in-the-middle-east/96360By Denis LegezoIn August 2019, Kaspersky discovered a malicious campaign distributing a fully ﬂedged C++ Trojan that we call Milum. All the victims we registered were organizations from the Middle East. At least some of them are related to industrial sector. Our Kaspersky Threat Attribution Engine (KTAE) doesn’t show any code similarities with known campaigns. Nor have we seen any target intersections. In fact, we found just three almost unique samples, all in one country. So we consider the attacks to be targeted and have currently named this operation WildPressure.The compilation timestamps for all these ﬁles is the same – March 2019. This is consistent with the fact that we registered no infections before May 31, 2019, so the compilation dates don’t seem to be spoofed. For their campaign infrastructure, the operators used rented OVH and Netzbetrieb virtual private servers (VPS) and a domain registered with the Domains by Proxy anonymization service.The malware uses the JSON format for conﬁguration data and as a C2 communication protocol over HTTP as well. Inside the encrypted communications within the HTTP POST requests, we found several interesting ﬁelds. One of them shows the malware version – 1.0.1. A version number like this indicates an early stage of development. Other ﬁelds suggest the existence of, at the very least, plans for non-C++ versions.The only encryption implemented is the RC4 algorithm with different 64-byte keys for different victims. Also, the developers were kind enough to leave RTTI data inside the ﬁles. Kaspersky products detect this malware as Backdoor.Win32.Agent. For more information, please contact: intelreports@kaspersky.comurl targets industrial-related entities in the Middle East | SecurelistWhy we call it Milum and why it’s of interest All the aforementioned C++ Trojans are compiled as standalone PE ﬁles, originally named Milum46_Win32.exe. The word ‘milum’ is used in the C++ class names inside the malware, so we named the Trojan after it.Another distinctive characteristic is that the malware exports lots of zlib compression functions, such as zlibVersion(), inﬂate() or deﬂate(). This compression is needed for C2 communication, but in reality there is no need to export them in the case of a standalone application.The JSON conﬁguration ﬁelds are not limited to just the version and programming language; the campaign operators also use target IDs that are found in the samples. Among them, we found HatLandM30 and HatLandid3 – neither of which we are familiar with. The following table provides Milum samples that have similar PE header compilation timestamps but different target IDs:Milum46_Win32.exe sample MD5 hash 0C5B15D89FDA9BAF446B286C6F97F535 17B1A05FC367E52AADA7BDE07714666B 2019.03.09 06:17:19 HatLandid3 A76991F15D6B4F43FBA419ECA1A8E741 2019.03.09 06:17:19 HatLandM30Timestamp (GMT) clientid 2019.03.09 06:17:19 839tttttttRather than describing all the conﬁguration ﬁelds one by one, we have gathered them together in the following table, with all the main characteristics for this malware family:Pro‐ tenceC++ with STL functions used mostly to parse JSON data and exception handling.Base64-encoded JSON data in PE resources. Includes timeouts, C2 URLs and keys for communication, including RC4 64-byte key.Trojan transmits compressed JSON data in HTTP POST requests with gzip, base64-encoded and RC4 encrypted.Encrypted JSON contains the malware version “1.0.1”, Epoch timestamp and client id. It also has speciﬁc ﬁelds such as “vt” and “ext” that correspond to programming language “c++” and ﬁle extension “exe”. If our hypothesis is cor‐ rect, this suggests that non-C++ Trojan versions may be planned, if not al‐ ready implemented. HKCU autorun system registry keys Run and RunOnce.url targets industrial-related entities in the Middle East | SecurelistEn‐ sionThe communication encryption used is RC4 with the 64-byte key stored in the conﬁguration data.For compression the Trojan uses an embedded gzip code. For some reason gzip functions are exported from PE, although the samples are standalone executables, not DLLs.Let’s dig a little deeper inside The most popular sample in our telemetry was:MD5 2019.03.09 06:17:19 (GMT) 520704This application exists as an invisible toolbar window. The main malicious functions are implemented in a separate thread. Milum decodes its conﬁguration data and, besides timeouts, it gets the parameters “clientid” and “encrypt_key” to use in RC4 encryption.Example of the decoded and beautiﬁed conﬁguration data. The “clientid” ﬁeld differs in every sample observedThe following table describes the different conﬁguration parameters:url targets industrial-related entities in the Middle East | SecurelistConﬁg parameter Parameter features relays – keyPause in milliseconds between C2 communication working cycles Unique ASCII target name RC4 encryption key for JSON-based C2 communications Full URL to send HTTP POST beacon and GET commands Unique ASCII key for each C2 to communicate with itThe operators can run the Trojan using the key (“b” or “B”) as the ﬁrst argument and the ﬁle name as the second. In this case, Milum will delete the ﬁle sent as a parameter. Then the Trojan will create the C:\ProgramData\Micapp\Windows\ directory and parse its conﬁguration data to form the beacon to send to its C2.To send the beacon, Milum uses the HTTP POST request with three parameters as enumerated in the table below.Beacon valParameter valuesClientid from conﬁg, with preﬁx 01011 and random ﬁve-character ASCII sufﬁx Key from conﬁg to communicate with C2, differs for each server Compressed, encrypted and encoded command JSON dataThe ﬁrst two parameters are taken from the conﬁguration data. The third one is encrypted and after decryption, decompression, decoding and beautifying, it looks like this:url targets industrial-related entities in the Middle East | SecurelistDecoded and beautiﬁed JSON beacon to C2. In this case, the connection to the ﬁrst server was unsuccessfulThere are several ﬁelds worth mentioning here. We referred above to different programming languages besides C++: “vt” seems to reference a programming language and “ext” a ﬁle extension. The only reason that we could think of for keeping these is if the attackers have several Trojans, written in different languages, to work with the same control server.Regarding the “command” ﬁeld, the control servers were inaccessible at the time of the analysis, so we don’t have commands from them. However, we analyzed the command handlers in Milum’s code as described below:Code Mean‐FeaturesSilently execute received interpreter command and return result through pipe Decode received content in “data” JSON ﬁeld and drop to ﬁle men‐ tioned in “path” ﬁeld Encode ﬁle mentioned in received command “path” ﬁeld to send iting File info Get ﬁle attributes: hidden, read only, archive, system or executable Cleanup Generate and run batch script to delete itself tionGet command execution statusValidate target with Windows version, architecture (32- or 64-bit), host and user name, installed security products (with WQL request “Select From AntiVirusProduct WHERE displayName <>’Windows Defender'”) Get info about ﬁles in directory: hidden, read only, archive, system or Update Get the new version and remove the old one1234 5 6789Who was attacked? According to our telemetry, the Milum Trojan was exclusively used to attack targets in the Middle East from at least the end of May 2019.url targets industrial-related entities in the Middle East | SecurelistNumber of detections for one of the samples from September 2019We were able to sinkhole one of the WildPressure C2 domains (upiserversys1212[.]com) in September 2019. The vast majority of visitor IPs were also from the Middle East, and we believe the rest were network scanners, TOR exit nodes or VPN connections.C2 domain sinkholing also shows active infections mostly from the Middle East And who’s behind it? To date we haven’t observed any strong code- or victim-based similarities with any known actor or set of activity. Their C++ code is quite common, regarding conﬁguration data and communication protocol malware uses base64-encoded JSON-formatted conﬁguration data stored in the binary’surl targets industrial-related entities in the Middle East | Securelistresource section and parses it with Standard Template Library (STL) functions. However, these commonalities are not conclusive enough for attribution and our hypothesis is that they are merely coincidence. We will continue to monitor this activity To sum up To date, we don’t have any data regarding Milum’s spreading mechanism. A campaign that is, apparently, exclusively targeting entities in the Middle East (at least some of them are industrial- related) is something that automatically attracts the attention of any analyst. Any similarities should be considered weak in terms of attribution, and may simply be techniques copied from previous well-known cases. Indeed, this “learning from more experienced attackers” cycle has been adopted by some interesting new actors in recent years.We should also be cautious regarding the true targeting of this new set of activities, as it is probably too soon to jump to conclusions. The targeted nature seems to be clear, but the targeting itself might be limited by our own visibility. The malware is not exclusively designed against any kind of victim in particular and might be reused in other operations. Indicators of compromise Original ﬁle names are Milum46_Win32.exe; on the target side they exist as system32.exeURLs upiserversys1212[.]com/rl.php 37.59.87[.]172/page/view.php 80.255.3[.]86/page/view.phpurl 