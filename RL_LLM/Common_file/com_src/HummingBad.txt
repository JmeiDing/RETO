From HummingBad to WorseNEW DETAILS AND AN IN-DEPTH ANALYSIS OFTHE HUMMINGBAD ANDROID MALWARE CAMPAIGNFor five months, Check Point mobile threat researchers had unprecedented, behind-the- scenes access to a group of cybercriminals in China. This group created a malware that takes over Android devices and generates $300,000 per month in fraudulent ad revenue. The group effectively controls an arsenal of over 85 million mobile devices around the world. With the potential to sell access to these devices to the highest bidder, Check Point researchers say similar malware campaigns may become a trend. In February 2016, Check Point researchers first discovered HummingBad, a malware that establishes a persistent rootkit on Android devices, generates fraudulent ad revenue, and installs additional fraudulent apps. Since then, researchers saw an increasing number of instances in the wild and have traced the attack campaign’s source. This investigation uncovered critical insights on how attackers conduct mobile malware campaigns:Figure 1: Data from Check Point gateways detailing the number ofHummingBad instances researchers have seen in the wild.• The HummingBad campaign runs alongside a legitimate advertising analytics business, sharingtheir technology and resources, enabling it to control tens of millions of Android devices• The campaign generates $300,000 a month; proving attacks can achieve financial self-sufficiencyFinancial gain is just the tip of the iceberg:• The group tries to root thousands of devices every day and is successful in hundreds of attempts • With these devices, a group can create a botnet, carry out targeted attacks on businesses or government agencies, and even sell the access to other cybercriminals on the black market• Any data on these devices is at risk, including enterprise data on those devices that serve dualpersonal and work purposes for end usersAccessing these devices and their sensitive data creates a new and steady steady stream of revenue for cybercriminals. Emboldened by financial and technological independence, their skillsets will advance – putting end users, enterprises, and government agencies at risk.©2016 Check Point Software Technologies Ltd. All rights reserved | P. 1Meet the Yingmob Following the command and control (C&C) servers used by the original HummingBad samples detected in February, researchers found the attackers’ repositories. These repositories belong to Yingmob, a Chinese mobile ad server While other research firms associate Yingmob with an iOS malware called Yispecter, Check Point researchers determined that the same group is also behind HummingBad: •Yispecter uses Yingmob’s enterprise certificates to install itself on devices• HummingBad and Yispecter share C&Cserver addresses• HummingBad repositories contain QVODdocumentation, an iOS porn player targeted by Yispecter• Both install fraudulent apps to gain revenue. Yingmob has several teams developing legitimate tracking and ad platforms. The team responsible for developing the malicious components is the “Development Team for Overseas Platform” which includes four groups with a total of 25 employees. This team sits in Level 5, Xingdu Plaza, 73 Beiqu Rd., Yuzhong, Chongqing, China. The team has three development projects: • Eomobi: HummingBad malicious components • Hummer Offers: Ad server analytics platform • Hummer Launcher: Ad server Androidapplication package (APK)The development team has six product lines: 1. Eobomi 2. Hummer launcher 3. Root Software Development Kit (SDK) 4. Hummer Offers 5. MAT 6. UnitemobiFigure 2: Yingmob's Offices In ChongqingFigure 3: Seating Plan of Yingmob's Offices In ChongqingFigure 4: Yingmob's Organization©2016 Check Point Software Technologies Ltd. All rights reserved | P. 2HummingBad Takes Flight Worldwide Analysis of the HummingBad code revealed that it sends notifications to Umeng, a tracking and analytics service from which the attackers manage the campaign. Further analysis of Yingmob’s Umeng account revealed the extent of the HummingBad campaign. The control panel registers almost 200 apps, most of which are different variations of the same core apps. Check Point researchers suspect about 25% of these apps are malicious. All combined, the campaign includes nearly 85 million devices.Active Times Cumulative userNew userActive userToday Yesterday Yesterday independent userAccording to the interface, activity began in August 2015, and is seen below in the graph showing cumulative users over time:Figure 2: Overall Statistics of the Umeng InterfaceFigure 6: Cumulative Users Over Time©2016 Check Point Software Technologies Ltd. All rights reserved | P. 3After analyzing most of the apps on the dashboard, the research team estimates that nearly 10 million users are using these malicious apps. While victims are spread worldwide, India and China take the lead. The top 20 countries with infected devices have more than 100,000 victims each.Malaysia, 113096Ukraine, 117287Algeria, 130129Colombia, 137131Vietnam, 137328Egypt, 140007Romania, 147632 Nepal, 172327Pakistan, 188758Russia, 207940Bangladesh, 209706Thailand, 260128United States, 286800Mexico, 325208Brazil, 366566China, 1606384India, 1352772Turkey, 448285Indonesia, 489336Philippines, 520901Figure 7: Top 20 Targeted Countries©2016 Check Point Software Technologies Ltd. All rights reserved | P. 4HummingBad targets users of all Android Operating System (OS) versions, as seen below:Figure 8: Victim Heat MapMarshmallow1%Ice Cream Sandwich2%Victims byAndroid VersionLollipop7%Jelly Bean40%KitKat 50%Figure 9: Victims By Android OS©2016 Check Point Software Technologies Ltd. All rights reserved | P. 5It’s All About Making Money – For Now One of the interesting aspects of this campaign is the economic impact on users and advertisers. Abusing many ad server software development kits (SDKs) and defrauding them for revenue, HummingBad uses the entire spectrum of paid events for its operation, including displaying ads, creating clicks, and installing fraudulent apps. These illegitimate tactics generate more revenue for HummingBad developers than playing by the rules. Developers track the effectiveness of the apps in each category with the “Developer Defined Events” section in Yingmob’s Umeng interface. Each Umeng can modify the apps to contain whichever event they wish. In the case of HummingBad, most fields relate to ad fraud. Our research team extracted the following data from the campaign:• The apps display more than 20 million advertisements per day •Yingmob achieves a high click rate of 12.5% with illegitimate methods, resulting in over 2.5 million clicks per day• HummingBad installs more than 50,000 fraudulent apps per dayThis translates to significant revenues:Yingmob’s average revenue per clicks (RPC) is USD $0.00125• • Accumulated revenue from clicks per day reaches more than $3,000 • The rate for each fraudulent app is $0.15 with accruing over $7,500 per day •Yingmob makes $10,000 per day or about $300,000 a month.While profit is powerful motivation for any attacker, Yingmob’s apparent self-sufficiency and organizational structure make it well-positioned to expand into new business ventures, including productizing the access to the 85 million Android devices it controls. This alone would attract a whole new audience – and a new stream of revenue – for Yingmob. Quick, easy access to sensitive data on mobile devices connected to enterprises and government agencies around the globe is extremely attractive to cybercriminals and hacktivists. Without the ability to detect and stop suspicious behavior, these millions of Android devices and the data on them remain exposed today.©2016 Check Point Software Technologies Ltd. All rights reserved | P. 6Simulate click:Detailed Analysis: How HummingBad Works The first infection method the Check Point research team saw was a drive-by download attack, and the Check Point ThreatCloud indicates some adult content sites served malicious payloads too. HummingBad uses a sophisticated, multi-stage attack chain with two main components. The first component attempts to gain root access on a device with a rootkit that exploits multiple vulnerabilities. If successful, attackers gain full access to a device. If rooting fails, a second component uses a fake system update notification, tricking users into granting HummingBad system-level permissions. Irrespective of whether rooting is successful, HummingBad downloads as many fraudulent apps to the device as possible. The malicious apps in the HummingBad campaign are made of a mix of several malicious components, many of which have variations with the same functionality. In some cases, the malicious components are dynamically downloaded onto a device after the infected app is installed. The first malicious component, known as SSP, displays illegitimate ads and installs fraudulent apps. It is triggered by four events: device boot, screen turning on or off, detection that a user is present, and any change in connectivity. When triggered, SSP starts a service named Se, which initiates the malicious logic and starts the advertisement networks used by the app. Different variations of HummingBad use different ad networks such as Mobvista, Cheetah, Apsee, or Startapp. SSP starts a timer that schedules a LockTask execution every 10 seconds. If all conditions (such as time delay, internet connection, and settings received from the server) are met, LockTask restarts the Se server and launches the MainActivity process, activating the malicious payload. Once the MainActivity process starts, the malware begins to display ad banners with a “close” button. The malware blocks any attempt to return to the home screen or go back, forcing the user to click on the banner. If the user clicks the “close” button, the malware imitates a click on the banner itself. Once the banner is clicked, SSP sends a request to a server that returns a link to an Android application kit (APK). SSP then downloads this APK from the server.©2016 Check Point Software Technologies Ltd. All rights reserved | P. 7Show close button:Once the APK is downloaded, the app checks if the device is rooted by any of the other components. If the device is rooted, it installs the APK silently; if not, SSP attempts installation with a user dialog. Once installed, SSP launches the APK information received from the server to imitate an installation from GP and acquire revenue from the ad To receive updates and send reports, SSP retrieves the command and control (C&C) domain from a JavaScript Object Notation (JSON) file downloaded from d1qxrv0ap6yf2e.cloudfront[.]net/domain/xxx.json. Possible values are:• •{"id":3,"name":"CAP","master":"032o[.]com","slave":"032n[.]com"} {"id":4,"name":"SSP&CCSDK","master":"guangbom[.]com","slave":"ssppsspp[.]com"} {"id":5,"name":"asdf","master":"asdf","slave":"asdf"} //I think {"id":6,"name":"efwe","master":"gwsgs","slave":"dgss"}//it's unused {"id":7,"name":"1","master":"1","slave":"1"} //and this {"id":8,"name":"CAP-DW","master":"ccaa100[.]com","slave":"ccaa200[.]com"} {"id":9,"name":"SSP-DW","master":"cscs100[.]com","slave":"cscs200[.]com"} {"id":11,"name":"HM-JK","master":"hmapi[.]com","slave":"eoapi[.]com"} {"id":12,"name":"易盟-易窗","master":"ma2.heshan88[.]com","slave":"sl2.heshan88[.]com"} {"id":13,"name":"易盟-易推","master":"ma2.heshan88[.]com","slave":"sl2.heshan88[.]com"} {"id":14,"name":"易盟-启弹","master":"ma2.heshan88[.]com","slave":"sl2.heshan88[.]com"} {"id":15,"name":"iadpush","master":"ma2.lb0408[.]com","slave":"sl2.lb0408[.]com"} {"id":16,"name":"1mob-fudian","master":"ma2.heshan88[.]com","slave":"sl2.heshan88[.]com"} {"id":17,"name":"QS","master":"aa0ad[.]com","slave":"aa0ab[.]com"} {"id":18,"name":"1mob-xin（点滴/BDSDK ","master":"ma2.heshan88[.]com","slave":"sl2.heshan88[.]com"}©2016 Check Point Software Technologies Ltd. All rights reserved | P. 8Google Play Process Injection SSP injects a library into the process of Google Play. By doing this, the malware can then imitate clicks on install/buy/accept button inside Google Play. This injection determines if the required button is active and understands which window of Google Play is displayed in the The malware injects the native library into the Google Play process using the well-known ptrace approach. SSP uses the ptrace system call to control other apps, reading and writing memory and registers. By combining calls of ptrace, it loads its library into the memory of other processes and calls. The injected library dynamically loads dex-code (compiled Java code for Android) into the process.©2016 Check Point Software Technologies Ltd. All rights reserved | P. 9Loaded dex code starts the service in the context of the Google Play app. Periodically scanning views inside Google Play, it imitates clicks on install/buy/accept buttons when they appear.RightCore Present in the first sample of HummingBad found in February 2016, the RightCore component contains the malware’s rooting functionality. Some samples include this payload in their assets, while others download it from the server. The infected app checks whether the device is rooted. If the device is not rooted, the parent malware decrypts RightCore (every character is XOR encrypted against 85). Depending on the version, RightCore either downloads a pack of exploits from the server or decrypts them from its own assets. Then, it analyzes the device’s configurations to choose best how to run the exploits. If the exploit is successful, the app decodes a payload from its assets and attempts a quiet installation. Then, it downloads additional fraudulent apps, installing them silently. Though copied from other developers, these exploits remain effective nonetheless. The root binaries are named ipm and ppm instead of the normal su, possibly to avoid detection. According to the Umeng interface, the HummingBad campaign tries to root thousands of devices every day, with hundreds of these attempts successful. The CAP component installs fraudulent apps using elaborate techniques. When CAP launches on a device it decrypts module_encrypt.jar from its assets and dynamically loads code containing the main malware functionality. From its assets, it decrypts and runs a native daemon binary. This binary then periodically executes a command to wake up the app. On every broadcast, CAP checks for changes in data. If it detects a change, the app clears all pending downloads, notifications, and events, and checks several parameters about its own activity (time from start, number of requests sent before). If the parameters meet the preset conditions, CAP sends a request to the server to receive the fraudulent app.©2016 Check Point Software Technologies Ltd. All rights reserved | P. 10Once CAP receives the payload, it attempts installation – silently if the device is rooted, or by initiating user interaction if it is not. This mechanism allows hackers to control the quantity of apps installed each day, maintaining a low profile and Periodically, the app sends statistics about the plugin’s activities to the server and checks for updates. These statistics include the identifications of actions, such as whether a device is rooted, and if so, when it occurred. Fake IMEI injection CAP creates a fake ”unique” 15- digit International Mobile Station Equipment Identity (IMEI) number, imitating the activity of additional devices and conducting further fraud. In doing so, CAP installs the same app twice on the same device, but receives payment for installing it on two different devices. CAP injects a library into the com.android.phone or android.internal.telephony process and calls internal classes of this process to set fake IMEI Clicking Simulation in Google Play CAP conducts an "external” clicking simulation for Google Play by opening an app in Google Play that was proposed by an advertisement.©2016 Check Point Software Technologies Ltd. All rights reserved | P. 11Once Google Play is open, the malware simulates the sequence of screen clicks that tap the "Install" and "Accept" buttons to claim the reward for a successful referral. To obtain the coordinates of the Google Play button, the malware dumps its layout using a user interface (UI) automation application program interface (API). The click imitation is performed by then executing the "input tap X Y" utility with the coordinates of the Yingmob may be the first group to have its high degree of organization and financial self-sufficiency exposed to the public, but it certainly won’t be the last. Check Point believes this dangerous trend will escalate as other groups learn from Yingmob and find new ways to achieve the independence they need to launch larger and more sophisticated attack campaigns in the future.©2016 Check Point Software Technologies Ltd. All rights reserved | P. 12Appendix• Com.andr0id[.]cmvchinme • Com.swiping[.]whale • Com.andr0id[.]cmvchinmf •com.quick[.]launcherSHA-256 