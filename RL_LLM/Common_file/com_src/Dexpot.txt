11/27/2019Insights from one year of tracking a polymorphic threat - Microsoft SecurityInsights from one year of tracking a polymorphic threatmicrosoft.com/security/blog/2019/11/26/insights-from-one-year-of-tracking-a-polymorphic-threatNovember 26, 2019A little over a year ago, in October 2018, our polymorphic outbreak monitoring system detected a large surge in reports, indicating that a large-scale campaign was unfolding. We observed as the new threat attempted to deploy ﬁles that changed every 20-30 minutes on thousands of devices. We gave the threat the name “Dexphot,” based on certain characteristics of the malware code.The Dexphot attack used a variety of sophisticated methods to evade security solutions. Layers of obfuscation, encryption, and the use of randomized ﬁle names hid the installation process. Dexphot then used ﬁleless techniques to run malicious code directly in memory, leaving only a few traces that can be used for forensics. It hijacked legitimate system processes to disguise malicious activity. If not stopped, Dexphot ultimately ran a cryptocurrency miner on the device, with monitoring services and scheduled tasks triggering re-infection when defenders attempt to remove the malware.In the months that followed, we closely tracked the threat and witnessed the attackers upgrade the malware, target new processes, and work around defensive measures:While Microsoft Defender Advanced Threat Protection’s pre-execution detection engines blocked Dexphot in most cases, behavior-based machine learning models provided protection for cases where the threat slipped through. Given the threat’s persistence mechanisms, polymorphism, and use of ﬁleless techniques, behavior-based detection was a critical component of the comprehensive protection against this malware and other threats that exhibit similar malicious behaviors.Microsoft Defender ATP data shows the effectiveness of behavioral blocking and containment capabilities in stopping the Dexphot campaign. Over time, Dexphot-related malicious behavior reports dropped to a low hum, as the threat lost steam.url from one year of tracking a polymorphic threat - Microsoft SecurityOur close monitoring of Dexphot helped us ensure that our customers were protected from the evolving threat. More importantly, one year’s worth of intelligence helped us gain insight not only into the goals and motivations of Dexphot’s authors, but of cybercriminals in general. Complex attack chain The early stages of a Dexphot infection involves numerous ﬁles and processes. During the execution stage, Dexphot writes ﬁve key ﬁles to disk:1. An installer with two URLs 2. An MSI package ﬁle downloaded from one of the URLs 3. A password-protected ZIP archive 4. A loader DLL, which is extracted from the archive 5. An encrypted data ﬁle that holds three additional executables that are loaded into systemprocesses via process hollowingExcept for the installer, the other processes that run during execution are legitimate system processes. This can make detection and remediation more difﬁcult. These legitimate system processes include msiexec.exe (for installing MSI packages), unzip.exe (for extracting ﬁles from the password-protected ZIP archive), rundll32.exe (for loading the loader DLL), schtasks.exe (for scheduled tasks), powershell.exe (for forced updates). In later stages, Dexphot targets a few other system processes for process hollowing: svchost.exe, tracert.exe, and setup.exe.url from one year of tracking a polymorphic threat - Microsoft SecurityMultiple layers of security evasion Based on Microsoft Defender ATP signals, SoftwareBundler:Win32/ICLoader and its variants are primarily used to drop and run the Dexphot installer. The installer uses two URLs to download malicious payloads. These are the same two URLs that Dexphot use later to establish persistence, update the malware, and re-infect the device.The installer downloads an MSI package from one of the two URLs, and then launches msiexec.exe to perform a silent install. This is the ﬁrst of several instances of Dexphot employing living-off-the-land techniques, the use of legitimate system processes for nefarious purposes.Dexphot’s package often contains an obfuscated batch script. If the package contains this ﬁle, the script is the ﬁrst thing that msiexec.exe runs when it begins the installation process. The said obfuscated script is designed to check for antivirus products. Dexphot halts the infection process immediately if an antivirus product is found running.When we ﬁrst began our research, the batch script only checked for antivirus products from Avast and AVG. Later, Windows Defender Antivirus was added to the checklist.url from one year of tracking a polymorphic threat - Microsoft SecurityIf the process is not halted, Dexphot decompresses the password-protected ZIP archive from the MSI package. The password to this archive is within the MSI package. Along with the password, the malware’s authors also include a clean version of unzip.exe so that they don’t have to rely on the target system having a ZIP utility. The unzip.exe ﬁle in the package is usually named various things, such as z.exe or ex.exe, to avoid scrutiny.The ZIP archive usually contains three ﬁles: the loader DLL, an encrypted data ﬁle (usually named bin.dat), and, often, one clean unrelated DLL, which is likely included to mislead detection.Dexphot usually extracts the decompressed ﬁles to the target system’s Favorites folder. The ﬁles are given new, random names, which are generated by concatenating words and numbers based on the time of execution (for example, C:\Users\<user>\Favorites\\Res.Center.ponse\<numbers>). The commands to generate the new names are also obfuscated, for example:Msiexec.exe next calls rundll32.exe, specifying loader DLL (urlmon.7z in the example above) in order to decrypt the data ﬁle. The decryption process involves ADD and XOR operations, using a key hardcoded in the binary.The decrypted data contains three executables. Unlike the ﬁles described earlier, these executables are never written to the ﬁlesystem. Instead, they exist only in memory, and Dexphot runs them by loading them into other system processes via process hollowing. Stealthy execution through ﬁleless techniques Process hollowing is a technique that can hide malware within a legitimate system process. It replaces the contents of the legitimate process with malicious code. Detecting malicious code hidden using this method is not trivial, so process hollowing has become a prevalent technique used by malware today.url from one year of tracking a polymorphic threat - Microsoft SecurityThis method has the additional beneﬁt of being ﬁleless: the code can be run without actually being saved on the ﬁle system. Not only is it harder to detect the malicious code while it’s running, it’s harder to ﬁnd useful forensics after the process has stopped.To initiate process hollowing, the loader DLL targets two legitimate system processes, for example svchost.exe or nslookup.exe, and spawns them in a suspended state. The loader DLL replaces the contents of these processes with the ﬁrst and second decrypted executables. These executables are monitoring services for maintaining Dexphot’s components. The now-malicious processes are released from suspension and run.Next, the loader DLL targets the setup.exe ﬁle in SysWoW64. It removes setup.exe’s contents and replaces them with the third decrypted executable, a cryptocurrency miner. Although Dexphot always uses a cryptocurrency miner of some kind, it’s not always the same miner. It used different programs like XMRig and JCE Miner over the course of our research.Persistence through regularly scheduled malware updates The two monitoring services simultaneously check the status of all three malicious processes. Having dual monitoring services provides redundancy in case one of the monitoring processes is halted. If any of the processes are terminated, the monitors immediately identify the situation, terminate all remaining malicious processes, and re-infect the device. This forced update/re- infection process is started by a PowerShell command similar to the one below:The monitoring components also detect freshly launched cmd.exe processes and terminate them promptly. As a ﬁnal fail-safe, Dexphot uses schtasks.exe to create scheduled tasks, with the command below.This persistence technique is interesting, because it employs two distinct MITRE ATT&CK techniques: Scheduled Task and Signed Binary Proxy Execution.The scheduled tasks call msiexec.exe as a proxy to run the malicious code, much like how msiexec.exe was used during installation. Using msiexec.exe, a legitimate system process, can make it harder to trace the source of malicious activity.url from one year of tracking a polymorphic threat - Microsoft SecurityFurthermore, the tasks allow Dexphot to conveniently update the payload from the web every time the tasks run. They automatically update all of Dexphot’s components, both upon system reboot as well as every 90 or 110 minutes while the system is running.Dexphot also generates the names for the tasks at runtime, which means a simple block list of hardcoded task names will not be effective in preventing them from running. The names are usually in a GUID format, although after we released our ﬁrst round of Dexphot-blocking protections, the threat authors began to use random strings.The threat authors have one more evasion technique for these scheduled tasks: some Dexphot variants copy msiexec.exe to an arbitrary location and give it a random name, such as %AppData%\<random>.exe. This makes the system process running malicious code a literal Dexphot exhibits multiple layers of polymorphism across the binaries it distributes. For example, the MSI package used in the campaign contains different ﬁles, as shown in the table below. The MSI packages generally include a clean version of unzip.exe, a password-protected ZIP ﬁle, and a batch ﬁle that checks for currently installed antivirus products. However, the batch ﬁle is not always present, and the names of the ZIP ﬁles and Loader DLLs, as well as the password for extracting the ZIP ﬁle, all change from one package to the next.In addition, the contents of each Loader DLL differs from package to package, as does the encrypted data included in the ZIP ﬁle. This leads to the generation of a different ZIP archive and, in turn, a unique MSI package, each time the attacker bundles the ﬁles together. Because of these carefully designed layers of polymorphism, a traditional ﬁle-based detection approach wouldn’t be effective against Dexphot.MSI pack‐ age IDMSI-1 MSI-4MSI-5 MSI-6 MSI-7MSI package contentsPassword for ZIP ﬁleZIP ﬁle NT.LOC.zipUn‐ pck.exe mse.zip f.batf.batkjfhwehjkf kikaContents of encrypted ERDNT.LOC data.bin_steam.dll ic64.dll _steam.dllbin.dat bin.dat bin.daturl from one year of tracking a polymorphic threat - Microsoft SecurityMSI-8 MSI-12MSI-13MSI-14 MSI-15MSI-16 MSI-19z.exe ex.exeex.exe hf.exemse.zip gr.iso.zip analog.tvicon.ico update.datpck.exe mse.zip hf.exeMSI-20ex.exeMSI-21 MSI-22z.exe z.exeinstallers.m‐ archive00.xf.bat f.bat f.batf.batf.batf.bat f.bat f.batf.batf.bat x32Frame.dll data.bin data.binurlmon.7zbin.datdefault.ocx cher.dllbin.dat data.binbin.dat data.binbin.datbin.dat bin.datA multitude of payload hosts Besides tracking the ﬁles and processes that Dexphot uses to execute an attack, we have also been monitoring the domains used to host malicious payloads. The URLs used for hosting all follow a similar pattern. The domain address usually ends in a .info or .net TLD, while the ﬁle name for the actual payload consists of random characters, similar to the randomness previously seen being used to generate ﬁle names and scheduled tasks. Some examples from our research are shown in the table below.Scheduled task name hboavboja {C0B15B19-AB02-0A10-259B- 1789B8BD78D6}Download URL url url from one year of tracking a polymorphic threat - Microsoft Securityytiazuceqeifbeoxlwayou {F1B4C720-5A8B-8E97-8949- {BE7FFC87-6635-429F-9F2D- CD3FD0E6DA51} {0575F553-1277-FB0F-AF67- {EAABDEAC-2258-1340-6375- njibqhcq{22D36F35-F5C2-29D3-1CF1- adeuuelv{0B44027E-7514-5EC6-CE79- 26EB87434AEF} {5A29AFD9-63FD-9F5E-F249- 5EC1F2238023} {C5C1D86D-44BB-8EAA-5CDC- 26B37F92E411}url‐ bo url url url‐ jou.oew url url url‐ mugu.fux url url‐ neevqlqziee.okn urlﬂyvf.rwsMany of the URLs listed were in use for an extended period. However, the MSI packages hosted at each URL are frequently changed or updated. In addition, every few days more domains are generated to host more payloads. After a few months of monitoring, we were able to identify around 200 unique Dexphot domains. Conclusion: Dynamic, comprehensive protection against increasingly complex everyday threatsurl from one year of tracking a polymorphic threat - Microsoft SecurityDexphot is not the type of attack that generates mainstream media attention; it’s one of the countless malware campaigns that are active at any given time. Its goal is a very common one in cybercriminal circles — to install a coin miner that silently steals computer resources and generates revenue for the attackers — yet Dexphot exempliﬁes the level of complexity and rate of evolution of even everyday threats, intent on evading protections and motivated to ﬂy under the radar for the prospect of proﬁt.To combat threats, several next-generation protection engines in Microsoft Defender Advanced Threat Protection’s antivirus component detect and stop malicious techniques at multiple points along the attack chain. For Dexphot, machine learning-based detections in the cloud recognize and block the DLLs loaded by rundll32.exe, stopping the attack chain in its early stages. Memory scans detect and terminate the loading of malicious code hidden by process hollowing — including the monitoring processes that attempt to update the malware code and re-infect the machine via PowerShell commands.Behavioral blocking and containment capabilities are especially effective in defeating Dexphot’s ﬁleless techniques, detection evasion, and persistence mechanisms, including the periodic and boot-time attempts to update the malware via scheduled tasks. As mentioned, given the complexity of the attack chain and of Dexphot’s persistence methods, we released a remediation solution that prevents re-infection by removing artifacts.The detection, blocking, and remediation of Dexphot on endpoints are exposed in Microsoft Defender Security Center, where Microsoft Defender ATP’s rich capabilities like endpoint detection and response, automated investigation and remediation, and others enable security operations teams to investigate and remediate attacks in enterprise environments. With these capabilities, Microsoft Defender ATP provides comprehensive protection against Dexphot and the countless other complex and evolving threats that we face every day. Sample indicators of compromise (IoCs)url from one year of tracking a polymorphic threat - Microsoft SecurityInstaller (SHA-256): Questions, concerns, or insights on this story? Join discussions at the Microsoft Defender ATP community.Read all Microsoft security intelligence blog posts.Follow us on Twitter @MsftSecIntel.url 