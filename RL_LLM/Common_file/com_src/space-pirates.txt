Space Pirates: analyzing the tools and connections of a new hacker groupPublished on 17 May 20221. Introduction 2. General information 3. Analysis of malware and tools1. MyKLoadClient 1. Scheme 1 2. Scheme 2 3. Test sample 4. Payload2. Zupdax1. Payload 2. Connection with Redsip 3. Connection with Winnti and FF-RAT 4. Connections with Bronze Union and TA4283. Downloaders1. Downloader.Climax.A 2. Downloader.Climax.B4. RtlShare1. Dropper rtlstat.dll 2. Injector rtlmake.dll 3. Payload rtlmain.dll (rtlmainx64.dll) 4. Use of RtlShare5. PlugX1. Demo dropper6. BH_A0061. Stage 0. Loading DLL from the overlay 2. Stage 1. DLL dropper 3. Stage 2. .dat loader (SbieDll.dll / SbieMsg.dll) 4. Stage 3. Shellcode .dat and DLL 5. Stage 4. MemLoadLibrary 6. Stage 5. Payload 7. Connection with 9002 RAT7. Deed RAT4. Conclusion 2. IOCs1. File indicators 2. Network indicatorsIntroductionAt the end of 2019, Positive Technologies Expert Security Center (PT ESC) found a phishing email aimed at a Russian aerospace enterprise. It contained a link to previously unknown malware. Our experts discovered the same malware in 2020 when investigating an information security incident at a Russian government agency. During the investigation, several new malware families using a common network infrastructure were also discovered, some of which had not previously been mentioned in open sources.In the summer of 2021, PT ESC revealed traces of compromise of another Russian aerospace enterprise. The organization was duly informed. As a result of the investigation, we found connections to the same network infrastructure on its computers. Further research made it possible to identify at least two more organizations in Russia, both partially state-owned, that were attacked using the same malware and network infrastructure.We could not unambiguously link the detected malicious activity to any known hacker group, so we gave the attackers a new name—Space Pirates. The reason for the name was the P1Rat string used in the PDB paths, and the targeting of the aerospace industry. This report describes the group's detected activity, the features of the malware it uses, as well as its connection with other APT groups.General informationWe assume that Space Pirates has Asian roots, as indicated by the active use of the Chinese language in resources, SFX archives, and paths to PDB ﬁles. In addition, the group's toolkit includes the Royal Road RTF (or 8.t) builder (common among hackers of Asian origin) and the PcShare backdoor, and almost all intersections with previously known activity are associated with APT groups in the Asian region.The group began its activity no later than 2017. The main targets of the criminals are espionage and theft of conﬁdential information. Among the victims identiﬁed during the threat study are government agencies and IT departments, as well as aerospace and power enterprises in Russia, Georgia, and Mongolia. At least ﬁve organizations were attacked in Russia, one in Georgia, and the exact number of victims in Mongolia is unknown.Some APT group attacks using malware were also targeted at Chinese ﬁnancial companies, which suggests a monetary motivation. All potential victims were notiﬁed by the respective national CERTs.At least two attacks on Russian organizations can be considered successful. In the ﬁrst case, the attackers gained access to at least 20 servers on the corporate network, where they remained for about 10 months. During this time, more than 1,500 internal documents were stolen, as well as information about all employee accounts in one of the network domains. In the second case, the attackers managed to gain persistence in the company's network and remain there for more than a year, obtain information about the computers on the network, and install malware on at least 12 corporate nodes in three diﬀerent regions.The Space Pirates toolkit includes unique downloaders and several backdoors which we have not previously encountered and which are presumably speciﬁc to the group: MyKLoadClient, BH_A006, and Deed RAT. The criminals also have access to the Zupdax backdoor: its modern variants use a similar MyKLoadClient execution scheme; however, the code of the backdoor itself dates back to 2010 and cannot be uniquely attributed to the group.In addition, the attackers use well-known malware, such as PlugX, ShadowPad, Poison Ivy, a modiﬁed version of PcShare, and the public shell ReVBShell. The dog-tunnel utility is used to tunnel traﬃc.The main network infrastructure of the group uses a small number of IP addresses indicated by DDNS domains. Interestingly, the attackers use not only third-level domains, but also fourth- and higher-level ones, for example, w.asd3.as.amazon-corp.wikaba.com.In the process of investigating Space Pirates, we found a large number of intersections with previously identiﬁed activity, which researchers associate with the following groups: Winnti (APT41), Bronze Union (APT27), TA428, RedFoxtrot, Mustang Panda, and Night Dragon. The reason for this is probably the exchange of tools between groups, which is common practice for APT groups in the Asian region.The connection between the Space Pirates and TA428 groups should be specially noted. As part of another investigation, we observed the activities of both groups on infected computers, which, however, had no intersections in the network infrastructure. During Operation StealthyTrident, described by ESET, the attackers used Tmanger, attributed to TA428, and Zupdax, associated with Space Pirates. The connection with another TA428 malware, in particular Albaniiutas (RemShell), and Zupdax can also be traced in the network infrastructure adjacent to the one mentioned in the ESET report. All this suggests that Space Pirates and TA428 can combine their eﬀorts and share tools, network resources, and access to infected systems.The key connections between the aﬀected organizations, malware families, and fragments of the network infrastructure, as well as public information about the attackers, can be seen in Figure 1. Later in the report, we will give more details about them.Figure 1. Key connectionsAnalysis of malware and toolsMyKLoadClientThis malware was used in attacks on Russian organizations, including government agencies and aerospace enterprises, often being distributed through targeted phishing. The email analysis shows that Chinese companies providing ﬁnancial services also became victims.Among the malware samples with MyKLoadClient that we found, two typical implementation schemes can be distinguished. The ﬁrst (hereinafter scheme 1) is based on the use of SFX archives as droppers, implements the DLL Side-Loading technique, and uses an auxiliary launcher library AntiVirusLoader.dll. The second (hereinafter scheme 2) includes only a custom-written dropper which transfers control to the payload directly. In the second case, gaining persistence in the system is not a feature of the code.Note that, according to the known data, there is a clear relationship between the attackers' goals and the choice of implementation scheme: samples using scheme 1 were targeted at Russian organizations, whereas scheme 2 was used in attacks on Chinese companies. If we rely on the dates of modiﬁcation and compilation of ﬁles (which, however, could be spoofed), the same division can be traced back in time: scheme 1 was presumably used in 2018–2019, and scheme 2 in 2020. It is possible that the attackers updated the implementation chain of the previous malware to reduce the likelihood of its detection in new attacks.Scheme 1A typical example of a sample with the ﬁrst implementation scheme is a ﬁle named Петербургский международный экономический форум (ПМЭФ)____2019.exe archive that extracts the decoy document 0417.doc and another SFX archive named apple.exe. The ﬁles in the archive were modiﬁed in April 2019. The document contains a text with a true description of SPIEF.Figure 2. Contents of the decoy document 0417.docThe second SFX archive extracts three PE ﬁles from itself: the legitimate siteadv.exe, the launcher siteadv.dll, and the library with payload cc.tmp. Note that in the samples studied, the ﬁrst implementation scheme does not always use a decoy. However, in all cases, a similar SFX archive is used, which contains ﬁles with the same names and purpose.Figure 3. Contents of the apple.exe archiveThe executable EXE ﬁle is signed by McAfee, Inc. and is a component of the McAfee SiteAdvisor installer. At startup, it loads the siteadv.dll library, which is responsible for installing and launching the payload. The launcher resources feature a conﬁguration encrypted with RC4 with key "TDILocker" and containing the necessary paths, registry key names, and ﬂags.Figure 4. Siteadv.dll code fragmentThe launcher provides several possible commands that are passed by way of command-line arguments and are responsible for one of the implementation stages:CommandstatThe command to start the installation. Restarts the process in which the library is loaded (siteadv.exe) with the install_del command. Additionally passes the path to the parent process.Descriptioninstall_delGains persistence on the infected computer (the registry key is speciﬁed in the conﬁguration). In this case, the path to the siteadv.exe ﬁle is used with the run or mrun argument. Deletes the ﬁle speciﬁed by the third argument (the path to the parent process). Launches the payload in the same way as the run command.runmruninsLoads a DLL with payload via LoadLibrary and executes the function exported from it (the name is speciﬁed in the conﬁguration).Not implemented.Not implemented.In addition to the exported function main, which is called by the legitimate siteadv.exe, in siteadv.dll there is an unused buc_uninstallinterface export that is responsible for bypassing the UAC using the IARPUninstallStringLauncher component.The launcher library has the export name AntiVirusLoader.dll. In some of its instances, you can ﬁnd the PDB path: D:\Leee\515远程⽂件\P1Rat_2017_07_28A\src\MyLoader_bypassKIS\snake\res\SiteAdv.pdb.The cc.tmp payload is a backdoor implemented as a dynamic library with the internal name client.dll. It exports the MyKLoad function, which is the actual entry point. We will consider the functionality of the backdoor below.Scheme 2The executable ﬁle responsible for extracting the decoy and payload acts as a dropper in the second scheme. The binary data is located in the body of the dropper and is XOR-encrypted with a single-byte key. In addition to the standard launch of the extracted payload via the CreateProcess call, the dropper also performs reﬂective loading and execution of the EXE ﬁle directly in the current process.Figure 5. Fragment of the dropper codeIn some cases, the dropper functions are additionally obfuscated using the control ﬂow ﬂattening technique.Figure 6. Obfuscated version of the dropperAs a decoy, the investigated samples use a PDF document containing a message about a "corrupt ﬁle" in the Chinese language, or an application stub that displays the message "正在更新浏览器插件，请稍后…" (The browser plugin is updating, please wait ) and "更新完毕，请重启浏览器！" (The update is completed, restart the browser!).Figure 7. PDF decoy with the text "Corrupt or incompatible ﬁle"The payload in this case is an executable ﬁle with the internal name client.exe. Some samples also have the PDB path C:\Users\classone\Desktop\src\client\exe_debug application is a dropper.Interestingly, it seems to have been created based on the Snake game. This is indicated by several details:• When launched, the application creates a window using the string "Snake" as its name. • There is code presumably responsible for the game logic—in particular, for generating random coordinates of pieces of food on the 50×50 ﬁeld and comparing themwith the position of the snake.• The application handles presses of the spacebar and cursor keys. • The application features a menu with items in Chinese: Start, Pause, Restart, and Quit.Figure 8. Application menuIn addition, among the dropper resources there is also an "About the program" window (in Chinese), the content of which indicates that this is the second version of the Snake game, which was created in 2016. The email address of the probable author is also given: mexbochen@foxmail.com.Figure 9. "About the program" windowA Google search for the address throws up the proﬁle of the email owner—a programmer from China who specializes in image processing.Figure 10. Business card website with the contact address mexbochen@foxmail.comDespite the connection between the application and the owner of the email, it is impossible to say unequivocally that he is the author of the malware. It is possible that Snake was once an open-source project, and the attackers used it as a basis for implementing the dropper.The ﬁles extracted by the dropper are contained in its resources in cleartext. Also in the resources is an encrypted conﬁguration that contains the ﬁle names—exactly the same conﬁguration is used in the launcher. When ﬁles are written to disk, their contents are XOR-encrypted with the 0x80 key, and then the ﬁles are reopened and decrypted. The dropper contains the same set of components as SFX archives (scheme 1): a legitimate McAfee SiteAdvisor component, a DLL launcher, and a library with a payload named Client.obj.After extraction, the dropper generates a command line to run the launcher with the install command (for persistence in the registry and launching the payload), but does not make further use of it. This is probably an error: there is the debug message "CreateProcess success!" in the code, but the CreateProcess function is not called.The launcher of the test sample diﬀers in its implementation of the mrun command: a variation of the run command responsible for launching the function exported from the DLL with payload. Unlike run, mrun predecrypts the library using the RC4 algorithm with key "GoogleMailData" and uses reﬂective loading for its execution.The payload of Client.obj is similar to cc.tmp (scheme 1) and has only minor diﬀerences. In particular, the entry point function exported by the library is called "main", initialize the structure with conﬁguration parameters, which include the address and port of the C2, the backdoor activity ﬂag, as well as the string IDs of the malware sent to the C2.In the client.dll library, just like in the launcher (scheme 1), there is a conﬁguration encrypted with RC4 key "GoogleMailData" in the payload resources. In the EXE version, the structure is ﬁlled with values ﬁxed in the code.The following table lists the backdoor samples we found and the data speciﬁed in their conﬁguration, namely the IDs and the control server. The "?" sign means that the _DWORD Version; // 0x20170510 };The 0x20170510 constant is always used as the version, probably denoting some date.The malware has several classes/modules responsible for the corresponding functionality:• ShellManager: remote command line • DiskManager: working with disks installed on the infected computer • FileTransferManager: ﬁle transfer • RS5Manager: using the infected computer as a proxy serverIn the ID of each command, there is a module identiﬁer, which is obtained by applying the 0xFF000 mask. Here is a full list of supported commands:Module IDFull IDDescription0013Collect information about the infected systemTerminate malware execution0x2000 (ShellManager)0x2002 Start the cmd.exe process and create a thread for sending its output to C20x2003 Send a command to the shell0x2004 Close the shell0x3000 (DiskManager)0x3000 Get a list of disks available in the system and information about them0x3001 Get directory listing0x4000 (FileTransferManager) 0x4001 Initialize ﬁle transfer from the infected computer to C2 (opens the ﬁle for reading)0x4008 Read a block of data from a previously opened ﬁle.0x4004 Initialize ﬁle transfer from C2 to the infected computer (opens the ﬁle for writing)0x4005 Write a block of data to a previously opened ﬁle0x4006 Complete the ﬁle transfer to the infected computer and set the timestamps0x4009 Close open ﬁle descriptors and reset internal ﬁelds0x4010 Get a recursive directory listing0x5000 (RS5Manager)0x5000 Perform initialization, create threads for receiving packets from a remote node and sending them to C20x5001 Create a socket and connect to a remote node0x5003 Send data to the connected socket0x5004 Close the connected socketIn the process of collecting information about the system, the backdoor creates a globally unique identiﬁer (GUID) and writes it to the registry in one of the HKLM or HKCU hives using the Software\CLASSES\KmpiPlayer key. If the key is already in the registry, then the existing ID is used.ZupdaxThe ﬁrst public mention of this malware can be found in the Unit 42 report on HenBox, a malicious application for Android. In the HenBox network infrastructure, researchers found traces of the use of malware of the PlugX, Zupdax, 9002 RAT, and Poison Ivy families. In 2019, Unit 42 combined three years of observed activity related to the above-mentioned set of malware, naming the group (or groups) behind it PKPLUG.In 2020, ESET discovered traces of an attack on the Able Soft LLC supply chain. One of the attack options was to compromise the Able Desktop installer by adding malicious code to it. The researchers cite the HyperBro and Korplug (PlugX) backdoors as the payload built into the installers.According to available data, we can say that the payload designated by ESET as Korplug is in fact a Zupdax backdoor. This opinion is shared by NortonLifeLock and Avira analysts, who published a report in the fall of 2021 describing the main features of Zupdax.Zupdax has been operating since 2014 at least. Our study focused on 2017–2019 samples, but some details can only be traced in earlier versions (2014–2015). We will be referring to them as "old".The latest versions of Zupdax use the same loading scheme as in the MyKLoadClient test sample. Although there is no Snake game code in them, the main functionality of the dropper is implemented in a similar way: in its resources are the legitimate siteadv.exe, a launcher library, a payload, and a XOR-encrypted conﬁguration with ﬁle names and ﬂags. The launcher uses exactly the same conﬁguration.Unlike MyKLoadClient, in almost all samples with Zupdax, the payload (which is extracted under the name ok.obj) is encrypted and launched using the mrun method.Among the launcher samples that are used in conjunction with Zupdax, you can ﬁnd more functional options that support UAC bypass (in particular, using buc_uninstallinterface export) and persistence as a service.In the dropper and launcher samples are the corresponding PDB paths: d:\Leee\515远程⽂件\P1Rat_2017_07_28A\src\MyLoaderBypassNorton\Release\loaderexe.pdb and d:\Leee\515远程⽂件\P1Rat_2017_07_28A\src\MyLoader_bypassKIS\snake\res\SiteAdv.pdb.Malware variants related to the attack on Able Desktop users also contain a PDB with a similar string, MyLoader_bypassKIS: MyKLoadClient and contains exactly the same "About the program" window. The payload in it is a Zupdax backdoor.PayloadFor network interaction with C2, the backdoor uses the UDT protocol, which implements data transfer over UDP. The messages have a header with a structure similar to that used in MyKLoadClient. The only diﬀerence is the value of the ﬁrst ﬁeld equal to 0x12345678:struct PacketHeader{ _DWORD Magic; // 0x12345678 _DWORD Unknown; // 0 };Immediately after establishing a connection with C2, the backdoor collects and sends information about the system, including the computer name, user name, OS version, information about disk volume, RAM, and CPU, as well as the IP and MAC addresses of the network adapter. The collected information is sent with the 0x1 command ID.The set of commands that the backdoor can handle does not change signiﬁcantly from version to version: its main features are reduced to the execution of additional code that it can get from the control server. Older versions of Zupdax contain debug messages that allow you to see the original names of operations:IDName0x0 CMD_END0x17 CMD_SET_REMShut down the backdoor or restart it (depending on the version)Write a new control server to the ﬁle (transmitted in the message)Description0x19 CMD_UNINSTALL_HOSTPerform self-removal from the system0x28 CMD_TRANSMISSION_PLUGINGet the plugin name from C2 and run it (the plugin can be a shellcode or an EXE ﬁle) If the necessary plugin is not available on the disk, ﬁrst get it from C2. (Present only in old versions)0x29 CMD_PLUGIN_TRANSMISSION_EXECUTEGet the plugin ID from C2 and launch its entry point (the plugins are stored in memory). If the plugin is not in memory, ﬁrst get the PE ﬁle from the control server and reﬂectively load the exported function from it. (In old versions, it is the same as CMD_TRANSMISSION_PLUGIN)0x38 CMD_UPDATEDownload the EXE ﬁle from the speciﬁed link, save it to disk, and execute it.0x68Run the executable ﬁle at a ﬁxed path under the name of the current user. The path is equal to C:\ProgramData\AdobeBak \avanti.exe. (Present only in the latest versions)0x77 CMD_ADD_STARTUPSee CMD_TRANSMISSION_PLUGINOld Zupdax samples also have paths to PDB ﬁles: h:\E\项⽬问题\UDPUDP-英⽂\bin\server.pdb d:\磁盘\E\项⽬问题\版本\UDPUDP-英⽂\bin\server.pdbIt follows from them that the original name of the project can be translated as "UDPUDP-English."Connection with RedsipIn 2011, McAfee described a series of attacks on energy companies that was named Night Dragon. Among the malware used by the attackers was a Redsip backdoor matching command names and identiﬁers (CMD_SET_REM and CMD_UNINSTALL_HOST), and similar debug messages. In both cases, the payload is implemented through external plugins.Figure 11. Fragment of the Redsip code (2010 sample)Figure 12. Zupdax code fragment (2015 sample)Note that in 2018 Redsip was used in an attack on a Russian organization associated with the aerospace industry. The attackers used a leaked corporate document as a BILISIM ANONIM SIRKET certiﬁcate.Among the ﬁles signed with these certiﬁcates are components of the PipeMon malware, which is attributed to the Winnti group. Studying the network infrastructure of the second sample, we also noted the presence of indirect connections with the old Winnti infrastructure, but they require additional conﬁrmation.However, in the case of Slack.exe, we can state the presence of reliable infrastructure connections with the FF-RAT backdoor, which was described by BlackBerry in 2017. So, both the Zupdax sample and the FF-RAT samples use playdr2.com and gamepoer7.com subdomains as C2.Connections with Bronze Union and TA428ESET's previously mentioned report Operation StealthyTrident: corporate software under attack on the compromise of Able Desktop notes the presence of HyperBro and Zupdax backdoors (Korplug according to ESET), as well as Tmanger and ShadowPad as part of a single cybercriminal operation. The researchers give several possible explanations for this connection. We were able to identify several additional facts that give more information about the connections between the Bronze Union (LuckyMouse, APT27) and TA428 groups and Zupdax malware.Code intersectionsThe Zupdax sample from the ESET report contains a dropper that is standard for this malware (data1.dat, loads the pcalocalresloader.dll library, which contains a shellcode that decrypts and executes another shellcode from the thumb.db ﬁle. The second shellcode contains a DLL library compressed using the LZNT1 algorithm, which it reﬂectively loads into memory.Figure 14. Fragment of the ESET reportBoth shellcodes use an atypical hashing algorithm for the names of imported libraries and functions (see Figure 15). For example, kernel32.dll has the hash 0xD4E88, and ntdll.dll 0x1B708. However, a search for similar samples showed that similar shellcodes can be found in various malware families—for example, in SmokeLoader or in exploits for InPage. It is likely that a builder available to various hacker groups was used to create the shellcodes.Figure 15. Hash function in auxiliary shellcodesHowever, the whole scheme, including the legitimate component IntgStat.exe, pcalocalresloader.dll library, and the encrypted ﬁle thumb.db, was used in this form only to download the HyperBro backdoor, as described by Kaspersky. The only diﬀerence is that in the case of Able Desktop, shikata_ga_nai obfuscation was not applied.An auxiliary DLL located in thumb.db handles the simultaneous launch of the dropper (data1.dat) and the legitimate Able Desktop installer. It is distinguished by the presence of a large number of unused strings in the data section. Some of them are speciﬁc only to samples of the HyperBro backdoor:Elevation:Administrator!new:{FCC74B77-EC3E-4dd8-A80B-008A702075A9} SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Uninstall\\test system-%d CreateProcessAsUser error %d Win2012(R2)As follows from the ESET report and our research, the criminals behind the attack on Able Desktop users have access to both HyperBro and Zupdax. However, most of the time, the go.vegispaceshop.org domain was present at the same IP address.The latter domain, along with the IP address, can be found in the NTT Security report on the Albaniiutas malware from the TA428 toolkit. As the detailed analysis of control server, and was mentioned by ESET in Operation StealthyTrident.These connections further unite the attackers' goals: the compromised Able Desktop installers, as well as the above-mentioned samples of Albaniiutas and HyperBro, were used in attacks on organizations in Mongolia.DownloadersIn the Space Pirates network infrastructure, we found two types of downloaders containing decoys with Russian text. One of them was also found in the network of our client, who was attacked by criminals.Figure 17. Example of a decoy documentDownloader.Climax.AThe ﬁrst downloader diﬀers by the use of parts of the source code of the Rovnix bootkit (it was described in detail by Kaspersky). Note that, according to our data, the infrastructure.We have no information about what malware was delivered by this downloader. However, researchers from Kaspersky managed to identify likely samples based on thesimilarity of PDB paths and identical control servers.Figure 18. Fragment of the Kaspersky reportIn the screenshots of the payload presented in the report, you can notice a speciﬁc technique for storing strings: they are all in one data block and indexed by numbers with the preﬁx "PS_". This technique is found in the code of the publicly available PcShare backdoor. The sets of strings highlighted by the researchers correspond exactly to those that can be found in the open backdoor code. A similar correspondence can be made between the commands supported by the malware. As a result, we can conﬁdently say that this payload is based on the PcShare code.Figure 19. Fragment of a ﬁle of strings from the PcShare codeNext, we will consider a modiﬁed version of PcShare, which we called RtlShare. Note that during the investigation for our client, we found a RtlShare sample connecting to above, we can assume that the payload delivered by the downloader is none other than RtlShare.Downloader.Climax.BAnother type of downloader can use vulnerabilities in Microsoft Equation Editor for its execution. This vulnerability, in particular, is exploited by a document named APT groups.The code of this downloader is completely diﬀerent from Downloader.Climax.A, but does boast some similar features. In particular, both downloaders use TCP to connect to C2, and the resulting payload is decompressed using the LZW algorithm in both cases.Downloader.Climax.B gains persistence in the system via the registry key HKCU\Software\Microsoft\Windows\CurrentVersion\Run\GetUserConﬁg. Its task is to get the ﬁles named INFOP11.EXE and OINFO11.OCX from the control server and execute the EXE ﬁle. Each of the ﬁles has its own numeric identiﬁer, which is sent to C2.Figure 20. Fragment of the downloader codeAfter loading, the following conﬁguration parameters in the downloader itself are written to the body of the received OCX ﬁle: the node and port of the control server, the waiting time between calls to C2, the TodaySend string, as well as the generated GUID.RtlShareThe payload of the RtlShare malware is based on the publicly available PcShare backdoor code. The malware has a speciﬁc execution chain, the code of which is not name rtlmake.dll.To do this, the OS bitness is ﬁrst checked and the necessary data block is selected, after which it is XOR-decrypted with a key in the form of one of the strings indicating the place where the conﬁguration will be copied.To bypass detection based on hash sums, attackers add a random number of random bytes to the end of the library, while updating the Checksum ﬁeld in the PE header of the ﬁle. This way, a new ﬁle is extracted at each new launch.Then the dropper checks whether it is running under the SYSTEM user by searching for the conﬁg substring in the path to the LocalAppData folder. If the substring is present, the library is restarted under the current user via rundll32.exe.Otherwise, the resulting library is saved to the ﬁle %LOCALAPPDATA%\Microsoft\Windows\WER\Security\wuaueng.hlk, and the path to it is written to the registry using the key HKCU\Software\Classes\CLSID\{42aedc87-2188-41fd-b9a3-0c966feabec1}\InprocServer32. This section is responsible for the MruPidlList COM object used in the library shell32.dll, which, in turn, loads the process explorer.exe—this is a well-known technique for malware persistence in the system.At the end of its operation, the dropper executes the extracted DLL using regsvr32.exe and self-removes via a BAT ﬁle.Injector rtlmake.dllVersions of rtlmake.dll with diﬀerent bitness have the same functionality, which is conﬁned to extracting the next-stage DLL and embedding its code into the process rdpclip.exe (or into the current process).At the beginning of its operation, the injector makes sure that it is running in one instance: mutexes are most often used for this purpose, but in this case named ﬁle mappings are applied. During the operation of rtlmake.dll, a mapping with the name 55fc3f9a654c500932 is created, while the mapping 7f8b6a2440e5c9e5b6 handles the payload.Then, using a function similar to the previous step, the DLL with the payload and conﬁguration is decrypted and decompressed (recall that it was previously copied to 1192f6c4b018c8e0f51d31d6dde22ﬀ3.Figure 22. RtlShare backdoor conﬁgurationNext, the process in which the payload will be injected is selected. If the current process is explorer.exe (which is true, if the library was loaded as a COM component), then the target process will be rdpclip.exe. If rdpclip.exe failed to start, or if the DLL was loaded into another process, the current process becomes the target one.The decrypted conﬁguration is written to the memory of the selected process, and after that the injector generates a command line of the form /v /c:0x12345678, which contains the conﬁguration address in the address space of the process. The resulting string and payload are also written to the process memory.Figure 23. Generating the command line in rtlmake.dllTo start execution of the payload, the injector determines the oﬀset in the PE ﬁle where the exported Putklm function is located, and after that it gains control of the CreateRemoteThread call. In this case, the command-line address is passed to it as arguments. Note that there is no reﬂective loading up to this point: the Putklm function actually works as a shellcode.Payload rtlmain.dll (rtlmainx64.dll)This DLL is fully implemented based on the code of the main backdoor module PcShare—PcMain. Here are some of its features that are typical only for the RtlShare family:• A reﬂective loader is implemented inside the library, which is located in the Putklm function. The command-line address that it receives is passed to DllEntryPoint viathe lpReserved parameter and is XOR-encrypted with the constant 0x73DE2938. Address recovery and command-line parsing occur inside the DllMain function.• After running rtlmain.dll, all the rdpclip.exe processes are terminated except for the current one. • The backdoor string storage, in addition to LZ4 compression (which is present in the open-source code), is AES-encrypted with the key • There is a special command that allows attackers to overwrite the conﬁguration inside the injector rtlmake.dll (the required oﬀset contains the magic constant0x76EE38BB).• The getip command has been added to the code for implementing the remote command shell, which is done through the call nslookup myip.opendns.comresolver1.opendns.com.Use of RtlShareRtlShare samples can be found in other reports. For example, Recorded Future researchers found PcShare samples in the network infrastructure of the RedFoxtrot group, which have signiﬁcant similarities with the RtlShare family. In addition, similar samples were previously detected by Bitdefender when investigating the activity of an APT group with Asian roots aimed at government institutions in Southeast Asia.There are no connections in the network infrastructure between the above-mentioned cases, nor between these cases and the activity that we found during incident investigation for our client. This suggests that despite the absence of RtlShare code in open sources, several diﬀerent APT groups of Asian origin have access to this malware.PlugXWe also found several samples of the PlugX backdoor in our client's network. The samples used micro.dns04.com, microft.dynssl.com, api.microft.dynssl.com, and www.0077.x24hr.com addresses as control servers, which are part of the group's network infrastructure and directly intersect with MyKLoadClient C2.PlugX is widely used in the cybercriminal environment; it has several versions and multiple modiﬁcations. However, the samples identiﬁed by us have a set of features that make it possible to distinguish them into a separate group.As in the usual PlugX, the main payload of the backdoor is implemented in the form of a DLL library, which is reﬂectively loaded into memory during malware execution. A pointer to the structure is passed to its entry point as an argument; the structure contains, in particular, the signature and address of the encrypted conﬁguration.In the original PlugX, the signature is the constant 0x504C5547 (PLUG string), but in our sample group, this value was equal to 0xCF455089. The conﬁguration size, which is 0x1924 bytes, is also nonstandard: we could not ﬁnd a mention of such a conﬁguration in open sources. Unlike many other variants that have the XV signature instead of MZ and PE, in our case, the header of the PE ﬁle with the payload remains unchanged.The inlining technique is actively used in the backdoor, in particular, for API calls and string encryption.Figure 24. API function calls in PlugXTo search for API functions, the backdoor uses CRC32 hashes of their names. The received pointers are cached, while the code fragments responsible for this operation are embedded in every place where access to WinAPI is required.Figure 25. String encryption in PlugXAlmost all the strings in the backdoor are stack-based, most of them are encrypted using the ADD-XOR-SUB method. The decryption code is copied to all places where encrypted strings are used.The malware uses a standard set of plugins known from early versions. The original PlugX, during their initialization, uses a parameter that looks like a date. For instance, the Disk plugin has the 0x20120325 parameter. In our case, for all plugins, the 2012 combination has been changed to 8102 (which may mean 2018): the same Disk plugin uses the 0x81020325 value.The entire backdoor also has a numeric value indicating the version: it is transmitted to C2 along with information about the infected system and is equal to 0x20161127. The same version can be found in Backdoor.PlugX.38 from the Dr.Web report on attacks on state institutions in Kazakhstan and Kyrgyzstan. However, other unique values from the Space Pirates variant, such as signature and conﬁguration size, are missing in BackDoor.PlugX.38. Both variants seem to be based on the base code of the same version of PlugX, but its modiﬁcations in each of these cases are diﬀerent.We found more precise intersections in other reports. Among the PlugX instances used in the attacks on the Vatican in 2019–2020 are several samples similar to those used by the Space Pirates group. In addition, the same backdoor modiﬁcations are found in samples associated with the activity of the RedFoxtrot group. However, we failed to detect connections in the network infrastructure, which again suggests the exchange of tools between groups. Given the other intersections between the malware used in the attacks (Zupdax and RtlShare), we can also assume that all this activity belongs to one or more jointly operating groups. This, however, requires additional conﬁrmation.Demo dropperSome samples of the PlugX variant we found are extracted into the system by an interesting dropper, whose executable ﬁle can be called demo.exe. It is implemented based on the MFC library. Its job is to create a VBS script named msiexece.vbs or cosetsvc.vbs, and perform its subsequent execution.The path to the EXE dropper and the names of the ﬁles to be extracted from it are passed to the script as command-line parameters. The ﬁles are in the demo.exe overlay and can be encrypted with a 1-byte XOR (but in all samples known to us, the key is 0). The overlay oﬀset and the length of each of the ﬁles are written in the VBS code. The script extracts the standard PlugX components: a legitimate EXE ﬁle, a DLL for side-loading, and encrypted shellcode, after which the legitimate ﬁle is executed.Figure 26. Writing and execution of the VBS ﬁleBH_A006As in other cases, we found this malware both on our client's resources and when researching the group's network infrastructure. It contains a modiﬁed Gh0st backdoor as a payload. The string BH_A006 is constantly found in PDB paths and internal names of DLL libraries associated with the backdoor, which is why it got this name.BH_A006 has a nontrivial payload execution scheme, which can vary at the initial stages in diﬀerent samples. Let's consider it using the example of one of the malicious • C:\ProgramData\Sandboxie\SbieIni.dat (install32.dat)• C:\ProgramData\Sandboxie\SbieDll.dll • C:\ProgramData\Sandboxie\SandboxieBITS.exeAfter that, there is a check for write permission to the system folder. For this, the dropper tries to create a ﬁle in it with the name format: wmkawe_%d.data. The content is the Stupid Japanese string.If there is no permission, and the system is 64-bit, two additional ﬁles are extracted:• C:\ProgramData\Sandboxie.dll (install64.dll) • C:\ProgramData\Sandboxie.dat (install64.dat)The names given in parentheses are not used, but are present in the code. Apparently, they were left there from another version of the dropper.All the ﬁles are contained in the data section in packaged form; a variant of the LZMA algorithm is used for compression. This compression method is also used in further stages of the malware operation. Further in the section, unless otherwise indicated, we will refer to this algorithm.Depending on the available permissions and the OS bitness, the dropper starts one of the chains to bypass the UAC:• (x32) C:\ProgramData\Sandboxie\SandboxieBITS.exe ByPassUAC • (x64) rundll32.exe C:\ProgramData\Sandboxie\SbieMsg.dll,installsvc ByPassUACOr it immediately proceeds to the execution of the next stage: C:\ProgramData\Sandboxie\SandboxieBITS.exe InsertSIn all three cases, the ﬁle %tmp%\delself.bat is created, which contains commands for self-removal.Note that it is not the ﬁrst time researchers have encountered this sample. Another variant of the MFC loader (stage 0) containing the same dropper was mentioned by ESET in the Operation NightScout report, and then studied in detail by our colleagues from VinCSS.Stage 2. .dat loader (SbieDll.dll / SbieMsg.dll)Regardless of the command run by the DLL dropper, execution jumps to one of the extracted DLL libraries. In the case of a 32-bit version, a legitimate component of the Sandboxie utility, which is vulnerable to DLL side-loading, is used for this.Figure 27. Loading and running the shellcode in SbieDll.dllThe code in the 32-bit and 64-bit versions of the libraries is almost identical and downloads the corresponding .dat ﬁle, decrypts its contents, and executes it. For decryption, XOR is used with the byte sequence: 00, 01, 02, FF, 00, 01, Just as in the code of the previous stage, here you can see alternative paths to .dat ﬁles that are not used during operation.Stage 3. Shellcode .dat and DLLThe shellcode is a reﬂective DLL library loader, which is located in its body immediately after the loading function. In this case, the library functionality diﬀers signiﬁcantly in shellcode versions with diﬀerent bitness.Stage 3.1 ByPassUAC (x64)Stage 3.1.1 Intermediate DLLThe 64-bit version is only responsible for implementing the UAC bypass. To perform this task, it extracts another DLL from itself into memory and transfers control to it. Reﬂective loading is performed again using a shellcode, which is predecrypted with XOR using the 0x97 key. The shellcode is not autonomous: in addition to the buﬀer with the PE ﬁle, pointers to the necessary functions, such as GetProcAddress and LoadLibraryA, are passed to it.Figure 28. Decryption and execution of the shellcode for reﬂective loadingStage 3.1.2 DLL with UAC bypass implementationThe DLL contains the path to the PDB ﬁle: e:\F35-F22\昆明版本\ElephantRat\nwsapagent\Bin\ByPassUAC64.pdb.Figure 29. Choosing a UAC bypass methodThe UAC bypass method used depends on the presence in the system of the avp.exe process (a component of Kaspersky antivirus products) and on the system version. In total, three well-known methods using sdclt.exe, a .NET library, and mocking trusted directories have been implemented.If the bypass is successfully implemented using any of the methods, the previously encountered command C:\ProgramData\Sandboxie\SandboxieBITS.exe InsertS is run.Stage 3.2. ByPassUAC / InstallS (x32)Stage 3.2.1. Intermediate DLLThe 32-bit version of the DLL, which is located in the corresponding DAT ﬁle, is obfuscated using an unknown protector.Figure 30. The entry point in the obfuscated PE ﬁleIn the data section of this DLL, there is a compressed shellcode that is decompressed and gains control.Stage 3.2.2. Decompression shellcodeFigure 31. Passing arguments to the function via the return addressThe shellcode starts with calling the sub_20F function, which takes three arguments: a hash on behalf of VirtualAlloc, the size of the buﬀer to decompress, and a pointer to the data. The arguments are written immediately after the call statement, and the called function accesses them using an oﬀset relative to the return address.The sub_20F function gets a pointer to the VirtualAlloc function, for which it ﬁnds the kernelbase.dll library in the list of loaded modules (which is always assumed to be in second place on the InInitializationOrderModuleList list) and iterates its export table using a hash to ﬁnd the required function. Then a buﬀer of the size speciﬁed in the arguments with RWX rights is allocated, and the compressed data is unpacked into it. In this case, compression is done with the NRV family algorithm from the UCL library (used in the UPX packer). The data is another shellcode to which control is transferred.Stage 3.2.3. Relocation shellcodeThe main part of the next shellcode is the contents of data and code sections, apparently extracted from some PE ﬁle. To launch correctly at the beginning of its operation, the shellcode performs address correction (relocation). The parameters necessary for it are transmitted in the same way as the previous shellcode using the return address. The relocation is performed relative to the standard base address 0x401000. After its completion, control is transferred to the address of the entry point speciﬁed in the parameters (as an oﬀset relative to the end of the relocation table).Figure 32. Parameters of the relocation shellcodeStage 3.2.4. Installer in shellcode formatThe main function of the installer loads the WinAPI functions necessary for operation, after which it can perform the operation speciﬁed in the command line.Figure 33. Code fragment of the shellcode installerThe following commands are supported:• InsertS: create a service named Network Service. The name of the current module with the runsvc parameter is speciﬁed as the launch path. If there are no avp.exeprocesses in the list, the service is launched immediately.• Runsvc: delete all auxiliary ﬁles and folders that could be used in the UAC bypass. Decompressing the next-stage shellcode, creating an svchost.exe process, andinjecting the decompressed shellcode. Interestingly, in the code for impersonation and starting the svchost.exe process, a special check has been implemented only for the Russian language, which indicates an orientation to Russian-language OS versions.Figure 34. Special processing for the Russian-language version of the systemIn addition, a separate thread is created that checks for Global\MYKERNELDLLMAPPING06 mapping every 50 seconds. In case of its absence in the system, the creation of svchost.exe and shellcode injection are repeated.• ByPassUAC: works completely similar to the 64-bit version (stage 3.1.1)—it decompresses the DLL with the implementation of UAC bypass methods and transferscontrol to it.• Memload: there is a MemLoadServer debug message in the code. Decompresses the next-stage shellcode and runs it directly in the current process.Stage 4. MemLoadLibraryThe fourth stage has a previously encountered format: the decompression shellcode extracts the relocation shellcode, which in turn executes the main code (obtained from the PE ﬁle). The main code in this case is small in volume and is responsible for decompressing and reﬂectively loading the DLL into memory. The reﬂective loader is implemented in the form of an XOR-encrypted shellcode, as in stage 3.1.1. After loading the library, control is transferred to the exported Online function.Figure 35. Decompressing the DLL and starting the Online exportThe DLL is again just an intermediate loader and runs another shellcode.Figure 36. Online function codeThe new shellcode is an unpacking shellcode, and stage 4 is repeated exactly, right up to calling the Online function from the latest DLL library.Stage 5. PayloadIt is a backdoor partially obfuscated with the help of a previously encountered packer (stage 3.2.1), which is based on the Gh0st trojan code.Interestingly, the signature of network packets (Gh0st in the original) in this version is generated and checked in a special way. In a 4-byte value, only the lowest bit of each byte carries the payload, the remaining bits are random. The lower bits must satisfy a set of logical relations involving the lower bits of the magic constant 0x31230C0. Note algorithm for generating a network signature, and contains the name BH_A006_SRV.dll. This sample was uploaded to VirusTotal in 2015.Connection with 9002 RATIn studying the execution chain of the BH_A006 backdoor, it turned out that the technique used for converting a PE ﬁle into an autonomous compressed shellcode is not unique. Similar decompression and relocation shellcodes, as well as the procedure for loading WinAPI functions, are present in instances of the 9002 RAT malware. For Korean companies—one of the last mentions of this malware.Deed RATAnother type of previously unknown malware, which we found in a single instance in our client's infrastructure, is a modular backdoor. Based on the value of the signature used in the header of its modules, we named it Deed RAT.The Deed RAT control server ftp.microft.dynssl.com is directly connected to the infrastructure of the Space Pirates group. Another similarity can be found in one of the code features: the [xor 0xBB, sub 0x1] operations are used to encrypt the shellcode in the same way as in the part of PlugX samples.The payload execution scheme resembles the standard method that PlugX uses: a legitimate EXE ﬁle signed by Trend Micro loads a malicious library TmDbgLog.dll, which, in turn, runs the encrypted shellcode from the ﬁle PTWD.tmp.However, an interesting method of transferring control to the shellcode is used: at the time of loading, the library modiﬁes the executable ﬁle so that after returning control to the EXE ﬁle, the FreeLibrary function is immediately called for it. Having regained control at the time of unloading, the library modiﬁes the executable ﬁle again, writing assembly instructions for calling the shellcode to it—they will be executed immediately after returning from FreeLibrary.The shellcode is the loader of the main module, which is located in compressed and encrypted form after the loading code. The module has a special structure and uses techniques borrowed from PE ﬁles. In particular, the module has three "sections" with diﬀerent access rights and a relocation table completely similar to the one used in PE format.The decrypted module consists of a header starting with the signature 0xDEED4554 and a main data block compressed with LZNT1, which contains section data and a relocation table. For each of the sections, the header indicates its actual size and the size in memory, which is aligned to the 0x1000 boundary. The header structure looks as follows:struct SectionHeader{ };struct ModuleHeader{_DWORD Signature; // 0xDEED4554 _DWORD AbsoluteOffset; // 0x1000 SectionHeader Sections[3]; _DWORD Unknown; };During operation, the loader allocates the necessary memory area, copies each of the sections into it (taking into account its size in memory), and performs address conﬁguration (relocation). The ﬁrst of the sections contains executable code, and RX permissions are set for its memory area, the other sections have RW permissions. After loading the sections, the module entry point speciﬁed in the header gain control.The main backdoor module has the identiﬁer 0x20 and is responsible for loading and managing plugins that implement various functions. In its data section, there are eight encrypted plugins that are initialized at the beginning of operation:IDNameDescription0x30 StartupA plugin that implements the malware startup algorithm0x40 ConﬁgA plugin that handles the conﬁguration0xA0 InstallA plugin responsible for persistence on the infected computer. Persistence can be achieved through the mechanism of services and through the registry (the key is set by the conﬁguration)0xB0 InjectA plugin that implements code injection into a given process (determined by the conﬁguration)0x60 Network A plugin that manages network interaction0x70 NetSocket A plugin that implements various types of connectors for network interaction0x50 PluginA plugin that implements registry monitoring for the appearance of new plugins in it and their loadingNetwork commands0x40: transferring the conﬁguration to C2 0x41: receiving a new conﬁguration from C20x50: collecting information about plugins 0x51: adding a plugin to the registry and launching it 0x52: removing the plugin from the registry and memory0x90 NetProxyA plugin that manages information about available proxy servers. It has a built-in sniﬀer for automatic detection of proxies used by the infected computerUnlike the main module, an algorithm based on Salsa20 is used to encrypt plugins. Among the modiﬁcations is a custom constant for the key extension, equal to arbitraryconstat. The structure of the decrypted plugin completely copies the structure of the main module, and a similar algorithm is used to load it.Each plugin implements ﬁve service operations that are implemented at its entry point:1. Initialization. 2. Obtaining the numeric ID of the plugin. 3. Obtaining the plugin name. 4. Obtaining a link to the structure with the plugin's API functions. 5. Resource deallocation.Figure 38. Entry point of the Conﬁg pluginThe useful functionality of the plugin is available through the structure with its API functions. Among them, there may be a dispatcher function responsible for processing network commands that the plugin supports. The main module also has an API that allows you to access other plugins and implements auxiliary functions, such as encryption or access to the registry.One interesting feature of the backdoor is the pseudorandom generation of various kinds of strings—registry keys, names of mutexes and pipes, and command-line arguments. A string of the required length is created on the basis of a seed, which is generated using the numeric identiﬁer of the string and the serial number of the system volume. As a result, each of the infected computers uses its own unique set of string constants.Figure 39. ID generation algorithmThe backdoor stores all the necessary data in the registry key [HKLM|HKCU]\Software\Microsoft\. For each type of information, it creates its own subkey, the name of which is obtained using the string generator described above. To get all the keys that the backdoor can use, we implemented a script in Python that accepts the serial number of the volume and reproduces the operation of the generator.Registry keys generatorimport clickdef rshift(val, n): s = val & 0x80000000 for i in range(0,n): return valdef generator(volume_number, seed, length): gr_seed = (volume_number + seed + 0x1000193) & 0xffffffff r = [] for i in range(length): r1 = (gr_seed * 0x2001) & 0xffffffff r2 = rshift(r1, 7) r3 = r2 ^ r1 r4 = (r3 * 9) & 0xffffffff r5 = rshift(r4, 17) r6 = r4 ^ r5 r7 = (r6 * 33) & 0xffffffff r.append(((r7 & 0xffff) % 26) + 0x41) return bytes(r).decode('utf-8')@click.command() @click.argument("VOLUME_NUMBER") def main(volume_number): try: serial_number = int(volume_number, 16) except ValueError: print("[~] Invalid Volume number") returnregistry_key_1 = generator(serial_number, 0xC4DA8B2F, 6)registry_key_2 = generator(serial_number, 0x7BD90AA1, 10) registry_key_3 = generator(serial_number, 0xF7BBC23F, 10)registry_key_4 = generator(serial_number, 0xDF12A5B2, 8) registry_key_5 = generator(serial_number, 0x6EB208A4, 9)registry_key_6 = generator(serial_number, 0xDE8765CB, 8) registry_key_7 = generator(serial_number, 0x6D3C218A, 8)registry_key_8 = generator(serial_number, 0x78D3BC22, 8) registry_key_9 = generator(serial_number, 0xD53BCA90, 10)registry_key_11 = generator(serial_number, 0x4FD82CB4, 8) registry_key_13 = generator(serial_number, 0xDCBC5D23, 8)registry_key_10 = generator(serial_number, 0xE2C7BA56, 15) registry_key_12 = generator(serial_number, 0x8BD43C12, 8)print(f"[+] Plugin monitor registry key: [HKCU|HKLM]\\Software\\Microsoft\\{registry_key_1}") print(f"[+] Executable path: [HKCU|HKLM]\\Software\\Microsoft\\{registry_key_3}; ValueName: {registry_key_2}") print(f"[+] Machine ID: [HKCU|HKLM]\\Software\\Microsoft\\{registry_key_5}; ValueName: {registry_key_4}") print(f"[+] Shellcode for injection: [HKCU|HKLM]\\Software\\Microsoft\\{registry_key_6}; ValueName: {registry_key_7}") print(f"[+] Proxies: [HKCU|HKLM]\\Software\\Microsoft\\{registry_key_9}; ValueName: {registry_key_8}") print(f"[+] Config : [HKCU|HKLM]\\Software\\Microsoft\\{registry_key_11}; ValueName: {registry_key_13}")if __name__ == "__main__": main()The Network plugin is responsible for the algorithm of interaction with the control server. It extracts the C2 address as a URL string from the conﬁguration and, depending on the scheme speciﬁed in it, selects one of the connectors available in the NetSocket plugin. All of them implement a common interface for uniformly receiving and transmitting network messages. Before sending, messages are compressed using the LZNT1 algorithm and encrypted with a modiﬁed Salsa20 using a random key.To resolve the domain of the control server, the backdoor consistently uses DNS over HTTPS and the usual DNS servers speciﬁed in the conﬁguration (public servers of Google and other providers), before resorting to the standard mechanism. This gives the malware the opportunity to hide the C2 domain from network traﬃc inspection tools.Supported connection protocols include TCP, TLS, HTTP, HTTPS, UDP, and DNS.The REUSEPORT option is available for TCP—specifying it leads to prebinding of the socket with which the connection to C2 is established. Binding is performed on the largest free port in the range of system (well-known) ports. The ports are checked starting from 1022 in descending order. Apparently, this technique is implemented to bypass security measures and disguise traﬃc as system network services.The backdoor also provides for the possibility of obtaining a new C2 over HTTP. To do this, a web page can be used, the address of which is speciﬁed in the conﬁgurationwith the URL:// scheme. After the page loads, its body is searched for the agmsy4 and ciou0 substrings, which indicate the beginning and end of the string with the control server. This string is encoded using base16 (hex) with the abcghimnostuyz0456 alphabet and is processed similarly to the address from the conﬁguration.TCP/TLS and HTTP/HTTPS connectors support connection via a proxy server, which can be obtained using the NetProxy plugin. The plugin has its own proxy storage, which is located in the registry and can be ﬁlled with values from the conﬁguration, system proxies, and data from installed browsers (Chrome, Opera, and Firefox). In addition, the plugin has the functionality of a built-in sniﬀer that listens to the traﬃc of the infected computer using a raw socket. If the sniﬀer detects an attempt to connect to a proxy server (SOCKS4, SOCKS5, or HTTP) in the outgoing packet, it saves information about it in the storage.Before connecting to the control server, the backdoor checks the schedule: up to four entries can be speciﬁed in its conﬁguration, containing the days of the week and the hours during which the connection is prohibited.After the connection is established, the backdoor can execute the following commands:IDDescription0x210 Collect information about the system0x211 Creation of a separate connection to work with plugins0x212 Self-removal0x213 Empty command (ping)0x214 Connection deactivation0x215 Update of the shellcode for the injection, which is stored in the registry0x216 Update of the main shellcode on the disk. All plugins stored in the registry are deletedIf a command is received that is not on the list above, it is assumed that it is a network command of one of the plugins. Its ID is determined by applying the mask 0xFFF0 to the command ID. If the plugin is not available locally, it is preloaded from C2 and saved in the registry.On the computer infected with Deed RAT, we were able to detect a single plugin obtained dynamically from the control server. It is called Shell, and its ID is 0x270. Shell supports two network commands (0x270 and 0x271); each of them starts the speciﬁed process and redirects its I/O to C2. In the ﬁrst case, the interaction takes place in text mode via pipes. In the second case, Windows Console API operations are used, which allows attackers to fully emulate a console window on their side, taking into account information about the size of the screen buﬀer, cursor position, and other parameters.The conﬁguration of the sample we examined contained the following set of strings:%ALLUSERSPROFILE%\Test\Test.exePath to the legitimate executable ﬁle (installation path)StringPurposeTmDbgLog.dllPTWD.tmpTestTrend Micro PlatinumPlatinum Watch DogLibrary name for DLL side-loadingFile name with the encrypted shellcodeService nameDisplayed service nameService descriptionSOFTWARE\Microsoft\Windows\CurrentVersion\RunOnce Key for persistence in the registry%windir%\system32\svchost.exe%windir%\system32\taskeng.exe%ProgramFiles%\Internet Explorer\iexplore.exe%windir%\system32\WmiPrvSE.exeProcess names for injecting codehio2cF9VF2Jsdf9nIdentiﬁer sent along with system informationasdRFSDabormhkmfgUIYGBDUREMutex nameurl of DNS over HTTPS serversurlﬂare-dns.com/dns-queryurl server URLConclusionAPT groups with Asian roots continue to attack Russian companies, as evidenced by the activity of Space Pirates. Cybercriminals both develop new malware that implements non-standard techniques (such as Deed RAT) and use modiﬁcations of existing backdoors. Such modiﬁcations sometimes feature multiple layers of obfuscation to defeat security tools and complicate the analysis procedure—as in the case of BH_A006, built on the code of the popular Gh0st backdoor.A separate diﬃculty as regards APT groups operating out of the Asian region is accurate attribution: the frequent exchange of tools and, in some cases, joint activity of groups signiﬁcantly complicate this task. The core part of our research is based on the results of our investigation of an information security incident at our client's premises and analysis of speciﬁc network infrastructure that uses DDNS domains. The data obtained allows us to state with certainty that the same attackers are behind the detected activity.PT ESC will continue to monitor the threats: new facts may provide more information about the activities of Space Pirates and its relationship with other groups.AppendicesMITREIDInitial AccessT1566.001T1566.002ExecutionT1059.003T1059.005T1106T1053.002T1053.005T1569.002NameDescriptionPhishing: Spearphishing AttachmentSpace Pirates uses phishing emails with malicious attachmentsPhishing: Spearphishing LinkSpace Pirates uses phishing emails with links to malwareCommand and Scripting Interpreter: Windows Command ShellSpace Pirates malware features remote command shell functionalityCommand and Scripting Interpreter: Visual BasicSpace Pirates uses VBS scripts, including ReVBShellNative APISpace Pirates malware uses WinAPI functions to run new processes and implement shellcodeScheduled Task/Job: At (Windows)Space Pirates uses atexec.py to run commands on a remote hostScheduled Task/Job: Scheduled TaskSpace Pirates uses system tasksSystem Services: Service ExecutionSpace Pirates creates malicious services.IDPersistenceT1053.005T1543.003T1546.015T1547.001Privilege EscalationT1548.002NameDescriptionScheduled Task/Job: Scheduled TaskSpace Pirates creates system tasks for persistence on the hostCreate or Modify System Process: Windows ServiceSpace Pirates creates malicious services for persistence on the hostEvent Triggered Execution: Component Object Model HijackingRtlShare malware persists in the system through substitution of the MruPidlList COM objectBoot or Logon Autostart Execution: Registry Run Keys / Startup FolderFor persistence on the host, Space Pirates can place a shortcut in the autorun folder and use the Run and RunOnce registry keysAbuse Elevation Control Mechanism: Bypass User Account ControlSpace Pirates malware contains various techniques for bypassing UACT1068Exploitation for Privilege EscalationSpace Pirates can exploit the CVE-2017-0213 vulnerability for privilege escalationDefense EvasionT1027.001T1027.002T1036.004T1036.005T1055T1055.001T1078.002T1112T1140T1197T1218.011T1553.002T1564.001T1574.002T1620Credential AccessT1555.003T1003.001T1040DiscoveryT1087.001Obfuscated Files or Information: Binary PaddingThe RtlShare dropper adds random bytes to the extracted payloadObfuscated Files or Information: Software PackingOne of the stages of the BH_A006 malware is obfuscated using an unknown protectorMasquerading: Masquerade Task or ServiceSpace Pirates uses legitimate-looking names when creating servicesMasquerading: Match Legitimate Name or LocationSpace Pirates masks its malware as legitimate softwareProcess InjectionSpace Pirates malware can inject shellcode into other processesProcess Injection: Dynamic-link Library InjectionSpace Pirates malware can inject DLLs with payload into other processesValid Accounts: Domain AccountsSpace Pirates uses compromised privileged credentialsModify RegistryDeed RAT stores all its data in the registry, including conﬁguration and pluginsDeobfuscate/Decode Files or InformationSpace Pirates malware uses various algorithms to encrypt conﬁguration data and payloadBITS JobsSpace Pirates uses BITS jobs to download malwareSigned Binary Proxy Execution: Rundll32Space Pirates can use rundll32.exe to run DLLsSubvert Trust Controls: Code SigningSpace Pirates uses stolen certiﬁcates to sign some Zupdax samplesHide Artifacts: Hidden Files and DirectoriesSpace Pirates can store its malware in hidden folders at C:\ProgramDataHijack Execution Flow: DLL Side-LoadingSpace Pirates uses legitimate applications vulnerable to DLL side-loadingReﬂective Code LoadingSpace Pirates malware uses reﬂective loading to run payloads in memoryCredentials from Password Stores: Credentials from Web BrowsersSpace Pirates uses the Chromepass tool to retrieve passwords from Chrome browser storageOS Credential Dumping: LSASS MemorySpace Pirates gets LSASS process dumps for further credential dumpingNetwork SniﬃngDeed RAT collects information about in-use proxies through network sniﬃngAccount Discovery: Local AccountSpace Pirates collects information about users through the query user commandT1087.002Account Discovery: Domain AccountT1082System Information DiscoverySpace Pirates collects information about users in the domain through the legitimate CSVDE toolSpace Pirates malware collects system information, including OS version, CPU, memory, and disk informationT1614.001T1016System Location Discovery: System Language Discovery Deed RAT gets the language code identiﬁer (LCID) during system information collectionSystem Network Conﬁguration DiscoverySpace Pirates collects information about the network settings of the infected machineT1069.002Permission Groups Discovery: Domain GroupsSpace Pirates collects information about groups in the domain through the legitimate CSVDE toolT1083T1033T1057File and Directory DiscoverySystem Owner/User DiscoveryProcess DiscoveryLateral MovementSpace Pirates collects information about .doc and .pdf ﬁles in the systemSpace Pirates collects information about users of compromised computersSpace Pirates uses the tasklist.exe tool to retrieve process informationT1021.002CollectionT1119T1560.001T1056.001Command and ControlT1071.001T1071.004T1132.001T1573.001T1008T1095T1105T1571T1572Remote Services: SMB/Windows Admin SharesSpace Pirates uses the atexec.py and psexec.rb tools to move through the networkAutomated CollectionSpace Pirates searches for and copies ﬁles with the masks *.doc and *.pdfArchive Collected Data: Archive via UtilitySpace Pirates zips stolen documents into password-protected archives using 7-ZipInput Capture: KeyloggingSpace Pirates malware can capture user inputApplication Layer Protocol: Web ProtocolsDeed RAT can encapsulate its protocol in HTTP and HTTPSApplication Layer Protocol: DNSDeed RAT can encapsulate its protocol in DNSData Encoding: Standard EncodingSpace Pirates malware can compress network messages using the LZNT1 and LZW algorithmsEncrypted Channel: Symmetric CryptographySpace Pirates malware can encrypt network messages using symmetric algorithmsFallback ChannelsSpace Pirates malware supports multiple C2s and can update the C2 list through web pagesNon-Application Layer ProtocolSpace Pirates malware uses its own protocols to communicate with the C2 serverIngress Tool TransferSpace Pirates downloads additional utilities from the C2 server using the certutil toolNon-Standard PortProtocol TunnelingSpace Pirates uses non-standard ports, such as 8081, 5351, 63514, etc., to communicate with • May 22, 2020 Operation TA505: investigating the ServHelper backdoor with NetSupport RAT. Part 2. • September 29, 2020 ShadowPad: new activity from the Winnti group 