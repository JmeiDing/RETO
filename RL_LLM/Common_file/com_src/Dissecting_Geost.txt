3/14/2020Dissecting Geost: Exposing the Anatomy of the Android Trojan Targeting Russian Banks - TrendLabs Security Intelligence BlogTrend Micro About TrendLabs Security Intelligence BlogSearch:Home CategoriesHome » Malware » Dissecting Geost: Exposing the Anatomy of the Android Trojan Targeting Russian BanksDissecting Geost: Exposing the Anatomy of the Android Trojan Targeting Russian BanksPosted on:March 5, 2020 at 3:58 am Posted in:Malware, Mobile Author: Vit Sembera (Threats Analyst)0The Android banking trojan Geost was ﬁrst revealed in a research by Sebastian García, Maria Jose Erquiaga and Anna Shirokova from the Stratosphere Laboratory. They detected the trojan by monitoring HtBot malicious proxy network. The botnet targets Russian banks, with the victim count at over 800,000 users at the time the study was published in Virus Bulletin last year. The research disclosed the types of information that Geost (detected by Trend Micro as AndroidOS_Fobus.AXM) steals from victims, as well as the activities of the group behind the botnet, including operational tactics and internal communication between masters and botnet coders. Building upon this interesting ﬁnding, we decided to dig deeper into the behavior of Geost by reverse engineering a sample of the malware. The trojan employed several layers of obfuscation, encryption, reﬂection, and injection of non-functional code segments that made it more difﬁcult to reverse engineer. To study the code and analyze the algorithms, we had to create Python scripts to decrypt strings ﬁrst. Initial Analysis Geost hides in malicious apps that are distributed via unofﬁcial web pages with randomly generated server hostnames. The victims usually encounter these as they look for apps that are not available on Google Play, or when they don’t have access to the app store. They then ﬁnd a link to that application on some obscure web server, download the app, then launch it on their phones. The app will then request for permissions that, when the victims allow, enables malware infection. The Geost sample we analyzed resided in the malicious app named “установка” in Russian, which means “setting” in English. The app showed a version of the Google Play logo as its own icon, which did not appear on the phone screen after launch.Figure 1. Application icon of the malicious app установкаWhen the app was launched, it requested device administrator privileges. This was unusual since legitimate apps don’t often ask for this, as it basically gives an app complete rights over a device. Important permissions that the user might unknowingly allow include those for accessing SMS messages, including conﬁrmation messages from banking apps. These messages allow the malware to harvest the victims’ names, balances, and other bank account details. With just a few clicks, attackers can then transfer money from the bank accounts of unaware victims.url Geost: Exposing the Anatomy of the Android Trojan Targeting Russian Banks - TrendLabs Security Intelligence BlogFigure 2: Screen that requests device admin permissionFigure 3: Application permissions requestedAfter conﬁrming necessary permissions, the visible part of the app will close and the app icon disappears, making victims think that the app was deleted. The sample device did not show any alarming signs of malicious activity at ﬁrst, but the malware is working in the background and the attackers just gained access to the device, allowing them to monitor sent and received messages, including SMS conﬁrmation messages from banking apps. To maintain persistence across reboots, it registers for BOOT_COMPLETED and QUICKBOOT_POWERON broadcasts.url Geost: Exposing the Anatomy of the Android Trojan Targeting Russian Banks - TrendLabs Security Intelligence BlogFigure 4: Registering services to boot broadcasts (some codes were obfuscated)Stage One Like many malware types, Geost’s run-time life is split into stages. The ﬁrst stage is small and simple, which will then download and/or decrypt and run the next stage, which is more complex. The Geost sample’s APK housed compiled Java code in classes.dex ﬁle. It also contained AndroidManifest.xml and resource ﬁles, which are usual contents of APK ﬁles. It also had a “.cache” ﬁle with a size of 125k. To decompile the extracted classes.dex ﬁle, several Java decompilers, namely dex2jar, jadx, jd-core/jd-gui and Ghidra, were all used, as no single decompiler was able to decompile all the Smali code.Figure 5: Decompiled Java source codeAt ﬁrst glance, the decompiled code seemed to be partially encoded in a series of strings; however, character frequency analysis showed random character usage. Further analysis revealed that the malware contained additional pieces of code that have no impact on the app’s behavior except to slow down its execution. It made reverse engineering more difﬁcult because the malware split useful code into parts and frequently changed execution paths. Which branch was taken was usually dependent on some variable with an unknown value. The same is applied with “switch”, “if”, and “try/catch” command blocks. Functions without meaningful code were inserted to make overall understanding of the malware actions harder.The non-functional code segments were gradually removed and the ﬁrst decryption algorithm used was identiﬁed. All strings in stage one were encrypted through RC4, using an algorithm that was split into several functions to avoid indication that it used RC4. After this, the next step was to ﬁnd the key for RC4 decryption.Figure 6: Example of code with case switchurl Geost: Exposing the Anatomy of the Android Trojan Targeting Russian Banks - TrendLabs Security Intelligence BlogFigure 7: Decompiled Java source, which is part of the RC4 algorithmFigure 8: Part of cleaned up RC4 codeRC4 is a stream cipher, with an internal state that changes with every decrypted symbol. To decrypt several encrypted strings, usually the decryption must be performed in the very same order the encryption used. Fortunately, this was not the case with the sample. The code authors simpliﬁed RC4 without keeping internal state between decryptions, as the RC4 encryption code always copied state array S[].Figure 9: RC4 keyAfterwards, the search for common code libraries began. Android.support.v4 libraries and ReﬂectASM Java Reﬂection libraries were found.Figure 10: RC4 encryption always copied state array S[]Figure 11: Code with encrypted stringsurl Geost: Exposing the Anatomy of the Android Trojan Targeting Russian Banks - TrendLabs Security Intelligence BlogFigure 12: Code with strings after decryption and symbol deobfuscationAt this point, the stage one code became understandable: It uses reﬂection code to hide interesting classes and methods from curious eyes. Basically, the ﬁrst stage decrypted the second stage ﬁle with the same RC4 algorithm and key.The aforementioned “.cache” ﬁle is renamed to .localsinfotimestamp1494987116 and saved after decryption as ydxwlab.jar, from which the .dex ﬁle is loaded and launched.Figure 13: Example of reﬂection method invocationCode authors inserted a false ﬂag, HttpURLConnection and its URL, which seemed to connect to the Command and Control (C&C) server. But this http open connection is never executed.Figure 14: Decrypting and saving second stageFigure 15: False ﬂag Stage one loads a class from the second stage, which the researcher named “MaliciousClass”.Figure 16: Launching the second stageStage Two Looking at the classes.dex, it’s clear that obfuscation and encryption were used again in stage two. But this time, the symbol names were partially replaced by strings 1-2 characters long instead of the previous 6-12 character strings. Also, the string encryption algorithm is modiﬁed, making it different from the algorithm used in the previous stage. Different tools were used. Additionally, parameters of the decryption algorithm were modiﬁed separately for each class. All Java decompilers had problems decompiling the decryption algorithm due to goto command jumping into the if block. Only Jeb decompiler handled this construction well.url Geost: Exposing the Anatomy of the Android Trojan Targeting Russian Banks - TrendLabs Security Intelligence BlogFigure 17: Smali code of decryption algorithmEach class decryption method contained different parameter orders and different constants; writing the Python decryption script was made more difﬁcult. It meant either the decryption script must detect the algorithm setup from the Smali code and adapt itself, or the parameters must be manually set up within the script before decryption for each class.Figure 18: Java code of decryption algorithmAfter string decryption, libraries used could be detected. These include:Figure 19: Example of an encrypted stringAES encryption engine File download service IExtendedNetworkService USSD api library Zip4jUtilInitialization phase The aforementioned MaliciousClass invoked from the ﬁrst stage serves as an envelope for the instantiated class the researcher named “Context.”The Context class launches the EmulatorDetector service ﬁrst. It then starts two other services: AdminService and LPService, followed by the main application Intent.Figure 20: Context Classurl Geost: Exposing the Anatomy of the Android Trojan Targeting Russian Banks - TrendLabs Security Intelligence BlogEmulator Detector The emulator detector checks for signs that it’s running in an emulated environment. The sample detected the existence of Nox, Andy, Geny, Bluestacks and Qemu Android emulators.Figure 21: Main initialization routineAdminService This service is responsible for granting admin permission to the application. This is a critical part since it enables access to sensitive data and can launch privileged actions.Figure 22: Emulated enviroment tracesLPService This service was responsible for keeping the application running and connected to the C&C server. It used WakeLock and WiﬁLock acquire() calls to reach this state. A side effect to this is high battery drain, which most victims usually ignore.Figure 23: Critical part of AdminServiceurl Geost: Exposing the Anatomy of the Android Trojan Targeting Russian Banks - TrendLabs Security Intelligence BlogLPService then creates LPServiceRunnable Thread, which wakes up every ﬁve seconds and is responsible for monitoring and relaunching these services:Figure 24: Locking to CPU and WiFi resourcesMainService AdminService SmsKitkatServiceThis service also collects information about running processes and tasks. It also periodically starts WebViewActivity, which can open browser window to arbitrary URLs or launch malicious code. WebViewActivity code was not implemented in this sample. MainService The MainService ﬁrst hooks to AlarmManager for time scheduling tasks, then registers two broadcast receivers, MainServiceReceiver1 and MainServiceReceiver2. At the end of the initialization phase, it will launch MainServiceRunnable Thread. When the sample executes overloaded onDestroy() method, it restarts the MainService again.An important method of MainService is processApiResponse(), which processes commands formatted as JSON string received from C&C server.Figure 25: Overloaded onDestroy to restart MainServiceClearService This service invokes the ClearServiceRunnable thread, which takes care of locking/unlocking commands (blocking/unblocking user activity) so the botnet operator can perform remote tasks without user intervention. The ClearService also relaunches itself if there is an attempt to terminate it.Figure 26: Processing C&C server commandsurl 27: ClearService class3/14/2020Dissecting Geost: Exposing the Anatomy of the Android Trojan Targeting Russian Banks - TrendLabs Security Intelligence BlogSmsKitkatService This service was prepared to replace the standard SMS messaging application with a different one written by the attackers. In this version, it used a default one.Figure 28: ClearServiceRunnabledefault SMS applicationFigure 29: Code for replacement ofCommands The list of commands that this malware recognized can be seen in the table and screenshot below (organized by the order they were deﬁned in the code): Commands#conversations#contacts#calls#apps #bhist #interval {set:number} #intercept #send id:, to:, body: #ussd {to:address, tel:number} #check_apps {path:uri_to_server}Description Collects the address, body, date, and type columns from all SMS messages from content://sms/conversations/, content://sms/inbox and content://sms/sent, and sends to the C&C server Collects a list of all contacts from content://com.android.contacts/data/phones and sends to the C&C server Collects all calls performed from content://call_log/calls and sends to the C&C server Collects list of installed package names and labels and sends to C&C server This command is ignored in this sample Sets time period for fetching C&C server commands Sets the phone numbers from which to intercept SMS (“all” or a list of numbers) Sends SMS Calls a number via USSD framework Sends SMS to all contacts in phonebook Sets scheduled time to run Sends a list of running apps to C&C server, downloads archive.zip ﬁle from path deﬁned inurl Geost: Exposing the Anatomy of the Android Trojan Targeting Russian Banks - TrendLabs Security Intelligence Blog#send_mass {messages: {to:address, body:text}, delay:ms}#lock#unlock #makecall {number:tel_number} #openurl {ﬁlesDir=j:url} #hooksms {number:tel_number} #selfdeleteparameter as error.zip, and unzip it. Zip archive has password “encryptedz1p”. Default server name is hxxp://fwg23tt23qwef.ru/ Sends multiple SMS messages to different addresses, with a delay between sends Starts RLA service from ClearServiceRunnable, which intercepts events from key press AKEYCODE_HOME, AKEYCODE_CAMERA, and AKEYCODE_FOCUS. It also intercepts onBackPressed() Activity method, mutes ringer, clears all SMS notiﬁcations, stops itself, and makes the phone unresponsive Disables actions listed under #lock command and unlocks phone by stopping ClearServiceRunnable Calls a number using standard android.intent.action.CALL API Opens a webpage URL Hooks to a number – it forwards all incoming SMS messages to a number in the parameter Sets task time to unparsable string value, which stops its self-scheduling tasksFigure 30: List of C&C SERVER commandsApiRequest, ApiResponse, ApiInterfaceImpl The ApiRequest, ApiResponse, and ApiInterfaceImpl classes enable communication with the C&C server. In the connection parameters initialization, the value of replaceWithRandomStr variable was set to true by default and is not changed within the code.url Geost: Exposing the Anatomy of the Android Trojan Targeting Russian Banks - TrendLabs Security Intelligence BlogFigure 31: Building C&C server connection stringAn algorithm was used to generate a random string for the C&C server URL. The API connection was then initialized, and the hostname of the C&C server was set up.Figure 32: Connection parameters initializationFigure 33: Building random string for the C&C server URLFigure 34: API connection initializationFigure 35: Setting up C&C server hostnameAn example of C&C server API usage was shown as the C&C server command “#contacts“ was implemented. Finally, parameters for commands are appended as JSON format and converted to string.Figure 36: Example of C&C server API callingBest Practices and Trend Micro Solutions In its 2020 Security Predictions, Trend Micro predicted the continued proliferation of mobile malware families, such as Geost, that target online banking and payment systems. Mobile users should safeguard themselves as they navigate the treacherous mobile landscape by following best practices for securing mobile devices. One such step is to avoid downloading apps outside ofﬁcial app stores. Unfortunately, threat actors also ﬁnd ways to spread malicious apps via legitimate app stores. Along with the continued campaigns of these stores to remove compromised apps, users can also avoid such apps by carefully inspecting app reviews and other information before downloading. url Geost: Exposing the Anatomy of the Android Trojan Targeting Russian Banks - TrendLabs Security Intelligence Blog3/14/2020 App users should scrutinize the permissions requested by an installed app before allowing them. Afterwards, users should watch out for changes in their devices, such as the decreased performance or battery life, which may indicate a malware infection. In this case, users should delete the newly installed app immediately. Users should also conduct regular audits to remove unused apps. For additional defense against mobile threats, users can install a multilayered mobile security solution such as Trend Micro™ Mobile Security to protect devices from malicious applications and other mobile threats. Indicator of Compromise Related Posts:Detection Name AndroidOS_Fobus.AXMNew Version of XLoader That Disguises as Android Apps and an iOS Proﬁle Holds New Links to FakeSpy Anubis Android Malware Returns with Over 17,000 Samples Malicious Optimizer and Utility Android Apps on Google Play Communicate with Trojans that Install Malware, Perform Mobile Ad Fraud Mac Malware that Spoofs Trading App Steals User Information, Uploads it to WebsiteLearn how to protect Enterprises, Small Businesses, and Home Users from ransomware:ENTERPRISE»SMALL BUSINESS»HOME»Tags: androidGeostMalwareRussianTrojan0 CommentsTrendLabs🔒 Privacy PolicyRecommendt Tweet f ShareLogin1 Sort by BestStart the discussion…LOG IN WITHOR SIGN UP WITH DISQUS?Be the ﬁrst to comment.SubscribeAdd Disqus to your siteAdd DisqusAddd✉ Security Predictions for 2020D N t S ll M D t⚠Cybersecurity in 2020 will be viewed through many lenses — from differing attacker motivations and cybercriminal arsenal to technological developments and global threat intelligence — only so defenders can keep up with the broad range of threats. Read our security predictions for 2020.Business Process CompromiseAttackers are starting to invest in long-term operations that target speciﬁc processes enterprises rely on. They scout for vulnerable practices, susceptible systems and operational loopholes that they can leverage or abuse. To learn more, read our Security 101: Business Process Compromise.Recent PostsOpenSMTPD Vulnerability (CVE-2020-8794) Can Lead to Root Privilege Escalation and Remote Code Execution Operation Overtrap Targets Japanese Online Banking Users Via Bottle Exploit Kit and Brand-New Cinobi Banking Trojanurl Geost: Exposing the Anatomy of the Android Trojan Targeting Russian Banks - TrendLabs Security Intelligence BlogMarch Patch Tuesday: LNK, Microsoft Word Vulnerabilities Get Fixes, SMBv3 Patch Follows Busting Ghostcat: An Analysis of the Apache Tomcat Vulnerability (CVE-2020-1938 and CNVD-2020-10487) Dissecting Geost: Exposing the Anatomy of the Android Trojan Targeting Russian BanksPopular PostsLokiBot Impersonates Popular Game Launcher and Drops Compiled C# Code File Misconﬁgured Container Abused to Deliver Cryptocurrency-mining Malware Dissecting Geost: Exposing the Anatomy of the Android Trojan Targeting Russian Banks February Patch Tuesday: Fixes for Critical LNK, RDP, Trident Vulnerabilities Outlaw Updates Kit to Kill Older Miner Versions, Targets More SystemsStay Updated Email SubscriptionHome and Home Ofﬁce About Trend Micro Asia Paciﬁc Region (APAC): Australia / New Zealand, 中国, ⽇本, 대한민국, 台灣 Latin America Region (LAR): Brasil, México North America Region (NABU): United States, Canada Europe, Middle East, & Africa Region (EMEA): France, Deutschland / Österreich / Schweiz, Italia, Россия, España, United Kingdom / Ireland Copyright © 2020 Trend Micro Incorporated. All rights reserved.url 