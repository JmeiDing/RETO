inquest.net /blog/2022/02/10/380-glowspark +380-GlowSparkIn recent months, there has been continuous media coverage of the geopolitical tensions in Eastern Europe around the threats of a Russian invasion of Ukraine. As one may expect, there has been an observable uptick in cyberattacks on related government networks and personnel. One notable case is the so-called "#WhisperGate" malware which is destructive to the systems which it infects.On February 4, 2022, Microsoft published a report on a malicious campaign they dubbed "Actinium". In reviewing their report we identified a number of indicators (IOCs) that overlapped with some interesting samples we were researching at InQuest Labs. The research community has observed a few campaigns targeting Ukrainian organizations as they have been discovered in the wild. In this blog, we will focus primarily on our findings via independent and immediate sources.Similar to the majority of attacks seen globally, the most widespread attack vector we've observed is targeting of users via email. Potential victims typically receive an email along with an attached document (aka malware lure) containing malicious logic that will trigger a multi-stage infection. The threat actors typically leveraged tailored visual lures, some of which we assume were originally legitimate documents or have been repurposed from real government templates. These include reports, resolutions, orders, etc.Repurposing Legitimate Legal DocumentsGiven access to a normally exchanged and legitimate document, an attacker can trivially embed malicious code or simply re-use the contents of the legal document around an existing malicious document. The following example illustrates side-by-side highlights and differences. Both documents have the same body content, but at close inspection, one is found to contain a malicious macro that will download and execute a next-stage payload, while the other does not. This tactic can also be seen in other distributions of these campaigns.Operational SecurityIf you look at a typical MALSPAM operation, designed to infect anyone and everyone without prejudice, you will note that next-stage payloads are typically open for download (when available). Take Emotet malware documents for example. Today, they are typically loaded with a number of URLs for next-stage payloads, in the hopes that at least one of them is still available for retrieval at the time of infection. The methods change, but currently it's common to1/7use Emotet maldocs fetch a payload from some compromised WordPress site. It can be anything, a random restaurant in Greece for example.This campaign is different in that the next-stage payloads are not openly accessible for download. Instead, the actors behind this campaign have either leveraged the source address, or geography, or time window, or combination of the above to ensure that only a "valid" target will receive the malware. This is a sign of operational maturity as it will slow down analysis. We can not dive into what we cannot see. We found that by quickly identifying fresh/related maldocs, and by proxying our connection through a Ukrainian IP address, we could indeed fetch the payload for further analysis. If these condition are not met, then you'll receive a "dummy" file, for example:Visual Lure ContentAs previously stated, in many cases the visual content of the documents likely constitutes a legitimate document that is leveraged by the threat actor. Though in some cases, the visual cues were rather odd. This sample contains a copy of a young man's passport as a decoy.The sample contains images of a young man holding capsules.Using one of the documents as an example, we delve into a technical analysis of this malicious campaign; illuminating the tactics and methods utilized by this actor.Document AnalysisThe following sample is available for download from InQuest Labs for those who want to follow along:Here's the primary graphic from the document. For an unsuspecting target, this is what they will see when they double-click on the attachment:Figure 3:Note that we blurred this document, as we're not certain of the sensitivity of the original content. That said, this is actually a common coercion tactic we see used today. Where victims are led to believe they must enable active content in order to read the contents of the document.Also, note that the document's heading indicates that this is the prosecutor's office of the Luhansk region of eastern Ukraine. The content of the document looks legitimate though, which helps conceal a possible trace of the threat actor.We can see from the detection results of the first-scan on VirusTotal, that this malicious document lure was capable of bypassing most endpoint protection vendors:2/7Figure 4: Poor AV detection rateOnce activated, the embedded VBA macro will connect the remote server at this address and downloads the second- stage payload: hxxp://sound23.sundabokun[.]ru/FRIMEPC2016-PC/allowance.stcAs we noted previously, receiving the payload of the second stage is possible only from a specific IP address and in a very limited period of time. GlowSparkBecause the second stage payload is a new hard-to-detect pattern with anti-sandboxing techniques and many execution layers, tactics not easily attributable to current threats; we designate this threat internally with the name "GlowSpark". Again, this sample is available for download from InQuest Labs for those who want to follow along:Figure 5: Second stage contentThe document contains an embedded Visual Basic script stored as a series of decimal values. Converting this data into a readable form gives us data that will execute. After converting this layer, we get a very heavily obfuscated VBA script. This script also contains sandbox evasion techniques. White detonation attempts of the initial lure may fail, manually stepping through these initial stages then pivoting back to a sandbox will allow us to observe subsequent behavior. Basically skip the evasion component.File Type Visual Basic Script MD540328FC237D98C321A168CE19234DF22Figure 6: Obfuscated VBA in second layerThe next layer is heavily obfuscated and is unpacked at runtime. Static analysis of such a sample can take a lot of time and effort, so we switched to another approach. Multiplexing between analysis techniques whenever you hit a3/7hurdle is a good strategy for "jiggling" your way through the analysis. Finding the path of least resistance, in somewhat a fashion akin to "fuzzing".Figure 7: Last layer of VBAFile Type Visual Basic Script MD53C4B606459653029AA75A07E6B0B2E4DWe next leveraged Kirk Sayre's fork of Decalage's ViperMonkey VBA emulator to give us an insight into what he unobfuscated execution chain resembles:Recorded Actions: | Action | Parameters | Description | Start Regular | | All wildcard matches will match | | CreateObject | ['WScript.Shell'] | Interesting Function Call | | CreateObject | ['Scripting.FileSystemObject'] | Interesting Function Call | | CreateObject | ['WScript.Shell'] | Interesting Function Call | | CreateObject | ['WScript.Shell'] | Interesting Function Call | | CreateObject | ['MSXML2.XMLHTTP'] | Interesting Function Call | | GetObject | ['winmgmts:{impersonationLevel=impersonate}!\ | Interesting | Execute Query | SELECT * FROM Win32_PingStatus WHERE | Query | | | Address='despite.lotorgas.ru' | | | CreateObject | ['WScript.Shell'] | Interesting Function Call |4/7| CreateObject | ['MSXML2.XMLHTTP'] | Interesting Function Call | | CreateObject | ['Scripting.FileSystemObject'] | Interesting Function Call | | anotherWaJ.Open | ['POST', 'url | Interesting | Object.Method Call | ['POST', 'url | | POST | url | Interesting Function Call | | Object.Method Call | ['User-Agent', 'Mozilla/5.0 (Macintosh; Intel | pouredZDsAZmX.SetRequestHeader | | | Mac OS X 10_15_6) AppleWebKit/605.1.15 | | | | (KHTML, like Gecko) Version/14.0.1 | | | | Safari/605.1.15::ADJH676F_0::/.irresolute/.'] | | | Set HTTP Header | 'User-Agent' ==> 'Mozilla/5.0 (Macintosh; | ServerXMLHTTP::SetRequestHeader() | | | Intel Mac OS X 10_15_6) AppleWebKit/605.1.15 | | | | (KHTML, like Gecko) Version/14.0.1 | | | | Safari/605.1.15::ADJH676F_0::/.irresolute/.' | | | CreateObject | ['MSXML2.XMLHTTP'] | Interesting Function Call | | CreateObject | ['ADODB.Stream'] | Interesting Function Call | | bitterZSVwiTc.Open | | Interesting Function Call | | CreateObject | ['ADODB.Stream'] | Interesting Function Call | | CreateObject | ['ADODB.Stream'] | Interesting Function Call | | CreateObject | ['WScript.Shell'] | Interesting Function Call | | CreateObject | ['MSXML2.XMLHTTP'] | Interesting Function Call | | CreateObject | ['Msxml2.DOMDocument.3.0'] | Interesting Function Call | | CreateObject | ['Msxml2.DOMDocument.3.0'] | Interesting Function Call | | CreateObject | ['WScript.Shell'] | Interesting Function Call | | CreateObject | ['Scripting.FileSystemObject'] | Interesting Function Call | | CreateObject | ['ADODB.Stream'] | Interesting Function Call |5/7| bitterZSVwiTc.Open | | Interesting Function Call | | CreateObject | ['ADODB.Stream'] | Interesting Function Call | | CreateObject | ['ADODB.Stream'] | Interesting Function Call | | CreateObject | ['WScript.Shell'] | Interesting Function Call | | Execute Command | Microsoft.XMLDOM.nodeTypedValue | Execute() -----------------------+Note that a domain indicator pops out during this process: despite.lotorgas[.]ruAlso note the User-Agent leveraged in the HTTP request to retrieve the next stage. This user-agent is yet another "fencing" mechanism that a skilled attacker may use to limit retrieval of malware stages for research.Finally, note that there is "no silver bullet". "ProtocolAddress" is seen in the emulation output, but it requires manual analysis again to extract the IP address that is used to pull the final executable from: hxxp://94.158.247[.]103/bars.casThe threat actor is very selective about which executable files to send to the victim's system, which indicates sufficient secrecy of his work. We see that during the first days the detection is quite low.Conclusion:Some samples of this campaign are quite secretive while successfully infecting their targets. This allows the threat actor to gain a strong foothold in the victim's network without leaving a large footprint.The threat actor may use additional tools at their discretion. Since the #WhisperGate attack vector was not detected, we predict that the threat actor used this vector, which we partially described above.YARA Rulerule GlowSpark_Downloader Author = inquest.net description = "GlowSpark_2n_Stade_Actinium_Downloader" last_modified = "1.0" date = 08.02.2022 $a1="79,110,32,69,114,114,111,114,32,82,101,115,117,109,101,32,78,101,120,116" ascii $a2="67,114,101,97,116,101,79,98,106,101,99,116,40,34,83,99,114,105,112,116,105,110,103,46,70 108,101,83,121,115,116,101,109,79,98,106,101,99,116,34,41" ascii wide nocase $a3="51,50,44,55,57,44,49,49,48,44,51,50,44,54,57,44,49,49,52,44,49,49,52,44,49,49,49,44,49,46/744,51,50,44,56,50,44,49,48,49,44,49,49,53,44,49,49,55,44,49,48,57,44,49,48,49,44,51,50,44,55, 49,48,49,44,49,50,48" ascii wide nocase // The second stage of the script ((filesize < 2000KB) and any of ($a*)) 94.158.247[.]103 despite.lotorgas[.]ru hxxp://94.158.247[.]103/bars.casStage 1 