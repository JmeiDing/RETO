AD OBE FLASH ZERO -DAY LEVERAGED FOR TARGETED AT TACK IN MIDDLE EASTJune 7, 2018By: Chenming Xu, Jason Jones, Justin Warner, Dan CaseldenTags: Exploitation, File Analysis, Flash, Threat Detection, Zero-DayICEBRG’s Security Research Team (SRT) has identiﬁed active exploitation of a zero-dayvulnerability in Adobe Flash that appears to target persons and organizations in the MiddleEast. The vulnerability (CVE-2018-5002) allows for a maliciously crafted Flash object toexecute code on victim computers, which enables an attacker to execute a range ofpayloads and actions.This blog will outline details on various aspects of the discovered attack, the potentialtargeting of Qatar, and suggestions for defenses against similar attack chains. It is our goalthat by sharing this, defensive teams will be informed about recently discovered threatactivity and more broadly understand the type of indicators that can assist in identiﬁcationof similar attack vectors.ICEBRG was the ﬁrst to report the discovered vulnerability to Adobe, on June 1, 2018 at 4:14AM PDT. Adobe acted quickly to coordinate with ICEBRG, reproduce the vulnerability, anddistribute a patch for its software on June 7, 2018. Many thanks to the team for working withus.AT TACK OVERVIEWThe exploit uses a Microsoft Ofﬁce document to download and execute an Adobe Flashexploit to victim computers. The exploitation process, detailed in Figure 1, begins bydownloading and executing a remote Shockwave Flash (SWF) ﬁle. Unlike most Flashexploits delivered with Microsoft Ofﬁce, this document uses a lesser-known feature toremotely include all SWF content from the attacker’s server instead of embedding itdirectly in the document.The ﬁrst stage SWF includes a RSA+AES cryptosystem that protects the subsequent SWFstage, containing the actual exploit, which it downloads and executes. Appropriate use ofasymmetric cryptography, like RSA, evades traditional defenses such as replay-basednetwork security devices and prevents a post-mortem network packet capture analysis.The second SWF stage, after exploiting the system and achieving code execution, uses thesame cryptosystem to download and execute shellcode to further enable the threat actorto control the victim machine. Typically, the ﬁnal payload consists of shellcode thatprovides backdoor functionality to the system or stages additional tools. ICEBRGattempted to retrieve the ﬁnal payload during analysis but was unable to due to severalpossible reasons.Figure 1: Walkthrough of exploitation processREMOTE FLASH INCLUSIONThe attack loads Adobe Flash Player from within Microsoft Ofﬁce, which is a popularapproach to Flash exploitation since Flash is disabled in many browsers. Attackers typicallyembed a Flash ﬁle within a document, which may contain the entire exploit, or may stagethe attack to download exploits and payloads more selectively (e.g. APT28/SofacyDealersChoice). This leaves, at a minimum, a small Flash loader that defenders can ﬂag fordetection and analysts can ﬁngerprint for tracking.Contrary to typical tactics, this attack uses a lesser-known feature that remotely includesthe Flash content instead of directly embedding it within the document (Figure 2). OnlyXML wrappers selecting the Flash Player ActiveX control and an OLE Object supplyingparameters are present.Figure 2: Example Flash object included via “Movie” property which speciﬁes remotelocation of Flash object. This is purely an example of how the initial object can be included.Remote loading of the embedded Flash object has multiple signiﬁcant advantages:Evasion: The document by itself does not contain any malicious code. Statically, thebest one can do is detect the presence of remotely included Flash content.Dynamically, the sandbox/simulator must interact with the attacker’s server andreceive malicious content, necessitating that the analysis system has a liveconnection to the Internet. Further, the attacker may selectively serve the next stagebased upon the requesting IP address or HTTP headers (indicating a speciﬁctargeted environment). Once access is established, the attacker may decommissiontheir server and subsequent analysis of the attack must rely on leftover forensicartifacts.Targeting: Because the attacker can selectively serve exploits to the victim, they canlimit the attack to intended victims. The attacker can limit access to speciﬁc IPaddresses, either through whitelisting networks of target companies or individualsvia a regional ISP, or blacklisting cloud infrastructure and security companies. The“Accept-Language” and “User-Agent” in HTTP headers may also be useful towhitelist known victim locales and victim environments or blacklist security productswith non-standard or outdated responses. The ordering, inclusion, or absence ofHTTP headers in general may also discriminate between security products, realvictims, and intended victims. Lastly, “x-ﬂash-version” includes the version of FlashPlayer on the victim with which the attacker can choose their most effective exploitserver side.Even with a minimal static footprint, upon document load, the remote Flash object will beretrieved and executed within the context of Microsoft Ofﬁce.CRYPTO GRAPHIC ROUTINESData transmission from the attacker’s server to the client is protected by a customcryptosystem (Figure 3) leveraging a symmetric cipher (AES), that protects the datapayload and an asymmetric cipher (RSA) to protect the symmetric key. The customcryptosystem leverages a public Action Script library for low level operations.Figure 3: Generic network retrieval and decrypt routineData transmission is initiated by the client, whereby the client HTTP POSTs a randomlygenerated RSA modulus n and the exponent 0x10001, and the server responds with thefollowing structure:0x0: Encrypted AES key length (L) 0x4: Encrypted AES key 0x4+L: AES IV 0x14+L: AES encrypted data payloadFigure 4: Structure of encrypted dataTo decrypt the data payload, the client decrypts the encrypted AES key using its randomlygenerated private key, then decrypts the data payload with the decrypted AES key.The extra layer of public key cryptography, with a randomly generated key, is crucial here.By using it, one must either recover the randomly generated key or crack the RSAencryption to analyze subsequent layers of the attack. If implemented correctly, thisrenders packet capture in forensic analysis and automated security products ineffective.Furthermore, the decrypted data payloads will only reside in memory, challengingtraditional disk forensics and non-volatile artifact analysis.In this scenario, the attacker chose an RSA modulus length of 512 bits, which is consideredinsecure by today’s standards and may be cracked with notable effort. Consequently,ofﬂine analysis is possible, although more laborious than online analysis, whereby theanalyst may either instrument a mock victim or create a man-in-the-middle service, thenattempt to be exploited by the attacker.The combination of a remotely included Flash exploit and asymmetric cryptography areparticularly powerful counters against postmortem analysis. Once exploited, the onlyartifact residing on the victim’s system would be the initial lure document that only containsa URL. In that scenario, responders may look to network packet captures to recreate theattack. However, without the victim’s randomly created private key, it would be impossiblefor responders to decrypt the attacker’s code and recover subsequent protected stageslike the exploit or payload. In this scenario, responders’ only saving grace would be the useof a weak RSA modulus.USE OF ZERO -DAY EXPLOITAfter decryption, the exploit payload is loaded and triggered to allow for follow-on codeexecution. Although the document is a Microsoft Ofﬁce document, the code is executingwithin an Adobe Flash container.You might ask, why conduct Flash exploitation within Microsoft Ofﬁce? Over the pastseveral years, many browsers have hardened their attack surface in regard to externalplugins and applications, including Adobe Flash. An example of this hardening can be seenwith Google’s Chrome Browser v.55, which outright blocks Flash by default. On the otherhand, Ofﬁce still supports embedded ActiveX controls, including Flash. According toMicrosoft, this will be changing with its Ofﬁce 365 products in 2019.The use of a zero-day, rather than an “N-day”, vulnerability is particularly interesting in thecontext of the attack chain. A zero-day vulnerability is a vulnerability for which there existsno patch, whereas an “N-Day” vulnerability is an attack that takes place “N” days after thepatch is available. There are numerous beneﬁts of leveraging a zero-day exploit against atarget (Figure 5) .Code execution with minimal interaction: The vulnerabilities used in zero-day exploits typically trigger with little or no user interaction other than opening the document. Due to patches and other protective mechanism, N-day exploits will frequently cause a prompt, warning, popup or ﬂat out will not work. Higher success rates with less risk of discovery: Due to the minimally required user interaction, users do not get suspicious of the document as easily and therefore do not report the situation to internal security teams. Most user training focuses on informing users of all the built-in security prompts rather than analyzing the overall suspicion of a scenario.Figure 5: Beneﬁts of using a zero-day exploitOn the other hand, there are some negative aspects to using a zero-day vulnerability,notably cost of operations and risk of additional investigation upon discovery. In 2015, leaksof conversations involving Hacking Team revealed that zero-day exploits for Adobe Flashwere being sold for $30k-$45k per exploit. Additionally, when the discovery of a zero-dayhappens, investigators will tend to dive deeper than if they discovered use of an older N-day exploit.NETWORK COMMUNICATIONSDuring the attack, the weaponized document downloads the initial SWF stage and multipleblobs of encrypted data from the attacker’s server and provides basic system informationto the same server, both over HTTP. All downloads contain a unique 32-byte parameternamed 'token', which is reused in the URI paths of other URLs passed as Flash parameters.The SWF stages log data to the URL identiﬁed as 'stabUrl', which is on the same command-and-control server. The URI is constructed by appending a random value onto a formatstring (Figure 6), whose values will indicate the current function, and progress within thefunction, that is transmitted to track successes and failures. For example, the valuereported after successful retrieval of the ﬁrst stage is '0-0-0'.stabUrl + “%d-%d-%d.png?x=”+ Math.random()Figure 6: Computation of the stabURLOnce that is completed, a request is made to the 'encKeyUrl' parameter, which is thesecond stage SWF containing the exploit. Upon retrieval of the second stage, a request isthen made to the 'downloadUrl', which is the shellcode payload. The command-and-control server has not responded with a payload for the third-stage even when phoninghome from the assumed targeted region, which may signal that the campaign has beenended. The second GET request to the stabUrl uses the values '2-0-1' to signify asuccessful veriﬁcation of a supported version of Windows. This is not signiﬁcant for thisexploit since it returns true for any version between and including Windows XP to Windows10. Examples of these network interactions can be seen in Figure 7 and Figure 8.Figure 7: Network Communication observed during analysisFigure 8: Network trace of HTTP RequestsPOSSIBLE QATARI TARGETINGThe weaponized document (Figure 9), titled “     ا   ا  ا.xlsx” (translated to 