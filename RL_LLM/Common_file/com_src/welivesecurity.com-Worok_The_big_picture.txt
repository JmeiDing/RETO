www.welivesecurity.com /2022/09/06/worok-big-picture/ Worok: The big picture ⋮ 9/6/2022Focused mostly on Asia, this new cyberespionage group uses undocumented tools, including steganographically extracting PowerShell payloads from PNG filesThibaut Passilly 6 Sep 2022 - 11:30AMFocused mostly on Asia, this new cyberespionage group uses undocumented tools, including steganographically extracting PowerShell payloads from PNG filesESET researchers recently found targeted attacks that used undocumented tools against various high-profile companies and local governments mostly in Asia. These attacks were conducted by a previously unknown espionage group that we have named Worok and that has been active since at least 2020. Worok’s toolset includes a C++ loader CLRLoad, a PowerShell backdoor PowHeartBeat, and a C# loader PNGLoad that uses steganography to extract hidden malicious payloads from PNG files. Who is Worok?During the ProxyShell (CVE-2021-34523) vulnerability disclosure in early 2021, we observed activity from various APT groups. One exhibited characteristics common with TA428:Activity times Targeted verticals Usage of ShadowPadThe rest of the toolset is very different: for example, TA428 took part in the Able Desktop compromise in 2020. We consider that the links are not strong enough to consider Worok to be the same group as TA428, but the two groups might share tools and have common interests. We decided to create a cluster and named it Worok. The name was chosen after a mutex in a loader used by the group. Further activity with variants of the same tools was then linked to this group. According to ESET’s telemetry, Worok has been active since late 2020 and continues to be active as of this writing.Back in late 2020, Worok was targeting governments and companies in multiple countries, specifically:A telecommunications company in East Asia A bank in Central Asia A maritime industry company in Southeast Asia A government entity in The Middle East A private company in southern AfricaThere was a significant break in observed operations from 2021-05 to 2022-01, but Worok activity returned in 2022- 02, targeting:An energy company in Central Asia A public sector entity in Southeast AsiaFigure 1 presents a visual heatmap of the targeted regions and verticals.1/13Figure 1. Map of the targeted regions and verticalsConsidering the targets’ profiles and the tools we’ve seen deployed against these victims, we think Worok’s main objective is to steal information. Technical analysisWhile the majority of initial accesses are unknown, in some cases through 2021 and 2022 we have seen exploits used against the ProxyShell vulnerabilities. In such cases, typically webshells have been uploaded after exploiting these vulnerabilities, in order to provide persistence in the victim’s network. Then the operators used various implants to gain further capabilities.Once access had been acquired, the operators deployed multiple, publicly available tools for reconnaissance, including Mimikatz, EarthWorm, ReGeorg, and NBTscan, and then deployed their custom implants: a first-stage loader, followed by a second stage .NET loader (PNGLoad). Unfortunately, we have not been able to retrieve any of the final payloads. In 2021, the first-stage loader was a CLR assembly (CLRLoad), while in 2022 it has been replaced, in most cases, by a full-featured PowerShell backdoor (PowHeartBeat) – both execution chains are depicted in Figure 2. These three tools are described in detail in the following subsections.2/13Figure 2. Worok compromise chainsCLRLoad: CLR assembly loaderCLRLoad is a generic Windows PE that we have seen in both 32-and 64-bit versions. It is a loader written in C++ that loads the next stage (PNGLoad), which must be a Common Language Runtime (CLR) assembly DLL file. That code is loaded from a file located on disk in a legitimate directory, presumably to mislead victims or incident responders into thinking it is legitimate software.Some CLRLoad samples start by decoding the full path of the file whose content they will load as the next stage. These file paths are encoded with a single-byte XOR, with a different key in every sample. Decoded or cleartext, these file paths are absolute, with the following being those we have encountered:C:\Program Files\VMware\VMware Tools\VMware VGAuth\xsec_1_5.dll C:\Program Files\UltraViewer\msvbvm80.dll C:\Program Files\Internet Explorer\Jsprofile.dll C:\Program Files\WinRar\RarExtMgt.dll C:\Program Files (x86)\Foxit Software\Foxit Reader\lucenelib.dllNext, a mutex is created and we’ve seen a different name in every sample. The loader checks for this mutex; if found, it exits, because the loader is already running. In one of the samples, the mutex Wo0r0KGWhYGO was encountered, which gave the group its name of Worok.CLRLoad then loads a CLR assembly from the possibly decoded file path. As unmanaged code, CLRLoad achieves this via CorBindToRuntimeEx Windows API calls in 32-bit variants, or CLRCreateInstance calls in 64-bit variants.PowHeartBeat: PowerShell backdoorPowHeartBeat is a full-featured backdoor written in PowerShell, obfuscated using various techniques such as compression, encoding, and encryption. Based on ESET telemetry, we believe PowHeartBeat replaced CLRLoad in more recent Worok campaigns as the tool used to launch PNGLoad.The first layer of the backdoor code consists of multiple chunks of base64-encoded PowerShell code. Once the payload is reconstructed, it is executed via IEX. Once decoded, another layer of obfuscated code is executed, which we can see in Figure 3.3/13Figure 3. Excerpt of the decoded main function of the second layer of PowHeartBeatThe second layer of the backdoor first base64 decodes the next layer of its code, which is then decrypted with Triple DES (CBC mode). After decryption, this code is decompressed using the gzip algorithm, thus giving the third layer of PowerShell code, which is the actual backdoor. It is divided into two main parts: configuration, and handling backdoor commands.The main layer of backdoor code is also written in PowerShell and uses HTTP or ICMP to communicate with the C&C server. It works as depicted in Figure 4.Figure 4. PowHeartBeat’s functioningConfigurationThe configuration contains multiple fields, including version number, optional proxy configuration, and C&C address. Table 1 describes the meanings of the configuration fields in the different versions we have observed.Table 1. Configuration field meaningsField namenouse / ikuyrtydyfg (other samples)ClientIdVersion RefererUnused.DescriptionClient identifier, used for the following purposes: · As a value when constructing the Cookie header for C&C communications. · As a cryptographic artifact for sent data encryption. Version number of PowHeartBeat. Number of allowed execution attempts when issuing a RunCmd (command running) command. User agent used for C&C communications. Referer header used for C&C communications.4/13Field nameDescriptionValues used to construct the Cookie header for C&C communications.AcceptEncoding Unused. UrlSendHeartBeat URL path used when the backdoor asks the C&C server for commands. UrlSendResultProtocol to use for C&C communications. URL, domain(s), or IP address used as the C&C server. If Domains is not empty, it is chosen instead of IPAddress. In other cases, IPAddress is taken.URL path used when the backdoor sends the results of the command back to the C&C server. Complete URL, used by PowHeartBeat to request commands from the C&C server. It is the concatenation of the URL elements above. Same as GetUrl but used to send the results of the command back to the C&C server. ProxyEnableFlag Flag indicating whether the backdoor must use a proxy or not in order to communicate BasicConfigPath Path to an optional configuration file containing UpTime, DownTime, DefaultInterval, andwith the C&C server. Address of the proxy to use if ProxyEnableFlag is set to $true. Time in seconds that the script sleeps for between GET requests.UpTimeDownTimeDomainIndexSecretKey logpathProxyFileIfConfigDomains. Those values will be overridden if the file is present. Time of day from which the backdoor starts operating, meaning it starts making GET requests to the C&C server. Time of day until which the backdoor can operate, meaning the time when it stops making requests to the C&C server. Index of the current domain name to use for communications with the C&C server. In case a request returns an error message different from 304 (“Not modified”), DomainIndex is increased. Key used to decrypt/encrypt the configuration. Configuration is encrypted with multiple- Flag indicating whether logging is enabled. Path of the log file. File path of the optional proxy configuration. If it is empty or not found in the file system, the backdoor retrieves the user’s proxy settings from the registry value HKCU\Software\Microsoft\Windows\CurrentVersion\Internet Settings\ProxyServer . Flag indicating whether to use a configuration file.Figure 5 shows an example of the configuration extracted from a PowHeartBeat sample (SHA-1: Chrome/69.0.3487.100 Safari/537.36";$Script:Referer = "www.adobe.com";$Script:AcceptEncoding = "text/html,app1ication/xhtml+xml,app1ication/xml;q=0.9,*/*;q=0.8";$Script:CookieClientId = "s_ecid";5/1310$Script:CookieTaskId = "aam_uuid";11$Script:CookieTerminalId = "AAMC_adobe_0";12$Script:UrlHttps = "http://";13$Script:UrlDomain= " 118.193.78[.]22:443";14$Script:UrlSendHeartBeat = "/latest/AdobeMessagingClient.js";15$Script:UrlSendResult = "/content/dam/offers-homepage/homepage.jpg";16$Script:GetUrl = $Script:UrlHttps + $Script:UrlDomain + $Script:UrlSendHeartBeat;17$Script:PutUrl = $Script:UrlHttps + $Script:UrlDomain + $Script:UrlSendResult;18$Script:currentPath = Split-Path -Parent $MyInvocation.MyCommand.Definition;19$Script:ProxyEnableFlag = $false;20$Script:Proxymsg;21$Script:Interval = 10 ;22$Script:BasicConfigPath = "C:\ProgramData\unins.dat";23$Script:UpTime = 0;24$Script:DownTime = 24;25$Script:Domains;26$Script:DomainIndex;27$Script:SecretKey = "###ConfigKey###";2829#$Script:IfLog = $true;30$Script:IfLogFilePath = "C:\ProgramData\tpncp.dat";31$Script:logpath = "C:\ProgramData\unins000.dat";32$Script:ProxyFile = "C:\ProgramData\hwrenalm.dat";3334$Script:IfConfig = $false;Figure 5. Configuration exampleData encryptionPowHeartBeat encrypts logs and additional configuration file content.Log file content is encrypted though multiple-byte XOR with a key specified in cleartext in the sample. Interestingly, clientId is used as a salt for the index into the key array. The key is a 256-byte array, which was identical in every sample that we encountered. Additional configuration file content is encrypted through multiple-byte XOR with the value from SecretKey as its key.C&C communicationsPowHeartBeat used HTTP for C&C communications until version 2.4, and then switched to ICMP. In both case the communication is not encrypted.6/13HTTPIn an infinite loop, the backdoor sends a GET request to the C&C server, asking for a command to issue. The encrypted answer is decrypted by the backdoor, which processes the command, and writes the command output to a file whose content is then sent to the C&C server via a POST request.The format of the GET requests is the following:1GET <UrlSendHeartBeat> HTTP/1.12User-Agent: <UserAgent>3Referer: <Referer>4Host: <Domain>5Cookie: <CookieClientId>=<ClientId>6Connection: closeNote that the request is constructed using the eponymous configuration fields.In the response from the C&C server, the third byte of the content is the command identifier that indicates the command to be processed by the backdoor. We’ll call it command_id. The remaining content of the response will be passed as an argument to the command that is processed. This content is encrypted with the algorithm shown in Figure 6, taskId being the value of the cookie named after CookieTaskId‘s value from the configuration.123456789o[int] $pos = $taskId % 256;for ($i = 0; $i -lt $tmpBytes.Value.Length; $i++){$pos = $pos + $clientId;if ($pos -ge 256){$pos = $pos % 256;}$tmpBytes.Value[$i] = [byte]($tmpBytes.Value[$i] -bxor $hexEnc[$pos]);10}Figure 6. Requests content data encryption algorithmThe response from the C&C server also contains another cookie, whose name is specified by the backdoor’s CookieTerminalId configuration variable. The value of this cookie is repeated in the POST request from the backdoor, and it must not be empty. After executing the backdoor command, PowHeartBeat sends the result as a POST request to the C&C server. The result is sent as a file whose name is <command_id>.png.ICMPStarting from version 2.4 of PowHeartBeat, HTTP was replaced by ICMP, sent packets having a timeout of six seconds and being unfragmented. Communication through ICMP is most likely a way to evade detection.There is no major change in versions 2.4 and later, but we noticed some modifications in the code:7/13PowHeartBeat sends a heartbeat packet at each loop that contains the string abcdefghijklmnopqrstuvwxyz, before requesting a command. This informs the C&C server that the backdoor is ready to receive commands. Requests to get commands performed by the backdoor contain the string abcdefghijklmnop.Heartbeat packets have the format described in Figure 7.Figure 7. Heartbeat packet layoutThe difference between client ID and client flag is that client ID differs in every sample whereas client flag is the same in every sample that uses ICMP. heartbeat flag indicates that the backdoor is sending a heartbeat. The response from the C&C server has the format described in Figure 8.Figure 8. C&C server response layoutflag here indicates whether there is a command to issue to the backdoor. Requests to get commands have the format described in Figure 9.Figure 9. Layout for requests to get commandsNote that the backdoor’s ICMP mode allows receiving an unlimited amount of data, divided into chunks, and the variables data length, current position and total length are used to keep track of the transmitted data. Responses to these requests have the format described in Figure 10.Figure 10. Layout of responses to requests for getting commandsAs in HTTP responses, the command identifier is the third byte of data.After seven consecutive ICMP replies with empty or inconsistently formatted content, transfers between the backdoor and C&C server are considered finished.Concerning the requests to send the result of the issued command to the C&C server, server mode is changed for post mode, and the final string (abcdefghijklmnop) is changed for the result data.Backdoor commandsPowHeartBeat has various capabilities, including command/process execution and file manipulation. Table 2 lists all commands supported by the various analyzed samples.Table 2. PowHeartBeat command descriptions8/13Name DescriptionExecute a PowerShell command. Execute a command as a process. Upload a file to the victim machine. File content is gzip-compressed. Download a file from the victim machine, and return file path, file length, creation time, access times, and file content to the C&C server. Get file information of a specific directory, in particular: · Last write times · File contents Delete a file. Rename or move a file. Change the current working location of the backdoor. Get a category of information according to the specified argument: · “Basic information”: ClientId, Version, host name, IP addresses, explorer.exe version and size information, OS (architecture and flag indicating if the machine is a server), Interval, current directory, drive information (name, type, free space and total size), current time · “Time-Interval information”: Interval and current time · “Domain information”: decrypted configuration file content Update the configuration file content and reload the configuration. Backdoor exit.In case of errors on the backdoor side, the backdoor uses a specific command identifier 0x00 in the POST request to the C&C server, thus indicating an error occurred.Note that before sending the information back to the C&C server, the data is gzip-compressed.PNGLoad: Steganographic loaderPNGLoad is the second-stage payload deployed by Worok on compromised systems and, according to ESET telemetry, loaded either by CLRLoad or PowHeartBeat. While we don’t see any code in PowHeartBeat that directly loads PNGLoad, the backdoor has the capabilities to download and execute additional payloads from the C&C server, which is likely how the attackers have deployed PNGLoad on systems compromised with PowHeartBeat. PNGLoad is a loader that uses bytes from PNG files to create a payload to execute. It is a 64-bit .NET executable – obfuscated with .NET Reactor – that masquerades as legitimate software. For example, Figure 11 shows the CLR headers of a sample masquerading as a WinRAR DLL.Figure 11. Example of a fake WinRAR DLL9/13Once deobfuscated, only one class is present. In this class, there is a MainPath attribute containing the directory path the backdoor searches, including its subdirectories, for files with a .png extension, as shown in Figure 12.Figure 12. .png file listingEach .png file located by this search of MainPath is then checked for steganographically embedded content. First, the least-significant bit of each pixel’s R (red), G (green), B (blue), and A (alpha) values are fetched and assembled into a buffer. Should the first eight bytes of that buffer match the magic number seen in Figure 13 and the next eight-byte value, control, be non-null, the file passes PNGLoad’s steganographic content check. For such files, processing continues with the remainder of the buffer decrypted with a multiple-byte XOR, using the key stored in PNGLoad’s SecretKeyBytes attribute, and then the decrypted buffer is gzip-decompressed. The result is expected to be a PowerShell script, which is run immediately.Figure 13. Format of buffer PNGLoad creates from processing .png filesInterestingly, operations performed by PNGLoad are logged in a file whose path is stored in the variable LogFilePath. Operations are only logged if a file is present whose path is specified by the internal variable IfLogFilePath.We have not been able to obtain a sample .png file used along with PNGLoad, but the way PNGLoad operates suggests that it should work with valid PNG files. To hide the malicious payload, Worok uses Bitmap objects in C#, which only take pixel information from files, not the file metadata. This means that Worok can hide its malicious payloads in valid, innocuous-looking PNG images and thus hide in plain sight. ConclusionWorok is a cyberespionage group that develops its own tools, as well as leveraging existing tools, to compromise its targets. Stealing information from their victims is what we believe the operators are after because they focus on high- profile entities in Asia and Africa, targeting various sectors, both private and public, but with a specific emphasis on government entities. Activity times and toolset indicate possible ties with TA428, but we make this assessment with low confidence. Their custom toolset includes two loaders – one in C++ and one in C# .NET – and one PowerShell10/13backdoor. While our visibility is limited, we hope that shedding light on this group will encourage other researchers to share information about this group.For any inquiries about our research published on WeLiveSecurity, please contact us at threatintel@eset.com.ESET Research now also offers private APT intelligence reports and data feeds. For any inquiries about this service, visit the ESET Threat Intelligence page. IOCs FilesSHA-1FilenameESET Detection namescriptscript54700A48D934676FC698675B4CA5F712C0373188678A131A9E932B9436241402D9727AA7D06A87E3scriptC2F1954DE11F72A46A4E823DE767210A3743B205tmp.ps1CE430A27DF87A6952D732B4562A7C23BEF4602D1tmp.ps1757ABA12D04FD1167528FDD107A441D11CD8C427script3A47185D0735CDECF4C7C2299EB18401BFB328D5scriptC2F53C138CB1B87D8FC9253A7088DB30B25389AF27ABB54A858AD1C1FF2863913BDA698D184E180D scriptComment PowerShell/PowHeartBeat.B PowHeartBe PowerShell/PowHeartBeat.A PowHeartBe PowerShell/PowHeartBeat.B PowHeartBe PowerShell/PowHeartBeat.B PowHeartBe PowerShell/PowHeartBeat.A PowHeartBe PowerShell/PowHeartBeat.A PowHeartBe PowerShell/PowHeartBeat.B PowHeartBe PowerShell/PowHeartBeat.A PowHeartBe PowerShell/PowHeartBeat.A PowHeartBe EDE5AB2B94BA85F28D5EE22656958E4ECD77B6FF script MSIL/PNGLoader.A RarExtMgt.dll MSIL/PNGLoader.A 728A6CB7A150141B4250659CF853F39BFDB7A46C Jsprofile.dll MSIL/PNGLoader.A MSIL/PNGLoader.A xsec_1_5.dll MSIL/PNGLoader.A B2EAEC695DD8BB518C7E24C4F37A08344D6975BE msvbvm80.dll MSIL/PNGLoader.A CDB6B1CAFEE098615508F107814179DEAED1EBCF lucenelib.dll MSIL/PNGLoader.A CLRLoad. vsstrace.dll Win64/CLRLoad.C Win32/CLRLoad.A 4CCF0386BDE80C339EFE0CC734CB497E0B08049C ncrypt.dll Win32/CLRLoad.A 5CFC0D776AF023DCFE8EDED5CADA03C6D7F9C244 wlbsctrl.dll Win64/CLRLoad.E CLRLoad. 05F19EBF6D46576144276090CC113C6AB8CCEC08 wlbsctrl.dll Win32/CLRLoad.A A5D548543D3C3037DA67DC0DA47214B2C2B15864 secur32.dll Win64/CLRLoad.H dbghelp.dll Win64/CLRLoad.C CBF42DCAF579AF7E6055237E524C0F30507090F3File PathsSome of the MainPath, LogFilePath and IfLogFilePath values that we encountered in PNGLoad samples:MainPathC:\Program Files\VMware\VMware Files\WinRar\LogFilePathIfLogFilePathC:\Program Files\VMware\VMware Tools\VMware VGAuth\readme.txtC:\Program Files\VMware\VMware Tools\VMware VGAuth\VMWSU_V1_1.dllC:\Program Files\WinRar\rarinstall.log C:\Program Files\WinRar\des.dat11/13MainPathC:\Program Files\UltraViewer\LogFilePathC:\Program Files\UltraViewer\ CopyRights.datIfLogFilePathC:\Program Files\UltraViewer\uvcr.dllNetworkDomainIPNone None airplane.travel-commercials[.]agency 5.183.101[.]9 central.suhypercloud[.]org 45.77.36[.]243118.193.78[.]22 118.193.78[.]57MutexesIn CLRLoad samples, the mutex names that we encountered are:aB82UduGX0EX 3c3401ad-e77d-4142-8db5-8eb5483d7e41 9xvzMsaWqxMyA comprehensive list of Indicators of Compromise (IoCs) and samples can be found in our GitHub repository. MITRE ATT&CK techniquesThis table was built using version 11 of the MITRE ATT&CK framework.TacticIDNameDescriptionT1592.002 Gather Victim Host T1592.001 Gather Victim HostInformation: Software PowHeartBeat gathers explorer.exe's information. Information: Hardware PowHeartBeat gathers information about drives. Gather Victim Network Information: IP AddressesPowHeartBeat gathers IP addresses of the compromised computer.T1590.005ReconnaissanceResource DevelopmentServerToolT1583.004 Acquire Infrastructure: T1588.002 Obtain Capabilities: T1583.001 Acquire Infrastructure: T1588.005 Obtain Capabilities: T1587.001 Develop Capabilities: T1587.003 Develop Capabilities:DomainsMalwareExploitsExecutionT1059.001Digital Certificates PowerShellWorok uses its own C&C servers. Worok deployed multiple publicly available tools on the compromised machines. Worok has registered domains to facilitate C&C communication and staging. Worok has used the ProxyShell vulnerability. Worok has developed its own malware: CLRLoad, PNGLoad, PowHeartBeat. Worok has created Let’s Encrypt SSL certificates in order to enable mutual TLS authentication for malware.PowHeartBeat is written in PowerShell.12/13IDName T1505.003 Server SoftwareT1140T1036.005T1003.001T1082T1083T1046T1124T1005T1560.002T1071.001Tactic ControlExfiltrationWorok uses various custom XOR-based schemes to encrypt strings and logs in PowHeartBeat, PNGLoad, and CLRLoad. PNGLoad samples are deployed in legitimate-looking VMWare directories.Worok uses Mimikatz to dump credentials from LSASS memory.Description Component: Web Shell Worok uses the webshell ReGeorg. Deobfuscate/Decode Files or Information Masquerading: Match Legitimate Name or File and Directory Data from Local Data: Archive via ProtocolsPowHeartBeat gathers OS information.PowHeartBeat can list files and directories. Worok uses NbtScan to obtain network information on compromised machines. PowHeartBeat gathers the victim’s time information.PowHeartBeat gathers data from the local system.PowHeartBeat gzip-compresses data before sending it to the C&C server.Some PowHeartBeat variants use HTTP as the communication protocol with the C&C server.T1573.002T1090.001 Proxy: Internal Proxy PowHeartBeat handles proxy configuration on the victim’s machine. T1001.002 Data Obfuscation: PNGLoad extracts pixel values from .png files to PowHeartBeat handles HTTPS communications with Asymmetric the C&C server. Cryptography Some PowHeartBeat variants use ICMP as the Non-Application Layer communication protocol with the C&C server. Protocol Worok uses XOR encoding in PowHeartBeat, and PNGLoad. Worok uses XOR encoding algorithms that make use of an additional salt. PowHeartBeat uses its C&C communication channel to exfiltrate information.T1095 T1132.001 Data Encoding: Standard Encoding T1132.002 Data Encoding: Non- Standard Encoding Exfiltration Over C2 ChannelT10416 Sep 2022 - 11:30AM13/13 