TigerRAT – Advanced Adversaries on the Prowlblogs.vmware.com/security/2021/12/tigerrat-advanced-adversaries-on-the-prowl.htmlDecember 3, 2021SummaryOn September 5th, 2021, the Korea Internet & Security Agency (KISA) released a report on a new threat they dubbed TigerRAT. The newly found malware shares similarities with malware previously reported by Kaspersky and Malwarebytes. Kaspersky has previously attributed those malware samples to Andariel, a threat actor group the Korean Financial Security Institute has identified as being a sub-group of Lazarus. TigerRAT appears to have been used from late 2020 onwards.VMware’s Threat Analysis Unit identifies TigerRAT as a payload associated with broader campaign of attacks against target enterprises. The TigerRAT payload capability includes the ability to manipulate files, execute remote commands, log keystrokes and remotely view and control the screen. TigerRAT may be blocked by VMware Carbon Black (see Figure 8).Notably this malware, and the overall attack, originates from a loader application that utilizes a unique approach to storing the payload. Within the TigerRAT sample, configuration data for Command and Control (C2) communications is stored encrypted within the malware, and communications with the C2 server are customized to appear like HTTP web traffic.VMware’s Threat Analysis Unit performed a deep analysis of the TigerRAT malware to document its internal operations for comparison to other malware families in the wild.When considering how TigerRAT may be used in the wild, defenders should recognize that the TigerRAT malware will be used by attackers as part of a broader campaign of attacks and that along the kill-chain, a wide variety of other malware types and attack techniques are also likely to be used. This is a key point when evaluating how such campaigns can be detected and disrupted.LoaderLoader structureIn the case of sample , the TigerRAT payload data is stored in a section named “data”. The payload structure is a 4-byte size, a 16-byte key, and then base64 encoded data. The size is the total length of the base64 data.4 bytes16 bytesNN bytesSize of base64 encoded data (NN) Decryption key base64 encoded dataThe screenshot below (Figure 1) shows the size in red, the decryption key in green, and the base64 data in blue.1/12Figure 1: LoaderLoader functionThe Loader’s purpose is to decrypt the final TigerRAT payload and execute it in memory. The data is loaded, base64 decoded and then the 16-byte key is used to decrypt the data with a simple XOR. The decoded payload is a PE file and after decrypting the loader will jump to the entry point.Variance of loaders in the wild2/12The loader sample Malwarebytes reported on had almost identical code to that analyzed here, with the notable difference being that the base64 data was stored as overlay data after all the regular PE data. The embedded payload in the Malware bytes sample also differed. Refer to the Malwarebytes post for additional detail.TigerRATThe embedded PE is referred to as TigerRAT by the KISA report. A handful of different samples were found with compilation dates ranging from the end of 2020 to the beginning of 2021, with the only notable differences between different samples being the encrypted C2 information, and the DES/RC4 keys used for encryption and decryption.The malware is written in C++ and makes use of only a handful of classes. At startup, a main class is created with references to the classes below.Class nameDescriptionProtocolTcpPurePerforms all the communication with the C2 server.CryptorDESCryptorRC4Used to decrypt encrypted strings and data in the program.Used to encrypt information sent to the C2 server and decrypt received commands.IDGeneratorAdapterCreates a unique ID for the victim machine used during C2 communication initialization.ModuleUpdateHandles C2 commands related to shutting down and self-deletion.ModuleInformationHandles C2 commands related to gathering victim machine information.ModuleShellHandles C2 commands related to executing commands.ModuleFileManagerHandles C2 commands related to file manipulation and upload and download of files from the victim machine.ModuleKeyLoggerHandles C2 commands related to starting and stopping keylogging functionality.ModuleSocksTunnelHandles C2 commands related to starting and stopping a socks tunnel.ModuleScreenCapture Handles C2 commands related to remote screen capturing and keyboard eventinjection.ModulePortForwarder Handles C2 commands related to starting and stopping port forwarding.Table 1: TigerRAT classesAll of the Module classes inherit from a common base class and the main class stores an array of Module instances that are used during C2 communication. The code makes heavy use of threading when running actions based on C2 commands.C2 CommunicationDuring the main class initialization, the C2 IP addresses are decrypted using the CryptorDES class and stored in the main class. When that initialization is finished, the malware then attempts to initiate the network connection to the C2 server. The malware first tries to connect to one of the decrypted C2 IP addresses on port3/12443 and then performs a handshake with the C2 server. The malware starts by sending HTTP 1.1 /index.php? member=sbi2009 SSL3.3.7\x00 and then the C2 server responds with HTTP 1.1 200 OK SSL2.1\x00.Following a successful initial handshake, the malware sends a 16-byte hash of the RC4 key being used and expects to get back a hardcoded 7-byte value. In the case of all currently found samples, the malware expects the 7-byte value “xPPygOn”.The handshake process can be seen from the perspective of the C2 server by running a mockc2 TigerRAT server (Figure 2).mockc2> debug on [+] Debug output on mockc2> listener start tigerrat 443 [DEBUG] Server listening [i] connection from x.x.x.x:55067 [DEBUG] received00000000 48 54 54 50 20 31 2e 31 20 2f 69 6e 64 65 78 2e |HTTP 1.1 /index.| 00000010 70 68 70 3f 6d 65 6d 62 65 72 3d 73 62 69 32 30 |php?member=sbi20| 00000020 30 39 20 53 53 4c 33 2e 33 2e 37 00 |09 SSL3.3.7.| [DEBUG] sent 00000000 48 54 54 50 20 31 2e 31 20 32 30 30 20 4f 4b 20 |HTTP 1.1 200 OK | 00000010 53 53 4c 32 2e 31 00 |SSL2.1.| [DEBUG] received 00000000 f2 7c 29 1f a5 75 fa 20 23 f7 7b 5b fa 5b e1 4a |.|) u. #.{[.[.J| 00000000 78 50 50 79 67 4f 6e 00 |xPPygOn.|Figure 2: TigerRAT handshakeAfter the handshake process has been completed successfully, the malware will proceed to send all further data in a standard command format and encrypted using the CryptorRC4 class. A single 32-byte RC4 key is used to initialize two separate running RC4 ciphers. One is used to decrypt incoming traffic and the other is used to encrypt outgoing traffic. The encrypted traffic has the following format (Figure 3):struct packet { };Figure 3: Encrypted traffic structureOnce decrypted the command format is as follows (Figure 4):struct command { uint32 module; uint32 opcode;4/12uint32 size; uint8 *data; };Figure 4: Command structureAfter the handshake, the malware sends to the C2 server a unique victim machine identifier previously generated by the IDGeneratorAdapter class. The unique ID is generated by calling the GetAdaptersInfo API and getting the hardware address for one of the network devices on the victim machine (Figure 5).[DEBUG] received 00000000 18 00 00 00 9d c6 28 3a a8 14 21 6c 4f 27 81 0a |……(: !lO’ | 00000010 5c 4d 4d 42 cd 2e 65 fa fd 50 b0 29 |\MMB e P.)| [DEBUG] TigerRAT Command [DEBUG] Module: 0x0 [DEBUG] Opcode: 0x1 [DEBUG] Size: 0xc [DEBUG] Data: 00000000 f0 18 98 80 95 32 00 00 00 00 00 00 |… 2……|Figure 5: TigerRAT victim IDAfter the handshake process and upload of the victim ID, the malware initiates a heartbeat thread to send periodic packets to the C2 server, as well as a receive thread to read and process commands sent back from the C2 server. The subsequent actions of the malware will depend on the commands received from the C2 server; refer “Commands”. An example of a heartbeat command can be seen below (Figure 6):[DEBUG] received 00000000 0c 00 00 00 a5 31 6d a7 8f cd d4 70 aa e1 d4 56 |… 1m….p…V| [DEBUG] TigerRAT Command [DEBUG] Module: 0x0 [DEBUG] Opcode: 0x10 DEBUG] Size: 0x0Figure 6: TigerRAT heartbeatCommands Each Module class has a unique ID associated with it. This ID is set in the command structure sent from the C2 server down to the malware. The complete list of Module IDs can be seen below:Module ID Module Name0x10x20x30x40x5ModuleUpdateModuleInformationModuleShellModuleFileManagerModuleKeyLogger5/120x60x70xaModuleSocksTunnelModuleScreenCaptureModulePortForwarderTable 2: Module IDsThe following tables list the various opcodes used by the different Module classes and their function.ModuleUpdateOpcode Description0x200x30Calls ExitProcessDelete itself and exitTable 3: ModuleUpdate opcodesModuleInformationOpcode Description0x100x200x300x40Retrieve victim’s computer name using GetComputerNameWRetrieve victim’s Windows version using RtlGetVersionRetrieve victiom’s adapter info using GetAdaptersInfoRetrieve victim’s username using GetUserNameWTable 4: ModuleInformation opcodesModuleShellOpcode Description0x100x200x300x40Execute a commandSet current directoryGet current directoryTest TCP connectionTable 5: ModuleShell opcodesModuleFileManagerOpcode Description0x10Retrieve drive info6/120x200x300x400x420x430x500x570x5f0x600x630x700x800x90List filesDelete fileStart file upload to victim machineWrite data to uploaded fileFinish file upload to victim machineDownload file from victim machineSet offset in file to downloadWait for file transfers to finishCall CreateProcessWCall CreateProcessAsUserWDownload a directory from victim machineFind filesFind filesTable 6: ModuleFileManager opcodesModuleKeyLoggerOpcode Description0x100x110x200x210x250x32Initialize keyloggerSet keylogger flagStop keyloggerSet keylogger flagRetrieve keylogger outputRetrieve keylogger fileTable 7: ModuleKeyLogger opcodesModuleSocksTunnelOpcode Description0x100x200x30Start socks tunnelForward dataStop socks tunnel7/12Table 8: ModuleSocksTunnel opcodesModuleScreenCaptureOpcode Description0x100x200x500x520x530x600x610x620x630x640x650x660x67Start screen captureStop screen captureModify mouseModify mouseModify mouseSend VK_ESCAPE using keybd_eventSend VK_MENU + VK_TAB using keybd_eventSend VK_CONTROL + A using keybd_eventSend VK_RSHIFT + VK_DELETE using keybd_eventSend VK_MENU + VK_F4 using keybd_eventSend VK_RETURN using keybd_eventSend VK_SPACE using keybd_eventSend VK_TAB using keybd_eventTable 9: ModuleScreenCapture opcodesModulePortForwarderOpcode Description0x110x200x30Retrieve port forwarding statusStart port forwardingStop port forwardingTable 10: ModulePortForwarder opcodesDetection and BlockingThe TigerRAT malware may be detected . Figure 7 below shows TigerRAT launching multiple command interpreters in response to simulated commands sent from the mock C2 server. VMware Carbon Black Cloud can be configured to block unknown software attempting to run command interpreters as seen in Figure 8 below.8/12Figure 7: Process tree of TigerRAT executing remote commands9/12Figure 8: VMware Carbon Black Cloud blocking execution on unknown application attempting to run a command interpreterMITRE ATT&CK TIDsTIDTacticT1059.003 ExecutionDescriptionCommand and Scripting Interpreter: Windows Command 