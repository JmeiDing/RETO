5/6/2020Nazar: Spirits of the Past - Check Point ResearchNazar: Spirits of the Pastresearch.checkpoint.com/2020/nazar-spirits-of-the-pastMay 5, 2020May 5, 2020 Introduction 6:22 AM 11/7/2012 conficker still on target 6:18 AM 11/7/2012 checking logs - we are clean 8:16 PM 7/2/2012 - BOOM!, got the callbackThose were some of the words that the Equation Group (NSA) operators left in the records documenting their attacks against target systems, and which were later leaked by the Shadow Brokers. The plethora of information exposed in the ﬁfth and last leak by the Shadow Brokers, called “Lost in Translation”, and the following consequences that took shape in WannaCry and NotPetya among other things, makes this a changing point in the game of cyber security as we know it.Recently, security researcher Juan Andres Guerrero-Saade revealed a previously misidentiﬁed and unknown threat group, called Nazar, which was part of the last leak by the Shadow Brokers. In this research, we will expand upon the analysis done by Juan and another which was written by Maciej Kotowicz, and will provide an in-depth analysis of each of the Nazar components. But the real question is, do those new revelations add a missing piece to the puzzle, or do they show us how much of the puzzle we are missing? Prior Knowledge While the “Lost in Translation” leak by the Shadow Brokers brought infamous exploits such as EternalBlue into the limelight, it contained many more valuable components that showed some of the possible precautions taken by the Equation Group operators before launching an attack.url Spirits of the Past - Check Point ResearchA screenshot from the original post by the Shadow BrokersFor example, among the leaked ﬁles was one called “drv_list.txt“, which included a list of driver names and corresponding remarks that were sent back to the operators if the drivers were found on the target system. Naturally, the list contained many drivers that could detect the presence of an anti-virus product or a security solution (ourselves included):Drivers mentioned in “drv_list.txt”But even more curious were the names of malicious drivers in this list, which if found could indicate that the target system has already been compromised by another attacker, and would then warn the operators to “pull back”. Another pivotal component in the Equation Group’s arsenal that is in charge of such checks is called “Territorial Dispute”, or “TeDi”.url Spirits of the Past - Check Point ResearchTerritorial Dispute, as seen in the leaked sourcesSimilar to a scan conducted by a security product, “TeDi” consists of 45 signatures that are used to search the target system for registry keys or ﬁlenames associated with other threat groups. But we can assume that the end purpose in this case, unlike that of a security scan, is to make sure that Equation Group’s operations are not disrupted and that their own tools are not detected by other adversaries (or “other peeps”, as they are called in “TeDi”) monitoring the same system.Code snippet from TeDi’s leaked sourcesIn certain cases, this also guarantees that the Equation Group themselves do not disrupt the ongoing operations of “friendly” threat groups, and do not attack the same target.Extensive research work has been done by CrySys Labs in 2018 to try and map each of the 45 signatures to the respective threat group it is meant to detect since no names were included in “TeDi” itself.url Spirits of the Past - Check Point ResearchExamples for signatures found on TeDi’s leaked sourcesDespite the relatively scarce amount of information it contains, security researchers often revisit “TeDi” in an attempt to get a better understanding of threat groups that the Equation Group had visibility to back then, as some of which are still (to this day) unknown to the public.Security researcher Juan Andres Guerrero-Saade has shown that the 37th signature in “TeDi” which looks for a ﬁle called “Godown.dll” points to what might be an Iranian threat group he dubbed “Nazar”, rather than a Chinese one as initially thought in the CrySys Lab report.SIG37, the signature to detect “Nazar” by looking for “godown.dll”The beauty of the “TeDi” project is perhaps in its minimalism: the small number of signatures it contained gave the Equation Group the capability of detecting the activity of notorious threat groups that have eluded detection and managed to remain in the shadows for years: Turla, Duqu, Dark Hotel, and the list goes on. This is the result of what we can only estimate as years of intelligence and research work on the Equation Group’s part. Equipped with this knowledge we set out to ﬁnd more about the mysterious newly discovered player included in this watchlist: Nazar’s activity is believed to have started somewhere around 2008, meaning that the group was active for at least four years, as the latest samples were created in 2012.The CrySys Labs report pointed to a ﬁle possibly related to the 37th signature, which turned out to be an anti-virus signature database from 2015 that detected this unique Nazar artifact, “Godown.dll”. Surprisingly, the same signature contained names of the other artifacts that we have seen being used by the Nazar malware (and will explain in detail in the following sections), meaning that some security companies were already fully aware of this malicious activity back then, prior to the “TeDi” leak:url Spirits of the Past - Check Point ResearchAn anti-virus signature that was detecting NazarThe initial binary that is executed in Nazar’s ﬂow is gpUpdates.exe . It is a Self-Extracting Archive (SFX) created by a program called “Zip 2 Secure EXE“. Upon execution, gpUpdates writes three ﬁles to disk: Data.bin , info , and Distribute.exe . Then, gpUpdates.exe will start Distribute.exe which operates as an installing component. Distribute.exe At the start, Distribute.exe will read the other two ﬁles that were dropped by gpUpdates : info and Data.bin . The Data.bin ﬁle is a binary blob that contains multiple PE ﬁles that are concatenated in a sequence. The info ﬁle is a very small ﬁle that contains a simple struct with the lengths of the PE ﬁles in Data.bin . Distribute.exe will read Data.bin as a stream, ﬁle by ﬁle, in the order of ﬁle lengths as shown in info .The following table shows the ﬁles concatenated in Data.bin against the lengths written in info .Data.bin (sequence of ﬁles) Godown.dllinfo (lengths) 32768After the aforementioned ﬁles are dropped to the disk, Distribute.exe will register 3 of the DLL ﬁles to the registry, by using regsvr32 .ShellExecuteA(0, "open", "regsvr32.exe", "Godown.dll -s", 0, 0);ShellExecuteA(0, "open", "regsvr32.exe", "ViewScreen.dll -s", 0, 0);ShellExecuteA(0, "open", "regsvr32.exe", "Filesystem.dll -s", 0, 0);Afterwards, it uses CreateServiceA to add svchost.exe as a service named “EYService”, and it will then start the service and exit. This service, as we will explain soon, is the core component in the ﬂow and is responsible for processing the commands sent by the attacker.url Spirits of the Past - Check Point Researchsvchost.exe / EYServiceNazar’s execution ﬂowThis service is the main component in the attack, and it orchestrates the entire modules dropped and loaded by Nazar. In a sense, the EYService is only a marionette controlled by a puppeteer that sends commands to it. The communication protocol will be thoroughly explained in later parts of this blog post. As commonly seen in RAT-like components, this service mainly contains a list of supported commands, and each of these commands is assigned with a function to handle it upon a request from the attacker. The full list of commands is listed below.As other components in Nazar, this module also does not demonstrate novel techniques or high- quality of written code. In fact, this module, like the others, is mostly based on open-source libraries that were commonly available at the time. To manage trafﬁc and sniff packets, Nazar uses Microolap‘s Packet Sniffer SDK. To record the victim’s microphone it uses “Lame” Mp3 encoding library. For keylogging it uses KeyDLL3. BMGLib is used to take screenshots, and even for shutting down the computer, it uses an open-source project – The ShutDown Alarm. Communicationurl Spirits of the Past - Check Point ResearchWhen analyzing the networking component, the main thing we looked for was the IP of the command and control, since this could open up new paths, and perhaps recent attacks and samples. Alas, leaving no stone unturned, we could not ﬁnd such an IP, and it made sense due to how Nazar is communicating.Upon execution of the service, it begins with setting up the packet snifﬁng. This is done by using the Packet Sniffer SDK, in pretty much a textbook way. The main thread gets an outward-facing network adapter and uses BPF to make sure only UDP packets are forwarded to the handler.DWORD __stdcall main_thread(LPVOID lpThreadParameter){HANDLE hMgr; // ediHANDLE hCfg; // esiHANDLE hFtr; // edihMgr = MgrCreate();MgrInitialize(hMgr);hCfg = MgrGetFirstAdapterCfg(hMgr);do{if ( !AdpCfgGetAccessibleState(hCfg) )break;hCfg = MgrGetNextAdapterCfg(hMgr, hCfg);}while ( hCfg );ADP_struct = AdpCreate();AdpSetConﬁg(ADP_struct, hCfg);if ( !AdpOpenAdapter(ADP_struct) ){AdpGetConnectStatus(ADP_struct);MaxPacketSize = AdpCfgGetMaxPacketSize(hCfg);adapter_ip = AdpCfgGetIpA_wrapper(hCfg, 0);url Spirits of the Past - Check Point ResearchAdpCfgGetMACAddress(hCfg, &mac_address, 6);hFtr = BpfCreate();BpfAddCmd(hFtr, BPF_LD_B_ABS, 23u); // Get Protocol ﬁeld valueBpfAddJmp(hFtr, BPF_JMP_JEQ, IPPROTO_UDP, 0, 1);// Protocol == UDPBpfAddCmd(hFtr, BPF_RET, 0xFFFFFFFF);BpfAddCmd(hFtr, BPF_RET, 0);AdpSetUserFilter(ADP_struct, hFtr);AdpSetUserFilterActive(ADP_struct, 1);AdpSetOnPacketRecv(ADP_struct, on_packet_recv_handler, 0);AdpSetMacFilter(ADP_struct, 2);while ( 1 ){if ( stop_and_ping == 1 ){adapter_ip = AdpCfgGetIpA_wrapper(hCfg, 0);connection_method(2);stop_and_ping = 0;}Sleep(1000u);}}return 0;}Whenever a UDP packet arrives, its source IP is recorded to be used in the next response, whether or not there will be a response. Then, the packet’s destination port will be checked, and in case it is 1234 the UDP data will be forwarded to the command dispatcher.int __cdecl commandMethodsWrapper(udp_t *udp_packet, int zero, char *src_ip, int ip_id){url Spirits of the Past - Check Point Researchint length; // edilength = HIBYTE(udp_packet->length) - 8;ntohs(udp_packet->src_port);if ( ntohs(udp_packet->dst_port) != 1234 )return 0;commandDispatcher(&udp_packet[1], src_ip, ip_id, length);return 1;}Types of responsesEach response will have its packet built from scratch, so it could be sent using PSSDK’s send methods : AdpAsyncSend/AdpSyncSendThere are 3 types of responses:Send an ACK: With destination port 4000 and payload 101;0000 Send computer information: With destination port 4000 and payload 100;<Computer Name>;<OS name> Send a ﬁle: The content will be sent as UDP data, followed by another packet with --- <size_of_file> The UDP destination port will be the little-endian value of the IP identiﬁcation ﬁeld in the request message. For example, If the server sent a packet (to destination port 1234) with identiﬁcation 0x3456 ,the malware will send its response with destination port 0x5634To make the options clearer, and to demonstrate how Nazar communicates, we have created a python script that can “play” the server controlled by the attacker, and communicate with the victim. The script is available in Appendix C.url Spirits of the Past - Check Point ResearchA script we created to demonstrate how the server would communicate with NazarSupported Commands As we mentioned earlier, svchost.exe , or the service named EYService , contains a list of supported commands. We analyzed two versions of the RAT and found slight differences. The entire list of supported commands, in addition to our analysis notes, are presented in the table below.url Spirits of the Past - Check Point ResearchCom‐ Enable keylogger by loading the ‘hodll.dll’ library to memory and manually im‐ porting the ‘installhook’ function. The keystrokes are saved with the window name to ‘report.txt’. The written content is then sent to the server. The keylog‐ ger is based on common open-source libraries called “KeyDLL3” (by Anoop Thomas) and “KeyBoard Hooks” (by H. Joseph). Command 312 will disable the keylogger. Shutdown the machine. The command is interacting with the Godown.dll component by spawning it based on its RCLSID and RIID. The Godown module was probably based on an open-source implementation called The ShutDown Alarm. Start screen capturing. The function calls the benign ViewScreen.dll and instructs it to save screenshots in a PNG ﬁle named z.png . The ﬁle is then sent to the server. The module is based on a known open-source project named “BMGLib“, written by M. Scott Heiman. Command 313 will disable the screen capturing. Responsible for recording audio using the victim’s Microphone. The recording is saved to music.mp3 and sent to the server. The implementation is based on an open-source project which uses a known open source library called “LAME MP3“. Command 315 will disable the voice recording. List all drives in the PC (C:\, D:\, …) and save it to Drives.txt . The ﬁle is then sent to the server. This functionality exists as-is in Filesystem.dll but the newer variant of svchost.exe does not use the DLL, even though it is still dropped to the machine. List all the ﬁles and folders in the system and saves it to Files.txt . The ﬁles and folder are separated with ;File; or ;Folder; . This functionality exists as-is in Filesystem.dll but the newer variant of svchost.exe does not use the DLL, even though it is still dropped to the machine. Sends ﬁle content to the server. Remove a ﬁle from the machine. List program by enumerating the keys found in the following registry path: Software\Microsoft\Windows\CurrentVersion\Uninstall . The program names are then saved to a ﬁle called Programs.txt and sent to the server. List all the devices on the machine and save it to a ﬁle named ‘Devices.txt’ which is then sent to the server. The devices are separated with either ‘;Root;’ or ‘;Child;’. Sends 101;0000 back to the server in port 4000 .url Spirits of the Past - Check Point ResearchCom‐ Sends Computer information: 100;Computer Name; OS Name back to the server in port 4000 . Disable voice recording. Disable keylogging. Disable screen capturing. Pretty much NOP. Will set a ﬂag that is also set by 119 and 189 and will be unset when sending a ﬁle. However, it is never checked. Registers Godown.dll using regsvr32 This command was included in svchost.exe versions from 2010 but was then removed, and the module registration moved to Distrbute.exe Registers ViewScreen.dll using regsvr32 This command was included in svchost.exe versions from 2010 but was then removed, and the module registration moved to Distrbute.exe Registers Filesystem.dll using regsvr32 This command was included in svchost.exe versions from 2010 but was then removed, and the module registration moved to Distrbute.exeGodown.dll Godown.dll is the DLL which is in the spotlight of SIG37, and the one that started this manhunt after the unknown malware. Before it was caught by law-abiding security analysts, one could imagine Godown.dll to be the mastermind behind this whole operation, the component to control them all, some hidden gem, or an unseen rose. In reality, Godown.dll is a tiny DLL with one and only goal – to shut down the computer. Believe us, we tried hard to ﬁnd any hidden or mysterious functionality inside the binary, but nothing was there, except a shutdown command. The reasons to take 5 lines of C code and place them in a DLL, put it in Data.bin , drop it to the disk, register it as a COM DLL using regsvr32 and then call it indirectly using GUID – are beyond our understanding. But well, it was good enough of a lead to revealing Nazar, and for that, we should be thankful. Filesystem.dll Out of all the modules used in this attack, Filesystem.dll might be the only one whose code was actually written by the attackers themselves. The purpose of this module is to enumerate drives, folders and ﬁles on the infected system and write the ﬁnal results to two text ﬁles: Drives.txt and Files.txt .We were able to get our hands on two versions of this module that were created a year apart, both of which included PDB paths that mentioned a folder with the Persian name Khzer (or    ):url Spirits of the Past - Check Point ResearchC:\\khzer\\DLLs\\DLL's Source\\Filesystem\\Debug\\Filesystem.pdb D:\\Khzer\\Client\\DLL's Source\\Filesystem\\Debug\\Filesystem.pdbUpon closer inspection, there are some differences between the two paths: One starts with the C:\\ partition while the other starts with D:\\ , one uses Khzer (uppercase) while the other uses khzer (lowercase), and so on. This might indicate that the two versions of the module were not compiled in the same environment, and is further strengthened by some of the included headers’ paths, which show that Visual Studio was installed in two different locations:But these are not the only differences between the two versions: while the Filesystem.dll module was dropped by all the known variants of gpUpdates.exe , it was not always used in the same manner.For example, versions of svchost.exe dating back to 2010 have three commands that have since been omitted: “211”, “212”, and “213”. Those commands allow svchost.exe to register the dropped DLL modules using regsvr32 , a functionality that was later migrated to Distribute.exe (as described in the Execution Flow section above).An omitted command presented in svchost.exe, as can be seen in CutterThen, when a command is received by the C2 to collect the ﬁles and drives on the system, the Filesystem.dll module is called after it was registered:url Spirits of the Past - Check Point ResearchRegistering Filesystem.dll, as can be seen in CutterOn the other hand, a more recent version of svchost.exe that was created in 2012 replicates the ﬁle and drive lookup functionalities found in Filesystem.dll when receiving the “199” and “200” commands from the C2, and performs the search itself. Therefore, even though it is still dropped in this case, it appears that the Filesystem.dll module is not used in the newer versions of Nazar:The same functionality presented in both ﬁles as can be seen in the disassembly from Cutterhodll.dll The hodll.dll module is responsible for recording the user’s keystrokes. It is done, as most keyloggers do, by setting a Windows hook for keyboard inputs. While there are many implementations of keyloggers available, we believe that this implementation is based on one orurl Spirits of the Past - Check Point Researchmore open-source projects. Speciﬁcally, we believe that the code was taken from common open- source libraries called “KeyDLL3” (by Anoop Thomas) and “KeyBoard Hooks” (by H. Joseph) or by a fork of these projects, as many are available. In fact, the samples of hodll.dll we put our hands on, looked like they were built from different layers of open source projects. In a way, it looked like someone copied code from the internet, and then deleted it partially, and took other code, and deleted it as well, and so on. The ﬁnal result contained evolutionary pieces from multiple layers of code. ViewScreen.dll This DLL is based on a known open-source project named “BMGLib” and it is used to take screenshots of the victim’s computer. No major changes, if any, were added to the original source, and this is yet another example of how the Nazar malware uses an entire library just for a small In this article, we tried to gather all the information we learned about Nazar since its recent exposure. We dived deep into each and every one of the components and tried to solve as many mysteries as possible. The leaked information by the Shadow Brokers taught us that the NSA knew about Nazar for many years, and thanks to other researchers, the community was able to strikethrough another unknown malware family from the list of signatures in “TeDi”.Many of the signatures in “TeDi” described advanced and novel malware families, but this does not appear to be the case with Nazar. As we have shown in the article, the quality of the code, as well as the heavy usage of open source libraries, does not match the proﬁle of a shrewd threat actor. And although we tried to cover everything, there are still many unanswered questions surrounding those discoveries: What happened to the Nazar group, did they evolve into other groups that are nowadays known under different names? Are they still active? Are there more samples out there? With those questions and others on our minds, we cannot help but leave this open-ended.AppendixAppendix A: Yara Rules In his blog post, Juan published Yara rules to ease detection. The rules are well written and cover the different components. We want to share some rules we created during our analysis, to add to CLSID$guid6_ﬁlesystem = { 2D A1 2B 77 62 8A D3 4D B3 E8 92 DA 70 2E 6F 3D } // Filesystem.dll TypeLib IID$guid5_ﬁlesystem = { AB D3 13 CF 1C 6A E8 4A A3 74 DE D5 15 5D 6A 88 } // Filesystem.dllcondition:any of them} Appendix B: Indication of Compromisesurl Spirits of the Past - Check Point ResearchFile gpUpdates.exeData.binDistribute.exeFilesystem.dllHodll.dllGodown.dllsvchost.exeViewScreen.dll (benign)Sha-256 