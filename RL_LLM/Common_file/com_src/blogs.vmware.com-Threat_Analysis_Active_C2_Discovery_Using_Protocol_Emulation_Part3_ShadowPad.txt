blogs.vmware.com /security/2022/10/threat-analysis-active-c2-discovery-using-protocol-emulation-part3-shadowpad.html Threat Analysis: Active C2 Discovery Using Protocol Emulation Part3 (ShadowPad) Tom Gillis ⋮ ⋮ 10/27/2022ShadowPad is a modular malware platform privately shared with multiple PRC-linked threat actors since 2015. According to SentinelOne, ShadowPad is highly likely the successor to PlugX. Due to its prevalence in the cyber espionage field, the VMware Threat Analysis Unit (TAU) was motivated to analyze the command and control (C2) protocol to discover active ShadowPad C2s on the Internet. C2 ProtocolShadowPad supports six C2 protocols: TCP, SSL, HTTP, HTTPS, UDP, and DNS. In this research, TAU focuses on TCP/HTTP(S)/UDP protocols as others like SSL and DNS are not likely utilized by the recent ShadowPad samples.The format and encoding algorithm is different between TCP and HTTP(S)/UDP.Table 1: Difference in packet formatKey size Header size Payload size in the initial 0x14Up to 0x3FHTTP(S)/UDP HTTP(S): Up to 0x1F,UDP: 0x10The key for the encoding is included in the header. Every integer value in the header is in big endian. Randomly-sized data will be appended as the payload to the initial handshake packet in both cases.The immediate values used by the encoding algorithms are different per variant (probably per ShadowPad builder version). Analysis was performed on three ShadowPad variants, which TAU was able to collect in August 2021, as displayed in Table 2. The SHA256 hash values are included in the Indicators of Compromise section below.Table 2: Analyzed ShadowPad variantsVariant name Variant1(aka ScatterBee)C2 protocol Config sizeAttributionSourceTCP/UDP0x896APT41Positive Technologies1/14Variant2 Variant3HTTP(S) HTTP(S)0x85C Positive TechnologiesTCP ProtocolAnalysis was performed to fully detail the C2 protocol. The TCP protocol header format is displayed as follows.struct struc_common_header{__int32 session_key;__int32 plugin_and_cmd_id; // plugin_id (0x68) << 16 + cmd_id (0x51)__int32 module_code; // 0__int32 payload_size_compressed;__int32 payload_size_original;};The header format has been the same since first analyzed in 2015. The session_key is randomly generated and then used for encoding both the header and payload. The plugin_id and cmd_id values included in the plugin_and_cmd_id field have been updated by variants, some of which are covered in this paper. The values in the initial packet created by Variant1 should be 0x68 (Online plugin) and 0x51 (check-in). The module_code of the initial packet generated by the sender is always 0 (zero).If any payload data exists, it will be compressed with the QuickLZ algorithm. QuickLZ is an older, publicly available compression routine that is not commonly seen. The client generates randomly-sized null bytes (up to 0x3F bytes) for the initial packet payload.The Variant1’s encoding algorithm for the TCP packet in Python is displayed in Figure 1. Based on the protocol analysis results of Variant2 and Variant3, variants of this malware are expected to contain unique immediate values instead of 0x22F4B1BA for the TCP packet encoding.2/14Figure 1: TCP packet encoding by Variant1After the initial handshake, Variant1 executes the commands of the plugins specified by the C2 server. For more details, review the Dr.WEB white paper explaining the individual command IDs and payload formats. The variant analyzed in the paper is older than Variant1 but the formats should be similar.HTTP(S) and UDP ProtocolsThe header format for the HTTP(S) and UDP protocols is listed below. In HTTP(S), the data is sent through the POST method.struct struc_proto_header{__int16 session_key;__int16 type; // 0 in HTTP, req=0x1001/res=(0x2002|0x5005) in UDP__int16 session_src_id; // random 2 bytes, generated by both client/server3/14__int16 session_dst_id; // req=0, res=client’s session_src_id};The session_key has the same role as the TCP session_key though the key size is different. The second field type is always 0 (zero) in the HTTP initial packet while the UDP client and server send 0x1001/0x2002/0x5005. The session_src_id field is randomly generated by both client/server. The value sent by the client will be set in the session_dst_id field on the server side.The initial packet payload data are randomly generated based on QueryPerformanceCounter and other APIs. The HTTP payload size is also random with a length of up to 31 (0x1F) bytes while the UDP one is fixed at 16 (0x10) bytes.Each of the three Variant encoding algorithms in Python is shown below. The immediate values in the code are different, but the algorithm itself is identical.Figure 2: UDP packet encoding by Variant14/14Figure 3: HTTP(S) packet encoding by Variant25/14Figure 4: HTTP(S) packet encoding by Variant3After the initial handshake, the payload will contain the same data structure as the TCP packet (struc_common_header and its QuickLZ-compressed payload) explained in the previous section while the type field value in the struc_proto_header will be incremented. Scanner ImplementationTAU decided on the following target protocols/ports based on the configurations extracted from the recent ShadowPad samples. As explained earlier, the scanner per variant had to be implemented due to the difference in immediate values used in the encoding.Table 3: Target protocols/portsScanning start period June 2022Target protocol/port/variant HTTP/443 (Variant2 & Variant3) TCP/443 & UDP/53 (Variant1) UDP/443 (Variant1), HTTP/80 (Variant3)6/14The following flow chart shows how the ShadowPad C2 servers are detected by the scanners.Figure 5: ShadowPad C2 detection flowSimilar to our Winnti 4.0 C2 scanning research, first the list of hosts open at targeted ports are created by ZMap. Then the scanner sends the ShadowPad-formatted packets to all IP addresses on the list. Next, the scanner checks that the response packet size is at least more than the header size and the session_key is different from the sending one to exclude honeypots. If the size and key look to be valid, the scanner decodes the response packet. In TCP protocol, the scanner validates the payload size fields (payload_size_compressed and payload_size_original). In HTTP(S) and UDP protocols, the code verifies if the type field value is correct and the response’s session_dst_id is matched with the session_src_id created by the scanner.The following output log shows that eight Variant1 TCP servers were discovered by scanning the list of TCP/443 open hosts generated by ZMap. The command_id 0x53 from the C2s is a request to send system information of the infected host.2022/06/xx xx:00:02,log file opened: scan_results/sp_scan_auto_202206xx_xxxxxx.csv7/142022/06/xx xx:00:05,malware options: family = ShadowPad; targeted protocol = tcp (version = Variant1)2022/06/xx xx:00:09,ShadowPad specific options: version = Variant1; key size = 4; key endian = big; header size = 0x14; Online plugin ID = 0x68; CMD ID = 0x51; module code = 0x02022/06/xx xx:00:16,51576779 open hosts read from corpus/2022-xx- (plugin_id=0x68, command_id=0x53, payload=None)2022/06/xx xx:48:35,51576779 scanned in 1 day, 17:48:32.4975502022/06/xx xx:48:35,8 suspicious/active servers found (DB new=4 update=4)In order to detect the Variant2/Variant3 C2 servers TAU just uses the HTTP protocol scanner, not the HTTPS one, because the ShadowPad C2s can accept multiple protocol requests at a single port. TAU noticed the unique feature by extracting the C2 server configurations from the sample (SHA256: another active ShadowPad C2 can accept both protocols at the same port.$ ./c2fs.py -d -l corpus/query.txt -p 443 -f sp http Variant2 [*] malware options: family = ShadowPad; targeted protocol = http (version = Variant2)[*] ShadowPad specific options: version = Variant2; key size = 2; key endian = big; header impossible to test because TAU has not obtained any samples of the variants with the multiple C2 protocol plugins yet. ResultBetween September 2021 to September 2022, TAU identified 83 ShadowPad C2 servers (75 unique IPs) on the Internet. The percentage of each variant is shown in Figure 6. During the tracking period, we witnessed that Variant1 had become more active.Figure 6: ShadowPad population by variantThe change in the number of active ShadowPad C2s is shown in Figure 7.9/14Figure 7: Change in the number of active ShadowPad C2sCompared with 2021, the active C2s in 2022 has been on a declining trend, though the sharp drop in February 2022 was due to the system issue. The scanner may have missed a new variant lately as ShadowPad changes the immediate values used in the packet encoding per variant. TAU will continuously improve the scanner as TAU obtains new variant samples. Malware Samples Sharing C2 IPsTAU identified three samples communicating with the ShadowPad C2 IP addresses on VirusTotal. The sample information is listed in Table 4.Table 4: Samples communicating with the ShadowPad C2 IPsSample Malware family C2 IP addressC2 2022/02/27 2021/10/17 2022/10/04 2022/03/20 2022/03/06 2022/09/27Spyder and ReverseWindow are APT malware utilized by PRC-linked cyber espionage threat actors (respectively APT41 and LuoYu). All C2s were discovered by the TCP/443 Variant1 scanner, but the samples communicated with a different protocol or port. Except the Spyder sample case, the C2s had accepted multiple protocols/ports at that time. The scanning system caught the C2s prior to the sample submissions in all cases.Spyder Code Similarity with Winnti 4.0Incidentally, it should be noted that the above-referenced Spyder sample contains the code handling the same C2 command data structure as Winnti 4.0 Worker which TAU reported three years ago in 2019.Figure 8: Code handling C2 commands11/14The command IDs used by the malware families are shown in Table 5. The commands are decided based on a combination of two numbers. Dr.WEB defined the numbers as tag and id in the Spyder report while TAU defined them as cmd_ID and dispatch_ID in the Winnti 4.0 Worker analysis. Both have almost the same C2 command functions.Table 5: Spyder and Winnti 4.0 command IDsSpyder Verify the client Send victim information Send plugins information Save plugin parameters Save plugin data Load and run plugin entrypoint and export function #1 Run plugin export function #4 6 and unload the plugin Run plugin export function #2 6 Run plugin export function #3 6Send current connection information7Run function pointer of the 2nd parameter obtained by running export function #111id 82–Winnti 4.0 Worker 9 or 13 11––On the other hand, the total code similarity between them is just 37% when analyzed with the BinDiff utility. Other data structures like configuration block and C2 protocol header are much different. Based on the comparison displayed in Table 5, TAU hypothesizes that Spyder is a lightweight version of Winnti 4.0 Worker.Table 6: Comparison of Spyder and Winnti 4.0 WorkerSpyderWinnti 4.0Payload XORAES in CTR mode (key given as a cmdline argument)C2 Protocol TLSTCP/TLS/HTTP(S)/UDPServer-mode advanced and sophisticated attack had bypassed many methods of detection but was ultimately alerted upon simply because of the pre-identified C2 IP.Figure 9: Alert based on the ShadowPad C2 ConclusionBy emulating the ShadowPad C2 protocols then scanning the C2 servers on the Internet, TAU has discovered over 80 C2 servers. The IOCs has been published on the GitHub page with discovered date ranges which are more helpful than just IP address information since the C2s are typically found on hosted servers. Approximately 10 C2s have always been active. TAU sees little possibility of false positives because the C2 protocol formats and encoding algorithms are fairly unique.13/14Scanning APT malware C2s on the Internet is sometimes like finding a needle in a haystack. However, once the C2 scanning works, it can become a game changer as one of the most proactive threat detection approaches. AcknowledgmentTAU appreciates Leon Chang’s expertise and advice regarding ShadowPad. Chang shared his knowledge to gain a more complete, bigger picture of the variants. Indicators of Compromise (IOC)TypeContextIndicator 