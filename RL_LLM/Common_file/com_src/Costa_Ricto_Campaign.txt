11/13/2020The CostaRicto Campaign: Cyber-Espionage OutsourcedThe CostaRicto Campaign: Cyber-Espionage Outsourcedblogs.blackberry.com/en/2020/11/the-costaricto-campaign-cyber-espionage-outsourcedRESEARCH & INTELLIGENCE / 11.12.20 / The BlackBerry Research and Intelligence TeamWith the undeniable success of Ransomware-as-a-Service (RaaS), the cybercriminal market has expanded its portfolio to add dedicated phishing and espionage campaigns to the list of illicit services on offer…During the past six months, the BlackBerry Research and Intelligence team have been monitoring a cyber-espionage campaign that is targeting disparate victims around the globe. The campaign, dubbed CostaRicto by BlackBerry, appears to be operated by “hackers-for-hire”, a group of APT mercenaries who possess bespoke malware tooling and complex VPN proxy and SSH tunnelling capabilities.Mercenary groups offering APT-style attacks are becoming more and more popular. Their tactics, techniques, and procedures (TTPs) often resemble highly sophisticated state-sponsored campaigns, but the profiles and geography of their victims are far too diverse to be aligned with a single bad actor’s interests.Although in theory the customers of a mercenary APT might include anyone who can afford it, the more sophisticated actors will naturally choose to work with patrons of the highest profile – be it large organizations, influential individuals, or even governments. Having a lot at stake, the cybercriminals must choose very carefully when selecting their commissions to avoid the risk of being exposed.url CostaRicto Campaign: Cyber-Espionage OutsourcedOutsourcing an espionage campaign, or part of it, to a mercenary group might be very compelling, especially to businesses and individuals who seek intelligence on their competition yet may not have the required tooling, infrastructure and experience to conduct an attack themselves. But even notorious adversaries experienced in cyber-espionage can benefit from adding a layer of indirection to their attacks. By using a mercenary as their proxy, the real attacker can better protect their identity and thwart attempts at attribution.Key Findings:CostaRicto targets are scattered across different countries in Europe, Americas, Asia, Australia and Africa, but the biggest concentration appears to be in South Asia (especially India, Bangladesh and Singapore), suggesting that the threat actor could be based in that region, but working on a wide range of commissions from diverse clients.The command-and-control (C2) servers are managed via Tor and/or through a layer of proxies; a complex network of SSH tunnels are also established in the victim’s environment. These practices reveal better-than-average operation security.The backdoor used as a foothold is a new strain of never-before-seen malware – a custom-built tool with a suggestive project name, well-structured code, and detailed versioning system. The earliest timestamps are from October 2019, and based on the version numbers, the project appears to be in the debug testing phase. It’s not clear as of now if it’s something that the threat actors developed in-house or obtained for exclusive use as part of beta testing from another entity.The timestamps of payload stagers go back to 2017, which might suggest the operation itself has been going on for a while, but used to deliver a different payload. It’s not impossible, though, that the stagers are simply being reused without recompilation (i.e.: by changing the C2 URLs via binary editing).The backdoor project is called Sombra, which is a reference to an Overwatch game persona – an agent of the antagonist organization, who specializes in espionage and intelligence assessment and is characterized by stealth, infiltration and hacking skills.Some of the domain names hardcoded in the backdoor binaries seem to spoof legitimate domains (e.g.: the malicious domain sbibd[.]net spoofing a legitimate domain of the State Bank of India Bangladesh, sbibd.com). However, victims affected by these backdoors are unrelated, suggesting reuse of existing infrastructure which served another purpose.url CostaRicto Campaign: Cyber-Espionage OutsourcedOne of the IP addresses which the backdoor domains were registered to overlaps with an earlier phishing campaign attributed to APT28 (i.e.: according to RiskIQ data, the SombRAT domain akams[.]in was at the time of attack registered to the same IP address as the phishing domain mail.kub-gas[.]com). However, BlackBerry researchers believe that a direct link between CostaRicto and APT28 is highly unlikely. It might be that the IP overlap is coincidental, or – just as plausible – that the earlier phishing campaigns have been outsourced to the mercenary on behalf of the actual threat actor.TargetingUnlike most of the state-sponsored APT actors, the CostaRicto adversary seems to be indiscriminate when it comes to the victims' geography. Their targets are located in numerous countries across the globe with just a slight concentration in the South-Asian region:India CzechiaThe victims’ profiles are diverse across several verticals, with a large portion being financial institutions.DeliveryAfter gaining access to the victim’s environment (presumably by using stolen credentials, either obtained via phishing, or bought on the dark web), the attacker sets up remote tunnelling using a SSH tool. The tool is configured to redirect traffic from a malicious domain to a proxy that is listening on a local port. The tunnel is authenticated using the attacker’s private key.In order to pull down the backdoor, a payload stager, either HTTP or reverse-DNS, is executed with the use of a scheduled task.The backdoor comes either wrapped up in a PowerSploit reflective loader, or in the form of a custom- built dropper that uses a simple virtual machine (VM) mechanism to decode and inject the payload.ToolsetSombRAT: A custom backdoor (with both x86 and x64 versions) CostaBricks: A custom VM-based payload loader (seen only with x86 SombRAT payloads so far) PowerSploit’s reflective PE injection module (seen with x64 SombRAT payloads) HTTP and reverse-DNS payload stagersurl CostaRicto Campaign: Cyber-Espionage Outsourcednmap: Port scanner PsExecPS1 Loader (x64)The 64-bit backdoor is deployed in a fairly standard way. It is distributed as a set of scripts and encrypted files and utilizes a PowerShell loader based on the Invoke-ReflectivePEInjection PowerSploit module to decode and inject the final payload DLL into memory:File NameFunctionautorun.- batObfuscated batch script that sets PowerShell execution policy to unrestricted and exe- cutes autorun.ps1au- torun.ps1Obfuscated PowerShell script that decodes and executes another PowerShell loader stored in ntuser.c filentuser.aXOR key used to decode the PowerShell loader and payload binaryntuser.bXOR encoded payload binaryntuser.cXOR encoded Invoke-ReflectivePEInjection module, modified to add payload decryption routineCostaBricks Loader (x86)The loader used with 32-bit backdoors is more technically compelling. It implements a simple custom- built virtual machine mechanism that will execute an embedded bytecode to decode and inject the payload into memory.This attempt at obfuscation, although not new, is rather uncommon in relation to targeted attacks. Code virtualization has been most prevalent in commercial software protectors which use much more advanced solutions; simpler virtual machines are sometimes also featured in off-the-shelf malicious packers used by widespread financial crimeware. This particular implementation, however, is unique (there are just a handful of samples in the public domain) and seems to be used only with SombRAT payloads – which makes us believe it is a custom-built tool that is private to the attackers.To further confuse anti-malware solutions, the loader contains the entire unobfuscated code of a legitimate open source application called Blink (url which never gets executed:url CostaRicto Campaign: Cyber-Espionage OutsourcedFigure 1: Strings belonging to Blink codeThere is also an unused zlib decompression routine that seems to be leftover code from an older version of the loader.The compilation timestamps suggest that both the loader and the embedded payload are compiled at the same time (with only a few seconds difference).One of the loaders had the following PDB path, suggesting that the internal name of the project is CostaRicto/ CostaBricks:Figure 2: PDB path from one of the x86 loader samplesVirtual Machine InternalsThe virtual machine mechanism is implemented with the usage of C++ objects and classes. There are 20 different VM instructions, each having between zero and three operands. A pointer to the bytecode to execute is passed as a parameter to the VM initialization routine:url CostaRicto Campaign: Cyber-Espionage OutsourcedFigure 3: Initialization of the virtual machineA VM instance is initialized by setting its context structure, which contains the instruction pointer, zero flag, instructions list and pointer to the registers:Offset FieldDescription0x00Instruction pointerIndex of the bytecode instruction to execute0x04Zero flagUsed for conditional jumps0x08Instructions_list.firstPoints to the first instruction in the list0x0CInstructions_list.current Points to the current instruction in the list0x10Instructions_list.nextPoints to the next instruction in the list0x14Registers pointerPoints to the list of registers0x18Registers countIncremented when new register is allocatedInstructions and Operandsurl CostaRicto Campaign: Cyber-Espionage OutsourcedInstructions, operands, and opcode handlers are implemented as doubly linked lists. Each VM instruction has its own index and contains information such as the opcode number, flags, operands count, and the operands:Figure 4: An example of VM instruction format for the SUB opcodeThe operands can either be immediate values or "registers". Dynamically allocated “registers” are small memory regions organized in the form of dictionary objects in doubly linked list. Each register has its own unique index that can store up to 8 bytes of data (including pointers to larger memory buffers) and can be either read or written to.If the operand metadata specifies the index value, the operand is a "register"; otherwise the operand contains an immediate value. The value (either immediate or pointed to by a "register") is an integer: qword by default, but different lengths (byte, word or double-word) can be specified in the metadata:Offset FieldNotes0x00Instruction indexConsecutive numbers starting with 00x04Opcode0 – 0x13 (19.)0x06Skip boolIf set, then the instruction will be ignored0x08Operands count0 – 30x0COperand typeread (0) or write (1)0x0EOperand flagSpecifies length: 0x10 = byte, 0x20 = word, 0x40 = dword0x10Operand register index Consecutive numbers starting with 0x9435C7390x14Operand valueImmediate value (if operand is not a register)0x1COperand 20x2COperand 3OptionalOptionalOpcodesurl CostaRicto Campaign: Cyber-Espionage OutsourcedEach opcode has its own handler routine, which is executed in the main VM loop:Figure 5: Loop processing VM instructionsThe handler routine will check to see if the number and types of operands are valid, read operand values from VM “registers”, perform a specific action (arithmetic/byte operation, comparison, jump, API call), and save results to a destination “register”:url CostaRicto Campaign: Cyber-Espionage OutsourcedFigure 6: XOR opcode handler routineOp- code (hex)OperandsInstructionDescription0x00dst, srcmovMove from src (either immediate value or pointer/register) to register at dst. If no operands, this acts as a NOP in- struction, used mostly as a label to jump to0x01dst, src0x02dst, src0x03dst, src0x04dst, src0x05addrxoraddandsubcallExclusive or dst with src, result pointed by dstAdd src to dst, result pointed by dstAnd dst with src, result pointed by dstSubtract src from dst, result pointed by dstCall address in operand 1 (can be immediate value or register)url CostaRicto Campaign: Cyber-Espionage Outsourced0x06-retReturn 10x07 mem_ptr, sizevirtual_allocAllocate memory (call VirtualAlloc), size in operand 2, pointer returned in operand 1 (register)0x08 mem_ptrvirtual_freeFree memory (VirtualFree), pointer in operand 1 (register)0x09dst, src, sizememmoveSource pointed by operand 2, destination pointed by op- erand 1, size in operand 30x0A dst, srccmpCompare value at dst (register) with src (immediate or reg- ister value), set zero flag in VM context structure0x0B dst, srcalldivDividend in operand 1 register, divisor in operand 2 (imme- diate or register), result in operand 1 register0x0C dst0x0D dst0x0EdstjnzjzjmpIf zero flag not set, jump to location specified by operandIf zero flag set, jump to location specified by operandUnconditional jump; set instruction pointer to the value of operand0x0Fdll_handle, dll_nameload_libraryCall LoadLibraryA, pointer to library name in operand 2 (register), handle to loaded library in operand 1 (register)0x10dll_handle, proc_name, api_addressget_proc_addr Call GetProcAddress, pointer to DLL handle in operand 1,pointer to process name in operand 2, API address re- turned in operand 3 (all operands are registers)0x11-exit_procCall ExitProcess(0)0x12dst, src0x13dst, srcshrshlShift right (divide dst by src)Shift left (multiply dst by src)The BytecodeAll of the x86 loaders BlackBerry has seen thus far embed the exact same bytecode that is 1800 (0x708) lines long. Most of these 1800 instructions are superfluous (i.e.: have no influence on the code functionality) and were inserted there for obfuscation only.url CostaRicto Campaign: Cyber-Espionage OutsourcedThe purpose of the bytecode is to decrypt the embedded payload, load it into memory reflectively and execute it:Figure 7: A fragment of VM bytecode - setting the decryption keyThe payload decryption routine uses a custom symmetric algorithm based on arithmetic and byte-shift instructions – a combination of SHL/SHR/SUB/ADD/XOR – with hardcoded keys.These constant values are used in all x86 SombRAT droppers we’ve seen so far:url CostaRicto Campaign: Cyber-Espionage OutsourcedFigure 8: Payload decoding algorithmSombRAT BackdoorThe backdoor delivered by the above-mentioned loaders is a C++ compiled executable developed with heavy usage of objects, classes, and interfaces. It has a plugin architecture and basic functionality of a foothold RAT that is mainly used to download and execute other malicious payloads – either as its own plugins or standalone binaries. It can also perform other simple actions, like collecting system information, listing and killing processes, and uploading files to the C2.Features:Communication over DNS tunnel with a hardcoded domain name and DGA-generated subdomain C2 traffic encrypted with RSA-2048 Custom AES-encrypted storage format used to store configuration, plugins, and harvested dataUnique version number for each sampleurl CostaRicto Campaign: Cyber-Espionage OutsourcedFigure 9: Backdoor classes hierarchyAccording to a PDB path found in the 64-bit specimens, the project was originally called Sombra – possibly in reference to the Overwatch game character:url CostaRicto Campaign: Cyber-Espionage OutsourcedFigure 10: PDB path from 64-bit backdoor with project name ‘Sombra’In the Overwatch game world, Sombra is an agent of an antagonist organization called Talon. She is skilled in computer hacking and cryptography and specializes in espionage and intelligence assessment:“One of the world's most notorious hackers, Sombra uses information to manipulate those in power.Sombra's skills include computer hacking and cryptography; these are activities she greatly enjoys, to the point where the desire to get past locks and solving mysteries is ingrained in her personality. She is a known associate of Reaper, specializing in espionage and intelligence assessment.Stealth and debilitating attacks make Sombra a powerful infiltrator. Her hacking can disrupt her enemies, ensuring they're easier to take out, while her EMP provides the upper hand against multiple foes at once. Sombra’s ability to Translocate and camouflage herself makes her a hard target to pin down.” http[://]159.65.31[.]84/svolcdst.exe.Behavioururl CostaRicto Campaign: Cyber-Espionage OutsourcedBefore entering the command processing loop, the backdoor will check to see if it’s running as a service, and will create a run-once mutex consisting of %HOSTNAME% with a postfix of “S”, “U”, or “SU”, depending on which privileges it was executed with.The C2 domain name for the DNS communication is hardcoded and obfuscated using XOR. The backdoor will generate a subdomain using a custom domain generation algorithm (DGA) and try to send an initial beacon to the C2 via DNS tunneling:Figure 11: Decoding the C2 domain nameThe configuration, along with downloaded plugins and all harvested data are stored in a custom database format inside a single file under the %TEMP% directory. The file name is hardcoded and obfuscated with XOR. The storage file is encrypted with AES-256 using a hardcoded key and is decrypted each time the malware needs to read or write it and re-encrypted after new data is added:Figure 12. Hardcoded AES key for storage encryptionStrings used as backdoor commands and in debugging messages sent to the C2 are encoded with a simple alphabet substitution. These are not decrypted by the backdoor on the victim’s side, and the key for decryption is not present in the binary. Most probably the backdoor client decrypts them locally:url CostaRicto Campaign: Cyber-Espionage OutsourcedFigure 13: Substitution-encoded stringsCommand and Control (C2)The C2 communication can either be performed via DNS tunnelling or TCP sockets. Traffic is SSL- encrypted and can bypass HTTP/SOCKS5 proxies. The C2 domain name is hardcoded in the binary and obfuscated with a single-byte XOR key which differs between samples. In order to establish communication, the malware first uses a DGA (Domain Generation Algorithm) to generate the subdomain to connect to. Depending on an internal boolean setting, one of the following URL formats is used:images%x.%s images%x.elmako.%swhere %s is the hardcoded domain name and %x contains 8 hexadecimal characters generated based on the result of the GetTickCount API:If the connection is unsuccessful, the backdoor will try to generate and connect to several other URLs in the same domain, using the same algorithm but without the “images” prefix.It seems that in most cases, the malware sends out data using DNS_TYPE_TEXT requests, while the attackers issue commands separately over the TCP channel with the IP address associated with the DGA- generated subdomain.All the communication is compressed with zlib and encrypted with AES. Additionally, an embedded RSA public key is used to secure the AES key exchange:Figure 14: RSA key used for C2 traffic encryptionBackdoor Commandsurl CostaRicto Campaign: Cyber-Espionage OutsourcedBoth the x86 and x64 versions of the backdoor feature approximately 50 different commands organized into six groups, each group served by a different interface:Core broadcastCoreBroadcast “networkdisconnected” messageCoreSave provided session ID to memory struct, broadcast “informationac- cepted” messageCoreBroadcast session ID and system infopingCoreSend a "ping" to the C2 serverloadasdllCoreLoad additional DLL into memoryloadfromstor- ageCoreInject DLL into memory (from storage)loadfromfileCoreInject DLL into memory (from disk)loadfrommemCoreInject DLL into memory (from memory)loadplugincom- pleteCoreExecute a plugin that is already loadedinitializeand- loadpluginby- uniqidCoreLoad and execute a plugin; plugins are stored as zlib-compressed and AES encrypted PE files inside the storage and referred to by unique identifiergetinfoCoreObtain environment strings, computer name, username, OS version information, system time, etc.url CostaRicto Campaign: Cyber-Espionage OutsourcedrestartCoreRespawn using ShellExecuteWshutdownCoreExit processuninstallCore(unimplemented)updatemyselfCoreCreate backup of itself (with .old extension) and spawn new instance via CreateProcessWpluginunloadCoreUnload and remove plugin from storagegetprocesslistTaskman Obtain a list of running processeskillprocess- bypidkillprocessby- namegetsetdelTaskman Terminate a process by PIDTaskman Terminate a process by nameConfigRead specified values from .config file in storage and send to the C2ConfigSet specific config fields and save to .config file in storageConfigDelete specified config fields from .config file in storageinitdefaultsConfigInitialize config fields with default values and save to .config file in storageclearsaveenumwritecreatecloseConfigZero-out config fields and save to .config file in storageConfigSave provided config values to .config file in storageConfigRead values from .config file in storage to memoryStorageEncrypt and write data to storage fileStorageCreate new encrypted storage fileStorageEncrypt and flush data to storage fileurl CostaRicto Campaign: Cyber-Espionage OutsourceddropdeleteenumuploadclearallStorage Write supplied file content to storage fileStorageDelete file with specified ID from storage; enumerate files in storageStorageEnumerate files in storage (name, written, size)StorageDecrypt and upload file with specified ID from storage fileStorageRemove all files from storagearchivebypathStorageRead file(s) from specified path and save to storage file, then enumer- ate storagerestorestorageStorageDelete storage file and open a new storage1cancel /closeand- deletestorageStorageRemove all files from storage and delete storage temp fileclosestorageStorageClose storage temp fileopenstorageStorageOpen storage temp filegetcontentStorage(unimplemented)awaitcreateStorageCreate new encrypted storage fileawait&putcon- tentawait&getcon- tentStorageRead from C2 and save to the storage fileStorageRead from content from storage and send via C2debuglogDebugEnable debug loggingbroadcastNetworkSet networkconnected or networkdisconnected bool in memorytouchconnectNetworkSend the networkconnected bool setting to the C2statsNetworkSend details of sent/received bytesurl CostaRicto Campaign: Cyber-Espionage OutsourcedreconnectNetwork Close socket and reconnectdisconnectNetwork Close socketswitchtotcpNetworkSwitch C2 communication to TCP/IPswitchdnsNetworkSwitch C2 communication to DNSsetproxy 2NetworkSet proxy type, host, port, domain, user, passwordcheckproxy2Network(unimplemented)getproxy 3NetworkSend current proxy configuration to C2resetproxy 3Network(unimplemented)1 – before v0.1.60t 2 – since at least v0.1.208 3 – since at least v0.1.724NetworkInfosportals[.]comFirst active during October 2019, infosportals[.]com was utilized by early SombRATs as the primary C2 domain. Since then, the domain shifted IP address multiple times, was then taken offline between February and May, before being reactivated briefly between late May and mid-June as part of another offensive:Figure 15: Timeline of IP resolutions for infosportals[.]comurl CostaRicto Campaign: Cyber-Espionage OutsourcedFigure 16: Table of IP resolutions for infosportals[.]comSbibd[.]netA phishing domain mimicking the legitimate sbibd.com (registered to the State Bank of India, Bangladesh), sbibd[.]net was first active for a short spell from early November to December 2019, then reactivated again between February and March 2020 and was used as the primary C2 with several SombRAT variants:Figure 17: Timeline of IP resolutions for sbibd[.]netFigure 18: Table of IP resolutions for sbibd[.]netAkams[.]inFirst active for a few weeks from late December 2019 to mid-January 2020, akams[.]in was also used by is particularly interesting, as it overlaps with another domain called mail[.]kub-gas[.]com, which wasurl CostaRicto Campaign: Cyber-Espionage Outsourcedimplicated as being associated with an APT-28/Fancy Bear/Sofacy phishing campaigns in a report by Area 1 Security. However, after much scrutiny, it would appear highly likely that there is no direct connection between the SombRAT campaign and APT-28 activity.Figure 19: Timeline of IP resolutions for akams[.]inFigure 20: Table of IP resolutions for akams[.]innewspointview[.]comRegistered and active during late June 2020, newspointview[.]com has been used with more recent SombRAT variants as the primary C2 domain:Figure 21: Timeline of IP resolutions for newspointview[.]comFigure 22: Table of IP resolutions for newspointview[.]comurl CostaRicto Campaign: Cyber-Espionage OutsourcedTimelineThe following timeline shows key domain/IP resolutions and known SombRAT releases:url CostaRicto Campaign: Cyber-Espionage Outsourcedurl CostaRicto Campaign: Cyber-Espionage OutsourcedFigure 23: Timeline of IP resolutions and SombRAT versionsConclusionsThere are several factors that lead us to the assumption that the threat actor behind CostaRicto is a mercenary group:The toolset used in CostaRicto campaign consists of bespoke malware that appeared around October 2019 and has been rarely seen in the wild since. It therefore appears to be private to this particular adversary.Moreover, the constant development, detailed versioning system and well-structured code that allows for easy functionality expansion – all suggest that the toolset is part of a long-term project, rather than a one-off campaign.The apparent sharing of network infrastructure with a previous, seemingly unrelated phishing campaign attributed to APT28, as well as the reuse of phishing domain names as C2 servers in attacks against unrelated victims, indicates that the same entity is likely behind a diverse range of attacks.Finally, the diversity and geography of the victims doesn’t fit a picture of a campaign sponsored by a particular state; rather, it’s a mix of targets that could be explained by different assignments commissioned by disparate entities.With the undeniable success of Ransomware-as-a-Service (RaaS), it's not surprising that the cybercriminal market has expanded its portfolio to add dedicated phishing and espionage campaigns to the list of services on offer. Outsourcing attacks or certain parts of the attack chain to unaffiliated mercenary groups has several advantages for the adversary – it saves their time and resources and simplifies the procedures, but most importantly it provides an additional layer of indirection, which helps to protect the real identity of the threat actor.Researchers and investigators tend to group adversaries based on similar tactics, techniques and procedures, code reuse, and physical infrastructure overlap. The attribution is often derived by analyzing the nature and geography of the campaign targets in relation to geopolitical situation. However, in the case of mercenary APTs, the selection of victims might appear random and will rarely reveal a bigger picture about the motives behind the campaigns.When dealing with threat actors that outsource their campaigns, only the entity that performed the b05d1510495b49SHA256 Pcheck proxy7424d6daab8407e85285709dd27b8c- pathSombRAT loaderSombRAT loaderSombRAT x64SombRAT loaderMutexRun-once mutexMutexRun-once mutexDomainSombRAT C2DomainSombRAT C2DomainSombRAT C2DomainSombRAT C2IPIPIPIPIPIPSombRAT hosting placesbibd[.]netsbibd[.]net, akams[.]in, infosportals[.]comakams[.]innewspointview[.]cominfosportals[.]comurl CostaRicto Campaign: Cyber-Espionage OutsourcedTacticIDNameDescriptionInitial AccessT1078Valid AccountsSuspected initial compromise us- ing stolen credentialsExecutionT1106Execution through APISombRAT – C2 commandT1053/005 Scheduled Task/Job: ScheduledTaskUsed to download SombRAT loaderT1059/001 Command and Scripting Inter-preter: PowerShellUsed to load x64 SombRATDefence EvasionT1055Process InjectionInvoke-ReflectivePEInjection Pow- erSploit moduleT1140Deobfuscate/Decode Files or InformationSombRAT – Decode strings and custom storage dataDiscoveryT1057Process DiscoverySombRAT – C2 commandT1082System Information DiscoverySombRAT – C2 commandT1124System Time DiscoverySombRAT – C2 commandT1046Network Service Scanningpscan, nmapCollectionT1560/003 Archive Collected Data: Archivevia Custom MethodSombRAT – Custom storage fileCommand and ControlT1572Protocol TunnelingSombRAT - DNS tunnelling for C2T1071/001 Application Layer Protocol: WebProtocolsSombRAT – HTTP for C2T1573/002 Encrypted Channel: AsymmetricCryptographySombRAT – RSA for C2 encryptionT1090/002 Proxy: External Proxypcheck HTTP/S proxy, GO SOCK- S5 proxy, PuTTYurl CostaRicto Campaign: Cyber-Espionage OutsourcedExfiltrationT1041Exfiltration Over C2 ChannelSombRATYara Hunting Rules:import "pe" description = "Rule to detect SombRAT loader by code similarity" author = "BlackBerry Threat Hunting and Intelligence Team"strings: // vm class name $classname = "VMBASERUNNER" ascii wide nocase// start of vm bytecode $vmbytecode = {37C7359438C73594}// start of encrypted payload $encpayload_1 = {77D2C7AC59B2EB0DF37028AC950971FB}// binary string from enc payload (some payloads differ only in the header) D5DB774ABA4884B9E706981FC3740B4CD891F8A0EA6900D41B675CFC98A}// vm execution loop $vmcode_1 = {8B ?? 08 8B ?? 0C 89 ?? 29 ?? C1 ?? 02 39 ?? 74 4E 83 ?? ?? 08 8D ?? ?? 8B ?? ?? 8D ?? 01 89 ?? 8B ?? ?? 66 83 ?? 08 00 75 28 8B ?? ?? 8D ?? 04 5? 5? E8 ?? ?? FF FF 8B ?? ?? 83 ?? 0C 5? 8B ?? 0C 89 ?? 5? FF ?? 14 83 C4 08 8B ?? 8B ?? 08 8B ?? 0C 89 ?? 29 ?? C1 ?? 02 39 ?? 89 ?? 75 B9}// vm execution loop (sample from Nov 2019) $vmcode_2 = {8B ?? 4? 89 ?? 8B ?? 08 8B ?? 88 33 ?? 66 39 ?? 08 75 19 8D ?? 04 5? 8D ?? 08 E8 ?? ?? 00 00 8B ?? 8D ?? 0C 5? 5? FF ?? 5? 5? 8B ?? 8B ?? 0C 2B ?? 08 C1 ?? 02 3B ?? 75 C7}condition: uint16(0) == 0x5a4d and filesize < 5MB and filesize > 20KB and any of them description = "Rule to detect samples with CostaRicto PDB path" author = "BlackBerry Threat Hunting and Intelligence Team" pdb_string = "C:\\Wokrflow\\CostaRicto\\Release\\CostaBricks.pdb"strings: $a = "CostaRicto" ascii wide nocase $b = "CostaBricks.pdb" ascii wide nocaseurl CostaRicto Campaign: Cyber-Espionage Outsourced$c1 = "C:\\Wokrflow\\" ascii wide nocase $c2 = "Release" ascii wide nocase $c3 = ".pdb" ascii wide nocasecondition: uint16(0) == 0x5a4d and filesize < 5MB and filesize > 20KB and ($a or $b or all of ($c*)) description = "Rule to detect samples with SombRAT PDB path" author = "BlackBerry Threat Hunting and Intelligence Team" pdb_string = "C:\\Projects\\Sombra\\_Bin\\x64\\Release\\Sombra.pdb" pdb_string_2 = "c:\\projects\\sombra\\libraries"strings: $a = "\\Projects\\Sombra\\" ascii wide nocase $b = "Sombra.pdb" ascii wide nocasecondition: uint16(0) == 0x5a4d and filesize < 5MB and filesize > 20KB and ($a or $b) description = "Rule to detect backdoored Blink application" author = "BlackBerry Threat Hunting and Intelligence Team"strings: $a1 = "Failed to open target application process!" $a2 = "Machine architecture mismatch between target application and this application!" $a3 = "Failed to create new communication pipe!" $b = "Plauger, licensed by Dinkumware, Ltd."condition: uint16(0) == 0x5a4d and filesize < 5MB and filesize > 50KB and ($b and 1 of ($a*)) description = "Rule to detect Rich header associated with CostaRicto campaign" author = "BlackBerry Threat Hunting and Intelligence Team"condition: pe.rich_signature.toolid(0xf1, 40116) and pe.rich_signature.toolid(0xf3, 40116) and pe.rich_signature.toolid(0xf2, 40116) and pe.rich_signature.toolid(0x105, 26706) and pe.rich_signature.toolid(0x104, 26706) and pe.rich_signature.toolid(0x103, 26706) and pe.rich_signature.toolid(0x93, 30729) and pe.rich_signature.toolid(0x109, 27023) and pe.rich_signature.toolid(0xff, 27023) andurl CostaRicto Campaign: Cyber-Espionage Outsourcedpe.rich_signature.toolid(0x97, 0) and pe.rich_signature.toolid(0x102, 27023) description = "Rule to detect Rich header associated with CostaRicto campaign" author = "BlackBerry Threat Hunting and Intelligence Team"condition: pe.rich_signature.toolid(0xf1, 40116) and pe.rich_signature.toolid(0xf2, 40116) and pe.rich_signature.toolid(0xf3, 40116) and pe.rich_signature.toolid(0x102, 26428) and pe.rich_signature.toolid(0x103, 26131) and pe.rich_signature.toolid(0x104, 26131) and pe.rich_signature.toolid(0x105, 26131) and pe.rich_signature.toolid(0x103, 26433) and pe.rich_signature.toolid(0x104, 26433) and pe.rich_signature.toolid(0x109, 26428) and pe.rich_signature.toolid(0x93, 30729) and pe.rich_signature.toolid(0xff, 26428) description = "Rule to detect Rich header associated with CostaRicto campaign" author = "BlackBerry Threat Hunting and Intelligence Team"condition: // x86 droppers pe.rich_signature.key == 0x2e8d923f or pe.rich_signature.key == 0x97d94c45 or// x86 payload pe.rich_signature.key == 0xef257087 or pe.rich_signature.key == 0x4f257087 or pe.rich_signature.key == 0x1e816e7e or// x64 payload pe.rich_signature.key == 0xd1e5ae6c or pe.rich_signature.key == 0x5df9c60b description = "Rule to detect unpacked SombRAT backdoor" author = "BlackBerry Threat Hunting and Intelligence Team"strings: $a3 = "PeLoaderLocal"url CostaRicto Campaign: Cyber-Espionage Outsourced$a4 = "PeLoaderBaseClass" $a9 = "WaitForPluginIOCPFullyClosed"// substitution-encrypted strings $b1 = "~ydcv{{rs{~|r" // installedlike $b2 = "~yg{vcqxez" // winplatform $b3 = "~yqxezvc~xyvttrgcrs" // informationaccepted $b4 = "xvsqexzdcxevpr" // loadfromstorage $b5 = "xvsqexzzrzxen" // loadfrommemory $b7 = "xgrydcxevpr" // openstorage $b8 = "g{bp~y{xvstxzg{rcr" // pluginloadcomplete $b9 = "g{bp~yby{xvs" // pluginunload// AES-encrypted strings $c1 = {44 5B 7F 52 0C 13 52 1A 16 45 4C 75 65 72 60 53}// RSA public key $d1 = {EF C9 77 B9 A3 8E 48 92 77 C8 E1 E1 0C 46 35 2B}condition: uint16(0) == 0x5a4d and filesize < 5MB and filesize > 20KB and any of them description = "Rule to detect a custom proxy tool related to the CostaRicto campaign" author = "BlackBerry Threat Hunting and Intelligence Team"strings: $a = "exe.exe host host_port proxy_host proxy_port" $b = "Tool jobs done"condition: uint16(0) == 0x5a4d and filesize < 500KB and filesize > 10KB and ($a or $b) description = "Rule to detect a custom proxy tool related to the CostaRicto campaign" author = "BlackBerry Threat Hunting and Intelligence Team"strings: $a1 = "Invalid arguments count (ver " $a2 = "Example: ./pscan" $b1 = "[output.txt]" $b2 = "Invalid ip address range"condition: uint16(0) == 0x5a4d and filesize < 500KB and filesize > 10KB and any of ($a*) or all of ($b*) }url CostaRicto Campaign: Cyber-Espionage OutsourcedIDAPython Scripts:url CostaRicto Campaign: Cyber-Espionage Outsourced#!/usr/bin/pythonimport sys, os, struct, arrayfin = sys.argv[1] fout = "%s_decoded" %(fin) f = open(fin, "r+w+b") f2 = open(fout, "w+b") encsize = os.path.getsize(fin) / 4key_1 = 0x14820285 cst_2 = 0x9E3779B9enc = array.array('I') enc.read(f, encsize)i = 0while i < encsize: encdw_1 = enc[i] encdw_2 = enc[i+1]tmp_1a = encdw_1 << 4 & 0xffffffff tmp_1b = encdw_1 >> 5 & 0xffffffff tmp_1c = encdw_1 - cst_1 & 0xffffffff tmp_2a = tmp_1a + key_3 & 0xffffffff tmp_2b = tmp_1b + key_4 & 0xffffffff tmp_3 = tmp_2a ^ tmp_1ckeydw_2 = tmp_3 ^ tmp_2b decdw_2 = encdw_2 - keydw_2 & 0xffffffffmagic_1 = decdw_2 << 4 & 0xffffffff magic_2 = decdw_2 >> 5 & 0xffffffff key_1a = key_1 + magic_1 & 0xffffffff key_2a = key_2 + magic_2 & 0xffffffff cst_2a = cst_2 + decdw_2 & 0xffffffff tmp_5 = key_1a ^ cst_2akeydw_1 = tmp_5 ^ key_2a decdw_1 = encdw_1 - keydw_1 & 0xffffffffdata1 = struct.pack('I', decdw_1) data2 = struct.pack('I', decdw_2)f2.seek(i*4) f2.write(data1) f2.seek(i*4+4) f2.write(data2)i = i + 2url CostaRicto Campaign: Cyber-Espionage OutsourcedFigure 24: SombRAT payload decryption scriptimport idc, idaapi, idautils import idautils import string, array, struct, binasciidef isprintable(s, codec='ascii'): try: s.decode(codec) except UnicodeDecodeError: return False else: return Truedef get_int(addr): return struct.unpack('I', get_bytes(addr, 4))[0]def add_comment(offset, comment): idc.MakeComm(offset, comment) target = idc.DfirstB(offset) while target != BADADDR: idc.MakeComm(target, comment) target = idc.DnextB(offset, target)def substitution(start, size, patch): plain = "`abcdefghijklmnopqrstuvwxyz{|}~H&\x7F" key = "wvutsrqp\x7F~}|{zyxgfedcba`onmlkji&Hh" if len(key) != len(plain): warning("Lenght differs!") i = 0 for i in range(enclen): c = Byte(start + i) idx = key.find(str(chr(c))) if idx != -1: c = plain[idx] else: c = str(chr(c)) dec = dec + c if patch == True: patch_byte(start + i, c) i += 1 return dec# iterate over all segments for s in idautils.Segments(): if ".data" in idc.SegName(s): start = idc.GetSegmentAttr(s, idc.SEGATTR_START) end = idc.GetSegmentAttr(s, idc.SEGATTR_END) num = 0 while start < end - 4: if get_int(start) == 0: enclen = get_int(start+4) encstrcheck = get_int(start+8) if enclen > 1 and enclen < 100 and encstrcheck > 0x2020: encstr = idc.get_bytes(start+8, enclen)url CostaRicto Campaign: Cyber-Espionage Outsourcedif isprintable(encstr) == True: num += 1 startaddr = start+8print("#%i") %num print("address = 0x{:08x}".format(start)) print("len = %i") %enclen print("encstr = %s") %encstr decstr = "" decstr = substitution(startaddr, enclen, 0) print("decstr =%s") % decstr print("-----------------------------------------") idc.MakeComm(start, "{}".format(decstr)) decname = "s_" + (''.join(e for e in decstr if e.isalnum()))[:20] decname = decname.strip() res = MakeNameEx(start, decname, SN_NOCHECK | SN_NOWARN | 0x800)start += 4Figure 25: SombRAT string decoding IDA Python script (for x86 payloads)About The BlackBerry Research and Intelligence TeamThe BlackBerry Research and Intelligence team examines emerging and persistent threats, providing intelligence analysis for the benefit of defenders and the organizations they serve.Back © 2020 BlackBerry Limited. All rights reserved.url 