www.secuinfra.com /en/techtalk/whatever-floats-your-boat-bitter-apt-continues-to-target-bangladesh/ Whatever floats your Boat – Bitter APT continues to target Bangladesh ⋮ 7/5/2022Key FindingsThe SECUINFRA Falcon Team identified a recent attack consitent with the campaign targeting Bangladesh conducted by the advanced persistent threat group “Bitter”, also known as T-APT-17. Bitter employs malicious document files as lures containing different implementations of the so-called “Equation Editor exploits” to download following malware stages. The second stage consists of a Loader, which gathers information about the infected system and retrieves the third stage from a remote server. The third stage of a Bitter attack can feature different types of Malware e.g. Keyloggers, Stealers or Remote Access Trojans (RATs). We analyzed one of the newer utilized RATs, which we refer to as “Almond RAT”.OverviewThe Bitter APT group is said to be active since at least 2013 was first reported about by Forcepoint Labs in 2016 when it was primarily targeting Pakistan. The threat group is suspected to be located in southern Asia. Even back then the group was using spearphishing emails to exploit Microsoft Office (e.g. CVE-2012-0158) and download additional malware, so compared to their attacks today their modus operandi has not changed at all. Occasionally they also target Android devices with Remote Access Trojans, as reported by BitDefender in 2020.In Februray of 2019 Palo Alto Networks documented Bitter attacks using a second stage Downloader dubbed “ArtraDownloader” which has been in use since 2017. Also Chinese and Saudi Arabian organizations were added to the list of targets.As discovered by Cyble and Kaspersky in 2021 the Bitter group is also capable of more than just old Office exploits, for example abusing 0-day vulnerabilities like a Windows Kernel vulnerability (CVE-2021-1732) and a vulnerability in the Windows Desktop Window Manager (CVE-2021-28310) for privilege escalation.In May 2022 Cisco Talos shared an Analysis of a new Bitter campaign targeting users in Bangladesh starting in October 2021 up to February 2022 with a new-ish second stage downloader called “ZxxZ”.1/19This report builds on the findings published by Talos and covers an attack presumabily conducted in mid May 2022.Shortly before the completion of this report the Qi Anxin Threat Intellingence Center published a report on recent Bitter activities targeting military branches of Bangladesh. They also mentioned the RAT sample analyzed in this blog post.On the 4th of July @c3rb3ru5d3d53c released a report about a Bitter campaign targeting Pakistan. In addition to many analysis steps that match our approach, it was also demonstrated how the ZxxZ Downloader could be used with a custom C2 server. Analysis public Any.Run Sandbox service. As with previous campaigns conducted by Bitter the file was likely distributed via a spearphishing email, which is not available for Analysis. The sample was previously mentioned by Simon Kenin (k3yp0d) on Twitter.The filename of the document reads “Repair of different csoc cstc, china supplied system – BNS BIJOY.xls”. The abbreviations csoc and cstc likely stand for “China Shipbuilding & Offshore International Co. Ltd” and “China Shipbuilding Trading Co. Ltd” respectively and BNS Bijoy is the name of a “Castle-class guided missile corvette” (small warship) of the Bangladesh Navy (Wikipedia).The document does not contain readable content on the topic the filename suggests, only a white rectangle image and unicode characters, which should alert victims that it is not a legitimate document. As soon as the file is opened the Equation Editor exploit, which we identified as CVE-2018-0798, is executed.Figure 1: Visible contents of the Excel documentWithout alerting the user in any way the Equation Editor is started in the background and used to download the next malware stage and execute it. By tracing the Process Tree with ProcMon we can see that the downloaded binary is written to C:\$Drw\fsutil.exe and executed by the Windows Explorer.2/19Figure 2: Process Tree of Equation EditorTo extract information from the Maldoc we opted for a dynamic approach first. By registering a debugger for the Equation Editor executable via gflags.exe, which is part of the Windows SDK, we are able to attach x32dbg to the process once the Excel document is opened (this technique was showcased by Colin Hardy for CVE-2017-1182).Figure 3: Registering a debugger for Equation EditorSince Excel is waiting on the Equation Editor to exit, our debugging session will unfortunately be ended after a fixed amount of time with the error message below, so we will have to approach it differently.Figure 4: Error dialog while debugging Equation EditorWith the well-known oledump tool developed by Didier Stevens we can take a look at the data streams inside the Excel file. In this case the stream A4, which is named Equation Native is of particular interest for us.Figure 5: Viewing the contents of the Excel file with oledumpBy specifying the stream and the -d parameter we can dump it to analyze it further.Figure 6: Dumping the Equation streamOpening the dumped file in a hex editor we can visually identify two different segments of data. Highlighted in green we see data that is likely the shellcode required for the Equation Editor exploit. Since there are next to no readable ASCII strings in there (looking closely we can spot fragments that look like “URL” or “http”) this data is likely encoded or encrypted in some way. Below that we can see data in a repeating pattern which is used as padding for the memory corruption exploit CVE-2018-0798.3/19Figure 7: Analyzing the shellcode in a Hex editorIn an attempt to decode the shellcode portion of the data we ran a frequency analysis (a very useful feature of the Okteta hex editor) on it to determine which values occur the most, since in a 2019 report by Sophos Labs a maldoc builder for CVE-2018-0798 was analyzed which implements a XOR-based encoding for the shellcode. For this maldoc the most frequent byte is FF so we assume that this could be encoded null bytes and therefore FF could be the key in a single-byte XOR encoding.Figure 8: Running frequency analysis on the shellcodeUsing Cyberchef with the presumed shellcode section and XOR key does yield readable strings. From here we can extract important information about the executed shellcode and indicators like the URL for the next malware stage.4/19Figure 9: Decoding the XOR-ed shellcodeThe visualization below shows the most important API calls made in the shellcode:Figure 10: Graph showing the functionality of the maldoc shellcodeBy debugging the Equation Editor exploit again and manually placing a breakpoint on e.g. URLDownloadToFileA we can confirm these findings.5/19Figure 11: Manually loading urlmon.dll to place a breakpoint on URLDownloadToFileAThe download query to emshedulersvc[.]com/vc/vc returns a sample of Bitters second stage Downloader, which we will investigate next.Figure 12: Breaking on URLDownloadToFileZxxZ / MuuyDownloaderSince approximately the second half of 2021 Bitter switched from their second-stage ArtraDownloader to a new, but similar implementation named “ZxxZ” by Talos and “MuuyDownloader” by Qi Anxin Threat Intelligence Center. It is implemented in Visual C++ and does not appear to be packed on first inspection. The compilation timestamp suggests this binary was built on the 11th of May 2022, which matches the timeframe for the malicious document.6/19Figure 13: Detect it Easy parsing the PE file, Entropy graphComparing this fingerprinting function to the one documented by Cisco Talos we can see that Bitter abandoned the ZxxZ value separator (that gave the Downloader its name) in exchange for a simple underscore. This was possibly done to avoid detection through IDS/IPS systems based on this very specific separator. Looking back at older Bitter Research we can see that the threat group likes to change up these patterns from time to time to avoid detection.Figure 14: ZxxZ gathering system informationThe check-in with an attacker-controlled staging server contains the user account and hostname of the system. The function below manually assembles the HTTP GET request and sends it via a socket connection to the C2 server.7/19Figure 15: ZxxZ sending a GET request with the host fingerprint to the C2We verified this network communication using packet captures. Another common indicator across Bitter infrastructure is the use of the LiteSpeed web server, which has been documented in older reports as well.Figure 16: Packet capture of the GET request aboveAfter retrieving the next malware stage from a staging server ZxxZ writes the binary to the disk and tries to execute it. In the screenshot below we can see that the Bitter group altered the C2 opcode strings that Talos had previously documented as DN-S (download success) and RN_E (run error) to just S and F, presumably short for Success and Failure. This is likely another measure to evade older detection rules. The payload execution was also changed to use CreateProcessA instead of ShellExecuteA like in the older version of ZxxZ.8/19Figure 17: ZxxZ retrieving and executing the next stageUnfortunately the actual payload could not be retrieved from the staging server as it only returned an empty file named CAPT.msi.Figure 18: Request made to another staging server for the third stageAlmond RATInformation on the Remote Access Trojans (RATs) deployed by Bitter (with one commonly referred to as BitterRAT) is limited and sometimes contradictory. We found that Bitter deploys different RAT implementations / variants depending on the scenario and target.In this case we analyzed a sample of a .NET-based RAT that we were not able to identify through previous reports or open source repositories. For the lack of an existing detection and a better name we will refer to it as “Almond RAT” for this analysis. The sample was first mentioned by the Twitter user @binlmmhc. The recent report by Qi Anxin mentioned above refers to this RAT only as “lightweight remote control”.9/19Figure 19: Detect it Easy parsing the Almond RAT PE fileBasic functionalityThe main function of the RAT checks for the mutex string saebamini.com SingletonApp before calling the StartClient function. Turns out even skilled threat actors need to look up the really simple things sometimes: in this case a short tutorial about Allowing Only One Instance of a C# Application to Run which uses this same mutex string. As always they copied only half of the answer and forgot to include the call to ReleaseMutex at the end…Figure 20: Main function, setting a MutexAlmond RAT employs string encryption to hinder detection and reverse engineering. Important / revealing strings like the Command&Control (C2) IP address below are therefore wrapped in the ciphertext.Decrypt function.Figure 21: StartClient fuction, showing the AES string encryptionThe decryption function implements a default AES-256-CBC encryption scheme where the IV and key are derived from the given plaintext password via PDKDF2. Since it is trivial to reimplement this in e.g. Python we decrypted all of the encrypted strings in the binary and modified the .NET assembly to increase code readability for this report. The file hashes of the unaltered and modified binaries can be found in the IoC section at the end of the post.10/19Figure 22: String decryption function using AES CBCThe StartClient function implements the socket-based C2 communication interface for Almond RAT. In the samples we observed there were no domains or dynamic DNS services but only IPv4 addresses used to connect back to the threat actors. A characteristic property of the RAT is the usage of the tcp port 33638 . When first contacting the C2 server Almond RAT transmits gathered system information like hostname, OS version, internal IP address and MAC address and storage identifiers (disk info is not transmitted) to fingerprint the infected system. A 1024 byte buffer is used for the C2 communication.Figure 23: StartClient functionCapabilities & C2 communicationNext well will further investigate the functionality of Almond RAT. At the beginning of the StartCommWithServer function the RAT sets a random receive timeout between 20 and 30 seconds for the socket. The analyzed sample accepts seven different commands in total. The REFRESH command is used as a heartbeat signal, letting the C2 server know that the RAT is still active and will reply with a simple OK.The DRIVE command returns a list of connected storage devices.11/19With the DELETE* command the attackers can delete accessible files by supplying a path. In case of e.g. insufficient permissions it will return the exception. The * in the command string is used as a separator between the command and the file path.Figure 24: Basic C2 functionalityAlmond RAT allows for the execution of arbitrary commands via a wrapped cmd.exe instance. It has its own implementation for directory changes via cd and directory listings via OK. The CMD command uses a tilde instead of an asterisk to separate the parts of the command.Figure 25: Command executionIn addition to the functionality of listing directories and files via the command prompt the RAT also supports a quite involved DIR* command. It is capable of verifying file accessibility and displaying meta data like the last file write- time.12/19Figure 26: Directory and File listingsSince Bitters main objective is espionage they need a way to exfiltrate data to the C2 server from the system, which is done via the DOWNLOAD* command.To drop more malware or other files onto the system it also supports the UPLOAD* command which uses the following file naming scheme: yyyyMMdd-hhmmss_filenameFigure 27: DOWNLOAD* and UPLOAD* functionsIn case the RAT receives an unknown command from the operator it will return the message XXX to indicate the error.13/19Figure 28: Exception handling in case of an unknown commandAlmond RATs main purposes seem to be file system discovery, data exfiltration and a way to load more tools/establish persistence. The design of the tools seems to be layed out in way that it can be quickly modified and adapted to the current attack scenario. Hosting Infrastructure / Network Indicators WHOIS and DNS RecordsThe staging server for the Downloader and the staging server for the RAT are hosted with Host Sailor. The Command&Control server for the Downloader is hosted with Namecheap and the one for Almond RAT is hosted with Nexeon Technologies. Except for the samples analysed in this report there was no other significant malware activity detected with these four domains.Staging server ZxxZ downloaderDomain Host Sailor Ltd. 10.05.2022 – 91.195.240[.]103 12.05.2022 – 194.36.191[.]196C2 server ZxxZ downloaderDomain 19.08.2021 – 162.0.232[.]109 N/AStaging server third stageDomain Host Sailor Ltd. 02.02.2022 – 194.36.191[.]196 N/AAlmond RAT C2 serverDomain Created64.44.131[.]109 Nexeon Technologies Inc. AS20278 27.02.2014While investigating these DNS entries we also noticed that on the 30.05.2022 a new record for spurshipbroker[.]com on 194.36.191[.]196 was created. This domain seems to be a so-called “typosquat” (impersonation) of spurshipbrokers[.]com, an Indian Marine Shipping and Transport company. This record stood out between seemingly legitimate webhosting and typosquats for banking sites on this Webhost/IP used by Bitter. While we do not have14/19further evidence at this point in time that this is related to the Bitter activity it certainly does fit the approach of the group and the Naval-themed lure. Yara RulesThe Yara rule set we created for this report can be found below, in our Github Repository: SIFalcon/Detection and on Abuse.ch Yaraify./* Yara Rule Set Author: SECUINFRA Falcon Team Date: 2022-06-23 Identifier: 0x03-yara_win-Bitter_T-APT-17 Reference: “url *//* Rule Set —————————————————————– */rule APT_Bitter_Maldoc_Verify {meta: description = “Detects Bitter (T-APT-17) shellcode in oleObject (CVE-2018-0798)” author = “SECUINFRA Falcon Team (@SI_FalconTeam)” reference = “url date = “2022-06-01” // This rule is meant to be used for verification of a Bitter Maldoc // rather than a hunting rule since the oleObject it is matching is // compressed in the doc zip$xor_string0 = “LoadLibraryA” xor $xor_string1 = “urlmon.dll” xor $xor_string2 = “Shell32.dll” xor $xor_string3 = “ShellExecuteA” xor $xor_string4 = “MoveFileA” xor $xor_string5 = “CreateDirectoryA” xor $xor_string6 = “C:\\Windows\\explorer” xor 3 of ($xor_string*) }rule APT_Bitter_ZxxZ_Downloader {meta: description = “Detects Bitter (T-APT-17) ZxxZ Downloader” author = “SECUINFRA Falcon Team (@SI_FalconTeam)” reference = ” url date = “2022-06-01” // old ZxxZ samples / decrypted strings $old0 = “MsMp” ascii $old1 = “SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion” ascii $old2 = “&&user=” ascii $old3 = “DN-S” ascii $old4 = “RN_E” ascii// new ZxxZ samples $c2comm0 = “GET /” ascii $c2comm1 = “profile” ascii $c2comm2 = “.php?” ascii $c2comm3 = “data=” ascii $c2comm4 = “Update” ascii $c2comm5 = “TTT” asciicondition: uint16(0) == 0x5a4d and filesize > 39KB // Size on Disk/1.5 and filesize < 2MB // Size of Image*1.5and (all of ($old*)) or (all of ($c2comm*))}import “pe” import “dotnet”rule APT_Bitter_Almond_RAT {meta: description = “Detects Bitter (T-APT-17) Almond RAT (.NET)” author = “SECUINFRA Falcon Team (@SI_FalconTeam)” tlp = “WHITE” reference = ” url $function0 = “GetMacid” ascii $function1 = “StartCommWithServer” ascii $function2 = “sendingSysInfo” ascii $dbg0 = “*|END|*” wide $dbg1 = “FILE>” wide $dbg2 = “[Command Executed Successfully]” widecondition: uint16(0) == 0x5a4d and dotnet.version == “v4.0.30319” and filesize > 12KB // Size on Disk/1.5 and filesize < 68KB // Size of Image*1.5 and any of ($function*) and any of ($dbg*) }rule APT_Bitter_PDB_Paths {16/19meta: description = “Detects Bitter (T-APT-17) PDB Paths” author = “SECUINFRA Falcon Team (@SI_FalconTeam)” reference = “url date = “2022-06-22” $pdbPath0 = “C:\\Users\\Window 10 C\\Desktop\\COMPLETED WORK\\” ascii $pdbPath1 = “stdrcl\\stdrcl\\obj\\Release\\stdrcl.pdb”// found by Qi Anxin Threat Intellingence Center // reference: url $pdbPath2 = “g:\\Projects\\cn_stinker_34318\\” $pdbPath3 = “renewedstink\\renewedstink\\obj\\Release\\stimulies.pdb”condition: uint16(0) == 0x5a4d and any of ($pdbPath*) } Indicators of Compromise SamplesAll of the samples mentioned in this report have been made available through the public Malware repositories MalwareBazaar and Malshare for verification and further research.MaldocFilename: Repair of different csoc cstc, china supplied system – BNS BIJOY.xlsx C:\$Drw\dsw C:\$Drw\fsutil.exe# Almond RAT Mutex saebamini.com SingletonAppNetwork-based Indicatorsemshedulersvc[.]com/vc/vc m.huandocimama[.]com diyefosterfeeds[.]com91.195.240[.]103 194.36.191[.]196 162.0.232[.]109 64.44.131[.]109 MITRE ATT&CK TTPs First stage – Initial CompromiseTacticResource (T1566.001)Exploitation for Bitter is using to stage malware Bitter is distributing with military / naval lures Exploitation of the Microsoft Office Equation Editor via a Memory Corruption (CVE-2018-0798)ObservableHosters: HostSailor, NamecheapFilename: Repair of different csoc cstc, BIJOY.xlsxOLE file with stream named: Equation NativeIntermediate Stage – Downloading additional toolingTacticDefense (T1105)ZxxZ/MuuyDownloader is capable of downloading files from the C2 onto the systemImportant strings in ZxxZ/MuuyDownloader executables are XOR attacked systemObservableExample string: vSCbLAsUGPVbnCWRequested URL: hxxp://m.huandocimama[.]com/JvQKLsTYuMe/xAexyBbnDxW/prof profiles=<USERNAME_HOSTNAME>Command: UPLOAD*filepath, File naming scheme: yyyyMMdd- hhmmss_filenameFinal stage – EspionageTactic Technique Defense Evasion ObfuscatedFiles orDescription Important strings in Almond RATObservable Encrypted: 4CjJPGsn5qweV7CEMgTzXtD/2oxaXj/Cddgsjl8tJGU=,18/19Information (T1027)Gather Victim (T1592.002)ReconnaissanceCommand and ControlNon-Standard Port (T1571)Command and (T1105)Exfiltration over C2 Channel (T1041)Data Transfer Size Limits (T1030)File and (T1485)ExfiltrationExfiltrationDiscoveryImpactConclusionexecutables are encrypted using AES-CBCAlmond RAT fingerprints the attacked systemAlmond RAT communicates with the C2 via a Almond RAT is from the C2 onto the system Almond RAT is from the system to a C2 server Almond RAT is using a 1024 byte buffer for C2 Almond RAT is Almond RAT is HOSTNAME*MAC_ADDRESS*OS_VERSIONNetwork port: 33638/tcpCommand: UPLOAD*filepath, Network Port: 33638/tcpCommand: DOWNLOAD*filepath, Network Port: 33638/tcpNetwork buffer: 1024 bytesCommand: DIR*Command: DELETE*filepathThe Bitter threat group is continues to use their exploitation approach in Asia with themed lures and internal changes to avoid existing detections. To protect from such attacks network and endpoint detection and response measures should be put into place and commonly exploited software like Microsoft Office should be patched regularly. We will continue to monitor this threat group and report on changes in their Tactics, Techniques and Procedures.Thank you for taking the time to read our analysis report! If you would like to stay up to date with our research consider following us on Twitter.SECUINFRA Falcon Team · AuthorDigital Forensics & Incident Response expertsIn addition to the activities that are the responsibility of customer orders, the Falcon team takes care of the operation, further development and research of various projects and topics in the DF/IR area.The SECUINFRA Falcon Team is specialized in the areas of Digital Forensics (DF) and Incident Response (IR). This includes classic host-based forensics, but also topics such as malware analysis or compromise assessment. In addition to the activities for which we are responsible within the scope of customer orders, the Falcon team is also responsible for the operation, further development and research of various projects and topics in the DF/IR area. These include, for example, threat intelligence or the creation of detection rules based on Yara.19/19 